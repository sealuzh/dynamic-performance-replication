/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:00:58 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)1, (byte)1, fieldTypeByte0, (byte)1, (byte)1, byteArray0, byteOrder0, (byte)1);
      String string0 = tiffField0.getValueDescription();
      assertEquals(1, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeLong0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      String string0 = tiffField0.toString();
      assertEquals(3114, tiffField0.getOffset());
      assertEquals("3114 (0xc2a: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (3114 IFD)", string0);
      assertEquals(3114, tiffField0.getSortHint());
      assertEquals(3114, tiffField0.getDirectoryType());
      assertEquals(12456, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[10];
      TiffField tiffField0 = new TiffField(24, 24, fieldTypeFloat0, 24, 24, byteArray0, (ByteOrder) null, 24);
      tiffField0.getFieldTypeName();
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "Float");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField((-1), (byte)0, fieldTypeAscii0, (byte)0, (byte)0, byteArray0, byteOrder0, (-1));
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals((-1), tiffField0.getSortHint());
      assertEquals((-1), tiffField0.getTag());
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeLong0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      tiffField0.getIntValueOrArraySum();
      assertEquals(3114L, tiffField0.getCount());
      assertEquals(3114, tiffField0.getDirectoryType());
      assertEquals(3114, tiffField0.getSortHint());
      assertEquals(3114, tiffField0.getTag());
      assertEquals(12456, tiffField0.getBytesLength());
      assertEquals(3114, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(39, 39, fieldTypeFloat0, 39, 39, byteArray0, (ByteOrder) null, 39);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@4dbb6e8e for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[107];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2995, 2995, fieldTypeFloat0, 2995, 2995, byteArray0, (ByteOrder) null, 2995);
      int int0 = tiffField0.getSortHint();
      assertEquals(2995, int0);
      assertEquals(2995, tiffField0.getTag());
      assertEquals(2995, tiffField0.getOffset());
      assertEquals(2995, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[107];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2995, 2995, fieldTypeFloat0, 2995, 2995, byteArray0, (ByteOrder) null, 2995);
      tiffField0.dump();
      assertEquals(2995, tiffField0.getTag());
      assertEquals(2995, tiffField0.getOffset());
      assertEquals(2995, tiffField0.getDirectoryType());
      assertEquals(2995, tiffField0.getSortHint());
      assertEquals(2995L, tiffField0.getCount());
      assertEquals(11980, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeLong0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [I@4979adc9
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[107];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2995, 2995, fieldTypeFloat0, 2995, 2995, byteArray0, (ByteOrder) null, 2995);
      tiffField0.getValue();
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(2995L, tiffElement0.offset);
      assertEquals(2995, tiffField0.getTag());
      assertEquals(2995, tiffField0.getSortHint());
      assertEquals(11980, tiffField0.getBytesLength());
      assertEquals(2995L, tiffField0.getCount());
      assertNotNull(tiffElement0);
      assertEquals(2995, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeLong0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(3114, 3114);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals(3114, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(3114, tiffField0.getDirectoryType());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: IFD", string0);
      assertEquals(3114, tiffField0.getSortHint());
      assertEquals(3114, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeLong0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(3114, 3114);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(3114, tiffField0.getTag());
      assertNull(string0);
      assertEquals(3114, tiffField0.getDirectoryType());
      assertEquals(3114, tiffField0.getSortHint());
      assertEquals(3114, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField((-642), (-642), fieldTypeLong0, (-642), (-642), byteArray0, (ByteOrder) null, (-642));
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField(224, 224, fieldTypeByte0, 224, 224, byteArray0, (ByteOrder) null, 224);
      tiffField0.dump();
      assertEquals(224, tiffField0.getSortHint());
      assertEquals(224, tiffField0.getOffset());
      assertEquals(224L, tiffField0.getCount());
      assertEquals(224, tiffField0.getTag());
      assertEquals(224, tiffField0.getBytesLength());
      assertEquals(224, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3133, 3133, fieldTypeLong0, 3133, 3133, byteArray0, (ByteOrder) null, 3133);
      tiffField0.getIntArrayValue();
      assertEquals(12532, tiffField0.getBytesLength());
      assertEquals(3133L, tiffField0.getCount());
      assertEquals(3133, tiffField0.getDirectoryType());
      assertEquals(3133, tiffField0.getTag());
      assertEquals(3133, tiffField0.getOffset());
      assertEquals(3133, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(353, 353, fieldTypeFloat0, 353, 353, byteArray0, (ByteOrder) null, 353);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@7de2f230 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[226];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(424, 424, fieldTypeDouble0, 424, 424, byteArray0, byteOrder0, 424);
      tiffField0.dump();
      assertEquals(3392, tiffField0.getBytesLength());
      assertEquals(424L, tiffField0.getCount());
      assertEquals(424, tiffField0.getDirectoryType());
      assertEquals(424, tiffField0.getSortHint());
      assertEquals(424, tiffField0.getTag());
      assertEquals(424, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeAscii0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(3114, tiffField0.getSortHint());
      assertEquals(3114, tiffField0.getDirectoryType());
      assertEquals(3114, tiffField0.getBytesLength());
      assertEquals(3114, tiffField0.getTag());
      assertEquals(3114, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, (ByteOrder) null, 1);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getIntArrayValue();
      tiffField0.getDoubleValue();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField(2024, 2024, fieldTypeShort0, 2024, 2024, byteArray0, (ByteOrder) null, 1148);
      String string0 = tiffField0.toString();
      assertEquals(4048, tiffField0.getBytesLength());
      assertEquals(1148, tiffField0.getSortHint());
      assertEquals("2024 (0x7e8: Unknown Tag): 0, 0, 0, 0, 0, 0 (2024 Short)", string0);
      assertEquals(2024, tiffField0.getDirectoryType());
      assertEquals(2024, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, (ByteOrder) null, 1);
      tiffField0.getDoubleValue();
      tiffField0.getIntValueOrArraySum();
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[107];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2995, 2995, fieldTypeFloat0, 2995, 2995, byteArray0, (ByteOrder) null, 2995);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(2995, tiffField0.getSortHint());
      assertEquals(2995, tiffField0.getTag());
      assertEquals(2995, int0);
      assertEquals(2995, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[107];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(3118, 14, fieldTypeShort0, 5980L, 5980L, byteArray0, (ByteOrder) null, 11);
      tiffField0.getIntArrayValue();
      assertEquals(11960, tiffField0.getBytesLength());
      assertEquals(14, tiffField0.getDirectoryType());
      assertEquals(3118, tiffField0.getTag());
      assertEquals(5980, tiffField0.getOffset());
      assertEquals(11, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[76];
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34066, 34066, fieldTypeShort0, 34066, 34066, byteArray0, byteOrder0, 34066);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(34066, tiffField0.getTag());
      assertEquals(34066, tiffField0.getSortHint());
      assertEquals(34066, tiffField0.getOffset());
      assertEquals(0, int0);
      assertEquals(34066, tiffField0.getDirectoryType());
      assertEquals(68132, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(2145882259, 2145882259, fieldTypeAscii0, 2145882259, 2145882259, byteArray0, (ByteOrder) null, 2145882259);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [Ljava.lang.String;@25ca3e98 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField((byte)16, (byte)16, fieldTypeShort0, (byte)16, (byte)16, byteArray0, byteOrder0, (byte)16);
      tiffField0.getDoubleArrayValue();
      String string0 = tiffField0.toString();
      assertEquals(16, tiffField0.getDirectoryType());
      assertEquals(16, tiffField0.getSortHint());
      assertEquals(32, tiffField0.getBytesLength());
      assertEquals("16 (0x10: Unknown Tag): 0, 0, 0, 0 (16 Short)", string0);
      assertEquals(16, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[345];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(43, 43, fieldTypeDouble0, 43, 43, byteArray0, byteOrder0, 43);
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[62];
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34026, 34026, fieldTypeShort0, 34026, 34026, byteArray0, byteOrder0, 34026);
      String string0 = tiffField0.getTagName();
      assertEquals("BackgroundColorValue", string0);
      assertEquals(34026, tiffField0.getTag());
      assertEquals(34026, tiffField0.getSortHint());
      assertEquals(34026, tiffField0.getOffset());
      assertEquals(34026, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[113];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(2995, 2995, fieldTypeFloat0, 2995, 2995, byteArray0, (ByteOrder) null, 2995);
      tiffField0.getDoubleArrayValue();
      String string0 = tiffField0.getValueDescription();
      assertEquals(2995, tiffField0.getTag());
      assertEquals(11980, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(2995, tiffField0.getOffset());
      assertEquals(2995, tiffField0.getSortHint());
      assertEquals(2995, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeLong0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      tiffField0.getDoubleArrayValue();
      String string0 = tiffField0.getTagName();
      assertEquals(3114, tiffField0.getDirectoryType());
      assertEquals(12456, tiffField0.getBytesLength());
      assertEquals("Unknown Tag (0xc2a)", string0);
      assertEquals(3114, tiffField0.getOffset());
      assertEquals(3114, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[6];
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, (ByteOrder) null, 1);
      tiffField0.getDoubleValue();
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("1 (0x1: Unknown Tag): ", string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(783, 1, fieldTypeAscii0, 1, 992L, byteArray0, byteOrder0, 783);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("783 (0x30f: Unknown Tag): ", string0);
      assertEquals(1, tiffField0.getBytesLength());
      
      String string1 = tiffField0.getStringValue();
      assertEquals(992, tiffField0.getOffset());
      assertEquals(783, tiffField0.getSortHint());
      assertNotNull(string1);
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(4337, " for: ");
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(4337, 4337, fieldTypeRational0, 4337, 4337, byteArray0, byteOrder0, 4337);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, int0);
      
      tiffField0.getIntArrayValue();
      assertEquals(4337, tiffField0.getDirectoryType());
      assertEquals(4337, tiffField0.getSortHint());
      assertEquals(4337, tiffField0.getTag());
      assertEquals(4337, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[19];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 1158L, 1158L, byteArray0, byteOrder0, 0);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)21, (byte) (-60), fieldTypeRational0, (byte)21, (byte)21, byteArray0, byteOrder0, (byte)21);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals("", string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(21, tiffField0.getTag());
      assertEquals(21, tiffField0.getSortHint());
      assertEquals((-60), tiffField0.getDirectoryType());
      assertEquals(21, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[19];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 1158L, 1158L, byteArray0, byteOrder0, 0);
      tiffField0.getDoubleArrayValue();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Lorg.apache.commons.imaging.common.RationalNumber; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[163];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(376, 442, fieldTypeRational0, 442, 932L, byteArray0, byteOrder0, 442);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[107];
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(3114, 3114, fieldTypeByte0, 3114, 3114, byteArray0, (ByteOrder) null, 3114);
      String string0 = tiffField0.toString();
      assertEquals(3114, tiffField0.getDirectoryType());
      assertEquals(3114, tiffField0.getOffset());
      assertEquals("3114 (0xc2a: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (107) (3114 SByte)", string0);
      assertEquals(3114, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[352];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      FieldTypeDouble fieldTypeDouble1 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(2116, 2116, fieldTypeAscii0, 2116, 2116, byteArray0, byteOrder0, 855);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals(2116, tiffField0.getTag());
      assertEquals(2116, tiffField0.getDirectoryType());
      assertEquals(855, tiffField0.getSortHint());
      assertEquals(2116, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[352];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(62, 62, fieldTypeShort0, 62, 12L, byteArray0, byteOrder0, 62);
      String string0 = tiffField0.getValueDescription();
      assertEquals(62, tiffField0.getTag());
      assertEquals(62, tiffField0.getSortHint());
      assertEquals(12, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(62, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[243];
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1811, 1811, fieldTypeFloat0, 1811, 1811, byteArray0, byteOrder0, 1811);
      tiffField0.dump();
      assertEquals(1811, tiffField0.getDirectoryType());
      assertEquals(1811, tiffField0.getOffset());
      assertEquals(1811, tiffField0.getTag());
      assertEquals(1811, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[226];
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(3611, (-3632), fieldTypeLong0, 2229L, 3611, byteArray0, byteOrder0, 3611);
      tiffField0.dump();
      assertEquals(3611, tiffField0.getOffset());
      assertEquals(3611, tiffField0.getTag());
      assertEquals(3611, tiffField0.getSortHint());
      assertEquals((-3632), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[432];
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2116, 2116, fieldTypeDouble0, 2116, 2116, byteArray0, byteOrder0, 2116);
      tiffField0.getValueDescription();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }
}
