/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:10:26 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.replace("k", "k", "k");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)64;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 249, (int) (byte) (-21));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)62;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(639.0627F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-73), 237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25679. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "9HNm+&}FIb}zkduy}8";
      try { 
        Utility.typeOfSignature("9HNm+&}FIb}zkduy}8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9HNm+&}FIb}zkduy}8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "Pob-fG,k";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.searchOpcode("Pob-fG,k");
      try { 
        Utility.typeOfSignature("Pob-fG,k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pob-fG,k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xv+]/eBs_P\"Nb1G|J1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xv+]/eBs_P\"Nb1G|J1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("#Y8%zKGf-2S^Y_?pmq", false);
      String string0 = "=Q],C'XOQCwiB7";
      Utility.compactClassName("=Q],C'XOQCwiB7");
      try { 
        Utility.typeOfSignature("=Q],C'XOQCwiB7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Q],C'XOQCwiB7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.setBit(79, 79);
      try { 
        Utility.typeOfSignature("%`er+*pluA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %`er+*pluA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.convertString("W2X<m;2u");
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, 8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.compactClassName("3;SGr6v0m`mC", "3;SGr6v0m`mC", false);
      try { 
        Utility.typeOfSignature("3;SGr6v0m`mC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3;SGr6v0m`mC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)5;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1862), (int) (byte)87, true);
      assertEquals("0:    pop\n1:    lreturn\n2:    fneg\n3:    iastore\n4:    fcmpl\n5:    iconst_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("W.qi#XMhk", 12, false, '8');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W.qi#XMhk";
      stringArray0[1] = "W.qi#XMhk";
      stringArray0[2] = "Deprecated";
      Utility.methodTypeToSignature("888W.qi#XMhk", stringArray0);
      Utility.clearBit(842, (-1500));
      Utility.isSet(19, 135);
      try { 
        Utility.typeOfSignature("888W.qi#XMhk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 888W.qi#XMhk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.compactClassName("{~Z#E)V>`a]lBSPzz'");
      Utility.compactClassName("(reference_kind = ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-5);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1320, 59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      String string0 = Utility.accessToString((-965));
      assertEquals("public private static final synchronized abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-117);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-965), (int) (byte)102, true);
      assertEquals("0:    dstore_1\n1:    fsub\n2:    iand\n3:    f2i\n", string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)70;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      boolean boolean1 = false;
      Utility.decode("f$af$DImF", false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("f$af$DImF", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(13);
      Utility.searchOpcode("class");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "nO(inU)";
      stringArray0[1] = "class";
      stringArray0[2] = "class";
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.methodSignatureToString("(LnO(inU);Lclass;Lclass;)Lclass;", "newarray", "multianewarray", false);
      try { 
        MockURI.URI((String) null, "class", "nO(inU)", 110, "class", "Synthetic attribute with length > 0", "L$~{$h16T1%@;V");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in hostname at index 10: //class@nO(inU):110class?Synthetic%20attribute%20with%20length%20%3E%200#L$~%7B$h16T1%25@;V
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "LocalVariableTable";
      try { 
        Utility.methodSignatureReturnType("LocalVariableTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "D$,{',";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("D$,{',", false);
      String string1 = "putstatic";
      try { 
        Utility.typeOfMethodSignature("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.searchOpcode("breakpoint");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "<UsV(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "Exception while looking for class ";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      byte[] byteArray1 = Utility.decode("Exception while looking for class ", false);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      boolean boolean1 = true;
      Utility.codeToString(byteArray1, constantPool0, (-2953), (-2953), true);
      Utility.isJavaIdentifierPart('^');
      try { 
        Utility.typeOfMethodSignature("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exception while looking for class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 63, (-412));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.getSignature("D");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, 104, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45090. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%ToO.]pS\u0004N%'");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1065, (int) (byte)47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[1] = (byte) (-20);
      Utility.encode(byteArray0, true);
      Utility.isSet(160, 1260);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte)46;
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "w~!vvJy>] ", false);
      Utility.toHexString(byteArray1);
      try { 
        Utility.typeOfSignature("2e ec 2e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2e ec 2e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)35;
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("t$d0J$c9$c5$b4$c1$p");
      try { 
        Utility.typeOfSignature("4=&9r56E?*4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4=&9r56E?*4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-53);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(82);
      constantArray0[0] = (Constant) constantInteger0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-64), 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 65408. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.compactClassName("jsr_w", true);
      assertEquals("jsr_w", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)26;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 204, true);
      assertEquals("0:    fstore_3\n1:    impdep2\n2:    dcmpg\n3:    aconst_null\n4:    <illegal opcode>\n5:    fcmpg\n6:    iload_0\n", string1);
      
      String string2 = Utility.convertString("0:    fstore_3\n1:    impdep2\n2:    dcmpg\n3:    aconst_null\n4:    <illegal opcode>\n5:    fcmpg\n6:    iload_0\n");
      assertEquals("0:    fstore_3\\n1:    impdep2\\n2:    dcmpg\\n3:    aconst_null\\n4:    <illegal opcode>\\n5:    fcmpg\\n6:    iload_0\\n", string2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "GS";
      boolean boolean0 = true;
      Utility.fillup("GS", (-246), true, '~');
      byte[] byteArray0 = Utility.decode("GS", false);
      Utility.isJavaIdentifierPart('e');
      int int0 = 36;
      Utility.setBit(36, 36);
      Utility.isSet(52, 52);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (-246));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      byte byte1 = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byte byte2 = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byte byte3 = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-79);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)39, (byte)95);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-113), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_1
         // 1:    swap
         // 2:    swap
         // 3:    d2l
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-18);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte) (-18), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 11983. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.accessToString(1582, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "private protected static abstract";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "private protected static abstract";
      objectArray0[3] = (Object) "private protected static abstract";
      objectArray0[4] = (Object) "private protected static abstract";
      objectArray0[5] = (Object) "private protected static abstract";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "private protected static abstract";
      Utility.printArray(objectArray0);
      Utility.format(71, 71, true, '.');
      Utility.accessToString((-3626));
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)57;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)40);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(32);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), 1397);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    <illegal opcode>
         // 2:    dup2_x2
         // 3:    fconst_2
         // 4:    <illegal opcode>
         // 5:    <illegal opcode>
         // 6:    fstore_0
         // 7:    dload_2
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byte byte0 = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-118);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte)98);
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-118), (byte)33);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(182, (byte) (-98));
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-98));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      classPathRepository0.findClass("AbzQw eK");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantClass0.accept(descendingVisitor0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodref0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2981), 100, true);
      assertEquals("0:    ifle\t\t#8546\n3:    l2d\n", string0);
      
      Utility.compactClassName("0:    ifle\t\t#8546\n3:    l2d\n", "{KGLf*9lY@U#sTb`", true);
      int int0 = Utility.clearBit((-1324), (byte) (-118));
      assertEquals((-1324), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-20);
      Utility.encode(byteArray0, true);
      String string0 = "7vijc!2)/f6N~";
      Utility.compactClassName("7vijc!2)/f6N~");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "18jf1M[##yLk";
      try { 
        Utility.typeOfSignature("18jf1M[##yLk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 18jf1M[##yLk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)2;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.signatureToString("Byte code error: ");
      Utility.compactClassName("byte", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte) (-70);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)40);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(115, (byte) (-97));
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)40, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("2Hl);}rVD$", false);
      String string0 = "Z:G$_wwu|<Mn-$Pym";
      String string1 = "ret";
      String string2 = "org.apache.bcel.classfile.MethodParameter";
      boolean boolean0 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantInteger constantInteger0 = new ConstantInteger((-1408));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-520), 116);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(116, (-520));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantInteger constantInteger2 = new ConstantInteger(2353);
      constantArray0[5] = (Constant) constantInteger2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(19, 19, byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("freturn", stringArray0);
      Utility.methodTypeToSignature("freturn", stringArray0);
      Utility.clearBit((-260), (-260));
      Utility.clearBit((-260), (-411292800));
      // Undeclared exception!
      try { 
        Utility.getSignature("[!Te_n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [!Te_n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("putstatic");
      assertEquals((short)179, short0);
      
      String string0 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.isSet(71, (-1048));
      Utility.isJavaIdentifierPart('a');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)73;
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantClass constantClass0 = new ConstantClass(103);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantClass0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, 1473);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.setBit(1375, (-2094));
      int int0 = Utility.setBit(7, 263519);
      assertEquals((-2147483641), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-2094), (-2526));
      assertEquals("0:    monitorenter\n1:    istore_1\n2:    lushr\n3:    irem\n4:    lload\t\t%34\n", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "Y$p!Tb";
      try { 
        Utility.typeOfSignature("Y$p!Tb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y$p!Tb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.setBit(36, 36);
      Utility.signatureToString("CYh!~wzaxFJ");
      Utility.accessToString(916, true);
      Utility.convertString("anewarray");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-74);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 229, (-2691));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("(", "(", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1461), (int) (byte)97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    lushr
         // 2:    lstore_0
         // 3:    nop
         // 4:    lshl
         // 5:    lushr
         // 6:    ladd
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.isJavaIdentifierPart('7');
      Utility.format((-1984), (-903), false, '@');
      try { 
        Utility.typeOfSignature("-1984");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1984
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "E^9(YS.f2JA7*:GrQfv";
      try { 
        Utility.typeOfSignature("E^9(YS.f2JA7*:GrQfv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E^9(YS.f2JA7*:GrQfv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Deg{THRZ~4`a_)H-W";
      stringArray0[1] = "Deg{THRZ~4`a_)H-W";
      Utility.methodTypeToSignature("Deg{THRZ~4`a_)H-W", stringArray0);
      Utility.typeOfSignature("Deg{THRZ~4`a_)H-W");
      boolean boolean0 = true;
      char char0 = '&';
      Utility.fillup("\t<", (byte)7, true, '&');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(1289, 192);
      Utility.format(1364, 8, true, '&');
      try { 
        Utility.methodSignatureReturnType("\t<&&&&&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t<&&&&&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.getSignature("X@A");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(1206, 1513);
      String string0 = ":X]>";
      boolean boolean0 = false;
      Utility.compactClassName(":X]>", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":X]>", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ":X]>";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) ":X]>";
      objectArray0[3] = (Object) ":X]>";
      objectArray0[4] = (Object) ":X]>";
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) bufferedOutputStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockFileOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.typeOfSignature(":X]>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :X]>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, false);
      Utility.setBit((-2905), 69);
      Utility.searchOpcode("{java.lang.Object@560d9968, java.lang.Object@4ce17195, java.lang.Object@5400d16a, java.lang.Object@67d7bbde}");
      Utility.accessToString(65535, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)99;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1570, 65535);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-606), (byte) (-25));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-60);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte) (-60));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantInteger constantInteger0 = new ConstantInteger(3686);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 159, 1430);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "@4tfGEo]u3$~E62)S~`";
      Utility.replace("@4tfGEo]u3$~E62)S~`", "\t\t<", "@4tfGEo]u3$~E62)S~`");
      try { 
        Utility.typeOfSignature("@4tfGEo]u3$~E62)S~`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @4tfGEo]u3$~E62)S~`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)106;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)106;
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("*");
      try { 
        Utility.typeOfSignature("*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byte byte0 = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-96);
      byteArray0[0] = (byte) (-68);
      byteArray0[2] = (byte) (-60);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.readBoolean();
      byteSequence0.skip((byte)1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "\t(wide)";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("wide\t(wide)", "\t(wide)", "wide\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide\t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, 4047);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "qamyT[{LPtSxbQ3";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qamyT[{LPtSxbQ3");
      Utility.convertString("}H..6Nk.+7<");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-73);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, 238, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getfield");
      try { 
        Utility.typeOfSignature(".lS^H`)<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .lS^H`)<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&!PboRI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &!PboRI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.accessToString(167);
      Utility.compactClassName("$-]=PL~iz!E");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 200, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.format(2243, 65, true, 'T');
      assertEquals("2243TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3947), 66, true);
      assertEquals("0:    fsub\n1:    fconst_2\n2:    lreturn\n3:    iflt\t\t#16203\n6:    astore_1\n7:    aload_3\n8:    dstore_1\n", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-79);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)39, (byte) (-65));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_1
         // 1:    swap
         // 2:    athrow
         // 3:    lor
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-24), 1558, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-28);
      byte byte0 = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-28), (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ladd
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.setBit(269, 93);
      Utility.format(93, 50, true, 'T');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)1;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 93, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.clearBit((-2376), (-2376));
      Utility.clearBit((-16779592), 47);
      String string0 = Utility.replace("bcel.statistics", "monitorexit", "bcel.statistics");
      Utility.isJavaIdentifierPart(']');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(47, (-16812360), false, ']');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Integer";
      stringArray0[1] = "bcel.statistics";
      Utility.methodTypeToSignature("47", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.convertString("kP{+$|4<=OA1tKIV");
      Utility.decode("kP{+$|4<=OA1tKIV", false);
      File file0 = MockFile.createTempFile("kP{+$|4<=OA1tKIV", "kP{+$|4<=OA1tKIV");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append('k');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "kP{+$|4<=OA1tKIV";
      objectArray0[1] = (Object) "kP{+$|4<=OA1tKIV";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) "kP{+$|4<=OA1tKIV";
      objectArray0[4] = (Object) "kP{+$|4<=OA1tKIV";
      Utility.printArray(printStream0, objectArray0);
      assertEquals(114L, file0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Method$1", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(32, byteArray0.length);
      
      String string0 = Utility.accessToString((-483), true);
      String string1 = Utility.compactClassName("public protected static final abstract strictfp synthetic annotation enum", "if_icmpge", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.convertString("\t\t<");
      assertEquals("\t\t<", string2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)60;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 223, (int) (byte)60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.decode(" 9j$N7*;", false);
      try { 
        Utility.methodSignatureReturnType("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.compactClassName("", "", true);
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.setBit(125, 125);
      Utility.accessToString((-658));
      Utility.isJavaIdentifierPart('G');
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (-1933), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("/l[]C~Qg#IV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /l[]C~Qg#IV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-126);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 821, (-101), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$w>+5GnoOY8)t!M)wv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $w>+5GnoOY8)t!M)wv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.classOrInterface(73);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-46);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte) (-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.convertString("=.ulaiEN6ph+IR#Qq04");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)92;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, 1163, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Utility.signatureToString("DU89q[3j>@&");
      String string1 = Utility.convertString("double");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)123;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("0f 0b c1 12 5a cc a9 7b", string2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte) (-71), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "Types";
      String string1 = "pN]\"ZILtw]Ur78V^Rx-";
      Utility.replace("Types", "pN]\"ZILtw]Ur78V^Rx-", "66+T");
      try { 
        Utility.typeOfSignature("66+T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 66+T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "Invalid signature: ";
      Utility.methodSignatureReturnType("Invalid signature: ", true);
      String string1 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.compactClassName("if_icmpge", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)26;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1797.53697));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)57;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-47);
      objectArray0[1] = (Object) (byte) (-58);
      objectArray0[2] = (Object) "_$e1$d1$c69";
      objectArray0[3] = (Object) (byte) (-31);
      objectArray0[4] = (Object) (byte)57;
      objectArray0[5] = (Object) (byte)57;
      objectArray0[6] = (Object) (byte) (-58);
      Utility.printArray(objectArray0, false, false);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -47
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = Utility.clearBit(426, 11);
      assertEquals(426, int0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";jpY`9H:/!O");
      String string0 = Utility.replace("'\"BYVmtf*m(RU'9B|", "'\"BYVmtf*m(RU'9B|", ">\t");
      assertEquals(">\t", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)52;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1994), (byte)37);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantString constantString0 = new ConstantString(56);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-42), 208, false);
      assertEquals("0:    <illegal opcode>\n1:    fconst_0\n2:    fload_3\n3:    dsub\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    caload\n", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(20);
      MockPrintStream mockPrintStream0 = new MockPrintStream("protected final");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "protected final";
      objectArray0[1] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.methodSignatureReturnType("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "#zGpF^M7^";
      stringArray0[1] = "#zGpF^M7^";
      Utility.methodTypeToSignature("#zGpF^M7^", stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("org.apache.bcel.classfile.LineNumber");
      Utility.compactClassName("#zGpF^M7^", false);
      Utility.clearBit(1741, 1741);
      Utility.accessToString(57);
      try { 
        Utility.typeOfSignature("#zGpF^M7^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #zGpF^M7^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-236), (-263), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-24), 1558, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_2
         // 1:    iconst_5
         // 2:    <illegal opcode>
         // 3:    aload\t\t%134
         // 5:    <illegal opcode>
         // 6:    iconst_3
         // 7:    fastore
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.compactClassName("Fr?4]1&zu_I Bf_", false);
      Utility.setBit(2430, 2361);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)30;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)16, (-1327));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 256, (int) (byte)30, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.fillup("", 3076, true, 'D');
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, string0);
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-37);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83));
      File file0 = MockFile.createTempFile(string0, " arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "0:    dload\t\t%173\n2:    <illegal opcode>\n";
      objectArray0[2] = (Object) "";
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, "0:    dload\t\t%173\n2:    <illegal opcode>\n", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '1'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1734, 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-96));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "float";
      stringArray0[1] = "float";
      stringArray0[2] = "From\tTo\tHandler\tType\n";
      stringArray0[3] = "float";
      stringArray0[4] = "float";
      stringArray0[5] = "float";
      stringArray0[6] = "float";
      String string0 = Utility.methodTypeToSignature("float", stringArray0);
      assertEquals("(FFLFrom;FFFF)F", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R34E!CULG&`\"3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R34E!CULG&`\"3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-64);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface(891);
      Utility.isSet(141, (byte) (-64));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte) (-52);
      byteArray1[6] = (byte) (-47);
      byteArray1[7] = (byte) (-52);
      byteArray1[8] = (byte) (-52);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)42;
      byteArray2[1] = (byte)90;
      Utility.equals(byteArray1, byteArray2);
      Utility.clearBit(65535, 17);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 171, 1426, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)37;
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "5d 44 25";
      objectArray0[1] = (Object) (byte)93;
      Utility.printArray(objectArray0);
      Utility.accessToString(1342, false);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)68);
      Utility.convertString("protected volatile");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dup2_x1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup2_x1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = " ";
      Utility.compactClassName(" ");
      String string1 = "KkC]";
      try { 
        Utility.typeOfSignature("KkC]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KkC]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Utility.replace("neFQnsS*b", "neFQnsS*b", "f2i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "f2i";
      objectArray0[1] = (Object) "neFQnsS*b";
      objectArray0[2] = (Object) "neFQnsS*b";
      objectArray0[3] = (Object) "f2i";
      objectArray0[4] = (Object) "f2i";
      objectArray0[5] = (Object) "neFQnsS*b";
      objectArray0[6] = (Object) "neFQnsS*b";
      objectArray0[7] = (Object) "neFQnsS*b";
      objectArray0[8] = (Object) "f2i";
      Utility.printArray(objectArray0, true);
      Utility.clearBit((-2471), (-2471));
      Utility.clearBit(188, (-2471));
      Utility.compactClassName("lcmp", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("`m]R&f9Mw!+");
      Utility.accessToString(62, false);
      Utility.classOrInterface(188);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NAix!r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NAix!r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "!]";
      Utility.convertString("!]");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "!]";
      objectArray0[1] = (Object) "!]";
      Utility.printArray(objectArray0);
      Utility.setBit((-1412), 1267);
      try { 
        Utility.typeOfSignature("!]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n");
      try { 
        Utility.typeOfSignature(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-95);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "java.lang.";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.";
      stringArray0[1] = "java.lang.";
      Utility.methodTypeToSignature("java.lang.", stringArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 36, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte) (-21), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.methodTypeToSignature(".:m1H2c5)\"tKUYT?NI}", (String[]) null);
      Utility.compactClassName("()L/:m1H2c5)\"tKUYT?NI};", " arg", true);
      boolean boolean0 = true;
      Utility.format(231, 231, true, '-');
      boolean boolean1 = false;
      char char0 = 'n';
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("231------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", 525, false, 'n');
      try { 
        Utility.typeOfMethodSignature("()L/:m1H2c5)\"tKUYT?NI};");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"tKUYT?NI};
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(']');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      mockPrintWriter0.println();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-127), (byte)18);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.isJavaIdentifierPart('1');
      Utility.compactClassName("AVdrT5'pDcp].*TGE P", "", true);
      Utility.getSignature("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)86;
      byte byte0 = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte) (-44);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, (byte) (-96));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "QANe_S(:eP|M@d ]#";
      try { 
        Utility.typeOfSignature("QANe_S(:eP|M@d ]#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QANe_S(:eP|M@d ]#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$JavaWriter");
      Utility.typeOfSignature("C");
      Utility.fillup("org.apache.bcel.classfile.Utility$JavaWriter", (byte)5, false, 'd');
      Utility.replace("org.apache.bcel.classfile.Utility$JavaWriter", "goto", (String) null);
      Utility.getSignature("_]@;jQ");
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaWriter");
      try { 
        Utility.typeOfMethodSignature("C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)65;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("lreturn");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2208), (int) (byte)75, false);
      assertEquals("0:    dadd\n1:    fsub\n2:    ifeq\t\t#11853\n5:    fsub\n6:    astore_0\n7:    lstore_2\n", string0);
      
      Utility.fillup(" <6D(D", (byte)65, false, 't');
      String string1 = Utility.compactClassName("MLo", "0:    dadd\n1:    fsub\n2:    ifeq\t\t#11853\n5:    fsub\n6:    astore_0\n7:    lstore_2\n", false);
      assertEquals("MLo", string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.fillup("laload", 76, true, 'W');
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 24, 69, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "(=5rn q`VK}Q*tU;Nl(";
      String string1 = "#\\?i#iu";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(=5rn q`VK}Q*tU;Nl(", "+E!g[vV6DsI@4x}z[z", "#?i#iu", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=5rn q`VK}Q*tU;Nl('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "A1|(IX}9oQZYYl![A");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('{');
      Object[] objectArray0 = new Object[6];
      Locale locale0 = Locale.KOREA;
      mockPrintStream0.format(locale0, "A1|(IX}9oQZYYl![A", objectArray0);
      mockFile0.setReadable(false);
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) printStream0;
      objectArray0[3] = (Object) "A1|(IX}9oQZYYl![A";
      objectArray0[4] = (Object) printStream0;
      Object object0 = new Object();
      char[] charArray0 = new char[0];
      mockPrintStream0.println(charArray0);
      objectArray0[5] = object0;
      Utility.printArray(printStream0, objectArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode("U0c-[0(v$8O4AIZF ", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.typeOfSignature("Lorg/apache/bcel/classfile/ConstantFloat;V");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)14);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Lorg/apache/bcel/classfile/ConstantFloat;V");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q=O;YpJsX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q=O;YpJsX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "OHQoD";
      try { 
        Utility.methodSignatureReturnType("OHQoD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OHQoD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?CjL7j;eALV5J5#-%S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?CjL7j;eALV5J5#-%S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byte byte0 = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "(/K<3bw2*x.nO";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(/K<3bw2*x.nO");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantPool0.constantToString((Constant) constantUtf8_1);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.format((byte) (-78), (byte) (-78), true, '6');
      Utility.printArray((Object[]) null, true);
      String string1 = "boolean";
      String string2 = null;
      String string3 = null;
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)39, (byte)29, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart(':');
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-123);
      byte byte1 = (byte)81;
      byteArray0[3] = (byte)81;
      byte byte2 = (byte)114;
      byteArray0[4] = (byte)114;
      byte byte3 = (byte)87;
      byteArray0[5] = (byte)87;
      byte byte4 = (byte)68;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)12;
      byte byte5 = (byte)97;
      byteArray0[8] = (byte)97;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)114, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.typeOfSignature("Z9X,#@C9IB#g");
      Utility.replace("R*d$$k)z=5B}\"\"$r;", "float", "R*d$$k)z=5B}\"\"$r;");
      Utility.searchOpcode("jsr");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.format(1046, 1046, true, '');
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)124;
      byteArray0[0] = (byte)124;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byte byte3 = (byte)33;
      byteArray0[5] = (byte)33;
      byte byte4 = (byte) (-112);
      byteArray0[6] = (byte) (-112);
      byte byte5 = (byte)88;
      byteArray0[7] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 14
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(']');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      mockPrintWriter0.println();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-127), (byte)18);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1796813872), (-2247), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    ior
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~t?tTgmPGV[/eX`]g";
      stringArray0[1] = "~t?tTgmPGV[/eX`]g";
      stringArray0[2] = "~t?tTgmPGV[/eX`]g";
      stringArray0[3] = "~t?tTgmPGV[/eX`]g";
      stringArray0[4] = "~t?tTgmPGV[/eX`]g";
      String string0 = Utility.methodTypeToSignature("~t?tTgmPGV[/eX`]g", stringArray0);
      assertEquals("([L~t?tTgmPGV;[L~t?tTgmPGV;[L~t?tTgmPGV;[L~t?tTgmPGV;[L~t?tTgmPGV;)[L~t?tTgmPGV;", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$_$f8$H$bdH", string1);
      
      boolean boolean0 = Utility.isSet(530, (byte) (-67));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 803, 22, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10493. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-48);
      byteArray0[0] = (byte) (-48);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "H &)wyY<";
      try { 
        Utility.typeOfSignature("H &)wyY<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H &)wyY<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+A5ia");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A5ia
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.typeOfSignature("SENSITIVE");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, (-267));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = true;
      try { 
        Utility.decode("fstore\t\t%206", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.isSet(224, 238);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Invalid StackMap frame_type", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)60;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      String string0 = "jSjUN";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("jSjUN");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("]^7_+'DA*UgC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]^7_+'DA*UgC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.replace("ishr", "f!Xp5+(OHlm5:yp", "&I<:");
      boolean boolean0 = true;
      Utility.fillup("l2d", (-430), true, '<');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-zHXuyF");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("SAME_LOCALS_1_STACK");
      try { 
        Utility.methodSignatureArgumentTypes("SAME_LOCALS_1_STACK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SAME_LOCALS_1_STACK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 184;
      int int1 = 95;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.format(184, 95, false, 'F');
      Utility.signatureToString("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF184", false);
      try { 
        Utility.methodSignatureReturnType("H2%_O?+ML!,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H2%_O?+ML!,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      String string0 = "Z3K9,mtn: Ff!TG";
      Utility.methodSignatureReturnType("Z3K9,mtn: Ff!TG", true);
      String string1 = "i2l";
      MockFile mockFile0 = new MockFile("boolean");
      File file0 = MockFile.createTempFile("Z3K9,mtn: Ff!TG", "i2l", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "Z3K9,mtn: Ff!TG", 18, 2308);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.convertString("f@YNhBOvU;{I");
      assertEquals("f@YNhBOvU;{I", string0);
      
      byte[] byteArray1 = Utility.decode("f\\@YNhBOvU;{I", false);
      assertEquals(13, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.classOrInterface(1);
      byte[] byteArray0 = new byte[3];
      String string0 = "&WT\\q{kVw_gs2<OIe";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&WTq{kVw_gs2<OIe");
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-102);
      Utility.toHexString(byteArray0);
      Utility.classOrInterface(7);
      Utility.format((byte) (-102), (byte)69, false, '.');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (-43), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.accessToString(9, true);
      Utility.clearBit(9, (-1193));
      Utility.fillup("n._k", (-1193), true, 'R');
      Utility.clearBit(83, 3);
      Utility.accessToString(87, true);
      Utility.classOrInterface(9);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)112;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 137, 4982);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 170;
      boolean boolean0 = true;
      Utility.accessToString(170, true);
      Utility.setBit(170, 2245);
      String string0 = "O^c{Z$byF-u|aG]kr[";
      try { 
        Utility.typeOfSignature("O^c{Z$byF-u|aG]kr[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O^c{Z$byF-u|aG]kr[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "Gt#-m:+@):v";
      try { 
        Utility.typeOfSignature("Gt#-m:+@):v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gt#-m:+@):v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.searchOpcode(";");
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.printArray((Object[]) null, true, true);
      Utility.clearBit(54, 54);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ";@6vtbzq(";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";@6vtbzq(");
      Utility.accessToString(164, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("0b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)87;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("\t\t#", "i2s", false);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("\t\t#", (String[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 125;
      Utility.classOrInterface(125);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X.q0#WkX1Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X.q0#WkX1Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 33, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.accessToString(2200, false);
      Utility.compactClassName("q(X.p}krQB`d's", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("static final transient strictfp", "we$8\"|]E5Ks,aho^EoE", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c=P4@(&`$3B-");
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2200, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M2{zn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M2{zn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte) (-95);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Linterface;V");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      constantPool0.dump(dataOutputStream0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-2), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("4>M@OAsB>GMGEah;b{I", 249, false, '<');
      try { 
        Utility.typeOfSignature("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<4>M@OAsB>GMGEah;b{I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<4>M@OAsB>GMGEah;b{I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "U9zzXg/fj+";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U9zzXg/fj+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U9zzXg/fj+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)119;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), 220, false);
      Object[] objectArray0 = null;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte) (-34);
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte) (-34);
      byteArray1[6] = (byte)119;
      byteArray1[7] = (byte) (-34);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.printArray((Object[]) null, false, false);
      try { 
        Utility.methodSignatureReturnType("0:    <illegal opcode>\n1:    dneg\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    <illegal opcode>
         // 1:    dneg
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.setBit(36, 36);
      Utility.signatureToString("CYh!~wzaxFJ");
      Utility.accessToString(916, true);
      Utility.convertString("anewarray");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 229, (-2691));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte)9;
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-111));
      constantArray0[0] = (Constant) constantMethodType0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte)21;
      byteArray1[6] = (byte) (-20);
      byteArray1[7] = (byte)111;
      byteArray1[8] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(":(x");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(6, 98);
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[5] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-471), (int) (byte) (-111), true);
      assertEquals("0:    iload\t\t%36\n2:    <illegal opcode>\n3:    i2b\n4:    ddiv\n5:    <illegal opcode>\n6:    ineg\n7:    <illegal opcode>\n8:    lconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      Utility.equals(byteArray0, byteArray0);
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), (-1206));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7k5xS<@-9}^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7k5xS<@-9}^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("ZJsaZS9FFyx");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.copy();
      constantUtf8_0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, 1612);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "F6teGd=`Xk/x";
      Utility.convertString("F6teGd=`Xk/x");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6N");
      Utility.convertString("Co}\"30O3+9-g:&$");
      Utility.isSet(230, 80);
      Utility.setBit(230, 230);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "F6teGd=`Xk/x", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.compactClassName("BHs<Y+2G", false);
      Utility.methodSignatureReturnType("BHs<Y+2G", true);
      int int0 = 34;
      Utility.setBit(34, 34);
      Utility.replace("5Q:c[:r ", "5Q:c[:r ", "BHs<Y+2G");
      Utility.getSignature("W`5M_l%oL*.*@$q");
      Utility.compactClassName("BHs<Y+2G", false);
      try { 
        Utility.decode("BHs<Y+2G", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.classOrInterface(1587);
      File file0 = MockFile.createTempFile("org.apache.bcel.classfile.Utility$1", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      mockPrintStream1.println(3654.0);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "HcK |mb*";
      PrintStream printStream0 = mockPrintStream1.format(locale0, "HcK |mb*", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      String[] stringArray0 = new String[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[0] = "interface";
      stringArray0[1] = "interface";
      stringArray0[2] = "org.apache.bcel.classfile.Utility$1";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$1", stringArray0);
      Utility.getSignature("interface");
      try { 
        Utility.typeOfSignature("(Linterface;Linterface;Lorg/apache/bcel/classfile/Utility$1;)Lorg/apache/bcel/classfile/Utility$1;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Linterface;Linterface;Lorg/apache/bcel/classfile/Utility$1;)Lorg/apache/bcel/classfile/Utility$1;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BootstrapMethods(");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet((-986), (-986));
      Utility.convertString("BootstrapMethods(");
      Utility.typeOfSignature("BootstrapMethods(");
      Utility.accessToString(1973, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)8;
      Utility.encode(byteArray1, true);
      Utility.isSet((-986), 1973);
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Utility.classOrInterface(228);
      assertEquals("class", string0);
      
      int int0 = Utility.clearBit(228, 228);
      assertEquals(228, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-35);
      byteArray0[8] = (byte) (-3);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1453), (int) (byte) (-3), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    pop\n4:    ixor\n5:    <illegal opcode>\n6:    ior\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-95);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-2), (int) (byte) (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    iastore
         // 3:    saload
         // 4:    <illegal opcode>
         // 5:    nop
         // 6:    impdep1
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.setBit((-2250), 3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "(KC1YI1PpoxCG?";
      boolean boolean0 = false;
      Utility.decode("(KC1YI1PpoxCG?", false);
      Utility.searchOpcode("(KC1YI1PpoxCG?");
      try { 
        Utility.methodSignatureArgumentTypes("(KC1YI1PpoxCG?", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KC1YI1PpoxCG?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      Utility.isSet(89, 4970);
      Utility.compactClassName("LNr|lD[~SX", "{java.lang.Object@13ab5417, java.lang.Object@692fa38e, java.lang.Object@3b2b4422, java.lang.Object@6aea5697, java.lang.Object@2328bc31, java.lang.Object@370f4809, java.lang.Object@56e4009e, java.lang.Object@6e82ba3b}", false);
      Utility.isSet(4970, 4970);
      Utility.decode("LNr|lD[~SX", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(89);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2396, (-2316), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("YXYZTk&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YXYZTk&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.fillup("boolean", 40, false, '@');
      Utility.accessToString(190);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)93;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1952292449), (-1933357062));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    faload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F` fFtb");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-76);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1697, 9);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("A}+d");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)31, (int) (byte) (-12), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.setBit(125, 125);
      Utility.accessToString((-658));
      Utility.isJavaIdentifierPart('G');
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (-1933), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g%0Hey[}");
      Utility.replace("2gI&yqHk(rDzSA", "MethodParameters", (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-48);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-545), 70);
      constantArray0[0] = (Constant) constantMethodHandle0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-48), (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 30958. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byte byte0 = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteSequence0.readBoolean();
      byteSequence0.skip((byte)1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "\t(wide)";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dup_x2", "\t(wide)", "dup_x2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Bu ";
      stringArray0[1] = "Bu ";
      stringArray0[2] = "Bu ";
      stringArray0[3] = "8";
      String string0 = Utility.methodTypeToSignature("Bu ", stringArray0);
      assertEquals("(LBu;LBu;LBu;L8;)LBu;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(LBu;LBu;LBu;L8;)LBu;", true);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.searchOpcode(">");
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.methodSignatureReturnType("JO+", true);
      String string0 = "CvadV#ZkI!";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CvadV#ZkI!", "long", "long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CvadV#ZkI!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart(':');
      Utility.convertString("APPEND ");
      Utility.fillup("APPEND ", 143, false, '^');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)97;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)114, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "V";
      Utility.typeOfSignature("V");
      Utility.setBit((byte)12, (byte)12);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)12;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)3;
      Utility.equals(byteArray0, byteArray1);
      Utility.methodSignatureReturnType("V", true);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)12;
      Utility.encode(byteArray2, false);
      Utility.compactClassName("Illegal type: ", "void", true);
      Utility.searchOpcode(";@6VtbZq(");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("$M", "Illegal type: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GAO* v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GAO* v'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.isSet((-101), 73);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Utility.typeOfSignature("INSENSITIVE");
          Object[] objectArray0 = new Object[2];
          objectArray0[0] = (Object) "INSENSITIVE";
          objectArray0[1] = (Object) "INSENSITIVE";
          boolean boolean0 = false;
          Utility.printArray(objectArray0, false);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor110.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.compactClassName("Dt'", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantDouble constantDouble0 = new ConstantDouble((-383.1));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)75;
      byteArray0[6] = (byte)102;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)65;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("lreturn");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantUtf8_0.copy();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2208), (int) (byte) (-65), false);
      assertEquals("0:    dadd\n1:    castore\n2:    ifgt\t\t#11853\n5:    nop\n6:    athrow\n7:    lstore_2\n", string0);
      
      Utility.fillup(" <6D(D", (byte)65, true, 't');
      String string1 = Utility.replace("MLo", "lreturn", " <6D(D");
      assertEquals("MLo", string1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.accessToString(16384);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(40, (byte) (-13));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("enum");
      constantArray0[1] = (Constant) constantUtf8_0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("enum");
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1024, (-1330));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("enum");
      constantArray0[5] = (Constant) constantUtf8_2;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-128));
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("M!bI=T@+SiJjqPs{/t", false);
      try { 
        Utility.typeOfSignature("M!bI=T@+SiJjqPs{.t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M!bI=T@+SiJjqPs{.t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-83);
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-21);
      byte byte1 = (byte)9;
      byteArray0[5] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "Rxk}9mzy-^^CEXB_J'";
      try { 
        Utility.methodSignatureReturnType("Rxk}9mzy-^^CEXB_J'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rxk}9mzy-^^CEXB_J''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short short0 = Utility.searchOpcode("char");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)73;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dstore_1", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "N/yiv$J";
      try { 
        Utility.typeOfSignature("N/yiv$J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N/yiv$J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.getSignature("double");
      boolean boolean0 = false;
      Utility.fillup("D", (-177), false, 'y');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "I2G4E+j[[y+U/5[.E";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "I2G4E+j[[y+U/5[.E";
      stringArray0[1] = "I2G4E+j[[y+U/5[.E";
      stringArray0[2] = "I2G4E+j[[y+U/5[.E";
      stringArray0[3] = "I2G4E+j[[y+U/5[.E";
      stringArray0[4] = "I2G4E+j[[y+U/5[.E";
      stringArray0[5] = "I2G4E+j[[y+U/5[.E";
      stringArray0[6] = "I2G4E+j[[y+U/5[.E";
      String string1 = "\t\t#";
      stringArray0[7] = "\t\t#";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("I2G4E+j[[y+U/5[.E", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[y+U/5[.E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "HYU#\"_]B[";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("HYU#\"_]B[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HYU#\"_]B['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid StackMap frame_type", true);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("jSjUN");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("astore_2", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.fillup("boolean", 40, false, '@');
      Utility.accessToString(190);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)93;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1952292449), (-1933357062));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "X-<+2T1Yz?7+7";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X-<+2T1Yz?7+7");
      byte[] byteArray0 = Utility.decode("X-<+2T1Yz?7+7", false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("58 2d 3c 2b 32 54 31 59 7a 3f 37 2b 37");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 58 2d 3c 2b 32 54 31 59 7a 3f 37 2b 37
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)31;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)66, 1508, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20178. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Deprecated");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-89));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("goto\t\t#12607", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      Utility.accessToString((-160), false);
      Utility.typeOfSignature("JyY-BIr,#vf2k[");
      Utility.replace("", "uCZ(QW#|0nj", "synchronized volatile native interface abstract strictfp synthetic annotation enum");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "synchronized volatile native interface abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "JyY-BIr,#vf2k[";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "uCZ(QW#|0nj";
      Object object1 = new Object();
      objectArray0[8] = object1;
      Utility.printArray(objectArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-1618), false, 'S');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("(", "(", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1461), (int) (byte)97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    lushr
         // 2:    lstore_0
         // 3:    nop
         // 4:    ddiv
         // 5:    l2f
         // 6:    ladd
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.setBit(1024, 112);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)88;
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)122, (byte)13);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 54, 11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.fillup("&[kO7\"n2zJ[40", 2691, false, '');
      Utility.compactClassName("(");
      File file0 = MockFile.createTempFile("wide", string0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "(";
      objectArray0[1] = (Object) "lVp6=R3.r|uzoAk(~";
      objectArray0[2] = (Object) "lVp6=R3.r|uzoAk(~";
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "(";
      objectArray0[5] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "lVp6=R3.r|uzoAk(~", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(2825L, file0.length());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)65;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("lreturn");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2208), (int) (byte) (-65), false);
      assertEquals("0:    dadd\n1:    fsub\n2:    ifeq\t\t#11853\n5:    fsub\n6:    athrow\n7:    lstore_2\n", string0);
      
      String string1 = Utility.fillup(" <6D(D", (byte)65, false, 't');
      assertEquals("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt <6D(D", string1);
      
      String string2 = Utility.compactClassName("MLo", "0:    dadd\n1:    fsub\n2:    ifeq\t\t#11853\n5:    fsub\n6:    athrow\n7:    lstore_2\n", false);
      assertEquals("MLo", string2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-49);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-49), 93);
      assertEquals("0:    fload_0\n1:    <illegal opcode>\n2:    aaload\n3:    baload\n4:    lushr\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putfield");
      Utility.typeOfSignature("The list of suffixes must not be null");
      boolean boolean0 = false;
      Utility.compactClassName("checkcast", false);
      try { 
        Utility.typeOfSignature("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CLASSPATH component ");
      Utility.methodSignatureReturnType("CLASSPATH component ");
      int int0 = 43;
      Utility.isSet(43, 43);
      // Undeclared exception!
      try { 
        Utility.signatureToString("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object[] objectArray0 = new Object[21];
      Object object0 = new Object();
      objectArray0[1] = object0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Utility.printArray(objectArray0, true, true);
      char char0 = '2';
      Utility.isJavaIdentifierPart('2');
      int int0 = (-489);
      Utility.isSet((-489), (-489));
      Utility.compactClassName("{null, \"java.lang.Object@4da2fb1c\", \"java.lang.Object@1ed3f470\", \"java.lang.Object@6ee9b25\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}", "{null, \"java.lang.Object@4da2fb1c\", \"java.lang.Object@1ed3f470\", \"java.lang.Object@6ee9b25\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}", true);
      try { 
        Utility.methodSignatureReturnType("iaload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iaload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.convertString("`+n'<^b#p7YLl*");
      String string0 = "Illegally nested brackets:";
      try { 
        Utility.methodSignatureArgumentTypes("Illegally nested brackets:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegally nested brackets:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "int";
      Utility.searchOpcode("int");
      String string1 = "Lorg/apache/bcel/classfile/ConstantFloat;V";
      Utility.signatureToString("Lorg/apache/bcel/classfile/ConstantFloat;V");
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.ConstantFloat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ConstantFloat
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.bcel.classfile.ConstantFloat";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      stringArray0[1] = "org.apache.bcel.classfile.ConstantFloat";
      stringArray0[2] = "org.apache.bcel.classfile.ConstantFloat";
      Utility.methodTypeToSignature("org.apache.bcel.classfile.ConstantFloat", stringArray0);
      Utility.printArray((Object[]) stringArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("int", "(name_index = ", "\tdefault = \tdefault = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "newarray";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      boolean boolean0 = true;
      Utility.format((-374), (-374), true, 'p');
      String string1 = " T7N";
      Utility.compactClassName(" T7N");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)48;
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)48, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"qN]F", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"qN]F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)90;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("s,O~l_H;(-l@Yi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s,O~l_H;(-l@Yi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.methodSignatureReturnType("V}cQ2", false);
      Utility.accessToString((-1269));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("<Any exception>(0)");
      try { 
        Utility.methodSignatureArgumentTypes("<Any exception>(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Any exception>(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-86);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(CLf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.format(59, 59, false, '?');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-36);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("%$]3+'vhTPk=EB,^erT", false);
      Utility.accessToString(59, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("-lkKajV0([;Z_zif");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;Z_zif
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.convertString("jsr_w");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-119);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)5);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 58, (int) (byte)68, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "UnTzIF";
      try { 
        Utility.typeOfSignature("UnTzIF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UnTzIF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.compactClassName("\tdefault = ", "\tdefault = ", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\n", "\n", "putstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-114);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("3e f9 63 0f 85 af 22 8e", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid signature: ");
      assertEquals("LInvalid;", string0);
      
      String string1 = Utility.compactClassName("if_icmplt", false);
      assertEquals("if_icmplt", string1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Utility.format(2953, 20, false, 'z');
      assertEquals("zzzzzzzzzzzzzzzz2953", string0);
      
      short short0 = Utility.searchOpcode("invokestatic");
      assertEquals((short)184, short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2s", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.setBit(103, 103);
      Utility.replace(":_no", ", low = ", ":_no");
      Utility.isSet(103, (-976));
      Utility.getSignature("getstatic");
      String string0 = "{\"java.lang.Obje";
      Utility.replace("9!NGZca>", "{\"java.lang.Obje", "Lgetstatic;");
      try { 
        Utility.methodSignatureReturnType("{\"java.lang.Obje");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{\"java.lang.Obje'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-109);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-19);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$I$d6$5c$b9$_$93L$ed", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-109);
      objectArray0[1] = (Object) (byte)76;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{-109, 76}", string1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      char char0 = '2';
      Utility.isJavaIdentifierPart('2');
      int int0 = (-489);
      Utility.isSet((-489), (-489));
      Utility.compactClassName("{\"java.lang.Object@5fad4f08\", \"java.lang.Object@36c286ab\", \"java.lang.Object@18b00769\", \"java.lang.Object@6ec94148\"}", "\nAttribute(s) = ", true);
      try { 
        Utility.methodSignatureReturnType("iaload", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iaload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.replace("impdep2", "impdep2", "[]");
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.searchOpcode("?.?\"aH35e%F");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "?.?\"aH35e%F";
      objectArray0[1] = (Object) "?.?\"aH35e%F";
      objectArray0[2] = (Object) "?.?\"aH35e%F";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "?.?\"aH35e%F";
      objectArray0[5] = (Object) "?.?\"aH35e%F";
      objectArray0[6] = (Object) "?.?\"aH35e%F";
      objectArray0[7] = (Object) "?.?\"aH35e%F";
      Utility.printArray(objectArray0, false);
      Utility.accessToString((int) (short) (-1), true);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "?.?\"aH35e%F";
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "?.?\"aH35e%F";
      objectArray1[3] = (Object) "?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F, java.lang.Object@4499600, ?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F";
      objectArray1[4] = object0;
      objectArray1[5] = (Object) "public private protected static final volatile transient native abstract strictfp synthetic annotation enum";
      objectArray1[6] = (Object) "?.?\"aH35e%F";
      objectArray1[7] = (Object) "?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F, java.lang.Object@4499600, ?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F";
      objectArray1[8] = (Object) "?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F, java.lang.Object@4499600, ?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F, ?.?\"aH35e%F";
      Utility.printArray(objectArray1);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)67;
      byteArray0[0] = (byte)67;
      byte byte1 = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -37
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.classOrInterface(2064);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 4672;
      int int1 = 69;
      Utility.clearBit(4672, 69);
      Utility.format((-161), 14, true, 'y');
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("q@J^@_nAT_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `q@J^@_nAT_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("T7M", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T7M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)12;
      Utility.encode(byteArray0, true);
      Utility.clearBit((byte)12, (byte) (-106));
      // Undeclared exception!
      try { 
        Utility.signatureToString("EW2gB9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EW2gB9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.classOrInterface((-1491));
      try { 
        Utility.methodSignatureReturnType("(h0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(h0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.isSet(0, 313);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("{\"java.lang.Object@50bab2b8\", \"java.lang.Object@3cc7e04a\", \"java.lang.Object@2a2e886e\", \"java.lang.Object@4737ec47\", \"java.lang.Object@429da96b\", \"java.lang.Object@41dbd4c2\", \"java.lang.Object@1fe8596f\", \"java.lang.Object@67c5cb01\"}", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Pz(ek1KJ9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pz(ek1KJ9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      String string0 = "uCZ(QW#|0nj";
      try { 
        Utility.typeOfMethodSignature("uCZ(QW#|0nj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: uCZ(QW#|0nj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)106;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)106;
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.isSet(525, (-2080511573));
      Utility.clearBit((-2339), (-312));
      String string0 = "[i2*/~ugYv";
      Utility.typeOfSignature("[i2*/~ugYv");
      try { 
        Utility.methodSignatureReturnType("[i2*/~ugYv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2*_/~ugYv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      String string0 = " arg";
      Utility.searchOpcode(" arg");
      try { 
        Utility.methodSignatureArgumentTypes("{java.lang.Object@2285cf3c, java.lang.Object@3680ca26, java.lang.Object@3d23481f, java.lang.Object@69d2be2a, java.lang.Object@65a26003, java.lang.Object@55c3576b, java.lang.Object@72078e7c, java.lang.Object@ed85df8, java.lang.Object@788c8658}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@2285cf3c, java.lang.Object@3680ca26, java.lang.Object@3d23481f, java.lang.Object@69d2be2a, java.lang.Object@65a26003, java.lang.Object@55c3576b, java.lang.Object@72078e7c, java.lang.Object@ed85df8, java.lang.Object@788c8658}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.convertString("u");
      Utility.compactClassName("\"", "u", true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "u";
      objectArray0[2] = (Object) "u";
      objectArray0[3] = (Object) "\"";
      objectArray0[4] = (Object) "\"";
      objectArray0[5] = (Object) "u";
      objectArray0[6] = (Object) "u";
      objectArray0[7] = (Object) "\"";
      Object object1 = new Object();
      objectArray0[8] = object1;
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("new", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.classOrInterface(3218);
      int int0 = 255;
      boolean boolean0 = false;
      Utility.accessToString(255, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected static final synchronized volatile transient", "class", "ei.7%;)>&K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final synchronized volatile transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, false);
      Utility.decode("java.lang.Object@79a8b15b, java.lang.Object@66daa83b, java.lang.Object@2df72ae7, java.lang.Object@3c14aecc, java.lang.Object@ae27c, java.lang.Object@33a20936, java.lang.Object@2716bdb7", false);
      Utility.printArray(objectArray0, false, true);
      Utility.clearBit(1546, (-260));
      try { 
        Utility.typeOfSignature("\"java.lang.Object@79a8b15b\", \"java.lang.Object@66daa83b\", \"java.lang.Object@2df72ae7\", \"java.lang.Object@3c14aecc\", \"java.lang.Object@ae27c\", \"java.lang.Object@33a20936\", \"java.lang.Object@2716bdb7\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@79a8b15b\", \"java.lang.Object@66daa83b\", \"java.lang.Object@2df72ae7\", \"java.lang.Object@3c14aecc\", \"java.lang.Object@ae27c\", \"java.lang.Object@33a20936\", \"java.lang.Object@2716bdb7\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.getSignature("q-&Rt<aYlv`.TWM");
      Utility.clearBit((-2498), (-1282));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-1);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("Lq-&Rt<aYlv`/TWM;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lq-&Rt<aYlv`/TWM;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)109;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("p$a0ma6p$um", string0);
      
      boolean boolean0 = Utility.isSet(43, (-929));
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.accessToString((int) (byte)54);
      String string2 = Utility.compactClassName("private protected final synchronized");
      assertTrue(string2.equals((Object)string1));
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteArray0, constantPool1, (-520), 85);
      assertEquals("0:    irem\n1:    if_icmpne\t\t#28002\n4:    istore\t\t%112\n6:    dload_2\n7:    ldiv\n", string3);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = ", npairs = ";
      String string1 = "invokespecial";
      boolean boolean0 = false;
      int int0 = 55;
      int int1 = 184;
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }
}
