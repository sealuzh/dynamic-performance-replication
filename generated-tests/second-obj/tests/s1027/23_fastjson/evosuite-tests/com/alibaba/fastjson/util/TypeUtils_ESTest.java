/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:50:56 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.DataOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass("<");
      TypeUtils.getCollectionItemClass((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : <
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-910L));
      Float float0 = TypeUtils.castToFloat(long0);
      assertEquals((-910.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(",c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.loadClass("*%CaNH3h1");
      TypeUtils.isGenericParamType((Type) null);
      String string0 = "[J";
      TypeUtils.fnv1a_64("[J");
      TypeUtils.castToTimestamp((Object) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      TypeUtils.isHibernateInitialized(negativeArraySizeException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("[J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [J
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("3[q@@^d$03bv");
      Class<?> class0 = TypeUtils.getClassFromMapping("3[q@@^d$03bv");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("notifyAll");
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.decapitalize("getGenericParameterTypes");
      Type[] typeArray0 = new Type[7];
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("");
      parserConfig0.addAccept("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.getClassFromMapping("getMetaClass");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      DecimalFormatSymbols.getInstance();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      outOfMemoryError0.getStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(outOfMemoryError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("rev", classLoader1);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("yyyy-MM-d!'T'HH:mm:ss.SSSXXX");
      illegalThreadStateException0.getSuppressed();
      TypeUtils.castToDate((Object) null);
      Constructor<SQLTransientConnectionException>[] constructorArray0 = (Constructor<SQLTransientConnectionException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("java.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.loadClass("<");
      TypeUtils.getCollectionItemClass((Type) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("isclone", "isclone");
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      Class<Float> class0 = Float.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.loadClass("</}EW i");
      TypeUtils.getCollectionItemClass((Type) null);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      Class<Currency> class1 = Currency.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy0);
      DecimalFormat decimalFormat0 = new DecimalFormat("gettoString");
      assertEquals("", decimalFormat0.getNegativeSuffix());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, true, propertyNamingStrategy0);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("class java.lang.NoClassDefFoundError", class1.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.decapitalize("1");
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.loadClass("</}EW i");
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONType0).toString();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ChoiceFormat choiceFormat0 = new ChoiceFormat(".000000");
      NumberFormat.getCurrencyInstance();
      weakHashMap0.containsKey("</}EW i");
      TypeUtils.decapitalize("FXq]t&i\"");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType1, (Map<String, String>) weakHashMap1, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      ConcurrentHashMap<SimpleDateFormat, ThrowableDeserializer> concurrentHashMap0 = new ConcurrentHashMap<SimpleDateFormat, ThrowableDeserializer>();
      Hashtable<IllegalAccessException, MockJapaneseDate> hashtable0 = new Hashtable<IllegalAccessException, MockJapaneseDate>();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(jSONType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Object> class2 = Object.class;
      TypeUtils.getParserFeatures(class2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.keySet();
      hashMap0.put("\"TYi,:-", "\"TYi,:-");
      TypeUtils.getKoltinConstructorParameters(class0);
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      identityHashMap0.putAll(treeMap0);
      Class<NoSuchMethodError> class3 = NoSuchMethodError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      Locale locale0 = new Locale("java.awt.Rectangle");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("java.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.io.InputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TypeUtils.castToBigDecimal((Object) null);
      Class<Short> class0 = Short.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      SQLDataException sQLDataException0 = new SQLDataException("java.awt.Rectangle", "m_");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLDataException: java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.getParserFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      LinkedHashSet<JSONPDeserializer> linkedHashSet0 = new LinkedHashSet<JSONPDeserializer>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<BreakIterator> class0 = BreakIterator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeUtils0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.BreakIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      hashMap0.put("isfloatValue", "isfloatValue");
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getGenericParamType(class0);
      Locale locale0 = Locale.ITALIAN;
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.toLocale("syntax error, unexpect token ':'");
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("7KYr;fjne()<)/fN_");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : 7KYr;fjne(
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.awt.Rectangle");
      TypeUtils.isProxy(class0);
      TypeUtils.getCollectionItemClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("java.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.castToString((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      Class<Float> class0 = Float.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.decapitalize("W#<Y1M");
      Locale locale0 = Locale.KOREA;
      Character.compare('I', 'G');
      Character.getName(2);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      AtomicInteger atomicInteger0 = new AtomicInteger(6);
      java.util.IdentityHashMap<SQLWarning, IllegalAccessException> identityHashMap0 = new java.util.IdentityHashMap<SQLWarning, IllegalAccessException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("W#<Y1M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : W#<Y1M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.castToFloat((Object) null);
      Dimension dimension0 = new Dimension();
      Rectangle rectangle0 = new Rectangle(dimension0);
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      Class<Character> class0 = Character.TYPE;
      TypeUtils.unwrapOptional(class0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      mockIllegalStateException0.getLocalizedMessage();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      mockIllegalStateException0.getStackTrace();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus((String) null, true);
      GenericArrayType genericArrayType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.loadClass("<");
      TypeUtils.getCollectionItemClass((Type) null);
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "<", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Object> class2 = Object.class;
      TypeUtils.getParserFeatures(class2);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.keySet();
      hashMap0.put("\"TYi,:-", "\"TYi,:-");
      TypeUtils.getKoltinConstructorParameters(class0);
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Float> class3 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      hashMap0.put("3au", "`cXcS7T\"D.MLlVf\"$N");
      hashMap0.put("3au", "3au");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = TypeUtils.toLocale("`cXcS7T\"D.MLlVf\"$N");
      assertEquals("`cxcs7t\"d.mllvf\"$n", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.isPath(class0);
      Class<Boolean> class1 = Boolean.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.getDeserializer((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@7e32df0a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long(1099511628211L);
      Class<Double> class0 = Double.class;
      TypeUtils.castToJavaBean((Object) long0, class0);
      Character.compare('g', 'j');
      Character.getName(1924);
      ParserConfig.getGlobalInstance();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, (String) null);
      ParserConfig.getGlobalInstance();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      TypeUtils.clearClassMapping();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpCookie httpCookie0 = new HttpCookie("getgetClass", "NonStringKeyAsString");
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("can not cast to : ");
      assertEquals("can not cast to : ", noSuchFieldException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToString((Object) null);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<DataTruncation> class0 = DataTruncation.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.loadClass("<");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      String string0 = "lZ/q),Uw";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("lZ/q),Uw");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, sQLFeatureNotSupportedException0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.isNumber("+R2!_Uz#Y0US[c%i?");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("+R2!_Uz#Y0US[c%i?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : +R2!_Uz#Y0US[c%i?
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      String string0 = TypeUtils.castToString(parserConfig0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "}1liy", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      Float float0 = new Float((-1757.80229263524));
      Date date0 = TypeUtils.castToDate(float0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      TypeUtils.loadClass("", (ClassLoader) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getGenericParamType(class0);
      Locale locale0 = Locale.FRENCH;
      TypeUtils.castToTimestamp((Object) null);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.loadClass("getNextException");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("9ZH7>V%");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("9ZH7>V%", sQLFeatureNotSupportedException0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getClassFromMapping("getfillInStackTrace");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Point point0 = new Point((-5), (-1891));
      TypeUtils.castToLong((-1891));
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getParserFeatures(class0);
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      TypeUtils.getParserFeatures(class1);
      System.setCurrentTimeMillis((-5));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getRawClass(class0);
      Integer integer0 = new Integer(0);
      TypeUtils.castToByte(integer0);
      // Undeclared exception!
      try { 
        Collator.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("3[q@@^d$03bv");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(51, 51, 36, (-1405), 51, 51);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      LinkedHashSet<JSONPDeserializer> linkedHashSet0 = new LinkedHashSet<JSONPDeserializer>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashSet0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      String string0 = "Y(u A~lCleiaphW%_3i";
      TypeUtils.fnv1a_64_lower("Y(u A~lCleiaphW%_3i");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError(",BY]NP>zm*");
      outOfMemoryError0.getSuppressed();
      StackTraceElement[] stackTraceElementArray0 = null;
      OutOfMemoryError outOfMemoryError1 = new OutOfMemoryError();
      // Undeclared exception!
      try { 
        outOfMemoryError1.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Random.setNextRandom((-3281));
      ThreadGroup threadGroup0 = new ThreadGroup("toS");
      String string0 = "t.nu\\XW";
      MockThread mockThread0 = new MockThread("t.nuXW");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      mockThread1.getStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t.nuXW");
      TypeUtils.loadClass("toS", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TypeUtils.getClassFromMapping("0g/W^Q\"Kbd-2!.)");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      identityHashMap0.put("0g/W^Q\"Kbd-2!.)", "java.util.Properties");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      identityHashMap0.replace("java.awt.Rectangle", "$ref", "java.util.Properties");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      identityHashMap0.put("getshortValue", (String) null);
      ParserConfig.getGlobalInstance();
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("CR8>YevmF78k$1mG", "getGenericExceptionTypes");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("CR8>YevmF78k$1mG", sQLInvalidAuthorizationSpecException0);
      TypeUtils.toLocale("getshortValue");
      LinkedHashMap<PropertyNamingStrategy, ThrowableDeserializer> linkedHashMap0 = new LinkedHashMap<PropertyNamingStrategy, ThrowableDeserializer>();
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PHYSICAL;
      pageAttributes0.setOrigin(pageAttributes_OriginType0);
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(pageAttributes1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      TypeUtils.loadClass("getgetNextException");
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isKotlin((Class) null);
      TypeUtils.getClass((Type) class0);
      boolean boolean0 = TypeUtils.isNumber(".008bp00000");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("WrieDateUseDateFormat");
      ConcurrentHashMap<SimpleDateFormat, ThrowableDeserializer> concurrentHashMap0 = new ConcurrentHashMap<SimpleDateFormat, ThrowableDeserializer>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-692), ".008bp00000");
      Properties properties0 = new Properties();
      TypeUtils.castToSqlDate((Object) null);
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, concurrentHashMap1, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("xA9h]KAMR|$");
      mockIllegalAccessException0.toString();
      LinkedHashMap<Double, Object> linkedHashMap0 = new LinkedHashMap<Double, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("clone");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"clone\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("3[q@@^d$03bv");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("3[q@@^d$03bv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 3[q@@^d$03bv
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("3[q@@^d$03bv");
      Class<Short> class0 = Short.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      parserConfig0.putDeserializer(class0, sqlDateDeserializer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "3[q@@^d$03bv", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.KOREA;
      ParserConfig.getGlobalInstance();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isGenericParamType(class0);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      String string0 = File.pathSeparator;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = new ThreadGroup("getBeanContext");
      MockThread mockThread0 = new MockThread(threadGroup0, "YRNi(02f@qw+");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("MILLISECOND_FIELD", classLoader1);
      TypeUtils.getGenericParamType((Type) null);
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashtable0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      identityHashMap0.put("java.awt.Rectangle", "T<b$Nd >T");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.loadClass("S?f''\",.`uj");
      TypeUtils.getCollectionItemClass((Type) null);
      Field[] fieldArray0 = new Field[0];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "S?f''\",.`uj", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      Properties properties0 = new Properties();
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaBeanDeserializer0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrenSkipListSe");
      TypeUtils.isGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.entrySet();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      EvoSuiteFile evoSuiteFile0 = null;
      Class<Point> class0 = Point.class;
      parserConfig0.createJavaBeanDeserializer(class0, (Type) null);
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("toS");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      HttpCookie httpCookie0 = new HttpCookie("is", "toS");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("java.util.concurrent.ConcurrentSkipListSet");
      AccessibleObject accessibleObject0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockDateFormat0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support awt class : com.alibaba.fastjson.util.ParameterizedTypeImpl@fcac1d4
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.isGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      ParserConfig.getGlobalInstance();
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", weakHashMap1);
      WeakHashMap<String, ClientInfoStatus> weakHashMap2 = new WeakHashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "false", 125, sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ljava.util.concurrent.ConcurrentSkipListSet", "fastjson.parser.deny", (-409), sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("has", weakHashMap2, sQLDataException0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLClientInfoException: has
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(2601.8F);
      Date date0 = TypeUtils.castToDate(float0);
      TypeUtils.castToString(date0);
      LinkedHashMap<SQLWarning, Field> linkedHashMap0 = new LinkedHashMap<SQLWarning, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.loadClass((String) null);
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TypeUtils.toLocale("java.awt.Rectangle");
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      Class<Float> class0 = Float.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      InterruptedException interruptedException0 = new InterruptedException("d_\" @='ivjbH");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      TypeUtils.isPath(class0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.isPath(class1);
      TypeUtils.getParserFeatures(class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("L)86A~n>hf", "L)86A~n>hf");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      hashtable0.put("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      hashtable0.putAll(linkedHashMap0);
      // Undeclared exception!
      try { 
        hashtable0.put("Lorg.springframework.util.LinkedMultiValueMap", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Type type0 = TypeUtils.getGenericParamType(class0);
      Locale locale0 = Locale.FRENCH;
      TypeUtils.castToTimestamp((Object) null);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = null;
      typeArray0[1] = null;
      typeArray0[2] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, type0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@d1321e65
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getClass((Type) class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      NavigableMap<String, String> navigableMap0 = treeMap0.headMap(".000000000", true);
      TypeUtils.isNumber(".000000000");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("WrieDateUseDateFormat");
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(navigableMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("java.awt.Rectangle");
      Locale locale0 = Locale.KOREA;
      TypeUtils.castToChar((Object) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashMap0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("java.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.compatibleWithJavaBean");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<java.sql.Date, EnumDeserializer> linkedHashMap0 = new LinkedHashMap<java.sql.Date, EnumDeserializer>();
      JSONObject jSONObject0 = new JSONObject(2361, false);
      HashMap<String, DecimalFormatSymbols> hashMap0 = new HashMap<String, DecimalFormatSymbols>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(hashMap0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("yyyy-MM-dd HH:mm:ss", (Object) null);
      JSONObject jSONObject3 = jSONObject2.fluentPut("getgetLocation", linkedHashMap0);
      jSONObject3.getSqlDate("yyyyMMddHHmmssSSSZ");
      Class<BigInteger> class0 = BigInteger.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedHashMap<Character, NegativeArraySizeException> linkedHashMap0 = new LinkedHashMap<Character, NegativeArraySizeException>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) linkedHashMap0, class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ThreadGroup threadGroup0 = new ThreadGroup("xa[9lvb<Lch>GY*q");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "ab3L7iyr%07O:j ");
      MockThread mockThread0 = new MockThread("ab3L7iyr%07O:j ");
      threadGroup0.setDaemon(true);
      String string0 = "[S";
      ThreadGroup threadGroup2 = new ThreadGroup("[S");
      MockThread mockThread1 = new MockThread(threadGroup2, mockThread0);
      mockThread1.setUncaughtExceptionHandler(threadGroup0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      MockThread.setDefaultUncaughtExceptionHandler(threadGroup0);
      mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.CharacterCodec", classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "Ljava.awt.Color";
      String string1 = "com.alibaba.fastjson.serializer.FloatCodec";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      boolean boolean0 = false;
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.FloatCodec", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.getGenericParamType(class0);
      Locale locale0 = Locale.FRENCH;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.alibaba.fastjson.serializer.FloatCodec", "com.alibaba.fastjson.serializer.FloatCodec", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLDataException: java.sql.SQLTransientConnectionException: com.alibaba.fastjson.serializer.FloatCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeSupport");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7VF@dx&Ilf2,");
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.util.concurrent.ConcurrentSkipListSet");
      MockThread mockThread0 = new MockThread(threadGroup0, "ha");
      MockThread mockThread1 = new MockThread();
      MockThread mockThread2 = new MockThread(mockThread1, "*yFik>VO[3\"dG3)!");
      mockThread2.setUncaughtExceptionHandler(threadGroup0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      AtomicLong atomicLong0 = new AtomicLong((-3262L));
      Class<Short> class0 = Short.class;
      classLoader0.clearAssertionStatus();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) atomicLong0, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.isGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      weakHashMap1.size();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", weakHashMap1);
      WeakHashMap<String, ClientInfoStatus> weakHashMap2 = new WeakHashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "flse", 125, sQLNonTransientConnectionException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<LinkageError> class1 = LinkageError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CNA%");
      TypeUtils.unwrapOptional((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      ParserConfig.getGlobalInstance();
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("L18iS2", weakHashMap0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WeakHashMap<String, ClientInfoStatus> weakHashMap2 = new WeakHashMap<String, ClientInfoStatus>();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.castToBytes("L18iS2");
      Class<Double> class2 = Double.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.loadClass("</}EW i");
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      NumberFormat.getCurrencyInstance();
      Constructor<TimeUnit>[] constructorArray0 = (Constructor<TimeUnit>[]) Array.newInstance(Constructor.class, 6);
      constructorArray0[3] = constructorArray0[0];
      constructorArray0[3] = constructorArray0[2];
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<Float> class1 = Float.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      Class<OptionalCodec> class3 = OptionalCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class3, (Map<String, String>) null, propertyNamingStrategy0, false);
      ParserConfig.getGlobalInstance();
      WeakHashMap<String, Field> weakHashMap2 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", weakHashMap1);
      WeakHashMap<String, ClientInfoStatus> weakHashMap3 = new WeakHashMap<String, ClientInfoStatus>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("false", "methodName", 77, sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("fastjson.parser.deny", "Sr&ZT<8=({,J$XwP", 16, sQLNonTransientConnectionException0);
      String string0 = " bP";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" bP", weakHashMap3, sQLNonTransientException0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf(" bP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.isGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      ParserConfig.getFieldFromCache("V}y0M?9)", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("port is not int", class0, class0, class1, (Field) null, (-1721179179), (-1721179179), (-1721179179));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      weakHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", (Field) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TypeUtils.loadClass("port is not int");
      TypeUtils.castToByte((Object) null);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {Ljava.util.concurrent.ConcurrentSkipListSet=null}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getClass((Type) class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.headMap(".000000000", false);
      treeMap0.put("}1liy", ".000000000");
      Character.getName(2468);
      ParserConfig.getGlobalInstance();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Double double0 = new Double(0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      MockDate mockDate0 = new MockDate(4381, 102, 102, 54, 87, 54);
      TypeUtils.castToTimestamp(mockDate0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.decapitalize("W#<Y1M");
      Locale locale0 = Locale.KOREA;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      AtomicInteger atomicInteger0 = new AtomicInteger(6);
      java.util.IdentityHashMap<SQLWarning, IllegalAccessException> identityHashMap0 = new java.util.IdentityHashMap<SQLWarning, IllegalAccessException>();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap1);
      Class<Field> class1 = Field.class;
      TypeUtils.getParserFeatures(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap1, propertyNamingStrategy0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(outOfMemoryError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.loadClass("T<b$Nd >T");
      Class<Locale> class0 = Locale.class;
      TypeUtils.isProxy(class0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      TypeUtils.isProxy(class1);
      Character.compare('T', 'o');
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ParserConfig.getGlobalInstance();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Integer integer0 = new Integer(14);
      Time time0 = TypeUtils.castToSqlTime(integer0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.isGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      VerifyError verifyError0 = new VerifyError();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.util.concurrent.ConcurrentSkipListSet", verifyError0);
      sQLNonTransientException0.addSuppressed(verifyError0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("5%JEYMi}M", sQLNonTransientException0);
      sQLRecoverableException0.setNextException(sQLNonTransientException0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("Ljava.util.concurrent.ConcurrentSkipListSet");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (-723), stringIndexOutOfBoundsException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("Ljava.util.concurrent.ConcurrentSkipListSet", "$$$}L0", (-723), sQLNonTransientException0);
      TreeMap<String, ClientInfoStatus> treeMap0 = new TreeMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ljava.util.concurrent.ConcurrentSkipListSet", treeMap0, stringIndexOutOfBoundsException0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Time time0 = new Time((-409));
      java.sql.Date date0 = TypeUtils.castToSqlDate(time0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      identityHashMap0.put("(I)Ljava/lang/Integer;", "Ljava.util.concurrent.ConcurrentSkipListSet");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TypeUtils.castToChar((Object) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.getCollectionItemClass(class0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.isProxy(class1);
      TypeUtils.toLocale("dd/MM/yyyy HH:mm:ss");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      TypeUtils.isHibernateInitialized((Object) null);
      Class<JSONPDeserializer> class2 = JSONPDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class2, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TypeUtils.castToBigDecimal((Object) null);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) locale0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : ko_KR
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      TypeUtils.getClass((Type) class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      NavigableMap<String, String> navigableMap0 = new TreeMap<String, String>();
      boolean boolean1 = TypeUtils.isNumber(".000000000");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean2 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      Locale locale0 = Locale.GERMANY;
      TypeUtils.getClassFromMapping("5j");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<OptionalCodec> class0 = OptionalCodec.class;
      ParserConfig.getFieldFromCache("5j", weakHashMap0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.alibaba.fastjson.asm.TypeCollector$1");
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.util.concurrent.ConcurrentSkipListSet", (Class<?>) null, class0, class0, (Field) null, 1868, 1868, 2281);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      weakHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.vm.name");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Locale locale0 = Locale.KOREA;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.getClass(type0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        Time.valueOf("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeUtils.getCollectionItemType((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "java.awt.Rectangle";
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.loadClass("T<b$Nd >T");
      Class<Locale> class1 = Locale.class;
      TypeUtils.isProxy(class1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.castToDouble((Object) null);
      Class<Long> class2 = Long.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.unwrapOptional(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("T<b$Nd >T");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"T<b$Nd >T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.isGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      identityHashMap0.put("(I)Ljava/lang/Integer;", "T<b$Nd >T");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Boolean.valueOf("(I)Ljava/lang/Integer;");
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "(I)Ljava/lang/Integer;", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.getParent();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      identityHashMap0.put("isfillInStackTrace", "T<b$Nd >T");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.castToInt((Object) null);
      Type[] typeArray0 = new Type[0];
      Class<Boolean> class0 = Boolean.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<ClassLoader> class0 = ClassLoader.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("pT", "pT");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.headMap("fi", false);
      TypeUtils.decapitalize((String) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, ":2GcL", mockIllegalStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("c2>W");
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLSyntaxErrorException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      Double double0 = new Double((-3819.4));
      TypeUtils.castToInt(double0);
      Class<Integer> class0 = Integer.TYPE;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Locale locale0 = Locale.JAPAN;
      TypeUtils.castToBigInteger((Object) null);
      Class<?> class2 = TypeUtils.getClassFromMapping("");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      TypeUtils.castToString((Object) null);
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<DataTruncation> class0 = DataTruncation.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<Properties> class1 = Properties.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0, true, false);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("j");
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "field_");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"UcE>Vy1$|(gc8");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0);
      mockRuntimeException0.printStackTrace((PrintStream) mockPrintStream1);
      mockRuntimeException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      sQLTransactionRollbackException0.initCause(mockRuntimeException0);
      sQLTransactionRollbackException0.getLocalizedMessage();
      TypeUtils.cast((Object) sQLTransactionRollbackException0, class0, (ParserConfig) null);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("byteValue");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : byteValue
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      Hashtable<IllegalAccessException, MockJapaneseDate> hashtable0 = new Hashtable<IllegalAccessException, MockJapaneseDate>();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("<b$Wd >");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<b$Wd >\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isKotlin(class0);
      int int0 = Opcodes.ARETURN;
      TypeUtils.compatibleWithJavaBean = true;
      JSON.DEFAULT_PARSER_FEATURE = 125;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`{.J4:#x&[;6K#w");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`{.J4:#x&[;6K#w");
      Long long0 = new Long(176);
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "`{.J4:#x&[;6K#w", class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<Annotation> class1 = Annotation.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashMap0);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      TypeUtils.getRawClass(type0);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("xA9h]KAMR|$");
      boolean boolean0 = new Boolean(true);
      mockIllegalAccessException0.toString();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("short");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("clone");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"clone\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.replaceAll(biFunction0);
      String string0 = "US";
      TypeUtils.loadClass("US");
      ParserConfig.getFieldFromCache("US", weakHashMap0);
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.setClassAssertionStatus("&Q]Pk6-K0wrD`[#/<5\"", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.getParent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Ljava.awt.Font", 100);
      jSONReaderScanner0.scanUUID('e');
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      TypeUtils.castToBytes("false");
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeUtils.fnv1a_64(":))");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.entrySet();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeUtils.fnv1a_64(":))");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      hashMap0.put(":))", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.loadClass("T<b$Nd >T");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class2);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isGenericParamType(class2);
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("T<b$Nd >T", (ClassLoader) aSMDeserializerFactory0.classLoader);
      TypeUtils.createCollection(class1);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Class<?>) null).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("java.awt.Rectangle");
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.awt.Rectangle", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = "xA9h]KAMR|$";
      String string1 = "clone";
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("xA9h]KAMR|$");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Map<String, Field> map0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.loadClass("T<b$Nd >T");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class2);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isGenericParamType(class2);
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("T<b$Nd >T", (ClassLoader) aSMDeserializerFactory0.classLoader);
      TypeUtils.createCollection(class1);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      TypeUtils.isGenericParamType(type0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("java.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.loadClass("T<b$Nd >T");
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-10);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<?> class1 = TypeUtils.loadClass("java.awt.Rectangle");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(type0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation(class0, class2);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isGenericParamType((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, type0, type0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = (byte) (-105);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.util.OptionalInt", class0, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.util.OptionalInt -> java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-116);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getClass((Type) class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Class<Insets> class1 = Insets.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy1);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.clearClassMapping();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<Boolean> class2 = Boolean.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis((-1L));
      JobAttributes jobAttributes0 = new JobAttributes();
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '4';
      charArray0[2] = '~';
      charArray0[3] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("~ u'r>h7i", (ClassLoader) aSMDeserializerFactory0.classLoader);
      TypeUtils.isNumber("8[MD@>G3S#pI*?");
      JobAttributes jobAttributes1 = new JobAttributes(jobAttributes0);
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jobAttributes1, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TypeUtils.loadClass("</}EW i");
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.castToString(weakHashMap0);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(".000000");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      ParserConfig.getFieldFromCache("V}y0M?9)", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("port is not int", class0, class0, class1, (Field) null, (-1721179179), (-1721179179), (-1721179179));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      weakHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", (Field) null);
      TypeUtils.loadClass("port is not int");
      TypeUtils.castToByte((Object) null);
      Properties properties0 = new Properties();
      AtomicInteger atomicInteger0 = new AtomicInteger((-1721179179));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1721179179
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      System.setCurrentTimeMillis((-128L));
      TypeUtils.fnv1a_64_lower("-m(+5 -VVJVJb");
      // Undeclared exception!
      try { 
        JSON.parseObject("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : has
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("org.springframework.security.core.authority.SimpleGrantedAuthority", true);
      classLoader0.setPackageAssertionStatus("Ljava.awt.Font", false);
      classLoader0.setClassAssertionStatus("true", true);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader1.getParent();
      classLoader0.setPackageAssertionStatus("true", false);
      classLoader0.setDefaultAssertionStatus(true);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("!6x~", classLoader0, true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("true", "!6x~");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "r");
      LinkedHashMap<PropertyNamingStrategy, ThrowableDeserializer> linkedHashMap0 = new LinkedHashMap<PropertyNamingStrategy, ThrowableDeserializer>();
      TypeUtils.castToBoolean("true");
      Properties properties0 = new Properties();
      TypeUtils.castToChar((Object) null);
      TypeUtils.getCollectionItemType((Type) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.isGenericParamType((Type) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashtable0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Locale.forLanguageTag("port is not int");
      int int0 = (-2046801569);
      Integer integer0 = new Integer((-2046801569));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -2046801569
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Double> class0 = Double.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = File.pathSeparator;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      TypeUtils.loadClass(":");
      LinkedHashMap<RenderingHints, JSONPDeserializer> linkedHashMap0 = new LinkedHashMap<RenderingHints, JSONPDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("toS");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap.newKeySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      DecimalFormat decimalFormat0 = new DecimalFormat("rw387&#PU<K4a&\"F");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Byte byte0 = new Byte((byte) (-12));
      ClassLoader.getSystemClassLoader();
      Hashtable<IllegalAccessException, MockJapaneseDate> hashtable0 = new Hashtable<IllegalAccessException, MockJapaneseDate>();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ConcurrentHashMap<RenderingHints.Key, SQLDataException> concurrentHashMap1 = new ConcurrentHashMap<RenderingHints.Key, SQLDataException>();
      RenderingHints renderingHints0 = new RenderingHints(concurrentHashMap1);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Long> class1 = Long.TYPE;
      TypeUtils.getCollectionItemType(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("toS");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("toS", weakHashMap0);
      weakHashMap0.put("V)H!Jpm7zA%", (Field) null);
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap.newKeySet();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("V)H!Jpm7zA%");
      mockIllegalAccessException0.toString();
      LinkedHashMap<Double, Object> linkedHashMap0 = new LinkedHashMap<Double, Object>();
      AtomicInteger atomicInteger0 = new AtomicInteger((-63161284));
      TypeUtils.castToShort(atomicInteger0);
      NumberFormatException numberFormatException0 = new NumberFormatException("toS");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(numberFormatException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Function<Object, SqlDateDeserializer> function0 = (Function<Object, SqlDateDeserializer>) mock(Function.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap.newKeySet();
      BiFunction<Object, Object, SqlDateDeserializer> biFunction0 = (BiFunction<Object, Object, SqlDateDeserializer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues((-1721179179L), (Function<? super String, ? extends SqlDateDeserializer>) function0, (BiFunction<? super SqlDateDeserializer, ? super SqlDateDeserializer, ? extends SqlDateDeserializer>) biFunction0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      Short short0 = new Short((short) (-2069));
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      Class<Short> class1 = Short.TYPE;
      typeArray0[8] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[1]);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) short0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      AtomicLong atomicLong0 = new AtomicLong((-1721179179L));
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : -1721179179
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      hashMap0.put("HeD~B<", "HeD~B<");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("HeD~B<", "oracle.sql.TIMESTAMP");
      hashMap0.put("LK", "~`*sddi");
      identityHashMap0.entrySet();
      ParserConfig.getFieldFromCache("serialVersionOnStream", identityHashMap0);
      java.util.IdentityHashMap<String, Field> identityHashMap1 = new java.util.IdentityHashMap<String, Field>();
      identityHashMap1.put("HeD~B<", (Field) null);
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.toLocale("serialVersionOnStream");
      TypeUtils.loadClass("LK");
      Class<VerifyError> class1 = VerifyError.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Long long0 = new Long(1099511628211L);
      Long.sum(1L, 1099511628211L);
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      parserConfig0.checkAutoType((String) null, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemClass(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("(-C,a?\"");
      TypeUtils.castToDouble((Object) null);
      Class<?> class2 = TypeUtils.getClass(type0);
      TypeUtils.getGenericParamType(class2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, ":; UCi\"F`O", 169, illegalThreadStateException0);
      ParserConfig parserConfig1 = new ParserConfig();
      TypeUtils.cast((Object) null, type0, parserConfig1);
      TypeUtils.clearClassMapping();
      TypeUtils.getClassFromMapping("com.alibaba.fastjson.util.TypeUtils");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig2 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        Time.valueOf("Nav*,C}}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TypeUtils.loadClass("</}EW i");
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"Qa$$}", "getSuppressed", 201);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("clone", "`{.J4:#x&[;6K#w", (-2737), sQLIntegrityConstraintViolationException0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("3@5U:Dec-\"1{<9(|<?");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dateFormatSymbols0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      String string0 = "!6x~";
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ClassLoader.getSystemClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("", "");
      int int0 = 977;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(977, "Ljava.awt.Font");
      TypeUtils.castToChar("");
      Properties properties0 = new Properties();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Byte byte0 = new Byte((byte)36);
      Class<Currency> class0 = Currency.class;
      TypeUtils.getSerializeFeatures(class0);
      properties0.put(sQLInvalidAuthorizationSpecException0, byte0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {java.sql.SQLInvalidAuthorizationSpecException=36}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "CNA%";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CNA%");
      TypeUtils.unwrapOptional((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TypeUtils.castToChar((Object) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.getCollectionItemClass(class0);
      ArrayList<NullPointerException> arrayList0 = new ArrayList<NullPointerException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
