/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:25:43 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileDescriptor;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.ByteBuffer;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("XXUmXV{4");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H%0q[wnS2E7Mdd{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", true);
      Feature feature0 = Feature.SupportAutoType;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3;+bJhY%&#");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(684);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9@d$@iFu 2~kDasi", parserConfig0, 4298);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      Feature feature0 = Feature.IgnoreNotMatch;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("To)K]`", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : To)K]`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("expect ':' at ", parserConfig0);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3");
      Time time0 = new Time(0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) mockMinguoDate0);
      assertNotNull(parseContext0);
      
      defaultJSONParser0.resolveReference("3");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'R['()Mi,");
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getObject("'R['()Mi,");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 4, json : 'R['()Mi,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rOacjIkIfq7{|44B9,", 2047);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("XXUmXV{4");
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : XXUmXV{4
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+~RP(:~i^oc");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, json : +~RP(:~i^oc
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("XTRg!Mmo0-", parserConfig0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : XTRg!Mmo0-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      classLoader0.getParent();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[I");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@7", parserConfig0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @7
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bPP0bTF8/zm#RY,X ", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeSupport");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom((-3286));
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("PZxbh", parserConfig0, (-3286));
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      Locale locale0 = Locale.FRENCH;
      JSON.defaultLocale = locale0;
      Class<Dimension> class0 = Dimension.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 549);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = JSON.defaultLocale;
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance(locale0);
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, position at ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(breakIterator0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<T", parserConfig0);
      Stack<MockDateFormat> stack0 = new Stack<MockDateFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5;{cDp%j\"Bf", parserConfig0);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,", (-3032));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseKey();
      HttpCookie httpCookie0 = new HttpCookie("Q[", "@7");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONScanner0, (Object) httpCookie0);
      defaultJSONParser0.setContext(parseContext0);
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.popContext();
      defaultJSONParser0.getResolveTaskList();
      Integer integer0 = new Integer(2);
      defaultJSONParser0.setContext(parseContext0, (Object) integer0, (Object) httpCookie0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(integer0, "'Q['()M?,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ), info : pos 5, json : 'Q['()M?,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("qfa:KgH|d");
      FieldPosition fieldPosition0 = new FieldPosition(2043);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("qfa:KgH|d");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-3032), 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":qjJK'_|Rb%l", parserConfig1);
      Byte.toUnsignedInt((byte)91);
      defaultJSONParser0.getExtraProcessors();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,", (-3032));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseKey();
      HttpCookie httpCookie0 = new HttpCookie("Q[", "@7");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONScanner0, (Object) httpCookie0);
      defaultJSONParser0.setContext(parseContext0);
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(11, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ), actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TE", parserConfig0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 2434);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "RFzX");
      defaultJSONParser0.getContext();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.setContext((ParseContext) null);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ao'z$R!0C'w", parserConfig0, (-392));
      ParseContext parseContext0 = defaultJSONParser0.context;
      Point point0 = new Point();
      defaultJSONParser0.setContext((Object) "ao'z$R!0C'w", (Object) parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeAccept");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9+9'\"");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyProcessable0).toString();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual int, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 2432);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setResolveStatus((-552));
      PageAttributes pageAttributes0 = new PageAttributes();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.util.Collections$EmptyMap");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(1, jSONLexer0.token());
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = ':';
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 2);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0, (Object) mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@76b5fbb2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q'()M?,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q'()M?,");
      defaultJSONParser0.resolveReference("~a2oaH");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q['()M?,");
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getDateFormat();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      defaultJSONParser0.getDateFormat();
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "Q[");
      assertNull(httpCookie0.getDomain());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3");
      defaultJSONParser0.getContext();
      Time time0 = new Time(0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parse((Object) list0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) time0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 00:00:00
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      Locale locale0 = Locale.FRENCH;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      JSON.defaultLocale = locale0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("S", parserConfig0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q[')M,", (-3034));
      jSONScanner0.setTimeZone((TimeZone) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q[')M,");
      String string0 = File.separator;
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getDateFormat();
      Dimension dimension0 = new Dimension(0, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : 'Q[')M,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.getDateFormat();
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(9);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":qjJK'_|Rb%l", parserConfig0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :qjJK'_|Rb%l
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,", (-3032));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q['()M?,");
      List<ExtraProcessor> list0 = new Vector<ExtraProcessor>();
      MockDateFormat.getDateInstance(1);
      MessageFormat messageFormat0 = new MessageFormat("'Q['()M?,");
      messageFormat0.applyPattern("null");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONScanner0, (Object) "null");
      Type[] typeArray0 = new Type[1];
      defaultJSONParser0.getDateFomartPattern();
      typeArray0[0] = null;
      defaultJSONParser0.getObject("");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.parse((Object) parseContext0);
      HashMap<Insets, Boolean> hashMap0 = new HashMap<Insets, Boolean>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 5, json : 'Q['()M?,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q['()M?,");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getExtraProcessors();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      String string0 = File.separator;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : 'Q['()M?,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q['()M?,");
      defaultJSONParser0.getExtraProcessors();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Q['()M?,");
      String string0 = File.pathSeparator;
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 2434);
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getDateFormat();
      ParseContext parseContext0 = defaultJSONParser0.context;
      Feature feature0 = Feature.AllowComment;
      defaultJSONParser0.setContext((ParseContext) null, (Object) feature0, (Object) "");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = new Object();
      defaultJSONParser0.setContext((Object) null, (Object) "");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig1, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q'()M?,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q'()M?,");
      TreeMap<Date, MockMinguoDate> treeMap0 = new TreeMap<Date, MockMinguoDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 3, json : 'Q'()M?,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,", (-3032));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.close();
      Object object0 = new Object();
      Class<Byte> class0 = Byte.TYPE;
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 4, json : 'Q['()M?,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "'Q['()M?,";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q['()M?,");
      defaultJSONParser0.handleResovleTask("'Q['()M?,");
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("34qN9^&DRt#B4ci`?", parserConfig0, 2434);
      defaultJSONParser0.parseKey();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.getDateFormat();
      HttpCookie httpCookie0 = new HttpCookie("@7", "v,\"_");
      defaultJSONParser0.setContext((Object) httpCookie0, (Object) "@7");
      defaultJSONParser0.setContext((ParseContext) null);
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(11, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect ), actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      jSONScanner0.np = 44;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Object object0 = new Object();
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",O#V3");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",O#V3");
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ,O#V3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[F");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.parseKey();
      HttpCookie httpCookie0 = new HttpCookie("Q[", "Q[");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONScanner0, (Object) httpCookie0);
      defaultJSONParser0.popContext();
      parseContext0.toString();
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("Q[", parserConfig0);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",O#V3", parserConfig0);
      Stack<BigInteger> stack0 = new Stack<BigInteger>();
      defaultJSONParser0.checkListResolve(stack0);
      defaultJSONParser0.getSymbolTable();
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q['()M?,", parserConfig0);
      TreeMap<DateFormatSymbols, Byte> treeMap0 = new TreeMap<DateFormatSymbols, Byte>();
      defaultJSONParser0.checkMapResolve(treeMap0, aSMClassLoader0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,", (-3032));
      jSONScanner0.setTimeZone((TimeZone) null);
      jSONScanner0.token = 9;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport");
      ParserConfig parserConfig0 = new ParserConfig();
      Locale locale0 = Locale.FRENCH;
      locale0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      aSMDeserializerFactory0.classLoader.getParent();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect (, actual string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[F", (-3032));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [F
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.getContext();
      Time time0 = new Time(0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) time0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", 37);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getResolveTaskList();
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) null);
      Dimension dimension0 = new Dimension(70, 163);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ClassLoader.getSystemClassLoader();
      Object object0 = new Object();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[I", parserConfig0);
      classLoader0.getParent();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : 0
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getExtraProcessors();
      ParseContext parseContext0 = defaultJSONParser0.context;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) null);
      Dimension dimension0 = new Dimension(70, 164);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "7UTi";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7UTi");
      Type[] typeArray0 = new Type[0];
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl(typeArray0, class1, class1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support type com.alibaba.fastjson.util.ParameterizedTypeImpl@441
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.ch = '{';
      defaultJSONParser0.parseKey();
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      identityHashMap0.put(jSONScanner0, dateFormatSymbols0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte)0;
      DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null, (Object) byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : )pos 5, json : 'Q['()M?,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Q['()M?,", (-3032));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.ch = '{';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      defaultJSONParser0.parseKey();
      ClassLoader.getSystemClassLoader();
      ParseContext parseContext0 = defaultJSONParser0.context;
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      identityHashMap0.put(jSONScanner0, dateFormatSymbols0);
      DateFormatSymbols.getInstance();
      ByteBuffer.allocate(2188);
      Hashtable<MockJapaneseDate, MockMinguoDate> hashtable1 = new Hashtable<MockJapaneseDate, MockMinguoDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.checkListResolve(list0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      IdentityHashMap<DateFormatSymbols, Method> identityHashMap1 = new IdentityHashMap<DateFormatSymbols, Method>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      identityHashMap1.put(dateFormatSymbols0, (Method) null);
      BiFunction<Object, Object, Method> biFunction0 = (BiFunction<Object, Object, Method>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap1, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "'Q['()M?,";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q['()M?,");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.symbolTable.addSymbol("'Q['()M?,", 0, 0, 0);
      String string1 = "fastjson.parser.autoTypeSuppor";
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSuppor", "'Q['()M?,");
      defaultJSONParser0.getExtraTypeProviders();
      TreeMap<MockGregorianCalendar, MockSimpleDateFormat> treeMap0 = new TreeMap<MockGregorianCalendar, MockSimpleDateFormat>();
      defaultJSONParser0.getExtraTypeProviders();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("write clob error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - (, info : pos 4, json : 'Q['()M?,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = File.separator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MessageFormat messageFormat0 = new MessageFormat("n$oO");
      PageAttributes pageAttributes0 = new PageAttributes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      ClassLoader classLoader1 = classLoader0.getParent();
      stringArray0[2] = "n$oO";
      stringArray0[5] = "n$oO";
      stringArray0[4] = "'Q[')M,";
      stringArray0[5] = "'Q[')M,";
      stringArray0[6] = "/";
      stringArray0[5] = "/";
      classLoader1.clearAssertionStatus();
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ", 11);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Obg");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'Q[')M,", jSONReaderScanner0, parserConfig0);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'Q['()M?,");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java/lang/Long");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9.");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      defaultJSONParser0.config(feature0, false);
      defaultJSONParser0.parseKey();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeSet<Annotation> treeSet0 = new TreeSet<Annotation>();
      Double double0 = new Double(0);
      parserConfig0.setAutoTypeSupport(false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) treeSet0, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName 0.0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.getContext();
      Time time0 = new Time(0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Sc9qa3pU]Io", 1443168256);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.parseKey();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("'Q[')M,", parserConfig0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Dimension dimension0 = new Dimension(0, (-2491));
      Insets insets0 = new Insets(112, 4412, 73, (-2491));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, json : Sc9qa3pU]Io
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      defaultJSONParser0.getExtraProcessors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "{");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) defaultJSONParser_ResolveTask0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 1, json : {
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}|W^tak");
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      IdentityHashMap<DateFormatSymbols, Method> identityHashMap1 = new IdentityHashMap<DateFormatSymbols, Method>();
      LinkedHashMap<MockThaiBuddhistDate, Point> linkedHashMap0 = new LinkedHashMap<MockThaiBuddhistDate, Point>();
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) "}|W^tak");
      assertEquals(0, linkedHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";tKY:D^kB");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;tKY:D^kB
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ja-JP");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanDate(')');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Stack<Time> stack0 = new Stack<Time>();
      defaultJSONParser0.checkListResolve(stack0);
      defaultJSONParser0.getResolveStatus();
      defaultJSONParser0.getLexer();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(stack0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "'Q'()M?,";
      JSONScanner jSONScanner0 = new JSONScanner("'Q'()M?,");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'b';
      charArray0[2] = '';
      charArray0[3] = 'x';
      charArray0[4] = '!';
      charArray0[5] = '!';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 36);
      defaultJSONParser0.getInput();
      Class<JobAttributes> class0 = JobAttributes.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual string
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("''()M?,");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("''()M?,");
      TreeMap<Date, MockMinguoDate> treeMap0 = new TreeMap<Date, MockMinguoDate>();
      defaultJSONParser0.parseObject((Map) treeMap0, (Object) treeMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("''()M?,", parserConfig0);
      Class<Point> class0 = Point.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("''()M?,", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. ''()M?,
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      System.setCurrentTimeMillis((-9007199254740991L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getObject("gb%(^YW8Z 7_hM9");
      defaultJSONParser0.getResolveTaskList();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      parserConfig0.initJavaBeanDeserializers(classArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("{\"$ref\":\"@\"}", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. {\"$ref\":\"@\"}
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.getParent();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[I", parserConfig0);
      ExtraProcessor extraProcessor0 = mock(ExtraProcessor.class, new ViolatedAssumptionAnswer());
      linkedList0.add(extraProcessor0);
      ClassLoader.getSystemClassLoader();
      Class<Float> class0 = Float.TYPE;
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{");
      Stack<ExtraProcessor> stack0 = new Stack<ExtraProcessor>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "|OfL,#3i?7");
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask1 = new DefaultJSONParser.ResolveTask((ParseContext) null, "Yy");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      ByteBuffer.allocate(0);
      Class<Float> class0 = Float.TYPE;
      Object object0 = new Object();
      defaultJSONParser0.accept(12, 1946);
      defaultJSONParser0.checkListResolve(linkedList0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = File.separator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MessageFormat messageFormat0 = new MessageFormat("n$oO");
      PageAttributes pageAttributes0 = new PageAttributes();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      Hashtable<JSONScanner, DateFormatSymbols> hashtable0 = new Hashtable<JSONScanner, DateFormatSymbols>();
      DateFormatSymbols.getInstance();
      IdentityHashMap<JSONScanner, DateFormatSymbols> identityHashMap0 = new IdentityHashMap<JSONScanner, DateFormatSymbols>();
      String[] stringArray0 = new String[10];
      stringArray0[7] = "/";
      stringArray0[1] = "/";
      classLoader0.getParent();
      ClassLoader classLoader1 = classLoader0.getParent();
      stringArray0[2] = "n$oO";
      stringArray0[5] = "n$oO";
      stringArray0[4] = "'Q[')M,";
      stringArray0[5] = "'Q[')M,";
      stringArray0[6] = "/";
      classLoader1.clearAssertionStatus();
      stringArray0[5] = "/";
      classLoader1.clearAssertionStatus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", info : ");
      defaultJSONParser0.setResolveStatus(11);
      DateFormatSymbols.getInstance();
      IdentityHashMap<Rectangle, BigInteger> identityHashMap1 = new IdentityHashMap<Rectangle, BigInteger>();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap1, (Object) numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : , info : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      System.setCurrentTimeMillis((-9007199254740991L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"@\"}");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      Byte.toUnsignedInt((byte)91);
      LinkedList<ExtraProcessor> linkedList0 = new LinkedList<ExtraProcessor>();
      Object object0 = new Object();
      Boolean.valueOf("hV!e5q@ 0LfS");
      Feature feature0 = Feature.AllowISO8601DateFormat;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1618393472), (-287), 58, 762, (-1618393472));
      Locale locale0 = Locale.JAPANESE;
      BreakIterator.getLineInstance(locale0);
      JSON.DEFAULT_TYPE_KEY = "";
      defaultJSONParser0.parseObject((Object) feature0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : {\"$ref\":\"@\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
