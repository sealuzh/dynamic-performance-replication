/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:57:15 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(6.157134976092493E-5);
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      assertEquals(6.157256326580875E-5, rationalNumber0.doubleValue(), 0.01);
      assertEquals(16241, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2.147483647E9, double0, 0.01);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-2208), (-2208));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(19, 19);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836477722518E9);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2.147483647E9, double0, 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(14411L, 14411L);
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      assertEquals(1, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483596064241E9);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2.147483596E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.6407398106821347E-8);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals("1/60948116 (0)", string1);
      assertEquals(1.6407398056405877E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-132.6));
      String string0 = rationalNumber0.toString();
      assertEquals("-663/5 (-132.6)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3526.3636363636365);
      assertEquals(38790, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), 431);
      String string0 = rationalNumber0.toString();
      assertEquals("-1/431 (-0.002)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      String string0 = rationalNumber1.toString();
      assertEquals(0, rationalNumber0.numerator);
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483657982051E9));
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-2.147483647E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1316.005556782687);
      rationalNumber0.longValue();
      rationalNumber0.negate();
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1316L, 0L);
      // Undeclared exception!
      try { 
        rationalNumber1.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483675L, 2147483675L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483675L), (-2147483675L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483675L));
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      String string1 = rationalNumber1.toDisplayString();
      assertEquals(4.656612931624311E-10, rationalNumber1.doubleValue(), 0.01);
      assertEquals("0", string1);
      
      rationalNumber0.floatValue();
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      rationalNumber0.floatValue();
      int int0 = rationalNumber2.intValue();
      assertEquals((-1), int0);
      assertEquals((-1.0F), rationalNumber2.floatValue(), 0.01F);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483679L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483679, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483702L, 2147483702L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483702L);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      String string1 = rationalNumber1.toDisplayString();
      assertEquals(0L, rationalNumber1.longValue());
      assertEquals("-0", string1);
      assertEquals((-4.65661299017123E-10), rationalNumber1.doubleValue(), 0.01);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, double0, 0.01);
  }
}
