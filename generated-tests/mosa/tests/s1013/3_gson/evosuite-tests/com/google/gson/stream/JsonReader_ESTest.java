/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:38:39 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uFNYtQW^??q");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t R^L%lAtw1EGJT?F$");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uFNYtQW^??q");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape sequence");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/_K46J-q_Tl5A");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected END_ARRAY but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape sequence");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o)");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u5-BprQTXmth");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.read();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u5-BprQTXmth");
      stringReader0.read();
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">`^oc");
      StringReader stringReader1 = new StringReader(">`^oc");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUMBER");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      StringReader stringReader0 = new StringReader("qs;s^JbIe");
      StringReader stringReader1 = new StringReader("qs;s^JbIe");
      char[] charArray0 = new char[5];
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'I';
      charArray0[4] = 'E';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("TC!sEw9jdw6?~E44");
      stringReader1.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader2);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o)");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("F}ghn~-tX");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z-T/O1j");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#Q9 'pyO_%+n}>&W");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      PushbackReader pushbackReader1 = new PushbackReader(stringReader0);
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertNotNull(pushbackReader1);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("6s#Q");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">`^oc");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("n,");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      int int0 = stringReader1.read();
      assertEquals(110, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      pushbackReader0.unread(91);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.beginArray();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(17, int0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u5-BprQTXmth");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = (-4);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.nextInt();
      assertEquals(9, int0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uaNYt:qW^??q");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L^o)");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = (-357);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = 1901;
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!6");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      int int0 = jsonReader1.peeked;
      assertEquals(0, int0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("!6", string0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotNull(string0);
      assertNotSame(jsonReader0, jsonReader1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("e{");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e{");
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u5-BprQTXmth");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 2;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = 't';
      charArray0[3] = 'm';
      charArray0[4] = 't';
      charArray0[5] = 'm';
      charArray0[6] = 't';
      charArray0[7] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {';', ';', 't', 'm', 't', 'm', 't', 'm'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {';', ';', 't', 'm', 't', 'm', 't', 'm'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {';', ';', 't', 'm', 't', 'm', 't', 'm'}, charArray0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {';', ';', 't', 'm', 't', 'm', 't', 'm'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jsonReader0.peeked = 41;
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(10, int0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z-T/O1j");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!6");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u5-BprQTXmth");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 2;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Expected END_ARRAY but was ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4hnxe&6vs`{x:=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      boolean boolean0 = stringReader1.ready();
      assertTrue(boolean0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uaNYt:qW^??q");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      stringReader0.reset();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uaNYt:qW^??q");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("EX9^7yINf'{,*");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[3] = 'w';
      charArray0[4] = '9';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("NuR(l0:L");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("NAME");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'9', '1'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'9', '1'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fb#4");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.doPeek();
      assertEquals(10, int0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
      
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u5-BprQTXmth");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 2;
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      pushbackReader0.unread(91);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 6 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.nextNull();
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      double double0 = jsonReader0.nextDouble();
      assertEquals(9.0, double0, 0.01);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      try { 
        jsonReader1.peek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L^o)");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      StringReader stringReader1 = new StringReader("L^o)");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      pushbackReader0.unread(41);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader1, jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      StringReader stringReader0 = new StringReader("'@i9wA");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a string but was ");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      StringReader stringReader1 = new StringReader("4hnxe&6vs`{x:=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_OBJECT at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)100;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)123, (byte)2, (byte)70, (byte)84, (byte)84, (byte)125, (byte)100}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)10, (byte)123, (byte)2, (byte)70, (byte)84, (byte)84, (byte)125, (byte)100}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(inputStreamReader0);
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)10, (byte)123, (byte)2, (byte)70, (byte)84, (byte)84, (byte)125, (byte)100}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 2 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotNull(jsonReader2);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader2);
      assertNotSame(jsonReader1, jsonReader0);
      
      jsonReader1.peeked = 13;
      assertTrue(jsonReader1.isLenient());
      
      jsonReader2.setLenient(true);
      assertTrue(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotSame(jsonReader2, jsonReader1);
      assertNotSame(jsonReader2, jsonReader0);
      
      int int0 = jsonReader2.nextInt();
      assertEquals(9, int0);
      assertTrue(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotSame(jsonReader2, jsonReader1);
      assertNotSame(jsonReader2, jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was NAME at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("My&[9LymT^m\"LH");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4hnxe&6vs`{x:=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader0.reset();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#Q9 'pyO_%+n}>&W");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      PushbackReader pushbackReader1 = new PushbackReader(pushbackReader0);
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertNotNull(pushbackReader1);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertNotNull(jsonReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(pushbackReader0, pushbackReader1);
      assertNotSame(pushbackReader1, pushbackReader0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("1", string0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertNotNull(string0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(pushbackReader0, pushbackReader1);
      assertNotSame(pushbackReader1, pushbackReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 18 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      pushbackReader0.unread(91);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z-T/O1j");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9 #.");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9 #.");
      assertFalse(boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = jsonReader0.nextInt();
      assertEquals(9, int0);
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.reset();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("NULL");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NULL at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("My&[9LymT^m\"LH");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      stringReader0.reset();
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9 #.");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9 #.");
      assertFalse(boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      long long0 = jsonReader0.nextLong();
      assertEquals(9L, long0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a double but was ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 1;
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected a double but was ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.peeked = 1;
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected ':' at line 1 column 11 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("My&[9LymT^m\"LH");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4hnxe&6vs`{x:=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader0.reset();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?MBXh)H6;6,7/\"$b");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("ZAf,");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">`^oc");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("n,");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = jsonReader0.isLenient();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9 #.");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9 #.");
      assertFalse(boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertEquals(9.0, double0, 0.01);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=_@J_y.L3uR-}Ei<");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u5-BprQTXmth");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("^}");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BEGIN_ARRAY");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 34);
      assertNotNull(pushbackReader0);
      
      pushbackReader0.unread(34);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BEGIN_ARRAY");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 34);
      assertNotNull(pushbackReader0);
      
      pushbackReader0.unread(34);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\u0005Ei~-|%kdC6f");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      int int0 = stringReader0.read();
      assertEquals(5, int0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^^");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Me!<gB]vdbXC?[fx#f");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jsonReader1, jsonReader0);
      
      jsonReader1.skipValue();
      assertTrue(jsonReader1.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jsonReader1, jsonReader0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      charArray0[3] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '+', 'R', 'L'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'9', '+', 'R', 'L'}, charArray0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      char[] charArray0 = new char[2];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[0] = 'e';
      charArray0[1] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'e', '~'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertArrayEquals(new char[] {'e', '~'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JsonReader jsonReader1 = new JsonReader(lineNumberReader0);
      assertArrayEquals(new char[] {'e', '~'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotNull(jsonReader1);
      
      jsonReader1.setLenient(true);
      assertArrayEquals(new char[] {'e', '~'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      long long0 = jsonReader0.nextLong();
      assertEquals(9L, long0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
  }
}
