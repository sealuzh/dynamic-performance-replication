/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:24:01 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedOutputStream;
import java.lang.reflect.Member;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[18];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(18, int0);
      
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertEquals(256, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(267, 1897);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Member.PUBLIC;
      int int1 = Pattern.LITERAL;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1897
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-2445L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-15), (-479));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -15
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-222));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -222
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(349.6228F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.Byte");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(1153.0594938643);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = constantPoolGen0.toString();
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals("1)CONSTANT_Double[6](bytes = 1153.0594938643)\n", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantLong constantLong0 = new ConstantLong((-20L));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      assertEquals(6, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
      
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      assertEquals(256, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("A4S?ysL<U']DX gc7U");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[2] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-167), (-2692));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[5] = (Constant) constantMethodHandle1;
      constantPoolGen0.addDouble(0.0);
      constantUtf8_0.copy();
      constantPoolGen0.lookupFieldref("RpJV\"(U/x>F##*`HQ BQ", "&", "2Rd*fiEy");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = -167, reference_index = -2692)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString(0);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "`";
      constantPoolGen0.lookupUtf8("`");
      constantPoolGen0.size = (-1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref("m .Xlu9%CONSTANT_InterfaceMethodref", "`", "`");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2127), (-2127));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(9);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat(9);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupFloat(9);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(317, constantMethodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 317
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1);
      String string0 = "w";
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("w", "\nAttribute(s) = ", "7KVRNJdAnKY0");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("[rc", "[rc", "[rc");
      constantPoolGen0.addInteger((-608));
      int int0 = Double.SIZE;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1167));
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(7);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(8, (-767));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -767
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger((-3309));
      int int0 = Character.SIZE;
      int int1 = constantPoolGen0.addDouble(16);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(746L);
      constantPoolGen0.addInteger(1);
      int int0 = constantPoolGen0.lookupMethodref("(=s&$", "(=s&$", "(=s&$");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFieldref("*N6g%CP!", "!#A5,&{@,Z{*c", "*N6g%CP!");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), (-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(57, 57);
      ConstantDouble constantDouble0 = new ConstantDouble(76);
      constantArray0[3] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Integer integer0 = new Integer(76);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = Member.DECLARED;
      int int1 = constantPoolGen1.lookupDouble((-417.703));
      assertEquals((-1), int1);
      
      int int2 = constantPoolGen1.addConstant(constantArray0[3], constantPoolGen0);
      assertEquals(5, constantPoolGen1.getSize());
      assertEquals(3, int2);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(254);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantInteger1.setBytes((-862));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(46, 0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(192, 192);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(192);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInteger(192);
      constantInteger0.setBytes(192);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(1, (-3309));
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen0.setConstant(7, constantInterfaceMethodref0);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("m(l]Zn", "m(l]Zn", "m(l]Zn");
      constantPoolGen0.lookupInteger((-3329));
      constantPoolGen0.addInterfaceMethodref("m(l]Zn", "m(l]Zn", "m(l]Zn");
      ConstantLong constantLong0 = new ConstantLong(4);
      constantPoolGen0.setConstant(239, constantLong0);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addClass((ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-1381));
      constantPoolGen0.lookupMethodref("'5)V&:N|sQm7rqC1ZB", "gGWt,4.,C", "gGWt,4.,C");
      constantPoolGen0.lookupInteger((-1));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2, 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JgLg=&&");
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      Integer integer0 = new Integer((-6028));
      Constant[] constantArray0 = new Constant[5];
      GETFIELD gETFIELD0 = new GETFIELD();
      ReferenceType referenceType0 = null;
      try {
        referenceType0 = new ArrayType("'5)V&:N|sQm7rqC1ZB", (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -1
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-641L));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      constantPoolGen0.addString("X\"NG2b('U%X\"NG2b('U");
      constantPoolGen0.addFloat((-1.0F));
      int int1 = constantPoolGen0.size;
      int int2 = Member.DECLARED;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1, 1);
      Constant[] constantArray0 = new Constant[2];
      int int3 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      AALOAD aALOAD0 = new AALOAD();
      aALOAD0.getType(constantPoolGen0);
      assertEquals(4, constantPoolGen0.getSize());
      
      int int4 = Member.DECLARED;
      constantPoolGen1.getConstantPool();
      assertEquals(4, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-1.0F));
      int int0 = Character.BYTES;
      constantPoolGen0.addFloat((-1.0F));
      int int1 = Double.MIN_EXPONENT;
      constantPoolGen0.lookupUtf8("7");
      constantPoolGen0.lookupNameAndType(" does not represent an ObjectType", "");
      constantPoolGen0.lookupClass("NdU5i7Et[");
      constantPoolGen0.getFinalConstantPool();
      int int2 = Pattern.LITERAL;
      int int3 = constantPoolGen0.lookupFieldref("|)+Jk5Ji%|)+Jk5Ji", "GJWN~H%2Z*", "GJWN~H%2Z*");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-1271.4553F));
      constantPoolGen0.addLong(1);
      int int0 = constantPoolGen0.lookupDouble((-1271.4553F));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.addLong((-1150L));
      constantPoolGen0.addDouble(0.0);
      constantPoolGen0.addFloat((-1150L));
      constantPoolGen0.addFloat(568.0F);
      int int0 = constantPoolGen0.lookupUtf8("Unknown constant type ");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupMethodref("lgQ6<m65#)", "lgQ6<m65#)", "lgQ6<m65#)");
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(174, 174);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger(174);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupInteger(174);
      constantInteger1.setBytes((-3309));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(1, 148);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(11, 1);
      ConstantInterfaceMethodref constantInterfaceMethodref3 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantInteger0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantFloat constantFloat0 = new ConstantFloat((-1865.1F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(228, 228);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      constantPoolGen0.addFloat(0);
      int int1 = constantPoolGen0.size;
      int int2 = Member.DECLARED;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(228, 0);
      int int3 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[1], constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 228, reference_index = 228)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Double.MAX_EXPONENT;
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, (String) null, "org.apache.commons.No.filefilter.SuffixFileFilter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFieldref("XEER#n31H1r,\"", "XEER#n31H1r,\"", "XEER#n31H1r,\"");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      int int0 = 174;
      ConstantClass constantClass0 = new ConstantClass(174);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-4194), (-4194));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(1366.9F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(4317);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4317
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.PUBLIC;
      constantPoolGen0.addFloat(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addClass("java.lang.Integer");
      Constant[] constantArray0 = new Constant[16];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, 5);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFloat cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = 0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantString constantString0 = new ConstantString(0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("' must be non-negatie. [Constraint y JstIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not hapen anyway.]", "' must be non-negatie. [Constraint y JstIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not hapen anyway.]", "' must be non-negatie. [Constraint y JstIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not hapen anyway.]");
      constantPoolGen0.lookupInteger((-3309));
      int int0 = constantPoolGen0.lookupClass("' must be non-negatie. [Constraint y JstIce as an analogon to the single-slot xLOAD/xSTORE instructions; may not hapen anyway.]");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1236L));
      constantPoolGen0.addClass("");
      constantPoolGen0.getSize();
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addMethodref("", "", "");
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1721, (-2130));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantMethodHandle0.toString();
      constantPoolGen0.lookupMethodref("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = -2130)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = -2130)", ")i4>-f<xS;qQ|");
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addString("pjn;(+^");
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodHandle0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = -2130)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong((-1L));
      int int0 = constantPoolGen0.lookupLong(11);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[7];
      ConstantLong constantLong0 = new ConstantLong(2288L);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.addConstant(constantLong0, constantPoolGen1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1633), (-1633));
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.toString();
      int int1 = constantPoolGen1.lookupFloat(0.0F);
      assertEquals(9, constantPoolGen1.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong((-1L));
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1, 1);
      constantMethodref0.setNameAndTypeIndex(997);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      String string0 = "56sA5*F[_AZ";
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 997
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger(461);
      ConstantInteger constantInteger1 = new ConstantInteger((-53));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      ConstantPool constantPool2 = constantPool1.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected constant type: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool2);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen0);
      constantPoolGen0.addInteger(461);
      constantPoolGen0.addUtf8("<return address>");
      constantPoolGen1.getFinalConstantPool();
      int int1 = constantPoolGen0.addInteger((-53));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      String string0 = "'(kg\\U8p\\$J-G)T";
      constantPoolGen0.addInterfaceMethodref("'(kgU8p$J-G)T", "'(kgU8p$J-G)T", "'(kgU8p$J-G)T");
      int int0 = Long.SIZE;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2798, 4);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(2798, 0);
      constantMethodref1.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      constantPoolGen0.getSize();
      int int1 = Pattern.UNICODE_CHARACTER_CLASS;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(891, (-981));
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2798
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      ConstantPool constantPool2 = constantPoolGen0.getConstantPool();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":@");
      constantPoolGen0.addNameAndType("zGm!m", "zGm!m");
      constantPoolGen0.toString();
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPoolGen0.addInteger(2);
      ConstantPool constantPool3 = new ConstantPool((Constant[]) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      constantPool2.copy();
      ConstantPool constantPool4 = new ConstantPool((Constant[]) null);
      ConstantPoolGen constantPoolGen2 = null;
      try {
        constantPoolGen2 = new ConstantPoolGen(constantPool4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      constantPoolGen0.addInteger(225);
      constantPoolGen0.addFieldref("XEER#n31H1r,\"", "XEER#n31H1r,\"", "XEER#n31H1r,\"");
      int int0 = Member.PUBLIC;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      String string1 = "Z!ZD'.fA!z";
      // Undeclared exception!
      try { 
        constantPoolGen1.addMethodref((String) null, (String) null, "Z!ZD'.fA!z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1721, (-2130));
      constantMethodHandle0.clone();
      constantMethodHandle0.toString();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = -2130)");
      String string0 = "pjn;(+^";
      int int0 = Long.SIZE;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[4] = (byte)2;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      constantPoolGen1.lookupFloat((byte)2);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addMethodref("%", ">j.G=mMzfPk,h]{3n", "%");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      assertEquals(14, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1721, 1721);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantMethodHandle0.toString();
      Boolean.valueOf("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      constantPoolGen0.addString("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      constantPoolGen0.getConstantPool();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      int int0 = Double.BYTES;
      PUSH pUSH0 = new PUSH(constantPoolGen0, "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instructionList0.forEach(consumer0);
      ObjectType objectType0 = Type.STRING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      stringArray0[1] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      stringArray0[2] = "K%oXETP";
      stringArray0[3] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      stringArray0[4] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      stringArray0[5] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      stringArray0[6] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      stringArray0[7] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      stringArray0[8] = "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)";
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen((byte) (-24), objectType0, objectType0.NO_ARGS, stringArray0, "Not allowed to create array with more dimensions ('", "Not allowed to create array with more dimensions ('", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 9
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("aQHQBQ");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = Character.MIN_CODE_POINT;
      constantPoolGen0.lookupString("aQHQBQ");
      assertEquals(3, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int2 = constantPoolGen2.lookupLong(2);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Member.DECLARED;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("#");
      int int1 = Long.SIZE;
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int3 = Character.MIN_CODE_POINT;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      constantPoolGen2.size = 1;
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen2);
      constantPoolGen2.lookupLong(1);
      int int4 = constantPoolGen0.lookupInterfaceMethodref("MmlmQ`,p1", "MmlmQ`,p1", "1)null\n2)null\n3)null\n4)null\n%(C<NHy5ZO");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mds7l_j~2FLM~y");
      String string0 = "lgQ6<m65\\#[)";
      constantPoolGen0.lookupMethodref("lgQ6<m65#[)", "lgQ6<m65#[)", "lgQ6<m65#[)");
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantLong constantLong0 = new ConstantLong(2930L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(47);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        BasicType.getType((byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 64
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "GIas%GIas";
      constantPoolGen0.addNameAndType("GIas%GIas", "GIas%GIas");
      constantPoolGen0.lookupNameAndType("GIas%GIas", "GIas%GIas");
      constantPoolGen0.lookupMethodref("Us", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721):CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721):CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)&CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721):il.append(_factory.createNewArray(:il.append(_factory.createNewArray(&il.append(_factory.createNewArray(%il.append(_factory.createNewArray(", "MB}f_F3I:D^k|%)");
      constantPoolGen0.addFloat(2);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(3175, 3175);
      constantMethodref0.toString();
      constantMethodref0.setClassIndex((-2197));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen1.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1721, 1721);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantMethodHandle0.toString();
      Boolean.valueOf("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      constantPoolGen0.addString("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[4] = (byte) (-13);
      constantPoolGen0.addInterfaceMethodref("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      constantPoolGen0.addMethodref("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPool0.copy();
      int int0 = Pattern.DOTALL;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen1.addFieldref("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-13), 1156);
      constantPoolGen0.adjustSize();
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantPoolGen1.lookupFieldref("CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)", "CONSTANT_MethodHandle[15](reference_kind = 1721, reference_index = 1721)");
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
