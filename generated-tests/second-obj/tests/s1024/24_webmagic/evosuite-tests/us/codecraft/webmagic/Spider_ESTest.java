/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:25:49 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/?j*}{JBlQ%-Rb");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      spider2.setExitWhenComplete(true);
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#wbLA^j!wg");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.stop();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = new Page();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("QVyZO[,[tzC'L", "'shxB;YMAK");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QVyZO[,[tzC'L");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider2.get("P.s");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request();
      Page.fail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(31, 40, 40, timeUnit0, synchronousQueue0, threadPoolExecutor_AbortPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 31);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Thread interrupted when sleep";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(86);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QVyZOD[,[tzCS'L");
      Spider spider0 = new Spider(simplePageProcessor0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Page.fail();
      spider0.isExitWhenComplete();
      spider0.getStatus();
      Spider.Status.fromValue((byte)0);
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(66);
      Spider spider2 = spider1.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("LL:l}zzxQpN[");
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(66, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider5 = spider4.setExecutorService(scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        spider5.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      spider0.getScheduler();
      spider0.getCollectorPipeline();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "03/#/";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("03/#/");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("03/#/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      spider0.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(3526);
      Page page0 = Page.fail();
      spider1.extractAndAddRequests(page0, false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      assertEquals(5, PriorityScheduler.INITIAL_CAPACITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("~5)ZsZJmG{\"in5){.!T");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("~5)ZsZJmG{\"in5){.!T");
      Spider spider1 = spider0.pipeline(filePipeline0);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      Spider spider3 = spider2.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider5 = spider4.setPipelines(linkedList0);
      spider5.getSite();
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("_zore");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("-ab");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      Request request0 = new Request("");
      request0.setUrl("");
      spider1.start();
      spider1.stop();
      Spider.Status.values();
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleAttributes();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request();
      Page page0 = new Page();
      Page.fail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      page0.setBytes(byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      spider0.checkIfRunning();
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      boolean boolean0 = spider1.isSpawnUrl();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.clearPipeline();
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "");
      request1.setBinaryContent(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("_cycle_tried_times", "");
      spider0.downloader(phantomJSDownloader0);
      spider0.stop();
      long long0 = spider2.getPageCount();
      assertEquals(0L, long0);
      
      spider2.sleep(200);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-931));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("QVyZOD[,[tzCS'L");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      spider0.getThreadAlive();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Page page1 = page0.setRawText("QVyZOD[,[tzCS'L");
      page1.setBytes(byteArray0);
      Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.runAsync();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(")");
      // Undeclared exception!
      try { 
        spider0.pipeline(jsonFilePipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request();
      Page page0 = new Page();
      Page.fail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      page0.setBytes(byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request();
      Page page0 = new Page();
      Page.fail();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      page0.setBytes(byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = request0;
      spider0.setUUID("_cycle_tried_times");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequest(linkedList0);
      FilePipeline filePipeline0 = new FilePipeline("_cycle_tried_times");
      Spider spider1 = spider0.pipeline(filePipeline0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">:iGS");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(">:iGS", (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.stop();
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider0.initComponent();
      spider0.setEmptySleepTime((-2288));
      Page page0 = new Page();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      page0.setBytes(byteArray0);
      spider1.close();
      page0.getJson();
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      spider0.isExitWhenComplete();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.getSpiderListeners();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "invalid regex");
      spider0.downloader(phantomJSDownloader0);
      page0.getTargetRequests();
      Spider spider2 = spider0.setExitWhenComplete(true);
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider1.startRequest(list0);
      // Undeclared exception!
      try { 
        spider2.thread((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":iGS");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":iGS", ":iGS");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.initComponent();
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":iGS";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.runAsync();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.clearPipeline();
      Request request0 = new Request("");
      request0.setUrl("");
      spider1.start();
      spider1.stop();
      Spider.Status.values();
      spider1.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      spider0.isExitWhenComplete();
      spider0.runAsync();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.getSpiderListeners();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "invalid regex");
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      List<Request> list0 = page0.getTargetRequests();
      spider2.startRequests = list0;
      Spider spider3 = spider0.setExitWhenComplete(true);
      spider3.clearPipeline();
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list1 = spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider1.startRequest(list1);
      // Undeclared exception!
      try { 
        spider3.thread((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":iGS");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":iGS", (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.stop();
      spider1.isExitWhenComplete();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Page page0 = new Page();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-2);
      page0.setBytes(byteArray0);
      page0.setBytes(byteArray0);
      Page.fail();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("w2lr");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      spider1.setEmptySleepTime((-1));
      spider0.getStartTime();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      spider0.isExitWhenComplete();
      spider0.runAsync();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.getSpiderListeners();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "invalid regex");
      spider0.downloader(phantomJSDownloader0);
      Request request0 = new Request();
      Spider spider2 = spider0.setExitWhenComplete(true);
      spider2.clearPipeline();
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) linkedTransferQueue0);
      spider1.startRequest(list0);
      // Undeclared exception!
      try { 
        spider2.thread((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Page page0 = new Page();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("dFOv*x8fF/>ut*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("dFOv*x8fF/>ut*", "m~VL.9EC[&<-");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("m~VL.9EC[&<-");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      priorityScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.stop();
      spider1.initComponent();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      Page page1 = new Page();
      Request request0 = new Request("m~VL.9EC[&<-");
      StringReader stringReader0 = new StringReader("");
      Object object0 = new Object();
      Request request1 = request0.putExtra("R6N", object0);
      request0.setPriority(0L);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":iGS");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":iGS", (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.stop();
      spider1.isExitWhenComplete();
      spider0.initComponent();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider0.initComponent();
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      Spider spider2 = spider0.setScheduler(priorityScheduler1);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader(":iGS", ":iGS");
      spider0.clearPipeline();
      spider1.setUUID("`M3DZu\",a~-d].");
      spider2.getThreadAlive();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      spider0.isExitWhenComplete();
      spider0.runAsync();
      Spider spider1 = spider0.setDownloader((Downloader) null);
      spider0.clearPipeline();
      String string0 = "&6#,~e";
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":iGS");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":iGS", ":iGS");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.stop();
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider0.initComponent();
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider1.startRequest((List<Request>) null);
      spider0.getScheduler();
      Spider spider3 = spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      spider3.addRequest(requestArray0);
      spider2.stop();
      assertFalse(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":iGS");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      spider0.isExitWhenComplete();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":iGS", ":iGS");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.stop();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.thread((ExecutorService) forkJoinPool0, 1689);
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider1.initComponent();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      phantomJSDownloader0.setRetryNum(2);
      Request request0 = new Request(":iGS");
      request0.getExtras();
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request0.setCharset("threadNum should be more than one!");
      request2.addHeader("threadNum should be more than one!", "_cycle_tried_times");
      Object object0 = new Object();
      Request request3 = request1.putExtra("_cycle_tried_times", object0);
      request3.setPriority((-1L));
      // Undeclared exception!
      try { 
        spider1.onSuccess(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("IHqfw2$FNQ^o/8f", "IHqfw2$FNQ^o/8f");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.setScheduler((Scheduler) null);
      spider2.stop();
      spider1.initComponent();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.setScheduler((Scheduler) null);
      spider3.isExitWhenComplete();
      spider3.getStatus();
      Spider.Status spider_Status0 = Spider.Status.Init;
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      spider2.setScheduler(priorityScheduler1);
      phantomJSDownloader0.setRetryNum((-1441));
      Page page0 = new Page();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("B=0[BTy1>&g$idS4");
      fileCacheQueueScheduler0.poll(spider1);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider4 = spider0.thread((ExecutorService) forkJoinPool0, 5);
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download((Request) null, (Task) spider4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":iGS");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":iGS", (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader(")j /gQ&Drs\"", (String) null);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.stop();
      spider2.isExitWhenComplete();
      spider2.initComponent();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setScheduler(priorityScheduler0);
      phantomJSDownloader0.setRetryNum(5);
      Request request0 = new Request("");
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request0.setExtras((Map<String, Object>) null);
      request0.setCharset("");
      request1.setCharset("");
      spider0.site = null;
      request2.setPriority(5);
      Spider spider3 = spider2.thread(5);
      spider1.run();
      spider3.setPipelines((List<Pipeline>) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "\\:iGS";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":iGS");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(":iGS", ":iGS");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.initComponent();
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      Request request0 = new Request("");
      Request request1 = request0.setUrl("innerHtml");
      spider0.getCollectorPipeline();
      request1.setPriority((-1333L));
      Request request2 = request0.setMethod("_cycle_tried_times");
      request2.setPriority(2305L);
      Spider spider3 = spider0.downloader(phantomJSDownloader0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider4 = spider2.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.setUUID(":iGS");
      Page page0 = Page.fail();
      Page.fail();
      page0.getTargetRequests();
      spider1.startRequest(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider5 = spider3.scheduler(fileCacheQueueScheduler0);
      spider5.run();
      int int0 = (-3);
      // Undeclared exception!
      try { 
        spider4.thread((-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
