/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:32:48 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1405.786);
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 2389.18782475;
      doubleArray0[8] = 4.2931324640000004E8;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3448.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      compressedVector0.iterator();
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(2, 2);
      CompressedVector.zero(576, 2);
      MockRandom mockRandom0 = new MockRandom();
      Vector.random(242, mockRandom0);
      compressedVector1.setAll(2389.18782475);
      assertEquals(2, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(817);
      compressedVector0.setAll(817);
      byte[] byteArray0 = compressedVector0.toBinary();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector.fromCollection(linkedList0);
      int int0 = 0;
      compressedVector0.swapElements(9, 0);
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      compressedVector1.mkString(numberFormat0, (String) null);
      compressedVector1.fold(vectorAccumulator0);
      compressedVector1.norm();
      int int1 = 573;
      double double0 = (-2894.483);
      compressedVector0.set(573, (-2894.483));
      CompressedVector compressedVector2 = CompressedVector.fromCSV("");
      // Undeclared exception!
      try { 
        compressedVector2.getOrElse(817, 573);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '817' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1519.5755067949312);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 279.94202784;
      doubleArray0[3] = 3302.754264;
      doubleArray0[4] = (-829.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.multiply(3302.754264);
      assertEquals(0.8, compressedVector1.density(), 0.01);
      
      compressedVector0.blankOfLength(124);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.add(193.928608);
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector0.swapElements(4, 124);
      compressedVector0.nonZeroAt(972);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 1348.0;
      doubleArray0[1] = (-3301.8000640792);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.blank();
      compressedVector0.copy();
      Float float0 = new Float((-3301.8000640792));
      compressedVector0.slice(2082408385, 2082408385);
      CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-611), 2082408385);
      compressedVector0.iterator();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)9;
      doubleArray0[6] = (double) (byte)127;
      byteArray0[4] = (byte) (-46);
      byteArray0[1] = (byte) (-9);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)127;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2920);
      compressedVector0.setAll(2920);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, (-794));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1647.395044482;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-4016.278211);
      doubleArray0[3] = 385.0;
      doubleArray0[4] = 16.0;
      doubleArray0[5] = 985.0607484735998;
      doubleArray0[6] = 235.1;
      doubleArray0[7] = 4359.742362067015;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector0.shuffle();
      compressedVector0.equals(vector0, (-3624.0));
      MockRandom mockRandom0 = new MockRandom();
      Vector vector1 = compressedVector0.multiply((-1838.14));
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      vector1.apply((VectorVectorOperation<Vector>) ooPlaceVectorsAddition0, vector0);
      // Undeclared exception!
      try { 
        Vector.random((-798), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      Integer.min((-2447), 3);
      Integer.min(1, 1);
      linkedList0.offer(integer0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(25, byteArray0.length);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.nonZeroAt((-2447));
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(25, byteArray0.length);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1401.0);
      doubleArray0[1] = 880.841876768789;
      doubleArray0[2] = (-214.00865);
      doubleArray0[3] = 672.3366186126858;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.manhattanNorm();
      compressedVector0.setAll((-214.00865));
      compressedVector0.set(1, 1920.75259);
      int int0 = 955;
      Locale locale0 = Locale.UK;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      locale0.clone();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat("iC<vg,-F|:QDyq.}\"[", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"iC<vg,-F|:QDyq.}\"[\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3700.59924816);
      doubleArray0[2] = 1060.545553;
      doubleArray0[4] = 2848.96208827425;
      doubleArray0[5] = (-3138.63);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(3430, 3);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1374.0;
      doubleArray0[1] = (-779.50893);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1209.45;
      doubleArray0[2] = (-1276.656906911296);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 2389.18782475;
      doubleArray0[8] = 4.2931324640000004E8;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3448.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      compressedVector0.iterator();
      CompressedVector compressedVector1 = CompressedVector.zero(2, 2);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1);
      linkedList0.add(short0);
      short short1 = (short) (-1904);
      Short short2 = new Short((short) (-1904));
      Short.toUnsignedInt((short)1466);
      Short.compare((short) (-1904), (short) (-1904));
      linkedList0.add(short2);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.nonZeroIterator();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte) (-85));
      Byte.toUnsignedInt((byte)38);
      linkedList1.offerLast(byte1);
      CompressedVector.fromCollection(linkedList1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((byte) (-85), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1348.0;
      doubleArray0[1] = (-3301.8000640792);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.blank();
      compressedVector0.copy();
      double double0 = new Float((-3301.8000640792));
      compressedVector0.slice(2082408385, 2082408385);
      CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-611), 3778);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1209.45;
      doubleArray0[2] = (-1276.656906911296);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 2389.18782475;
      doubleArray0[8] = 4.2931324640000004E8;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(8, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-4016.278211);
      doubleArray0[4] = 16.0;
      doubleArray0[5] = 985.0607484735998;
      doubleArray0[6] = 235.1;
      doubleArray0[7] = 4359.742362067015;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      boolean boolean0 = compressedVector0.equals((Vector) compressedVector1, (-3624.0));
      assertTrue(boolean0);
      assertEquals(0.625, compressedVector1.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.multiply((-1838.14));
      assertEquals(0.625, compressedVector2.density(), 0.01);
      
      compressedVector0.nonZeroIterator();
      assertFalse(compressedVector0.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3336);
      doubleArray0[1] = (double) (-3336);
      doubleArray0[2] = (double) 1;
      int[] intArray0 = new int[0];
      CompressedVector compressedVector0 = new CompressedVector(1, (-3336), doubleArray0, intArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      compressedVector0.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      compressedVector1.blankOfLength(1);
      compressedVector1.nonZeroAt(980);
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2462.8168498398118;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2462.8168498398118).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      int int0 = 898;
      compressedVector0.blankOfLength(898);
      CompressedVector.zero(898);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(898, (double) 898, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.sum();
      Vector.unit(961);
      compressedVector0.toSparseVector();
      compressedVector0.spliterator();
      org.evosuite.runtime.Random.setNextRandom(961);
      byte[] byteArray0 = compressedVector0.toBinary();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(961);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      CompressedVector.fromMap(hashMap0, 961);
      CompressedVector compressedVector1 = CompressedVector.zero(371);
      compressedVector1.toBinary();
      CompressedVector compressedVector2 = CompressedVector.zero(961);
      CompressedVector.fromBinary(byteArray0);
      compressedVector2.sum();
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(",l!RECs}.1?#jzAVT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2016;
      doubleArray0[1] = (double) 2016;
      doubleArray0[2] = (double) 2016;
      doubleArray0[3] = (double) 2016;
      doubleArray0[4] = (double) 2016;
      doubleArray0[5] = (double) 2016;
      int[] intArray0 = new int[5];
      intArray0[0] = 2016;
      intArray0[1] = 2016;
      intArray0[2] = 2950;
      intArray0[3] = 2016;
      intArray0[4] = 2016;
      CompressedVector compressedVector0 = new CompressedVector(2016, 2016, doubleArray0, intArray0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      numberFormat0.setMaximumIntegerDigits(16);
      compressedVector0.iterator();
      compressedVector0.mkString(numberFormat0, "");
      // Undeclared exception!
      try { 
        compressedVector0.divide(2016);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2016' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2462.8168498398118;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.product();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.blankOfLength(898);
      CompressedVector.zero(898);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(898, (double) 898, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = Byte.valueOf((byte)16);
      Byte.compare((byte)16, (byte)115);
      Byte.toUnsignedInt((byte)16);
      linkedList0.add(byte0);
      CompressedVector.fromCollection(linkedList0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      CompressedVector compressedVector0 = CompressedVector.random(3, 1.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(3, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(16);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 32);
      compressedVector0.getOrElse(16, 0.0);
      double[] doubleArray0 = new double[7];
      Integer integer0 = Integer.getInteger("", 32);
      hashMap0.put(integer0, integer0);
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = 1742.01474311855;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 32;
      doubleArray0[6] = 0.0;
      SparseVector.fromArray(doubleArray0);
      compressedVector0.set(8, 8);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(971, 16);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(16);
      Integer.compare(985, (byte) (-115));
      Byte byte0 = new Byte((byte) (-115));
      hashMap0.put(integer0, byte0);
      CompressedVector.fromMap(hashMap0, 971);
      compressedVector0.product();
      compressedVector0.blankOfLength(16);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("rwIA)oG/ MEC\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1401.0);
      doubleArray0[1] = 880.841876768789;
      doubleArray0[2] = (-214.00865);
      doubleArray0[3] = 672.3366186126858;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.manhattanNorm();
      compressedVector0.setAll((-214.00865));
      int int0 = 955;
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.random(955, 1.0, (Random) mockRandom0);
      mockRandom0.nextDouble();
      String string0 = "iC<vg,-F|:QDyq.}\"[";
      Locale locale0 = Locale.UK;
      compressedVector1.spliterator();
      DecimalFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3045.773;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.isZeroAt((-2226));
      SparseVector.fromCSV("");
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2314), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 32;
      CompressedVector compressedVector0 = CompressedVector.zero(32);
      compressedVector0.sum();
      compressedVector0.toCSV();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int1 = (-1017);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(32, (-1017), (double) 32, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-1561));
      Double double0 = new Double((-1561));
      hashMap0.put(integer0, double0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector.fromCollection(linkedList0);
      compressedVector0.copyOfLength(2);
      org.evosuite.runtime.Random.setNextRandom(2);
      // Undeclared exception!
      try { 
        CompressedVector.zero(2, (-91));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -91.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      compressedVector0.equals((Object) "");
      compressedVector0.toDenseVector();
      SparseVector.fromCSV("");
      int int0 = 3433;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-752), 3433);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3438;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-2960.3676715);
      doubleArray0[6] = (double) 3438;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 3438;
      int[] intArray0 = new int[6];
      intArray0[0] = 3438;
      intArray0[1] = 3438;
      intArray0[2] = 0;
      intArray0[3] = 3438;
      intArray0[4] = 0;
      intArray0[5] = 3438;
      CompressedVector compressedVector0 = new CompressedVector(3438, 0, doubleArray0, intArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3418);
      assertEquals(3418, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1609, 4);
      boolean boolean0 = compressedVector0.nonZeroAt(1609);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-385.6);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1089.84531;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 1249.01;
      doubleArray0[6] = (-1108.0000990255);
      doubleArray0[7] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = (-115);
      // Undeclared exception!
      try { 
        compressedVector0.sum();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1214));
      mockRandom0.setSeed((-1214));
      // Undeclared exception!
      try { 
        CompressedVector.random((-1214), (double) (-1214), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      int int0 = (-2306);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-2306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2306
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1;
      int int1 = 32;
      // Undeclared exception!
      try { 
        CompressedVector.zero(1, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 32.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.sum();
      int int0 = 961;
      Vector.unit(961);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      compressedVector0.spliterator();
      org.evosuite.runtime.Random.setNextRandom(961);
      compressedVector0.toBinary();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(961);
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      Double double0 = ooPlaceInnerProduct0.apply(sparseVector0, (SparseVector) compressedVector0);
      hashMap0.putIfAbsent(integer0, double0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 961);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-50), 0.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -50
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1008), (-3058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1008
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2466);
      Integer integer0 = new Integer(794);
      int int0 = (-2095);
      Integer integer1 = new Integer(32);
      Integer.toUnsignedString(794);
      hashMap0.put(integer0, integer1);
      Integer.compareUnsigned((-2095), 794);
      hashMap0.put(integer0, integer0);
      compressedVector0.getOrElse(794, (-1238.1527399808));
      compressedVector0.blankOfLength(2466);
      String string0 = "~XEqq/Yb^B.6i";
      Integer integer2 = Integer.getInteger("~XEqq/Yb^B.6i", (-3282));
      hashMap0.put(integer2, integer2);
      compressedVector0.swapElements(2466, 2466);
      int int1 = 942;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(942, 2466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -880
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      linkedList0.add(double0);
      linkedList0.spliterator();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      Double double1 = new Double((-3028142.727064144));
      Double.isFinite(Double.POSITIVE_INFINITY);
      Double.max((-3028142.727064144), 1647.395044482);
      double double2 = (-991.195);
      Double.max((-991.195), 3751.0);
      Double.min(985.0607484735998, (-3028142.727064144));
      compressedVector0.setAll(212.25954022673474);
      linkedList0.add(double1);
      compressedVector0.nonZeroIterator();
      int int0 = 3158;
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      sparseVector0.max();
      // Undeclared exception!
      try { 
        sparseVector0.norm();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1330.0984916043;
      doubleArray0[2] = 1060.545553;
      doubleArray0[3] = 2.146566232E9;
      doubleArray0[4] = 2848.96208827425;
      doubleArray0[5] = (-3138.63);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(3430, 3);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2920);
      compressedVector0.swapElements(3, (-794));
      assertEquals(2920, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(6);
      CompressedVector compressedVector0 = new CompressedVector(6);
      CompressedVector compressedVector1 = CompressedVector.zero(107);
      compressedVector1.nonZeroIterator();
      compressedVector1.set(6, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(6, vectorFunction1);
      String string0 = "kE~";
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("kE~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("s=hMNN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0);
      compressedVector0.copyOfLength(0);
      compressedVector0.toMatrixMarket();
      compressedVector0.sliceRight(0);
      compressedVector0.toCSV();
      compressedVector0.setAll(0);
      compressedVector0.copyOfLength(0);
      compressedVector0.blank();
      VectorProcedure vectorProcedure0 = null;
      compressedVector0.each((VectorProcedure) null);
      double double0 = 100.0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-1), 100.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2015);
      compressedVector0.setAll(2015);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.transform(vectorFunction1);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      compressedVector0.mkString(numberFormat0, "");
      compressedVector0.toRowMatrix();
      compressedVector0.updateAt(2015, vectorFunction0);
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction2).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2015, vectorFunction2);
      compressedVector0.setAll(2015);
      compressedVector0.getOrElse(37, 37);
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3022
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)112;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }
}
