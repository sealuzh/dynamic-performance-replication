/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 06:37:17 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = Utility.clearBit((-119), (-119));
      assertEquals((-631), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-43);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3519, (int) (byte) (-128), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("V");
      assertNotNull(string0);
      assertEquals("void", string0);
      
      short short0 = Utility.searchOpcode("V");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.convertString("void");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("void", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)17;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte) (-79);
      byte byte0 = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)2;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (int) (byte)113, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4529. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling0;
      boolean boolean0 = false;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      short short0 = Utility.searchOpcode("r'^nUi1q+:=Obt");
      assertEquals((short) (-1), short0);
      
      int int0 = 117;
      boolean boolean1 = Utility.isSet(97, 117);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean2);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-59);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(97);
      assertEquals(97, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertNotNull(constantMethodType0);
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 46, (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44741. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)31;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)74, (byte) (-56), (byte)84, (byte) (-61), (byte) (-86), (byte)43, (byte) (-86), (byte)31}, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      
      String string0 = "HFkeI),~9Y\\u%t";
      String string1 = Utility.compactClassName("CONSTANT_InvokeDynamic", string0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CONSTANT_InvokeDynamic", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.convertString("org.apache.bcel.classfile.AnnotationElementValue");
      assertNotNull(string0);
      assertEquals("org.apache.bcel.classfile.AnnotationElementValue", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)110;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1901), 82, true);
      assertArrayEquals(new byte[] {(byte)30, (byte)83, (byte)123, (byte)8, (byte) (-81), (byte)89, (byte)110}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    lload_0\n1:    aastore\n2:    lshr\n3:    iconst_5\n4:    dreturn\n5:    dup\n6:    fdiv\n", string0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
      
      String string0 = "Illegally nested brackets:";
      String string1 = "putstatic";
      String string2 = Utility.replace("Illegally nested brackets:", "Illegally nested brackets:", "putstatic");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("putstatic", string2);
      
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "RY";
      try { 
        Utility.typeOfSignature("RY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)61;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-12), (byte)86, (byte)61}, byteArray0);
      assertNotNull(string0);
      assertEquals("90 f4 56 3d", string0);
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte) (-12), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-13);
      byte byte0 = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)102;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = true;
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, (int) (byte) (-64), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte)112, (byte)7, (byte)115, (byte) (-58), (byte) (-36)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte)112, (byte)7, (byte)115, (byte) (-58), (byte) (-36)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)108, (byte)112, (byte)7, (byte)115, (byte) (-58), (byte) (-36)}, byteArray0);
      assertNotNull(string0);
      assertEquals("idiv", string0);
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.accessToString(1006);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private protected static synchronized volatile transient native interface", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-33);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-33), (-445), false);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-111), (byte) (-33)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    i2b\n2:    <illegal opcode>\n", string0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-111), (byte) (-33)}, byteArray0);
      assertNotNull(string1);
      assertEquals("$e2$91$df", string1);
      assertEquals(3, byteArray0.length);
      
      String string2 = Utility.compactClassName("0:    <illegal opcode>\n1:    i2b\n2:    <illegal opcode>\n");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    <illegal opcode>\n1:    i2b\n2:    <illegal opcode>\n", string2);
      
      byte[] byteArray1 = Utility.decode("java.lang.Float", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(15, byteArray1.length);
      
      String string3 = Utility.classOrInterface(244);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("class", string3);
      
      String string4 = Utility.replace("java.lang.Float", "monitorexit", "Invalid method signature: ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("java.lang.Float", string4);
      
      byte[] byteArray2 = Utility.decode("java.lang.Float", false);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(15, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("(=CE@\"^b");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Utility.compactClassName("k", true);
      assertNotNull(string0);
      assertEquals("k", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "k";
      String string1 = Utility.methodTypeToSignature("(=CE@\"^b", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(Lk;)L(=CE@\"^b;", string1);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)69, (byte)50, (byte)70, (byte)5, (byte) (-55), (byte)2, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(91, constantMethodHandle0.getReferenceKind());
      assertEquals(17714, constantMethodHandle0.getReferenceIndex());
      assertArrayEquals(new byte[] {(byte)91, (byte)69, (byte)50, (byte)70, (byte)5, (byte) (-55), (byte)2, (byte)0}, byteArray0);
      assertNotNull(constantMethodHandle0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      boolean boolean1 = byteSequence0.markSupported();
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)91, (byte)69, (byte)50, (byte)70, (byte)5, (byte) (-55), (byte)2, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)91, (byte)69, (byte)50, (byte)70, (byte)5, (byte) (-55), (byte)2, (byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("fstore_3", string2);
      assertEquals(1, constantArray0.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-66), (byte) (-98), (byte) (-52), (byte) (-84), (byte)83, (byte)11}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-66), (byte) (-98), (byte) (-52), (byte) (-84), (byte)83, (byte)11}, byteArray0);
      assertNotNull(string0);
      assertEquals("wide\t(wide)", string0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@2+vOf\"t6q");
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('a');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Utility.setBit(62, 158);
      assertEquals(1073741886, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)59;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, 67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "5au|TV\"`@=J";
      try { 
        Utility.typeOfSignature("5au|TV\"`@=J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5au|TV\"`@=J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)31;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)74, (byte) (-56), (byte)84, (byte) (-61), (byte) (-86), (byte)43, (byte) (-71), (byte)31}, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      
      String string0 = "HFkeI),~9Y\\u%t";
      String string1 = Utility.compactClassName("CONSTANT_InvokeDynamic", string0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CONSTANT_InvokeDynamic", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)25;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("long");
      assertEquals("long", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte) (-79), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = Utility.compactClassName("if_icmpeq", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("if_icmpeq", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 226, (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "\\\"";
      String string1 = Utility.compactClassName("\"", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"", string1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-92), (byte)73, (byte) (-11)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-92), (byte)73, (byte) (-11)}, byteArray0);
      assertNotNull(string2);
      assertEquals("if_icmple\t\t#18933", string2);
      assertEquals(3, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("if_icmple\t\t#18933");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple\t\t#18933
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (int) (byte)81, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = Utility.searchOpcode("'RD");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)64;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[7] = (byte) (-88);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'RD");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)60, (byte)37, (byte)61, (byte)95, (byte)50, (byte)91, (byte)64, (byte) (-88)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$3c$r$3d_2$5b$40$a8", string0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 2:    istore_2
         // 3:    swap
         // 4:    aaload
         // 5:    dup_x2
         // 6:    lstore_1
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)116;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte)60);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)106, (byte)7, (byte)84, (byte)103, (byte) (-36), (byte)60, (byte) (-66), (byte)116}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    if_icmpgt\t\t#27143\n3:    bastore\n4:    dsub\n5:    <illegal opcode>\n6:    istore_1\n7:    arraylength\n8:    ineg\n", string0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.accessToString(315, false);
      assertNotNull(string0);
      assertEquals("public private static final synchronized native", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "public private static final synchronized native";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "public private static final synchronized native";
      objectArray0[3] = (Object) "public private static final synchronized native";
      objectArray0[4] = (Object) "public private static final synchronized native";
      objectArray0[5] = (Object) "public private static final synchronized native";
      objectArray0[6] = (Object) "public private static final synchronized native";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, objectArray0.length);
      
      String string2 = Utility.printArray(objectArray0, false, false);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(7, objectArray0.length);
      
      String string3 = Utility.format(315, 315, false, '}');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}315", string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 585, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-38);
      Constant[] constantArray0 = new Constant[3];
      String string0 = "x[P9&";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("x[P9&");
      assertEquals("x[P9&", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-107), (byte) (-107));
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-107), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-107), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-107), constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-107), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-107), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-107), constantInvokeDynamic0.getClassIndex());
      assertEquals((-107), constantInvokeDynamic1.getClassIndex());
      assertEquals((-107), constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals((-107), constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic1);
      
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      int int0 = (-1);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic((-1), (byte) (-107));
      assertEquals((-107), constantInvokeDynamic2.getNameAndTypeIndex());
      assertEquals((-1), constantInvokeDynamic2.getBootstrapMethodAttrIndex());
      assertEquals((-1), constantInvokeDynamic2.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic2.getTag());
      assertFalse(constantInvokeDynamic2.equals((Object)constantInvokeDynamic1));
      assertFalse(constantInvokeDynamic2.equals((Object)constantInvokeDynamic0));
      assertNotNull(constantInvokeDynamic2);
      
      constantArray0[2] = (Constant) constantInvokeDynamic2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1), 16384);
      assertEquals(3, constantPool0.getLength());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)80, (byte) (-107), (byte) (-38)}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    lastore\n1:    fcmpl\n2:    <illegal opcode>\n", string1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, constantArray0.length);
      
      String string2 = "tableswitch";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "tableswitch");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // tableswitch
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte) (-105);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)22, (byte)43, (byte) (-108), (byte)11, (byte) (-59), (byte) (-43), (byte) (-105)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 26, (int) (byte) (-105));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.classOrInterface(743);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.fillup("getfield", 743, true, '2');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("getfieldstring1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 210, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte) (-32);
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-31), (byte)10, (byte) (-126), (byte) (-31), (byte)12, (byte) (-8), (byte) (-62), (byte) (-32)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$C$e1$K$82$e1$M$f8$c2$e0", string0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-32));
      assertEquals((-32.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertEquals((-32.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-32.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2673, (int) (byte) (-31), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-21);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "T";
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("T");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LT;", string1);
      
      String string2 = "{p\\t6)Z$!]YLp3Z";
      boolean boolean1 = true;
      try { 
        Utility.decode("{p\t6)Z$!]YLp3Z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName(",_Ye3", false);
      assertNotNull(string0);
      assertEquals(",_Ye3", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",_Ye3";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{,_Ye3}", string1);
      assertEquals(1, objectArray0.length);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string2 = Utility.accessToString((-3320), false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("static native interface synthetic annotation enum", string2);
      
      String string3 = Utility.printArray(objectArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("{,_Ye3}", string3);
      assertEquals(1, objectArray0.length);
      
      byte byte0 = Utility.typeOfSignature("[@Da%kts#X(");
      assertEquals((byte)13, byte0);
      
      String string4 = Utility.classOrInterface(4582);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("class", string4);
      
      int int0 = Utility.clearBit((byte)13, 4582);
      assertEquals(13, int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorexit'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short short0 = Utility.searchOpcode("? y@[.c+&^MzKW");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("QR3#$z-nE.3H.E8");
      assertNotNull(string0);
      assertEquals("QR3#$z-nE.3H.E8", string0);
      
      String string1 = Utility.replace("QR3#$z-nE.3H.E8", "org.apache.bcel.classfile.ExceptionTable", "org.apache.bcel.classfile.ExceptionTable");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QR3#$z-nE.3H.E8", string1);
      
      String string2 = Utility.accessToString((int) (short) (-1), true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.convertString("yobGFw}wX\"d\"V=vbS");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("yobGFw}wX\\\"d\\\"V=vbS", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('c');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, (int) (byte)106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("anewarray");
      assertEquals((short)189, short0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)29, 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 29. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-98), (byte)83, (byte)69, (byte)72}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(77, (byte) (-98));
      assertEquals((-98), constantFieldref0.getNameAndTypeIndex());
      assertEquals(77, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertEquals((-98), constantFieldref0.getNameAndTypeIndex());
      assertEquals(77, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals((-98), constantFieldref1.getNameAndTypeIndex());
      assertEquals(77, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("t~EGh/op4_3n;W2e!K");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("t~EGh/op4_3n;W2e!K", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(55454, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-98), (byte)83, (byte)69, (byte)72}, byteArray0);
      assertNotNull(constantClass0);
      assertEquals(5, byteArray0.length);
      
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-98), (byte)83, (byte)69, (byte)72}, byteArray0);
      assertNotNull(string0);
      assertEquals("aastore", string0);
      assertEquals(5, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)85;
      byte byte0 = (byte)74;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte) (-25), (byte)1, (byte) (-74), (byte)85, (byte)74, (byte) (-108), (byte)88}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = false;
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-25), (byte)1, (byte) (-74), (byte)85, (byte)74, (byte) (-108), (byte)88}, byteArray0);
      assertNotNull(string0);
      assertEquals("astore_1", string0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 123, (-919));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21834. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)35, (byte)1, (byte)86, (byte)82, (byte)2, (byte) (-39)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)120, (byte)35, (byte)1, (byte)86, (byte)82, (byte)2, (byte) (-39)}, byteArray0);
      assertNotNull(string0);
      assertEquals("ishl", string0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('F');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)110;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-1));
      assertEquals((-1), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 704, 684, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)71;
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)47;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)7, (byte)47}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      byte byte1 = Utility.typeOfSignature("BootstrapMethod(");
      assertFalse(byte1 == byte0);
      assertEquals((byte)8, byte1);
      
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.Utility$JavaWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaWriter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V";
      stringArray0[1] = "java.lang.";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      String string0 = Utility.methodTypeToSignature("V", stringArray0);
      assertNotNull(string0);
      assertEquals("(LV;Ljava/lang/;LV;LV;)LV;", string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = Utility.methodSignatureToString("(LV;Ljava/lang/;LV;LV;)LV;", "V", "V");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("V V V(V arg1,  arg2, V arg3, V arg4)", string1);
      
      boolean boolean0 = false;
      String string2 = Utility.printArray((Object[]) stringArray0, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("V, java.lang., V, V", string2);
      assertEquals(4, stringArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-71);
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-99);
      Constant[] constantArray0 = new Constant[4];
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("MNNQ7*0h");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertNotNull(string0);
      assertEquals("void", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "V";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "";
      stringArray0[4] = "V";
      stringArray0[5] = "athrow";
      stringArray0[6] = "V";
      stringArray0[7] = "private";
      try { 
        Utility.methodTypeToSignature("V", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1060), (-1060));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-87);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte)4;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte) (-21);
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-87), (byte)4, (byte)4, (byte)4, (byte)4, (byte) (-21), (byte)4, (byte) (-87)}, byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray1.length);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      assertEquals(43268, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(1028, constantNameAndType0.getSignatureIndex());
      assertEquals(4, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-87), (byte)4, (byte)4, (byte)4, (byte)4, (byte) (-21), (byte)4, (byte) (-87)}, byteArray1);
      assertNotNull(constantNameAndType0);
      assertEquals(8, byteArray1.length);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, 2376);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.fillup("Myujj7O+", 62, false, 'N');
      assertNotNull(string0);
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMyujj7O+", string0);
      
      String string1 = Utility.replace("j2gcD_7|iX]V7C3G^#_", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMyujj7O+", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j2gcD_7|iX]V7C3G^#_", string1);
      
      String string2 = Utility.compactClassName("9ovEf|_b~/Q=|~");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9ovEf|_b~.Q=|~", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte) (-120);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (int) (byte)50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.accessToString((-151));
      assertNotNull(string0);
      assertEquals("public static synchronized volatile native interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-35), (byte)113, (byte) (-18), (byte)5, (byte)82}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(60933, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(56689, constantInterfaceMethodref0.getClassIndex());
      assertArrayEquals(new byte[] {(byte) (-35), (byte)113, (byte) (-18), (byte)5, (byte)82}, byteArray0);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(5, byteArray0.length);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(60933, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(56689, constantInterfaceMethodref0.getClassIndex());
      assertEquals(56689, constantInterfaceMethodref1.getClassIndex());
      assertEquals(60933, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertArrayEquals(new byte[] {(byte) (-35), (byte)113, (byte) (-18), (byte)5, (byte)82}, byteArray0);
      assertNotNull(constantInterfaceMethodref1);
      assertEquals(5, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-35), (byte)113, (byte) (-18), (byte)5, (byte)82}, byteArray0);
      assertNotNull(string1);
      assertEquals("dastore", string1);
      assertEquals(5, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZN&6De^_dbp(yU}6");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-78);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-78)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      String string0 = Utility.format(48, 48, true, 't');
      assertNotNull(string0);
      assertEquals("48tttttttttttttttttttttttttttttttttttttttttttttt", string0);
      
      String string1 = Utility.replace("invokestatic", "48tttttttttttttttttttttttttttttttttttttttttttttt", "invokestatic");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("invokestatic", string1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-56);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-56), 39, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)7;
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(32898, constantClass0.getNameIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(constantClass0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(591, constantNameAndType0.getNameIndex());
      assertEquals(3303, constantNameAndType0.getSignatureIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(constantNameAndType0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-1078936023), (byte)67);
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals((-1078936023), constantNameAndType1.getNameIndex());
      assertEquals(67, constantNameAndType1.getSignatureIndex());
      assertFalse(constantNameAndType1.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType1);
      
      constantArray0[2] = (Constant) constantNameAndType1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertEquals(17291, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(8, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(constantMethodType0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)79, (byte) (-126));
      assertEquals((-126), constantMethodHandle0.getReferenceIndex());
      assertEquals(79, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte) (-25));
      assertEquals((-25), constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType((-8024), (byte) (-128));
      assertEquals((-8024), constantNameAndType2.getNameIndex());
      assertEquals((-128), constantNameAndType2.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType2.getTag());
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType0));
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType1));
      assertNotNull(constantNameAndType2);
      
      ConstantNameAndType constantNameAndType3 = new ConstantNameAndType(constantNameAndType2);
      assertEquals((-8024), constantNameAndType2.getNameIndex());
      assertEquals((-128), constantNameAndType2.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType2.getTag());
      assertEquals((-128), constantNameAndType3.getSignatureIndex());
      assertEquals((-8024), constantNameAndType3.getNameIndex());
      assertEquals((byte)12, constantNameAndType3.getTag());
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType0));
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType1));
      assertTrue(constantNameAndType3.equals((Object)constantNameAndType2));
      assertFalse(constantNameAndType3.equals((Object)constantNameAndType1));
      assertFalse(constantNameAndType3.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType3);
      
      constantArray0[6] = (Constant) constantNameAndType3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(7, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), (int) (byte) (-117));
      assertEquals(7, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    ior\n1:    ixor\n2:    iconst_m1\n3:    iastore\n4:    fconst_1\n5:    <illegal opcode>\n6:    fstore_0\n7:    f2i\n8:    iconst_4\n", string0);
      assertEquals(9, byteArray0.length);
      assertEquals(7, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)11;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1883), (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 14646. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)59;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 39, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4?v\"I9(GM;Mx/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4?v\"I9(GM;Mx/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = true;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = "L<null;V";
      try { 
        Utility.methodSignatureReturnType("L<null;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<null;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.fillup("6TY+Z!m8{H", (-1583), true, ',');
      assertNotNull(string0);
      assertEquals("6TY+Z!m8{H", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2388), (int) (byte) (-93), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2f
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("GX$N>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GX$N>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1";
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1", false);
      assertNotNull(byteArray0);
      assertEquals(50, byteArray0.length);
      
      boolean boolean0 = true;
      String string1 = Utility.compactClassName("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1", "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER$1", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "_\\zDZSIOP";
      // Undeclared exception!
      try { 
        Utility.signatureToString("_zDZSIOP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_zDZSIOP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Utility.getSignature("org.apache.bcel.classfile.FieldOrMethod");
      assertNotNull(string0);
      assertEquals("Lorg/apache/bcel/classfile/FieldOrMethod;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)59;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("<N_p/");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("<N_p/", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-77), (byte)20, (byte)0, (byte) (-62)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Utility.replace("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, (int) (byte) (-16), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("FSbPS");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.accessToString((int) (byte)6);
      assertNotNull(string0);
      assertEquals("private protected", string0);
      
      String string1 = "`2 ce!*]3B";
      String string2 = Utility.compactClassName("`2 ce!*]3B");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`2 ce!*]3B", string2);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("`2 ce!*]3B", "`2 ce!*]3B");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // `2 ce!*]3B
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O";
      stringArray0[1] = "O";
      String string0 = Utility.methodTypeToSignature("O", stringArray0);
      assertNotNull(string0);
      assertEquals("(LO;LO;)LO;", string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = Utility.printArray((Object[]) stringArray0, true, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{O, O}", string1);
      assertEquals(2, stringArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-15);
      byte byte0 = (byte)101;
      byteArray0[2] = (byte)101;
      ConstantPool constantPool0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte) (-15), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      int int0 = Utility.setBit((byte) (-101), (byte) (-101));
      assertEquals((-101), int0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 882, (-2585), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "int";
      stringArray0[1] = "int";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[2] = "int";
      stringArray0[3] = "int";
      stringArray0[4] = "int";
      stringArray0[5] = "int";
      stringArray0[6] = "int";
      stringArray0[7] = "int";
      String string0 = Utility.methodTypeToSignature("int", stringArray0);
      assertNotNull(string0);
      assertEquals("(IIIIIIII)I", string0);
      assertEquals(8, stringArray0.length);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(IIIIIIII)I", true);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.convertString("n-[|i");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("n-[|i", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 198, (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23262. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte) (-33);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, 3482, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)5;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string0 = constantPool0.toString();
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (-1285));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41989. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-10);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1094), (-45));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 246. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.fillup("wide", 90, true, '?');
      assertNotNull(string0);
      assertEquals("wide??????????????????????????????????????????????????????????????????????????????????????", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)68;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1969541777), (int) (byte)35);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)10, (byte)34, (byte) (-37), (byte) (-81), (byte) (-127), (byte)68}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    fload_1\n1:    fload_1\n2:    lconst_1\n3:    fload_0\n4:    <illegal opcode>\n5:    dreturn\n6:    lor\n7:    fstore_1\n", string1);
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)10, (byte)34, (byte) (-37), (byte) (-81), (byte) (-127), (byte)68}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      int int0 = byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)10, (byte)34, (byte) (-37), (byte) (-81), (byte) (-127), (byte)68}, byteArray0);
      assertEquals(35, int0);
      assertEquals(8, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)10, (byte)34, (byte) (-37), (byte) (-81), (byte) (-127), (byte)68}, byteArray0);
      assertNotNull(string2);
      assertEquals("fload_1", string2);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("wide??????????????????????????????????????????????????????????????????????????????????????");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wide??????????????????????????????????????????????????????????????????????????????????????'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-98), (byte) (-95), (byte)86, (byte)117, (byte)47, (byte) (-70)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)117, 168);
      assertEquals(117, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(168, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertNotNull(constantInterfaceMethodref0);
      
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      assertEquals(117, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(168, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref1.getTag());
      assertEquals(168, constantInterfaceMethodref1.getNameAndTypeIndex());
      assertEquals(117, constantInterfaceMethodref1.getClassIndex());
      assertTrue(constantInterfaceMethodref1.equals((Object)constantInterfaceMethodref0));
      assertNotNull(constantInterfaceMethodref1);
      
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong((byte)47);
      assertEquals(47L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertEquals(47L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(47L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      
      constantArray0[1] = (Constant) constantLong1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-98), (byte) (-95), (byte)86, (byte)117, (byte)47, (byte) (-70)}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(7, byteArray0.length);
      
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      assertEquals(22686, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)88, (byte) (-98), (byte) (-95), (byte)86, (byte)117, (byte)47, (byte) (-70)}, byteArray0);
      assertNotNull(constantString0);
      assertEquals(7, byteArray0.length);
      
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-98), (byte) (-95), (byte)86, (byte)117, (byte)47, (byte) (-70)}, byteArray0);
      assertNotNull(string0);
      assertEquals("if_icmplt\t\t#22135", string0);
      assertEquals(7, byteArray0.length);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.fillup("aTfX8*>dh- Wm", (-3846), true, '@');
      assertNotNull(string0);
      assertEquals("aTfX8*>dh- Wm", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[3] = (byte) (-3);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)122;
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)6, (byte)122}, byteArray0);
      assertNotNull(string1);
      assertEquals("7f 00 06 7a", string1);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!Lqg {uY");
      assertFalse(boolean0);
      
      String string2 = Utility.compactClassName("compiler version\t");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("compiler version\t", string2);
      
      byte[] byteArray1 = new byte[18];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte)122;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)6, (byte)122}, byteArray0);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertEquals(18, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 99, 2048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = "Object";
      try { 
        Utility.methodSignatureReturnType("Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Object'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Utility.fillup("aTfX8*>dh- Wm", (-3846), true, '@');
      assertNotNull(string0);
      assertEquals("aTfX8*>dh- Wm", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)113;
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)127, (byte) (-3), (byte)6, (byte)113}, byteArray0);
      assertNotNull(string1);
      assertEquals("7f fd 06 71", string1);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!Lqg {uY");
      assertFalse(boolean0);
      
      String string2 = Utility.compactClassName("compiler version\t");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("compiler version\t", string2);
      
      byte[] byteArray1 = new byte[18];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte)113;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-3), (byte)6, (byte)113}, byteArray0);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertEquals(18, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 99, 2048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "(F\\l";
      try { 
        Utility.typeOfSignature("(Fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Fl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = Utility.clearBit(722, 722);
      assertEquals(722, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)110;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, 2464);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "<illegal opcode>";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertFalse(boolean0);
      
      String string1 = Utility.convertString("'vJ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\\'vJ", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)48;
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("invokedynamic");
      assertEquals("invokedynamic", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      int int0 = 60;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-109), 1234);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(1234, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-109), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-109), constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 477, 1563, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-24);
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-24)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(1, byteArray0.length);
      
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isSet(344, (byte) (-24));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = Utility.compactClassName(", low = ", "$l$8b$I$A$A$A$A$A$A$A", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(", low = ", string2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = Utility.clearBit((byte) (-24), (-180));
      assertEquals((-4120), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-24);
      objectArray0[1] = (Object) ", low = ";
      objectArray0[2] = (Object) ", low = ";
      objectArray0[3] = (Object) (byte) (-24);
      objectArray0[4] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[5] = (Object) ", low = ";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[8] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      String string3 = Utility.printArray(objectArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("{-24, , low = , , low = , -24, $l$8b$I$A$A$A$A$A$A$A, , low = , null, $l$8b$I$A$A$A$A$A$A$A, $l$8b$I$A$A$A$A$A$A$A}", string3);
      assertEquals(9, objectArray0.length);
      
      String string4 = Utility.printArray(objectArray0, true, false);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("{-24, , low = , , low = , -24, $l$8b$I$A$A$A$A$A$A$A, , low = , null, $l$8b$I$A$A$A$A$A$A$A, $l$8b$I$A$A$A$A$A$A$A}", string4);
      assertEquals(9, objectArray0.length);
      
      try { 
        Utility.typeOfSignature("9}F2m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9}F2m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.fillup("wide", 90, true, '?');
      assertNotNull(string0);
      assertEquals("wide??????????????????????????????????????????????????????????????????????????????????????", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)68;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1969541777), (int) (byte)6);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "WelT&";
      try { 
        Utility.typeOfSignature("WelT&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WelT&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-107);
      byte byte0 = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)75;
      byte byte1 = (byte) (-8);
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)21;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 237, 172);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = ")W@E?fX:/9mXz&y<";
      try { 
        Utility.typeOfSignature(")W@E?fX:/9mXz&y<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )W@E?fX:/9mXz&y<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Utility.isSet(126, 126);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.replace("o7a>U]>5@", "breakpoint", "dconst_0");
      assertNotNull(string0);
      assertEquals("o7a>U]>5@", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)97, (byte)79, (byte) (-80)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(0L);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("arraylength");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('z');
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      assertNotNull(dataOutputStream0);
      
      constantLong0.dump(dataOutputStream0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(0L, constantLong1.getBytes());
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)97, (byte)79, (byte) (-80)}, byteArray0);
      assertNotNull(string1);
      assertEquals("ladd", string1);
      assertEquals(3, byteArray0.length);
      assertEquals(1, constantArray0.length);
      
      String string2 = Utility.getSignature("o7a>U]>5@");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Lo7a>U]>5@;", string2);
      
      boolean boolean2 = Utility.isSet((byte) (-80), 36);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ladd", "", "o7a>U]>5@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ladd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-9), (byte)90, (byte) (-91), (byte) (-110), (byte) (-5), (byte)25, (byte)122, (byte)24}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)93, (byte) (-9), (byte)90, (byte) (-91), (byte) (-110), (byte) (-5), (byte)25, (byte)122, (byte)24}, byteArray0);
      assertNotNull(string1);
      assertEquals("dup2_x1", string1);
      assertEquals(0, constantArray0.length);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-84);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-1139L));
      assertEquals((-1139L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString(1300);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(1300, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      constantArray0[1] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)59);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(59, constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)60, (int) (byte) (-84), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 160, (int) (byte) (-68), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.fillup("cb:", (-405), false, 'T');
      assertNotNull(string0);
      assertEquals("cb:", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)107, (byte)42, (byte)43, (byte)71, (byte)110}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)107, (byte)42, (byte)43, (byte)71, (byte)110}, byteArray0);
      assertNotNull(string1);
      assertEquals("dmul", string1);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(":$)GG(v@t@^Ed3F=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GG(v@t@^Ed3F='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("]", 2632, false, 'E');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-113), (byte) (-116), (byte)95}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      short short0 = byteSequence0.readShort();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-113), (byte) (-116), (byte)95}, byteArray0);
      assertEquals((short) (-25969), short0);
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-113), (byte) (-116), (byte)95}, byteArray0);
      assertNotNull(string1);
      assertEquals("f2l", string1);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-32);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1609), 935);
      assertArrayEquals(new byte[] {(byte)26, (byte)71, (byte)10, (byte) (-82), (byte)4, (byte)46, (byte) (-32)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    iload_0\n1:    dstore_0\n2:    lconst_1\n3:    freturn\n4:    iconst_1\n5:    iaload\n6:    <illegal opcode>\n", string0);
      assertEquals(7, byteArray0.length);
      
      try { 
        Utility.typeOfMethodSignature("1v[or'l6W ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1v[or'l6W 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = Utility.classOrInterface(3867);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.replace(";5.+U", ";5.+U", "interface");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      String string2 = Utility.classOrInterface(3867);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("interface", string2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) ";5.+U";
      objectArray0[2] = (Object) "interface";
      objectArray0[3] = (Object) "interface";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "interface";
      objectArray0[6] = (Object) "interface";
      objectArray0[7] = (Object) "interface";
      boolean boolean0 = false;
      String string3 = Utility.printArray(objectArray0, false, false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(8, objectArray0.length);
      
      try { 
        Utility.typeOfSignature(";5.+U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;5.+U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)41, (byte) (-68), (byte)111}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)41, (byte) (-68), (byte)111}, byteArray0);
      assertNotNull(string0);
      assertEquals("dload_3", string0);
      assertEquals(3, byteArray0.length);
      
      String string1 = Utility.accessToString(45, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public protected static synchronized", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*YF#^F'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YF#^F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "#0bB";
      String string1 = Utility.compactClassName("#0bB", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#0bB", string1);
      
      int int0 = Utility.setBit(91, 91);
      assertEquals(134217819, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#0bB");
      assertFalse(boolean0);
      
      String string2 = Utility.compactClassName("#0bB");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("#0bB", string2);
      
      try { 
        Utility.typeOfSignature("#0bB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #0bB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.compactClassName("'", "'", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)73;
      String string1 = Utility.encode(byteArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)116, (byte) (-57), (byte)73}, byteArray0);
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertEquals(3, byteArray0.length);
      
      String string2 = "qwc^B(E']\\~!SO{H%7";
      String string3 = Utility.compactClassName("z+f6)i+vv{Ky(z3", "qwc^B(E']~!SO{H%7", false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("z+f6)i+vv{Ky(z3", string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)116, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_X";
      stringArray0[1] = "A0G<r";
      stringArray0[2] = "_X";
      stringArray0[3] = "_X";
      stringArray0[4] = "_X";
      String string0 = Utility.methodTypeToSignature("_X", stringArray0);
      assertNotNull(string0);
      assertEquals("(L_X;LA0G<r;L_X;L_X;L_X;)L_X;", string0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = Utility.isSet(4, 4413);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(4413, 4);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = Utility.isSet(57, 59);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("!=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.replace("N=_ 8$eQU", "N=_ 8$eQU", "N=_ 8$eQU");
      assertNotNull(string0);
      assertEquals("N=_ 8$eQU", string0);
      
      try { 
        Utility.typeOfSignature("N=_ 8$eQU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N=_ 8$eQU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-12);
      byteArray0[8] = (byte)13;
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)46, (byte)69, (byte)95, (byte)122, (byte)93, (byte)37, (byte)16, (byte) (-12), (byte)13}, byteArray0);
      assertNotNull(string0);
      assertEquals("$$E_z$5d$r$Q$f4$N", string0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("]", 2632, false, 'E');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-113), (byte) (-116), (byte)95}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-113), (byte) (-116), (byte)95}, byteArray0);
      assertNotNull(string1);
      assertEquals("ifne\t\t#-28788", string1);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Utility.convertString("fstore_0");
      assertNotNull(string0);
      assertEquals("fstore_0", string0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("ZK[.{[>NNv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[.{[>NNv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = Utility.isSet(120, 16384);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      String string1 = Utility.getSignature("}s*");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L}s*;", string1);
      
      byte byte0 = Utility.typeOfSignature("L}s*;");
      assertEquals((byte)14, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)59, (byte)112, (byte)7, (byte)115, (byte) (-58), (byte) (-36)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)59, (byte)112, (byte)7, (byte)115, (byte) (-58), (byte) (-36)}, byteArray0);
      assertNotNull(string0);
      assertEquals("istore_0", string0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('g');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.compactClassName("Ogc", true);
      assertNotNull(string0);
      assertEquals("Ogc", string0);
      
      short short0 = Utility.searchOpcode("fh1FJHX,_e");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-36);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-78), (byte) (-78));
      assertEquals((-78), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-78), constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertNotNull(constantInterfaceMethodref0);
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-118), 3304);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 35564. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.compactClassName("Dp");
      assertNotNull(string0);
      assertEquals("Dp", string0);
      
      String string1 = Utility.format((-2520), 183, true, '+');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-2520++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", string1);
      
      String string2 = Utility.accessToString(168);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("static synchronized transient", string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-64);
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)33, (byte) (-64)}, byteArray0);
      assertNotNull(string3);
      assertEquals("21 c0", string3);
      assertEquals(2, byteArray0.length);
      
      byte byte0 = Utility.typeOfSignature("Dp");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)48;
      byte byte0 = (byte)64;
      byteArray0[2] = (byte)64;
      byte byte1 = (byte)39;
      byteArray0[3] = (byte)39;
      byte byte2 = (byte)47;
      byteArray0[4] = (byte)47;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-44);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, 172, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-32);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)78, (byte)60, (byte)63, (byte) (-16), (byte) (-8), (byte)0, (byte)57, (byte) (-32)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(7.895767E8F, constantFloat0.getBytes(), 0.01F);
      assertArrayEquals(new byte[] {(byte)78, (byte)60, (byte)63, (byte) (-16), (byte) (-8), (byte)0, (byte)57, (byte) (-32)}, byteArray0);
      assertNotNull(constantFloat0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-32), 82, true);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)78, (byte)60, (byte)63, (byte) (-16), (byte) (-8), (byte)0, (byte)57, (byte) (-32)}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    astore_3\n1:    istore_1\n2:    lstore_0\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    nop\n6:    dstore\t\t%224\n", string0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.compactClassName("AS##$&jpml=<b)%}3#Z", true);
      assertNotNull(string0);
      assertEquals("AS##$&jpml=<b)%}3#Z", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "AS##$&jpml=<b)%}3#Z";
      objectArray0[1] = (Object) "AS##$&jpml=<b)%}3#Z";
      objectArray0[2] = (Object) "AS##$&jpml=<b)%}3#Z";
      objectArray0[3] = (Object) "AS##$&jpml=<b)%}3#Z";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AS##$&jpml=<b)%}3#Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      objectArray0[4] = (Object) "AS##$&jpml=<b)%}3#Z";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z", string1);
      assertEquals(5, objectArray0.length);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2);
      assertEquals(0, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z, AS##$&jpml=<b)%}3#Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "({";
      String string1 = "char";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("({", "({", "char", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)19, (byte)78, (byte)82, (byte) (-23), (byte) (-95), (byte) (-63), (byte) (-94), (byte) (-71)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20050. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)84, (byte) (-18)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-18));
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-18), constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-18), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((-18), constantInteger1.getBytes());
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-18)}, byteArray0);
      assertNotNull(string1);
      assertEquals("bastore", string1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)67, (byte) (-54), (byte) (-19), (byte)95, (byte)57}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(5, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)67, (byte) (-54), (byte) (-19), (byte)95, (byte)57}, byteArray0);
      assertNotNull(string1);
      assertEquals("fstore_0", string1);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = ":NKf";
      try { 
        Utility.typeOfSignature(":NKf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :NKf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)38;
      byte byte0 = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-70);
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)38, (byte) (-43), (byte) (-121), (byte) (-83), (byte) (-70)}, byteArray0);
      assertNotNull(string0);
      assertEquals("10 26 d5 87 ad ba", string0);
      assertEquals(6, byteArray0.length);
      
      int int0 = Utility.setBit((-1624), (byte)38);
      assertEquals((-1560), int0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)38, (byte) (-43), (byte) (-121), (byte) (-83), (byte) (-70)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), 7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    bipush\t\t38
         // 2:    <illegal opcode>
         // 3:    i2d
         // 4:    lreturn
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.format(187, 46, true, 'A');
      assertNotNull(string0);
      assertEquals("187AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "187AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
      String string1 = Utility.methodTypeToSignature(" entries\n", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(L187AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;)Lentries;", string1);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-38);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)114, (byte) (-98), (byte)89, (byte) (-9), (byte)68, (byte) (-126), (byte) (-38)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.fillup("*9'{hAl{%F&`", 25, false, ':');
      assertNotNull(string0);
      assertEquals(":::::::::::::*9'{hAl{%F&`", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-122), (byte) (-122), (byte) (-98), (byte)36, (byte) (-43), (byte)0, (byte) (-28), (byte)103}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      short short0 = byteSequence0.readShort();
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-122), (byte) (-122), (byte) (-98), (byte)36, (byte) (-43), (byte)0, (byte) (-28), (byte)103}, byteArray0);
      assertEquals((short) (-20090), short0);
      assertEquals(9, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-122), (byte) (-122), (byte) (-98), (byte)36, (byte) (-43), (byte)0, (byte) (-28), (byte)103}, byteArray0);
      assertNotNull(string1);
      assertEquals("i2f", string1);
      assertEquals(9, byteArray0.length);
      
      String string2 = Utility.fillup("i2f", 184, false, ':');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::i2f", string2);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(6, byteSequence0.getIndex());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-122), (byte) (-122), (byte) (-98), (byte)36, (byte) (-43), (byte)0, (byte) (-28), (byte)103}, byteArray0);
      assertNotNull(string3);
      assertEquals("ifle\t\t#9432", string3);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Utility.compactClassName("char", true);
      assertNotNull(string0);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)98, (byte) (-124), (byte) (-103), (byte)0, (byte) (-115), (byte)97}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)98, (byte) (-124), (byte) (-103), (byte)0, (byte) (-115), (byte)97}, byteArray0);
      assertNotNull(string1);
      assertEquals("fadd", string1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      String string1 = Utility.replace("short", "dreturn", "short");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("short", string1);
      
      String string2 = Utility.compactClassName("short", false);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("short", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-46);
      byteArray0[8] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)69, (byte)57, (byte)51, (byte) (-32), (byte) (-31), (byte)48, (byte) (-64), (byte) (-46), (byte) (-99)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(5, 92);
      assertEquals(5, constantNameAndType0.getNameIndex());
      assertEquals(92, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)69, (byte)57, (byte)51, (byte) (-32), (byte) (-31), (byte)48, (byte) (-64), (byte) (-46), (byte) (-99)}, byteArray0);
      assertNotNull(string3);
      assertEquals("fstore_2", string3);
      assertEquals(9, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, 1321);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.convertString("ifge");
      assertNotNull(string0);
      assertEquals("ifge", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "ifge";
      objectArray0[1] = (Object) "ifge";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "ifge";
      objectArray0[4] = (Object) "ifge";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      
      String string2 = Utility.accessToString(785);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("public final native interface", string2);
      
      int int0 = Utility.clearBit(785, 785);
      assertEquals(785, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "public final native interface";
      String string3 = Utility.methodTypeToSignature("{ifge, ifge, java.lang.Object@63205949, ifge, ifge, java.lang.Object@6e511efc}", stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(Lpublic;)L{ifge,;", string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = Utility.classOrInterface(182);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("class", string4);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "KctK%Xi_}P24EfO", "class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
      
      String string0 = "pAeV0#";
      byte[] byteArray0 = Utility.decode("pAeV0#", false);
      assertArrayEquals(new byte[] {(byte)112, (byte)65, (byte)101, (byte)86, (byte)48, (byte)35}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("pAeV0#");
      assertEquals("pAeV0#", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertNotNull(constantUtf8_0);
      
      String string1 = "eD:CC`L";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eD:CC`L");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(4744, 1212);
      assertEquals(1212, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(4744, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(4744, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = (ConstantInvokeDynamic)constantInvokeDynamic0.clone();
      assertEquals(1212, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(4744, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(4744, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(4744, constantInvokeDynamic1.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(4744, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertEquals(1212, constantInvokeDynamic1.getNameAndTypeIndex());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertNotSame(constantInvokeDynamic0, constantInvokeDynamic1);
      assertNotSame(constantInvokeDynamic1, constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      boolean boolean3 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 197, 4744, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("ireturn");
      assertNotNull(string0);
      assertEquals("ireturn", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-25);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, (int) (byte)31, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = Utility.isSet(315, 4096);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = "\\SAZ: f(C\"<f}FS@C-B";
      String string1 = Utility.convertString("SAZ: f(C\"<f}FS@C-B");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("SAZ: f(C\\\"<f}FS@C-B", string1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "\\SAZ: f(C\"<f}FS@C-B";
      objectArray0[1] = (Object) "SAZ: f(C\"<f}FS@C-B";
      objectArray0[2] = (Object) "SAZ: f(C\"<f}FS@C-B";
      objectArray0[3] = (Object) "SAZ: f(C\"<f}FS@C-B";
      objectArray0[4] = (Object) "SAZ: f(C\"<f}FS@C-B";
      objectArray0[5] = (Object) "\\SAZ: f(C\"<f}FS@C-B";
      objectArray0[6] = (Object) "SAZ: f(C\"<f}FS@C-B";
      String string2 = Utility.printArray(objectArray0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("{\\SAZ: f(C\"<f}FS@C-B, SAZ: f(C\"<f}FS@C-B, SAZ: f(C\"<f}FS@C-B, SAZ: f(C\"<f}FS@C-B, SAZ: f(C\"<f}FS@C-B, \\SAZ: f(C\"<f}FS@C-B, SAZ: f(C\"<f}FS@C-B}", string2);
      assertEquals(7, objectArray0.length);
      
      String string3 = ")C9A'C%E?n";
      String string4 = Utility.fillup(")C9A'C%E?n", 315, true, 'r');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(")C9A'C%E?nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string4);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1835);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "float");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // float
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("ELA!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ELA!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Deprecated attribute with length > 0");
      assertNotNull(string0);
      assertEquals("double", string0);
      
      String string1 = Utility.convertString("6h$::,!}[}R^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6h$::,!}[}R^", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)9;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2156, 621);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = Utility.clearBit(71, 71);
      assertEquals(71, int0);
      
      String string0 = Utility.accessToString(71);
      assertNotNull(string0);
      assertEquals("public private protected volatile", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-14);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), 95);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-21), (byte) (-13), (byte)102, (byte)45, (byte) (-14)}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fsub\n4:    aload_3\n5:    <illegal opcode>\n", string1);
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.convertString("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fsub\n4:    aload_3\n5:    <illegal opcode>\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    nop\\n1:    <illegal opcode>\\n2:    <illegal opcode>\\n3:    fsub\\n4:    aload_3\\n5:    <illegal opcode>\\n", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-21), (byte) (-13), (byte)102, (byte)45, (byte) (-14)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-21), (byte) (-13), (byte)102, (byte)45, (byte) (-14)}, byteArray0);
      assertNotNull(string3);
      assertEquals("nop", string3);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte) (-91);
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte)79, (byte)87, (byte) (-98), (byte)24, (byte)91, (byte) (-100), (byte) (-91)}, byteArray0);
      assertNotNull(string0);
      assertEquals("94 4f 57 9e 18 5b 9c a5", string0);
      assertEquals(8, byteArray0.length);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte)79, (byte)87, (byte) (-98), (byte)24, (byte)91, (byte) (-100), (byte) (-91)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("94 4f 57 9e 18 5b 9c a5");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("94 4f 57 9e 18 5b 9c a5", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(37967, constantString0.getStringIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte)79, (byte)87, (byte) (-98), (byte)24, (byte)91, (byte) (-100), (byte) (-91)}, byteArray0);
      assertNotNull(constantString0);
      assertEquals(8, byteArray0.length);
      
      ConstantString constantString1 = new ConstantString(constantString0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(37967, constantString0.getStringIndex());
      assertEquals(37967, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      assertTrue(constantString1.equals((Object)constantString0));
      assertArrayEquals(new byte[] {(byte) (-108), (byte)79, (byte)87, (byte) (-98), (byte)24, (byte)91, (byte) (-100), (byte) (-91)}, byteArray0);
      assertNotNull(constantString1);
      assertEquals(8, byteArray0.length);
      
      constantArray0[1] = (Constant) constantString1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-108));
      assertEquals((-108.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertEquals((-108.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-108.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      
      constantArray0[2] = (Constant) constantFloat1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      assertEquals(22430, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(22430, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(6235, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte)79, (byte)87, (byte) (-98), (byte)24, (byte)91, (byte) (-100), (byte) (-91)}, byteArray0);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(8, byteArray0.length);
      
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)79);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(79.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      constantArray0[4] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1385, 76);
      assertEquals(1385, constantMethodHandle0.getReferenceKind());
      assertEquals(76, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals(1385, constantMethodHandle0.getReferenceKind());
      assertEquals(76, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(1385, constantMethodHandle1.getReferenceKind());
      assertEquals(76, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      constantArray0[5] = (Constant) constantMethodHandle1;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertEquals(22430, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(22430, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(6235, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(6235, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(22430, constantInvokeDynamic1.getClassIndex());
      assertEquals(22430, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertArrayEquals(new byte[] {(byte) (-108), (byte)79, (byte)87, (byte) (-98), (byte)24, (byte)91, (byte) (-100), (byte) (-91)}, byteArray0);
      assertNotNull(constantInvokeDynamic1);
      assertEquals(8, byteArray0.length);
      
      constantArray0[6] = (Constant) constantInvokeDynamic1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1295), 4);
      assertEquals((-1295), constantFieldref0.getClassIndex());
      assertEquals(4, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantArray0[7] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(8, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(8, constantPool1.getLength());
      assertEquals(8, constantPool0.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotNull(constantPool1);
      assertEquals(8, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "gCiHNnK%AJw#E;8";
      String string1 = Utility.compactClassName("gCiHNnK%AJw#E;8", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gCiHNnK%AJw#E;8", string1);
      
      String string2 = Utility.convertString("gCiHNnK%AJw#E;8");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("gCiHNnK%AJw#E;8", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "\tdefault = ";
      String string1 = Utility.convertString("\tdefault = ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\tdefault = ", string1);
      
      String string2 = "f2d";
      String string3 = Utility.fillup("f2d", 95, false, 'v');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvf2d", string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-57);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string4 = constantPool0.toString();
      assertEquals(0, constantPool0.getLength());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 89, 153, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-2);
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-36), (byte)32, (byte) (-2)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.accessToString(125);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public protected static final synchronized volatile", string1);
      
      String string2 = Utility.classOrInterface((byte)32);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte) (-36), (byte)32, (byte) (-2)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)34);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(34, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      constantArray0[0] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-2));
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-2.0F), constantFloat0.getBytes(), 0.01F);
      assertNotNull(constantFloat0);
      
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)34, (byte) (-36), (byte)32, (byte) (-2)}, byteArray0);
      assertNotNull(string3);
      assertEquals("fload_0", string3);
      assertEquals(4, byteArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.signatureToString("ZTo /QpU.c?nC=Jfz");
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "?KATi_!{";
      try { 
        Utility.typeOfSignature("?KATi_!{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?KATi_!{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals("{}", string0);
      assertEquals(0, objectArray0.length);
      
      char char0 = ' ';
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(93, 93);
      assertEquals(536871005, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-5);
      byte byte0 = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1394), 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_2
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.compactClassName("'$");
      assertNotNull(string0);
      assertEquals("'$", string0);
      
      try { 
        Utility.decode("'$", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)76, (byte) (-25), (byte)1, (byte) (-74), (byte)85, (byte)74, (byte) (-108), (byte)88}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-25), (byte)1, (byte) (-74), (byte)85, (byte)74, (byte) (-108), (byte)88}, byteArray0);
      assertNotNull(string0);
      assertEquals("astore_1", string0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2dQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2dQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-68), (byte)0, (byte) (-69), (byte)65, (byte)40}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(6, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-68), (byte)0, (byte) (-69), (byte)65, (byte)40}, byteArray0);
      assertNotNull(string0);
      assertEquals("if_acmpeq\t\t#-17408", string0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.convertString("n-[|i");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("n-[|i", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 198, (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M}TA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.classOrInterface((-2204));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.compactClassName("interface");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      try { 
        Utility.typeOfSignature("!/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)47, (byte)48, (byte) (-66), (byte) (-44), (byte)7, (byte)107, (byte) (-64), (byte)114, (byte)14}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)47, (byte)48, (byte) (-66), (byte) (-44), (byte)7, (byte)107, (byte) (-64), (byte)114, (byte)14}, byteArray0);
      assertNotNull(string0);
      assertEquals("laload", string0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      String string1 = Utility.format((-2481), (-2481), false, 'A');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-2481", string1);
      
      try { 
        Utility.typeOfSignature(",zLF-~64+[_!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,zLF-~64+[_!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)7;
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(32898, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(constantClass0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(591, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(3303, constantNameAndType0.getSignatureIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(constantNameAndType0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType((-1078936023), (byte)67);
      assertEquals((-1078936023), constantNameAndType1.getNameIndex());
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals(67, constantNameAndType1.getSignatureIndex());
      assertFalse(constantNameAndType1.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType1);
      
      constantArray0[2] = (Constant) constantNameAndType1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertEquals(6, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertEquals(17291, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(8, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-126), (byte)2, (byte)79, (byte)12, (byte) (-25), (byte)67, (byte) (-117), (byte)7}, byteArray0);
      assertNotNull(constantMethodType0);
      assertEquals(9, byteArray0.length);
      
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)79, (byte) (-126));
      assertEquals(79, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-126), constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType((byte) (-25));
      assertEquals((-25), constantMethodType1.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertFalse(constantMethodType1.equals((Object)constantMethodType0));
      assertNotNull(constantMethodType1);
      
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType((-8024), (byte) (-128));
      assertEquals((-128), constantNameAndType2.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType2.getTag());
      assertEquals((-8024), constantNameAndType2.getNameIndex());
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType1));
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType2);
      
      ConstantNameAndType constantNameAndType3 = new ConstantNameAndType(constantNameAndType2);
      assertEquals((-128), constantNameAndType2.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType2.getTag());
      assertEquals((-8024), constantNameAndType2.getNameIndex());
      assertEquals((-128), constantNameAndType3.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType3.getTag());
      assertEquals((-8024), constantNameAndType3.getNameIndex());
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType1));
      assertFalse(constantNameAndType2.equals((Object)constantNameAndType0));
      assertFalse(constantNameAndType3.equals((Object)constantNameAndType1));
      assertTrue(constantNameAndType3.equals((Object)constantNameAndType2));
      assertFalse(constantNameAndType3.equals((Object)constantNameAndType0));
      assertNotNull(constantNameAndType3);
      
      constantArray0[6] = (Constant) constantNameAndType3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(7, constantArray0.length);
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), 4);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(55, 55);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)99;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2004), 55, false);
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte) (-82), (byte)32, (byte)115, (byte)103, (byte)99}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    fdiv\n1:    baload\n2:    freturn\n3:    lload_2\n4:    drem\n5:    dsub\n6:    dadd\n", string0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte) (-82), (byte)32, (byte)115, (byte)103, (byte)99}, byteArray0);
      assertTrue(boolean2);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{}", string1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("newarray");
      assertEquals((short)188, short0);
      
      String string0 = "+M2";
      try { 
        Utility.typeOfSignature("+M2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4)K\"!");
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-670), (-670));
      assertEquals((-670), int0);
      
      String string0 = Utility.compactClassName("boolean");
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      int int1 = Utility.setBit((-670), (-670));
      assertFalse(int1 == int0);
      assertEquals((-666), int1);
      
      try { 
        Utility.methodSignatureReturnType("4)K\"!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K\"!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = Utility.setBit(3916, 2150);
      assertEquals(3916, int0);
      
      byte byte0 = Utility.typeOfSignature("SMG%K/wPe/T");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte) (-78), (byte)16}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte) (-78), (byte)16}, byteArray0);
      assertNotNull(string0);
      assertEquals("lconst_0", string0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-59);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1883626367), 42);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(42, constantMethodHandle0.getReferenceIndex());
      assertEquals((-1883626367), constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)109;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte) (-59);
      byteArray1[7] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)67, (byte)79, (byte)109, (byte)23, (byte) (-59), (byte) (-59), (byte)0, (byte)109}, byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray1.length);
      
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(17231, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)67, (byte)79, (byte)109, (byte)23, (byte) (-59), (byte) (-59), (byte)0, (byte)109}, byteArray1);
      assertNotNull(constantClass0);
      assertEquals(8, byteArray1.length);
      
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)79, (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(88, 88);
      assertEquals(88, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)40, (byte)14}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)40, (byte)40);
      assertEquals(40, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(40, constantFieldref0.getClassIndex());
      assertNotNull(constantFieldref0);
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(62, 8);
      assertEquals(62, constantMethodHandle0.getReferenceKind());
      assertEquals(8, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertEquals(62, constantMethodHandle0.getReferenceKind());
      assertEquals(8, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(62, constantMethodHandle1.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(8, constantMethodHandle1.getReferenceIndex());
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertNotNull(constantMethodHandle1);
      
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)40, (byte)14}, byteArray0);
      assertNotNull(string0);
      assertEquals("dload_2", string0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YCb|vZ1'-eAO,r,>Q(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YCb|vZ1'-eAO,r,>Q('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertNotNull(string0);
      assertEquals("void", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte)46;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("V");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("V", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1917), (int) (byte)88, true);
      assertEquals(1, constantPool0.getLength());
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-96), (byte)72, (byte)76, (byte) (-4), (byte)7, (byte)50, (byte)88, (byte) (-14), (byte)46}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    if_icmpne\t\t#18508\n3:    <illegal opcode>\n4:    iconst_4\n5:    aaload\n6:    pop2\n7:    <illegal opcode>\n8:    iaload\n", string1);
      assertEquals(9, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char char0 = '?';
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = "\\\"";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.replace("\"", "ACC_SUPER flag\t\t", "ACC_SUPER flag\t\t");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"", string1);
      
      int int0 = Utility.clearBit(1429, 3171);
      assertEquals(1429, int0);
      
      try { 
        Utility.typeOfSignature("Q4iyjv?h|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q4iyjv?h|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("}e%Z;<i&@W-VWc");
      assertNotNull(string0);
      assertEquals("}e%Z;<i&@W-VWc", string0);
      
      String string1 = Utility.replace("}e%Z;<i&@W-VWc", "}e%Z;<i&@W-VWc", ")w8");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")w8", string1);
      
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4657, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)58;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)117;
      byteArray1[5] = (byte) (-31);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)117, (byte)58}, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)117, (byte)58, (byte)117, (byte) (-31)}, byteArray1);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)96;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)67;
      String string0 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)40, (byte)71, (byte)2, (byte)15, (byte)96, (byte)67}, byteArray0);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Utility.fillup("aTfX8*>dh- Wm", (-3846), true, '@');
      assertNotNull(string0);
      assertEquals("aTfX8*>dh- Wm", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)113;
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-3), (byte)6, (byte)113}, byteArray0);
      assertNotNull(string1);
      assertEquals("8a fd 06 71", string1);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!Lqg {uY");
      assertFalse(boolean0);
      
      String string2 = Utility.compactClassName("compiler version\t");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("compiler version\t", string2);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte)113;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-3), (byte)6, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-118), (byte) (-118), (byte)113}, byteArray1);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 99, 2048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(120, 16384);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("}s*", false);
      assertArrayEquals(new byte[] {(byte)125, (byte)115, (byte)42}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte)115, (byte)42}, byteArray0);
      assertNotNull(string0);
      assertEquals("7d 73 2a", string0);
      assertEquals(3, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("7d 73 2a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7d 73 2a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short short0 = Utility.searchOpcode("? 4>PkU[+;!_~CJTl4");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-89), (byte)126, (byte)9, (byte)51, (byte) (-39), (byte)17, (byte) (-64)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-89));
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-89), constantInteger0.getBytes());
      assertNotNull(constantInteger0);
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)126, (byte)9, (byte)51, (byte) (-39), (byte)17, (byte) (-64)}, byteArray0);
      assertNotNull(string0);
      assertEquals("goto\t\t#32265", string0);
      assertEquals(7, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C", false);
      assertNotNull(string0);
      assertEquals("char", string0);
      
      boolean boolean0 = Utility.isSet((-1154388920), 16384);
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("C", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C", string1);
      
      String string2 = Utility.compactClassName("\"");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\"", string2);
      
      int int0 = Utility.setBit(1329, 230);
      assertEquals(1393, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "Invalid method signature: ";
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)114;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)83, (byte)72, (byte)56, (byte) (-49), (byte)90, (byte)95, (byte)114}, byteArray0);
      assertNotNull(string0);
      assertEquals("00 94 53 48 38 cf 5a 5f 72", string0);
      assertEquals(9, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("00 94 53 48 38 cf 5a 5f 72");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 94 53 48 38 cf 5a 5f 72
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-59);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)59, (byte)125, (byte) (-76), (byte) (-59)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.format(91, (byte) (-59), true, '2');
      assertNotNull(string0);
      assertEquals("91", string0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.compactClassName("91", "%6", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("91", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "%6";
      objectArray0[2] = (Object) (byte) (-59);
      objectArray0[3] = (Object) "%6";
      objectArray0[4] = (Object) "%6";
      objectArray0[5] = (Object) "%6";
      objectArray0[6] = (Object) "%6";
      objectArray0[7] = (Object) "%6";
      objectArray0[8] = (Object) null;
      String string2 = Utility.printArray(objectArray0, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("null, %6, -59, %6, %6, %6, %6, %6, null", string2);
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-59), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ns71S(`oiro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ns71S(`oiro'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "Rk";
      String string1 = Utility.compactClassName("Rk");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Rk", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = Utility.compactClassName("arraylength", "f/dFxv}", true);
      assertNotNull(string0);
      assertEquals("arraylength", string0);
      
      String string1 = Utility.printArray((Object[]) null, true);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)24;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-34), (-1348));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iconst_2
         // 2:    <illegal opcode>
         // 3:    isub
         // 4:    lload_2
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "(start_pc = ";
      boolean boolean0 = false;
      String string1 = Utility.fillup("(start_pc = ", 2375, false, '#');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isSet(2375, (-957));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = "if_icmple";
      String string3 = Utility.replace("if_icmple", string1, "(start_pc = ");
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("if_icmple", string3);
      
      try { 
        Utility.methodSignatureArgumentTypes("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "qTa.hQ$V2'e>Umg~";
      stringArray0[1] = "fcmpl";
      stringArray0[2] = "fcmpl";
      stringArray0[3] = "fcmpl";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qTa.hQ$V2'e>Umg~");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stringArray0[4] = "fcmpl";
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fcmpl");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Utility.methodTypeToSignature("fcmpl", stringArray0);
      assertNotNull(string0);
      assertEquals("(LqTa/hQ$V2'e>Umg~;Lfcmpl;Lfcmpl;Lfcmpl;Lfcmpl;)Lfcmpl;", string0);
      assertEquals(5, stringArray0.length);
      
      int int0 = 1;
      String string1 = Utility.accessToString(1, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public", string1);
      
      String string2 = Utility.signatureToString("V|D'yh+lUvkT*P%");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("void", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("lushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lushr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = Utility.accessToString(3052, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("protected static synchronized volatile transient native interface strictfp", string1);
      
      byte[] byteArray0 = Utility.decode("long", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)111, (byte)110, (byte)103}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte)108, (byte)111, (byte)110, (byte)103}, byteArray0);
      assertTrue(boolean3);
      assertEquals(4, byteArray0.length);
      
      String string2 = Utility.compactClassName("", true);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = (byte)26;
      byteArray1[0] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)26, (-1074));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = (-500);
      int int1 = Utility.clearBit((-500), 1079);
      assertFalse(int1 == int0);
      assertEquals((-8389108), int1);
      
      try { 
        Utility.typeOfSignature("Only element values of type annotation can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type annotation can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("gaT4l[T_p]'9u2p");
      assertNotNull(string0);
      assertEquals("[LgaT4l;", string0);
      
      String string1 = "9 yeVqn:W@Qw6+\"Qv,";
      String string2 = Utility.compactClassName("9 yeVqn:W@Qw6+\"Qv,");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9 yeVqn:W@Qw6+\"Qv,", string2);
      
      String string3 = Utility.methodSignatureReturnType("[LgaT4l;");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("gaT4l[]", string3);
      
      try { 
        Utility.methodSignatureReturnType("|U8C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|U8C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3Z6Q}Xv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Z6Q}Xv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)125, (byte) (-70), (byte)49, (byte) (-75), (byte) (-63), (byte) (-83), (byte) (-56), (byte)107}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(36);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(36, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(1, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)125, (byte) (-70), (byte)49, (byte) (-75), (byte) (-63), (byte) (-83), (byte) (-56), (byte)107}, byteArray0);
      assertNotNull(string0);
      assertEquals("lushr", string0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Utility.accessToString(87, true);
      assertNotNull(string0);
      assertEquals("public private protected final volatile", string0);
      
      String string1 = Utility.signatureToString("CLASSPATH component ", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("char", string1);
      
      String[] stringArray0 = Constants.ITEM_NAMES;
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string2 = Utility.accessToString(109, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("public protected static volatile", string2);
      
      String string3 = Utility.printArray((Object[]) stringArray0, false, false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Bogus, Integer, Float, Double, Long, Null, InitObject, Object, NewObject", string3);
      assertEquals(9, stringArray0.length);
      
      String string4 = Utility.printArray((Object[]) null, true, true);
      assertNull(string4);
      
      String string5 = Utility.methodTypeToSignature("Illegal type: ", stringArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("(LBogus;LInteger;LFloat;LDouble;LLong;LNull;LInitObject;LObject;LNewObject;)LIllegal;", string5);
      assertEquals(9, stringArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte) (-106);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-115), 1549, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("h6-<s1TfM!qf4!$JzC|", false);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(18, byteArray0.length);
      
      String string0 = Utility.accessToString((-311));
      assertNotNull(string0);
      assertEquals("public static volatile transient interface abstract strictfp synthetic annotation enum", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("h6-<s1TfM!qf4!$JzC|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `h6-<s1TfM!qf4!$JzC|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.signatureToString("Byte code error: ", false);
      assertNotNull(string0);
      assertEquals("byte", string0);
      
      String string1 = Utility.printArray((Object[]) null, false);
      assertNull(string1);
      
      boolean boolean0 = Utility.isSet(629, 229);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = (-2);
      String string0 = Utility.classOrInterface((-2));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      byte byte0 = Utility.typeOfSignature("CONSTANT_Class");
      assertEquals((byte)5, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureArgumentTypes("\"T;D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"T;D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)68;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 231, 231);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("7G=32.S>Q:", false);
      assertNotNull(byteArray0);
      assertEquals(11, byteArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("M/O.m2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M/O.m2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.replace("impdep2", "impdep2", "\"u$");
      assertNotNull(string0);
      assertEquals("\"u$", string0);
      
      String string1 = Utility.replace("1WA'/L,ujV)U|", "1WA'/L,ujV)U|", "ES#XbFY.-Tp");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ES#XbFY.-Tp", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-113);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = Utility.encode(byteArray0, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)60, (byte) (-113)}, byteArray0);
      assertNotNull(string2);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertEquals(2, byteArray0.length);
      
      String string3 = Utility.getSignature("1WA'/L,ujV)U|");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("L1WA'/L,ujV)U|;", string3);
      
      String string4 = Utility.compactClassName("ES#XbFY.-Tp", " ", true);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("ES#XbFY.-Tp", string4);
      
      String string5 = "@JZn2%_667~nH{$h(";
      try { 
        Utility.typeOfSignature("@JZn2%_667~nH{$h(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @JZn2%_667~nH{$h(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-59);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1883626367), 42);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(42, constantMethodHandle0.getReferenceIndex());
      assertEquals((-1883626367), constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      constantArray0[0] = (Constant) constantMethodHandle0;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)126;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte)32;
      byteArray1[7] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)67, (byte)79, (byte)126, (byte)23, (byte) (-59), (byte) (-59), (byte)32, (byte)126}, byteArray1);
      assertNotNull(byteSequence0);
      assertEquals(8, byteArray1.length);
      
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(17231, constantClass0.getNameIndex());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)67, (byte)79, (byte)126, (byte)23, (byte) (-59), (byte) (-59), (byte)32, (byte)126}, byteArray1);
      assertNotNull(constantClass0);
      assertEquals(8, byteArray1.length);
      
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      assertEquals(2, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)79, (int) (byte) (-59), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "astore_1";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "astore_1");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("TTz<", false);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)122, (byte)60}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(4, byteArray0.length);
      
      String string1 = Utility.format(84, 84, false, '%');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%84", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("TTz<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TTz<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 550;
      String string0 = Utility.accessToString(550);
      assertNotNull(string0);
      assertEquals("private protected synchronized interface", string0);
      
      String string1 = Utility.classOrInterface(85);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "private protected synchronized interface";
      stringArray0[1] = "private protected synchronized interface";
      stringArray0[2] = "private protected synchronized interface";
      stringArray0[3] = "\t\t";
      stringArray0[4] = "LnvU";
      stringArray0[5] = "private protected synchronized interface";
      stringArray0[6] = "private protected synchronized interface";
      stringArray0[7] = "private protected synchronized interface";
      String string2 = Utility.methodTypeToSignature("\t\t", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("(Lprivate;Lprivate;Lprivate;L;LLnvU;Lprivate;Lprivate;Lprivate;)L;", string2);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E=d..KtVi", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E=d..KtVi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-103);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-12), 438);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpeq\t\t#26118
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-55), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.signatureToString("SAME_LOCALS_1_STACK", false);
      assertNotNull(string0);
      assertEquals("short", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SAME_LOCALS_1_STACK";
      stringArray0[1] = "Object";
      stringArray0[2] = "SAME_LOCALS_1_STACK";
      stringArray0[3] = "SAME_LOCALS_1_STACK";
      stringArray0[4] = "Object";
      stringArray0[5] = "short";
      stringArray0[6] = "Object";
      stringArray0[7] = "Object";
      stringArray0[8] = "short";
      String string1 = Utility.methodTypeToSignature("Object", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(LSAME_LOCALS_1_STACK;LObject;LSAME_LOCALS_1_STACK;LSAME_LOCALS_1_STACK;LObject;SLObject;LObject;S)LObject;", string1);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = Utility.clearBit(71, 71);
      assertEquals(71, int0);
      
      String string0 = Utility.accessToString(71);
      assertNotNull(string0);
      assertEquals("public private protected volatile", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-14);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), 95);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-21), (byte) (-13), (byte)102, (byte)45, (byte) (-14)}, byteArray0);
      assertNotNull(string1);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fsub\n4:    aload_3\n5:    <illegal opcode>\n", string1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)32;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 512, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "tableswitch";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tableswitch");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("U*~Fi7l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U*~Fi7l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      File file0 = MockFile.createTempFile("bytes must not be null!", "bytes must not be null!");
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/bytes must not be null!0bytes must not be null!", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("bytes must not be null!0bytes must not be null!", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) file0;
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "bytes must not be null!", objectArray0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/bytes must not be null!0bytes must not be null!", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("bytes must not be null!0bytes must not be null!", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(6, objectArray0.length);
      
      PrintWriter printWriter1 = mockPrintWriter0.append('%');
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/bytes must not be null!0bytes must not be null!", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("bytes must not be null!0bytes must not be null!", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      assertNotNull(printWriter1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) "bytes must not be null!";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/bytes must not be null!0bytes must not be null!", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("bytes must not be null!0bytes must not be null!", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(6, objectArray0.length);
      
      String string0 = "6*AwblQ_}\"9>\\x|MQn";
      try { 
        Utility.typeOfSignature("6*AwblQ_}\"9>x|MQn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6*AwblQ_}\"9>x|MQn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(55, 55);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)99;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2004), 55, false);
      assertArrayEquals(new byte[] {(byte)110, (byte)51, (byte) (-82), (byte)32, (byte)104, (byte)103, (byte)99}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    fdiv\n1:    baload\n2:    freturn\n3:    lload_2\n4:    imul\n5:    dsub\n6:    dadd\n", string0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = Utility.clearBit(722, (-601));
      assertEquals(594, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)110;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, 2464);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "[HF`O<F*Z/";
      try { 
        Utility.methodSignatureReturnType("[HF`O<F*Z/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HF`O<F*Z/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.accessToString((-49), true);
      assertNotNull(string0);
      assertEquals("public private protected static volatile transient native abstract strictfp synthetic annotation enum", string0);
      
      boolean boolean0 = Utility.isSet(256, 3);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)25;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, 150);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    iconst_5
         // 4:    fcmpl
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The magic number must contain at least one byte");
      assertEquals((byte)14, byte0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "The magic number must contain at least one byte";
      objectArray0[1] = (Object) "The magic number must contain at least one byte";
      objectArray0[2] = (Object) "The magic number must contain at least one byte";
      objectArray0[3] = (Object) "The magic number must contain at least one byte";
      objectArray0[4] = (Object) "The magic number must contain at least one byte";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      objectArray0[5] = (Object) "The magic number must contain at least one byte";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[7] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      try { 
        Utility.methodSignatureReturnType("{The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, java.lang.Object@34548efe, java.lang.Object@6b738a59}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, The magic number must contain at least one byte, java.lang.Object@34548efe, java.lang.Object@6b738a59}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "J.ZDDRi";
      String string1 = Utility.methodSignatureReturnType("J.ZDDRi", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "&S1GsshA;Y";
      try { 
        Utility.typeOfSignature("&S1GsshA;Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &S1GsshA;Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('P');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-38);
      String string0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)70;
      String string1 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-21), (byte) (-16), (byte)92, (byte) (-18), (byte) (-38), (byte) (-11), (byte)70}, byteArray0);
      assertNotNull(string1);
      assertEquals("$f4$eb$f0$5c$ee$da$f5F", string1);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = Utility.decode("$f4$eb$f0$5c$ee$da$f5F", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-21), (byte) (-16), (byte)92, (byte) (-18), (byte) (-38), (byte) (-11), (byte)70}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      
      try { 
        Utility.typeOfSignature("$f4$eb$f0$5c$ee$da$f5F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $f4$eb$f0$5c$ee$da$f5F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ladd";
      stringArray0[1] = "ladd";
      stringArray0[2] = "_/h$bjE(0[#";
      stringArray0[3] = "ladd";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("ladd", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-96);
      byte byte0 = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-84);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    if_icmpne\t\t#-18503
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "SpO.HtU";
      String string1 = Utility.signatureToString("SpO.HtU");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("short", string1);
      
      String string2 = Utility.accessToString(59, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("public private static final synchronized", string2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("invokestatic");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)63;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)63}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      String string3 = "(";
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "(");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Padding byte != 0 in ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = false;
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Xp~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xp~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.";
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "invokedynamic";
      stringArray0[3] = "[~?Un0~W>6ww";
      stringArray0[4] = "invokedynamic";
      stringArray0[5] = "invokedynamic";
      stringArray0[6] = "invokedynamic";
      stringArray0[7] = "lookupswitch";
      stringArray0[8] = "invokedynamic";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("invokedynamic", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [~?Un0~W>6ww
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2293, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F:PA$", false);
      assertNotNull(string0);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t(wide)");
      assertFalse(boolean0);
      
      String string0 = "\"V4";
      try { 
        Utility.typeOfSignature("\"V4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"V4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "Hvd~KLzD|9";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hvd~KLzD|9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hvd~KLzD|9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.format(830, 830, false, 'U');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object
      objectArray0[3] = (Object
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU830";
      objectArray0[6] = (Object
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-5002), (int) (byte)106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.isSet((-2519), 12);
      Utility.accessToString((-2519), false);
      Utility.getSignature("1r?9fBZ=WB4:T");
      try { 
        Utility.methodSignatureReturnType("Lx4SSX4*xDu%1W_+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lx4SSX4*xDu%1W_+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "8*fzY'r[";
      try { 
        Utility.typeOfSignature("8*fzY'r[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8*fzY'r[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Ui#=4_j7b~fCObEnU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ui#=4_j7b~fCObEnU'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-85);
      byte byte1 = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte) (-20), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",ic?r[");
      mockPrintWriter0.append('P');
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      int int0 = 65;
      mockPrintWriter0.write(65);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ",ic?r[";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) printWriter0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[5] = (Object) ",ic?r[";
      objectArray0[6] = (Object) ",ic?r[";
      Utility.printArray(printWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("arraylength", "arraylength", "k&W^uRcb!QrqMDMS!=", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-23);
      byte byte1 = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byte byte2 = (byte)59;
      byteArray0[3] = (byte)59;
      byte byte3 = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)72;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(122, (byte)55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid signature: `", true);
      short short0 = Utility.searchOpcode("R#`P7XVo,h@");
      assertEquals((short) (-1), short0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("@4");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "R#`P7XVo,h@";
      objectArray0[1] = (Object) "@4";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "@4";
      objectArray0[4] = (Object) "R#`P7XVo,h@";
      objectArray0[5] = (Object) "@4";
      objectArray0[6] = (Object) mockPrintStream0;
      mockPrintStream0.printf("@4", objectArray0);
      Object[] objectArray1 = new Object[4];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      mockPrintStream0.write(byteArray0, 54, (-12437164));
      mockPrintStream0.print('6');
      objectArray1[0] = (Object) "@4";
      objectArray1[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "@4";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray1);
      String string1 = Utility.convertString("int");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("monitorent", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      constantPool0.setConstantPool(constantArray0);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      byteSequence0.readUnsignedByte();
      assertEquals(4, byteSequence0.getIndex());
      
      Utility.isSet(16, 1);
      Utility.fillup("~>MJe", 16, false, '\\');
      Utility.searchOpcode("fdiv");
      Utility.compactClassName("java.lang.\\pr_5.^j");
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.fillup("*9'{hAl{%F&`", 25, false, ':');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)114;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("14 94 53 48 38 cf 5a 5f 72");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 14 94 53 48 38 cf 5a 5f 72
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "\\pr_5/^j";
      Utility.convertString("pr_5/^j");
      boolean boolean0 = true;
      Utility.compactClassName("\\pr_5/^j", true);
      Utility.setBit(186, (-2361));
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q850z ,BnZHS2(+~-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q850z ,BnZHS2(+~-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PqJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PqJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.accessToString(95);
      Utility.compactClassName("public private protected static final volatile");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)90;
      Utility.encode(byteArray0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected static final volatile", (String) null, "public private protected static final volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.accessToString((-1215), true);
      try { 
        Utility.typeOfMethodSignature("5:a82w55;C8n.hF{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5:a82w55;C8n.hF{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("Dont call getValueBoolean() on a non BOOLEAN ElementValue", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "double";
      objectArray0[1] = (Object) "Dont call getValueBoolean() on a non BOOLEAN ElementValue";
      Utility.printArray(objectArray0, true, false);
      String string0 = "E;v(o";
      String string1 = "jsr_w";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1323), (byte) (-62));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("E;v(o");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-17));
      constantArray0[4] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(91, 91, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.accessToString(9);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[9];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("public static", "$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"$l$8b$I$A$A$A$A$A$A$A\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = Utility.fillup("<illegal opcode>", (-1463), false, 'R');
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.classOrInterface((-85));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-23);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), 247);
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit(85, 85);
      try { 
        Utility.methodSignatureReturnType("0:    pop\n1:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    pop
         // 1:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K>-}LK<#o\"X0Y!qYd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K>-}LK<#o\"X0Y!qYd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)90;
      byteArray0[1] = (byte)90;
      byte byte1 = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byte byte2 = (byte)75;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-99);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format((byte) (-99), (byte) (-1), true, '=');
      Utility.format(128, (-520), true, '=');
      try { 
        Utility.typeOfMethodSignature("-99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -99
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oiD");
      Utility.replace("\t\t#", "oiD", "oiD");
      Utility.searchOpcode("oiD");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.bcel.classfile.ConstantFloat", "getstatic");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"getstatic\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "org.apache.bcel.classfile.Utility";
      try { 
        Utility.typeOfSignature("org.apache.bcel.classfile.Utility");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "BootstrapMethods";
      stringArray0[1] = "BootstrapMethods";
      stringArray0[2] = "BootstrapMethods";
      stringArray0[3] = "The filter must not be null";
      String string0 = Utility.methodTypeToSignature("BootstrapMethods", stringArray0);
      assertEquals("(LBootstrapMethods;LBootstrapMethods;LBootstrapMethods;LThe;)LBootstrapMethods;", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.clearBit(280, 280);
      String string0 = "$_ W2;|^Hjod=";
      try { 
        Utility.methodSignatureArgumentTypes("$_ W2;|^Hjod=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $_ W2;|^Hjod=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = Utility.replace("x!glS6(fH5r>e", "</hs}paQvtr\"JMml7", "x!glS6(fH5r>e");
      assertEquals("x!glS6(fH5r>e", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.classOrInterface(96);
      String string0 = "void";
      try { 
        Utility.decode("void", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.isSet(32, 32);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.getSignature(">\t");
      boolean boolean0 = true;
      Utility.compactClassName("getstatic", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -85
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.compactClassName("{java.lang.Object@7acd24fb, java.lang.Object@6d6e86ec, java.lang.Object@22ababd2, java.lang.Object@5d5efc0d}", "{java.lang.Object@7acd24fb, java.lang.Object@6d6e86ec, java.lang.Object@22ababd2, java.lang.Object@5d5efc0d}", true);
      Utility.format((-25), 82, true, 'S');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{java.lang.Object@7acd24fb, java.lang.Object@6d6e86ec, java.lang.Object@22ababd2, java.lang.Object@5d5efc0d}", "{java.lang.Object@7acd24fb, java.lang.Object@6d6e86ec, java.lang.Object@22ababd2, java.lang.Object@5d5efc0d}", "int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {java.lang.Object@7acd24fb, java.lang.Object@6d6e86ec, java.lang.Object@22ababd2, java.lang.Object@5d5efc0d}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = ";2^sd^vwG_d'_>(_";
      try { 
        Utility.methodSignatureArgumentTypes(";2^sd^vwG_d'_>(_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;2^sd^vwG_d'_>(_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "\t<";
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t<", "\t<", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = (-1227);
      Utility.isSet(0, (-1227));
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.Object@4ed30485, java.lang.Object@184ab31a, java.lang.Object@744af41c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@4ed30485, java.lang.Object@184ab31a, java.lang.Object@744af41c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.setBit(0, 0);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("{Fq>]DLX6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {Fq>]DLX6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.compactClassName("L4nyLVE(7", true);
      Utility.getSignature("lcaT/aI_*H'8I\"zG");
      boolean boolean0 = true;
      Utility.accessToString(2352, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "L4nyLVE(7";
      objectArray0[1] = (Object) "final native strictfp";
      objectArray0[2] = (Object) "L4nyLVE(7";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "LlcaT/aI_*H'8I\"zG;";
      objectArray0[6] = (Object) "L4nyLVE(7";
      objectArray0[7] = (Object) "final native strictfp";
      objectArray0[8] = (Object) "LlcaT/aI_*H'8I\"zG;";
      boolean boolean1 = false;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("tp^/C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tp^/C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "PCXk";
      try { 
        Utility.typeOfSignature("PCXk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PCXk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format((-868), (-868), false, 'L');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)34;
      Utility.encode(byteArray0, false);
      Utility.format((-2557), (byte)6, false, 'L');
      Utility.accessToString(4273);
      // Undeclared exception!
      try { 
        Utility.signatureToString("public final synchronized transient synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public final synchronized transient synthetic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.compactClassName("if_icmple", false);
      Utility.accessToString(9, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ireturn");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "public static";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "if_icmple";
      objectArray0[3] = (Object) "public static";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "if_icmple";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.typeOfMethodSignature("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("5s`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5s`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-36);
      byte byte0 = (byte)65;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte) (-91);
      Utility.toHexString(byteArray0);
      Utility.methodTypeToSignature("invokeInterface", (String[]) null);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat(171.55F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(5, (byte)5);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1715, (byte)65);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.replace("getfield", "getfield", "getfield");
      Utility.clearBit(102, 102);
      try { 
        Utility.typeOfSignature("-d-2Jd(QL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -d-2Jd(QL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.convertString("OmE");
      byte[] byteArray0 = Utility.decode("aload", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2012), (-1718320895));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      ConstantInteger constantInteger0 = new ConstantInteger(795);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantClass constantClass0 = new ConstantClass((-2012));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantInterfaceMethodref1.setNameAndTypeIndex((-126));
      constantArray0[4] = (Constant) constantClass1;
      try { 
        Constant.readConstant(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 100
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(4044, 4044);
      Utility.accessToString(8140);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)79;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-1);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("0CYfP]OA");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1560), 239, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    d2i
         // 2:    fcmpg
         // 3:    <illegal opcode>
         // 4:    fcmpl
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.fillup("Invalid signature: `", 148, false, 'O');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ireturn", "Euf|H]lC3::{2", "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOInvalid signature: `", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C", false);
      assertEquals("char", string0);
      
      boolean boolean0 = Utility.isSet((-1154388975), 16384);
      assertTrue(boolean0);
      
      Utility.compactClassName("C", false);
      Utility.compactClassName("ai\"");
      int int0 = Utility.setBit(1329, 230);
      assertEquals(1393, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)72;
      String string1 = Utility.compactClassName("C", true);
      assertEquals("C", string1);
  }
}
