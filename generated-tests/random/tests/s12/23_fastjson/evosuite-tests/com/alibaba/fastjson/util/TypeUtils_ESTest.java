/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:00:21 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.Date;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("ApUErw||oJ84*q");
      assertEquals((-3430482542016261163L), long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("@k38");
      assertEquals(3194997819550970015L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-31);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(bigInteger0);
      assertEquals((short) (-7936), bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)38;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(bigInteger0);
      assertEquals((short)38, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("password", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<String> class0 = String.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(23);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<OptionalCodec> class0 = OptionalCodec.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("-~B^w\"F9+s$.usMn`^R", "-~B^w\"F9+s$.usMn`^R");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("-~B^w\"F9+s$.usMn`^R", "-~B^w\"F9+s$.usMn`^R");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "java/lang/Double");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.instrumentation.InstrumentingClassLoader@785746c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "4I}ga%Rb7", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException(sQLTransientException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@34e63b41
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "oFdHL='=F", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(814, 814);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      Field[] fieldArray0 = new Field[1];
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.isKotlin(class0);
      Class<TimeUnit> class1 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertEquals(1537, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<MapDeserializer> class0 = MapDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(";Ljava/lang/Object;I)Z", "E&Ze4Y@xj],F");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("AapE{?8^M;L9b", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.lang.MockThrowable: AapE{?8^M;L9b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.JavaBeanSerializer", classLoader0, true);
      TypeUtils.getKoltinConstructorParameters(class0);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constructor<SqlDateDeserializer>[] constructorArray0 = (Constructor<SqlDateDeserializer>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("A$dxRknl08w\"_");
      assertEquals(7068959640510418232L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(bufferCapabilities0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Collection collection0 = TypeUtils.createCollection(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("-~B^w\"F9+s$.usMn`^R").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.toLocale(",");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(814, 814);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ",", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("#");
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "yZGH ", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, " (V2;'1rY7w(Ir|7jc", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Short> class0 = Short.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      Class<Byte> class1 = Byte.TYPE;
      Type type0 = FieldInfo.getFieldType(class0, class1, class1);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Type[] typeArray0 = new Type[4];
      Type type0 = TypeUtils.getGenericParamType(typeArray0[0]);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Point> class0 = Point.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      TypeUtils.fnv1a_64("I*,qJ^Ee00O$Jz\u0004k");
      TypeUtils.loadClass("");
      Class<Jdk8DateCodec> class3 = Jdk8DateCodec.class;
      TypeUtils.getParserFeatures(class3);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2, weakHashMap0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(class1);
      weakHashMap0.containsValue((Object) null);
      Class<SQLException> class4 = SQLException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToJavaBean(map0, class4, parserConfig0);
      Class<?> class5 = TypeUtils.getClass((Type) class3);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, parserConfig0.propertyNamingStrategy);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      Type[] typeArray0 = new Type[9];
      typeArray0[2] = (Type) class0;
      Class<Double> class2 = Double.class;
      Type type0 = FieldInfo.getFieldType(class2, typeArray0[8], typeArray0[2]);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[7], type0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<InternalError> class0 = InternalError.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.serializer.ClobSeriliazer", class0, 3392903);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.serializer.ClobSeriliazer -> java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "java/lang/Double");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java/lang/Double", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Point", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[byte", classLoader0);
      assertTrue(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeMap<String, JavaObjectDeserializer> treeMap0 = new TreeMap<String, JavaObjectDeserializer>();
      TreeMap<String, Object> treeMap1 = new TreeMap<String, Object>((SortedMap<String, ?>) treeMap0);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) treeMap1, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<Locale> class0 = Locale.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      InstantiationError instantiationError0 = new InstantiationError();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "kotlin.ranges.ClosedFloatRange", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<SQLInvalidAuthorizationSpecException, LinkageError> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, LinkageError>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      IllegalMonitorStateException illegalMonitorStateException0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(illegalMonitorStateException0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<JobAttributes> class0 = JobAttributes.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigInteger0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("ePfE_=1[:'y'");
      assertEquals("epfe_=1[:'Y'", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "oFdHL='=F", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      BreakIterator breakIterator0 = BreakIterator.getLineInstance(locale0);
      Class<TimeUnit> class0 = TimeUnit.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) breakIterator0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<Timestamp> class1 = Timestamp.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) propertyNamingStrategy0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Collator collator0 = Collator.getInstance(locale0);
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) collator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.text.RuleBasedCollator@ed5d3ef6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) type0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      Class<Character> class0 = Character.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) optionalCodec0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Object object0 = TypeUtils.cast((Object) "?|", class0, parserConfig0);
      assertEquals("?|", object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      java.util.IdentityHashMap<Exception, JavaObjectDeserializer> identityHashMap0 = new java.util.IdentityHashMap<Exception, JavaObjectDeserializer>();
      Class<Date> class0 = Date.class;
      Date date0 = TypeUtils.castToJavaBean((Object) identityHashMap0, class0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-20));
      Class<Byte> class0 = Byte.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Byte byte1 = TypeUtils.cast((Object) byte0, class0, parserConfig0);
      assertEquals((byte) (-20), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONPDeserializer jSONPDeserializer0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(jSONPDeserializer0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp((-142L));
      Class<Boolean> class0 = Boolean.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timestamp0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 1969-12-31 23:59:59.858
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("kotlin.reflect.jvm.internal.KClassImpl");
      assertEquals(28, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {Text-specific antialiasing enable key=Text-specific antialiasing enable key}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("mg%mHtNOAJ?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"mg%mHtNOAJ?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = new Double(0.0);
      Integer integer0 = TypeUtils.castToInt(double0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConcurrentHashMap<NumberFormatException, Rectangle> concurrentHashMap0 = new ConcurrentHashMap<NumberFormatException, Rectangle>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.Rectangle[x=0,y=0,width=0,height=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(436L);
      Long long0 = TypeUtils.castToLong(atomicLong0);
      assertEquals(436L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("4I}ga%Rb7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber(".N:},/m<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : istoString
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(993L);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(atomicLong0);
      assertEquals("1970-01-01 00:00:00.993", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-8));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DateFormatSymbols@742b50d9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long((-1194L));
      java.util.Date date0 = TypeUtils.castToDate(long0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Ljava.lang.AutoCloseable");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(2268L);
      Double double0 = TypeUtils.castToDouble(atomicLong0);
      assertEquals(2268.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("java.awt.Color");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float((-1186.780391458));
      Float float1 = TypeUtils.castToFloat(float0);
      assertEquals((-1186.7804F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(verifyError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      WeakHashMap<Jdk8DateCodec, SQLFeatureNotSupportedException> weakHashMap0 = new WeakHashMap<Jdk8DateCodec, SQLFeatureNotSupportedException>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger0);
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(batchUpdateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(";oJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";oJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-381));
      Short short0 = TypeUtils.castToShort(atomicInteger0);
      assertEquals((short) (-381), (short)short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("S");
      assertEquals('S', (char)character0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("fil");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : fil
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-24));
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : -24
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("@k38");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@k38\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2860);
      Byte byte0 = TypeUtils.castToByte(bigDecimal0);
      assertEquals((byte)44, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("getDeclaringClass");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "has", class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"has\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(7, list0.size());
  }
}
