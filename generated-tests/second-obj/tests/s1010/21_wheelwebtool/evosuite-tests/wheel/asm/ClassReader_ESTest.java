/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:27:56 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(7);
      classReader0.accept((ClassVisitor) classWriter0, 7);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1419);
      classReader0.getClassName();
      classReader0.accept((ClassVisitor) classWriter0, classWriter1.COMPUTE_MAXS);
      int int0 = 8565;
      classReader0.readLong(int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[6];
      classReader0.getClassName();
      classReader0.getClassName();
      charArray0[0] = 'Z';
      ClassWriter classWriter0 = new ClassWriter(7);
      classReader0.getInterfaces();
      int int0 = 33;
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(144);
      classWriter0.addType("w0AY=}8<|D");
      classWriter0.addType("isLocalClass");
      classReader0.accept((ClassVisitor) classWriter0, 2553);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      classReader0.accept((ClassVisitor) classWriter0, (-54));
      int int0 = 21;
      classReader0.readLong(int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      classReader0.readInt(10);
      int int0 = 43;
      ClassWriter classWriter0 = new ClassWriter(43);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("getDeclainglashs");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(19569, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      ClassWriter classWriter0 = new ClassWriter(46);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 2);
      char char0 = 'n';
      charArray0[1] = char0;
      char char1 = '.';
      charArray0[2] = char1;
      char char2 = ']';
      charArray0[3] = char2;
      int int0 = 9577;
      classReader0.accept((ClassVisitor) classWriter0, int0);
      classReader0.readLong(int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      assertEquals(19569, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      int int0 = Frame.CHAR;
      assertEquals(16777227, int0);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.readUnsignedShort(101);
      classReader0.readByte(32);
      classWriter0.addType("checkPackageAccess");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(19569, classReader0.header);
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter((-1690));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      int int0 = 14;
      classReader0.accept((ClassVisitor) classWriter0, 16822);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      int int1 = 2976;
      classReader0.readLong(classWriter0.COMPUTE_FRAMES);
      Label[] labelArray0 = new Label[6];
      Label label0 = classReader0.readLabel(int1, labelArray0);
      labelArray0[0] = label0;
      classReader0.readLabel(int0, labelArray0);
      Label label1 = labelArray0[0].next;
      Frame frame0 = new Frame();
      Frame frame1 = labelArray0[0].frame;
      Label label2 = frame1.owner;
      int int2 = 1503;
      classReader0.readLabel(int2, labelArray0);
      int int3 = 100;
      ClassWriter classWriter1 = new ClassWriter(int3);
      frame1.merge(classWriter1, frame0, classWriter1.COMPUTE_MAXS);
      Label label3 = new Label();
      Label label4 = label2.successor;
      Edge edge0 = new Edge();
      int int4 = 24;
      char[] charArray0 = new char[4];
      char char0 = '8';
      charArray0[0] = char0;
      char char1 = '';
      charArray0[1] = char1;
      char char2 = 'q';
      charArray0[2] = char2;
      char char3 = '.';
      charArray0[3] = char3;
      classReader0.readConst(int4, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      classReader0.getSuperName();
      int int0 = 12;
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      classWriter0.newNameType("oED;'e\"!f~7L,:LW", "oED;'e\"!f~7L,:LW");
      classWriter0.visitMethod(9617, "Z", "ConstantValue", "ConstantValue", stringArray0);
      classWriter0.addType("java/lang/Class");
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getInterfaces();
      classReader0.readUnsignedShort(4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 1218);
      classReader0.readLong(int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter((-737));
      classReader0.accept((ClassVisitor) classWriter0, (-737));
      int int0 = 9577;
      classReader0.accept((ClassVisitor) classWriter0, 262144);
      classReader0.readLong(int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      ClassWriter classWriter0 = new ClassWriter(7);
      classWriter0.addType("w0AY=}8<|D");
      classReader0.accept((ClassVisitor) classWriter0, 2538);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, classWriter0.COMPUTE_MAXS);
      classReader0.readLong(classWriter0.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(12);
      classReader0.getClassName();
      // Undeclared exception!
      try { 
        classReader0.readUTF8(12, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11010
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      classWriter0.newNameType("oED;'e\"!f~7L,:LW", "oED;'e\"!f~7L,:LW");
      classWriter0.visitMethod(9617, "Z", "ConstantValue", "ConstantValue", stringArray0);
      classWriter0.addType("java/lang/Class");
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.getInterfaces();
      classReader0.readUnsignedShort(4);
      classReader0.getItem(4);
  }
}
