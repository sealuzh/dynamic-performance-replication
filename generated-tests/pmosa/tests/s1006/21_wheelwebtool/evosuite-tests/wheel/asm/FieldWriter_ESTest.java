/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 07:31:19 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", "");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      fieldWriter0.visitEnd();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-782));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 228, "u&.wTjAqzT!}C[", "f", "%G`=z%dxaS&u<f", "u&.wTjAqzT!}C[");
      fieldWriter0.getSize();
      fieldWriter0.next = null;
      Attribute attribute0 = new Attribute("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-103);
      String string0 = "Synthetic";
      Attribute attribute1 = new Attribute("");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", "");
      fieldWriter0.visitAnnotation("p.qn[`+(,8g@1/", true);
      fieldWriter0.getSize();
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(83);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2455), "bY]6]h{{@k)\"WrBw,", "bY]6]h{{@k)\"WrBw,", "bY]6]h{{@k)\"WrBw,", "bY]6]h{{@k)\"WrBw,");
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", "");
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.put11(1, 49);
      ByteVector byteVector2 = byteVector0.putShort((-1615));
      fieldWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      String string0 = null;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", (String) null, mockHijrahDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@48588802
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2455), "bY]6]h{{@k)\"WrBw,", "bY]6]h{{@k)\"WrBw,", "bY]6]h{{@k)\"WrBw,", "bY]6]h{{@k)\"WrBw,");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      classWriter0.index = 0;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2330), "", "", "", "");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = classWriter0.pool;
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32768));
      ClassWriter classWriter1 = new ClassWriter((-2455));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 2, "RuntimeVisibleAnnotations", "bY]6]h{{@k)\"WrBw,", (String) null, (Object) null);
      fieldWriter0.getSize();
      ClassWriter classWriter2 = new ClassWriter(2);
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = classWriter2.pool;
      fieldWriter0.put(byteVector1);
      assertFalse(byteVector1.equals((Object)byteVector0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%]ksR~>dM;59";
      stringArray0[1] = "%]ksR~>dM;59";
      stringArray0[2] = "]+M/ L}";
      stringArray0[3] = "%]ksR~>dM;59";
      classWriter0.visit((-889275714), (-323), "]+M/ L}", "%]ksR~>dM;59", (String) null, stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-323), "]+M/ L}", "]+M/ L}", "Y7-t VH(UR'y", "%]ksR~>dM;59");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.visitEnd();
      ByteVector byteVector0 = classWriter0.pool;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        byteVector0.putByteArray(byteArray0, (-2388), 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "bY]6]h{{@k)\"WrBw,";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "bY]6]h{{@k)\"WrBw,";
      stringArray0[4] = "bY]6]h{{@k)\"WrBw,";
      classWriter0.visit((-3940), (-2455), "JSR/RET are not supported with computeFrames option", "", "bY]6]h{{@k)\"WrBw,", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2455), "B_#Gn5?dY?>SSB", "N(8Aty-5'", "ConstantValue", (Object) null);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putShort((-1532));
      fieldWriter0.put(byteVector1);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }
}
