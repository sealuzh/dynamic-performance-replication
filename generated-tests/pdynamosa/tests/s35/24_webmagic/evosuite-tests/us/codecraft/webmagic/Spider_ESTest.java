/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:15:08 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.SmartContentSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      ExecutorService executorService0 = null;
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-707));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x UARXP)FB%V.tv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request("x UARXP)FB%V.tv");
      int int0 = Spider.STAT_RUNNING;
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = ".";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Page.fail();
      boolean boolean0 = false;
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider0.setExecutorService(forkJoinPool0);
      Spider spider1 = new Spider(simplePageProcessor0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">vLAt99");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.clearPipeline();
      String string0 = "a)2Lo";
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider1.scheduler(priorityScheduler0);
      spider3.scheduler = (Scheduler) priorityScheduler0;
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("a)2Lo");
      Spider spider4 = spider2.pipeline(jsonFilePipeline0);
      // Undeclared exception!
      try { 
        spider4.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      spider0.getThreadAlive();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1169), threadFactory0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("u5q;]2S&Z0\"SZ?N+WK=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("rM!`9,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.pipelines = (List<Pipeline>) linkedList0;
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("VuM");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 506);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider2.clearPipeline();
      assertTrue(spider3.isSpawnUrl());
      
      Spider spider4 = spider3.setSpawnUrl(false);
      queueScheduler0.poll(spider4);
      Request[] requestArray0 = new Request[0];
      Spider spider5 = spider1.addRequest(requestArray0);
      Spider spider6 = spider0.addRequest(requestArray0);
      Spider spider7 = spider6.scheduler(queueScheduler0);
      Spider spider8 = spider5.setSpawnUrl(false);
      spider7.getSpiderListeners();
      assertFalse(spider0.isSpawnUrl());
      
      spider8.setExecutorService(forkJoinPool0);
      assertFalse(spider1.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.thread(30000);
      spider2.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(".");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider0.setScheduler(duplicateRemovedScheduler0);
      Spider spider3 = spider2.thread(30000);
      spider3.getUUID();
      spider3.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(md8ug6JbHBM*");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} started!", "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_minus");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider1.setSpawnUrl(true);
      String[] stringArray0 = new String[0];
      spider2.addUrl(stringArray0);
      int int0 = (-985);
      long long0 = (-1482L);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-985), (-985), (-985), timeUnit0, linkedBlockingQueue0, threadPoolExecutor_AbortPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider0.setScheduler(duplicateRemovedScheduler0);
      Spider spider3 = spider2.thread(30000);
      spider3.getUUID();
      spider3.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*?sT{6$h+97b6lD");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p8g+?)q$}Ix^M{c");
      Spider spider0 = Spider.create(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Spider spider2 = spider1.downloader((Downloader) null);
      spider2.clearPipeline();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<YZ:],S1&UT");
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x UARXP)FB%V.tv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.setSpawnUrl(true);
      queueScheduler0.poll(spider0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Request[] requestArray1 = new Request[7];
      requestArray1[0] = null;
      requestArray1[1] = null;
      requestArray1[2] = null;
      requestArray1[3] = null;
      Request request0 = new Request("x UARXP)FB%V.tv");
      requestArray1[4] = request0;
      requestArray1[5] = null;
      requestArray1[6] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LAlJxYc(0p $g&k");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setPipelines((List<Pipeline>) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Page.fail();
      // Undeclared exception!
      try { 
        spider0.pipeline(multiPagePipeline0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(867);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      Spider spider1 = spider0.pipeline((Pipeline) null);
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "html";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("html");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      spider1.thread((ExecutorService) null, 1);
      String string0 = "us.codecraft.webmagic.scheduler.PriorityScheduler";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.scheduler.PriorityScheduler");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setExitWhenComplete(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      spider1.startUrls(linkedList0);
      int int0 = 0;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread mockThread0 = new MockThread(spider1, "");
      String string0 = "";
      linkedList0.add("");
      linkedList0.pollFirst();
      mockThread0.getUncaughtExceptionHandler();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 506);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setSpawnUrl(false);
      queueScheduler0.poll(spider4);
      Spider spider5 = new Spider(simplePageProcessor0);
      assertTrue(spider5.isSpawnUrl());
      
      boolean boolean0 = spider1.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x UARXP)FB%V.tv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      queueScheduler0.getLeftRequestsCount(spider0);
      // Undeclared exception!
      try { 
        spider0.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(md8ug6JbHBM*");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.setUUID((String) null);
      Spider spider2 = spider1.setSpawnUrl(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "(md8ug6JbHBM*";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Page page0 = new Page();
      Request request0 = new Request("z?K3hI7/S}XimSeZx4");
      spider0.startRequests = null;
      Request request1 = request0.setPriority((-30L));
      Request request2 = request1.setCharset("z?K3hI7/S}XimSeZx4");
      request2.setBinaryContent(false);
      Request request3 = request1.setUrl(".");
      // Undeclared exception!
      try { 
        spider0.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.getStartTime();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      spider1.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.thread(30000);
      spider2.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = ".html";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".html");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      String string1 = "0Kgb<Y0[8&,0Kbh3>s";
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("0Kgb<Y0[8&,0Kbh3>s");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      priorityScheduler0.poll(spider2);
      String string1 = "u";
      Request request0 = new Request("u");
      // Undeclared exception!
      try { 
        spider2.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 506);
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setSpawnUrl(true);
      queueScheduler0.poll(spider4);
      Spider spider5 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      spider1.getScheduler();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "ipC0ys{3'cB`z");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.stop();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.thread((ExecutorService) forkJoinPool0, 889);
      Spider spider2 = spider1.setSpawnUrl(true);
      Request request0 = new Request();
      Request request1 = request0.setPriority(889);
      Request request2 = request1.setBinaryContent(false);
      Request request3 = request2.setCharset("?5");
      Request request4 = request3.setUrl("");
      // Undeclared exception!
      try { 
        spider2.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      spider0.exitWhenComplete = false;
      spider0.setEmptySleepTime((-1080));
      Spider spider1 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.setUUID("");
      Spider spider3 = spider2.setDownloader((Downloader) null);
      Page page0 = Page.fail();
      Json json0 = page0.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("");
      Request request1 = request0.setUrl("");
      requestArray0[0] = request1;
      boolean boolean0 = true;
      Request request2 = request0.setBinaryContent(true);
      Request request3 = request2.addHeader("", "Mdd)*PCY");
      requestArray0[1] = request3;
      Request request4 = new Request("^h~|J~");
      requestArray0[2] = request4;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider0.setScheduler(duplicateRemovedScheduler0);
      Spider spider3 = spider2.thread(30000);
      spider3.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", bytes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("illegal encoding ");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getThreadAlive();
      spider0.stop();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Spider spider1 = spider0.thread(3478);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      int int0 = spider2.getThreadAlive();
      assertEquals(0, int0);
      
      Spider.Status spider_Status0 = spider1.getStatus();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider_Status0);
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".-*8, 92-F_#'|");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e=6#BYGIN|rN+DbEKOF");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingQueue<FilePipeline> linkedBlockingQueue0 = new LinkedBlockingQueue<FilePipeline>();
      linkedBlockingDeque0.containsAll(linkedBlockingQueue0);
      linkedBlockingDeque0.add("'_fS0y");
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("");
      Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setUUID("");
      spider2.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "kvOPS*\\n8:GHDg";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e=6#BYGIN|rN+DbEKOF");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("e=6#BYGIN|rN+DbEKOF");
      ExecutorService executorService0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e=6#BYGIN|rN+DbEKOF";
      stringArray0[1] = "waitNewUrl - interrupted, error {}";
      stringArray0[2] = "e=6#BYGIN|rN+DbEKOF";
      jsonFilePipeline0.checkAndMakeParentDirecotry("waitNewUrl - interrupted, error {}");
      stringArray0[3] = "e=6#BYGIN|rN+DbEKOF";
      stringArray0[4] = "waitNewUrl - interrupted, error {}";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D*B{-]603@h2o");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      LinkedList<Request> linkedList0 = new LinkedList<Request>(list0);
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      ForkJoinTask.getPool();
      Spider spider3 = spider2.setExecutorService((ExecutorService) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      spider4.getSite();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      spider0.setEmptySleepTime(2216);
      Spider spider1 = spider0.thread(3478);
      assertEquals(Spider.Status.Init, spider1.getStatus());
      
      Spider spider2 = Spider.create(simplePageProcessor0);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      spider0.thread(3);
      spider0.setEmptySleepTime(0);
      Spider spider2 = spider1.clearPipeline();
      spider2.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider0.getSpiderListeners();
      spider2.start();
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request("");
      requestArray0[0] = request0;
      Request request1 = new Request("_cycle_tried_times");
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("LAlJxYc(0p $g&k");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      Spider spider2 = spider1.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e=6#BYGIN|rN+DbEKOF");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedBlockingQueue<FilePipeline> linkedBlockingQueue0 = new LinkedBlockingQueue<FilePipeline>();
      linkedBlockingDeque0.toString();
      linkedBlockingDeque0.containsAll(linkedBlockingQueue0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.thread(30000);
      Spider spider3 = spider2.thread(30000);
      spider3.clearPipeline();
      Request[] requestArray0 = new Request[5];
      Request request0 = new Request();
      request0.getExtras();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      requestArray0[0] = request1;
      Request request2 = request0.putExtra("Spider {} closed! {} pages downloaded.", (Object) null);
      requestArray0[1] = request2;
      Request request3 = request0.setPriority(30000);
      requestArray0[2] = request3;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[3] = null;
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("_cycle_tried_times");
      fileCacheQueueScheduler1.poll(spider0);
      requestArray0[4] = null;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      spider0.getThreadAlive();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      Spider.create(simplePageProcessor0);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      String string1 = ",{L";
      String string2 = "";
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Spider.Status.fromValue((-1693));
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.processor.SimplePageProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Spider.Status.fromValue(2292);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page sthtus code error, page {} , co>e: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("page sthtus code error, page {} , co>e: {}", "page sthtus code error, page {} , co>e: {}");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.scheduler((Scheduler) null);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2292);
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      Page page0 = new Page();
      page0.setSkip(true);
      List<Request> list0 = new LinkedList<Request>();
      Spider spider4 = spider3.startRequest(list0);
      Spider spider5 = spider4.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider5.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.stop();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider0.thread((ExecutorService) forkJoinPool0, 889);
      Spider.create(simplePageProcessor0);
      long long0 = spider0.getPageCount();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, long0);
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      spider0.sleep(67);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("1", "ipC0ys{3'cB`z");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider1.isSpawnUrl());
      
      spider1.setSpawnUrl(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<SpiderListener> list0 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(list0);
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x UARXP)FB%V.tv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.checkIfRunning();
      spider0.sleep(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertTrue(spider0.isSpawnUrl());
      assertNull(list0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".-*8, 92-F_#'|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(".-*8, 92-F_#'|", ".-*8, 92-F_#'|");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<SpiderListener> list0 = spider2.getAll((Collection<String>) linkedHashSet0);
      Spider spider3 = spider2.setSpiderListeners(list0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ".-*8, 92-F_#'|";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      spider0.setSpawnUrl(false);
      spider0.clearPipeline();
      Pipeline pipeline0 = null;
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Scheduler scheduler0 = null;
      spider0.setScheduler((Scheduler) null);
      int int0 = 0;
      int int1 = (-190);
      long long0 = 2814L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-2552), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.getThreadAlive();
      Page page0 = Page.fail();
      page0.setSkip(true);
      page0.setStatusCode(0);
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page1, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("R0");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.exitWhenComplete = false;
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.utils.MultiKeyMapBase");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(",pW5'_1_Pz-/&", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",pW5'_1_Pz-/&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ",pW5'_1_Pz-/&";
      stringArray0[4] = ",pW5'_1_Pz-/&";
      stringArray0[5] = "us.codecraft.webmagic.utils.MultiKeyMapBase";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("R0");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      int int0 = Spider.STAT_RUNNING;
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Request request0 = new Request("R0");
      Request request1 = request0.setMethod("R0");
      Request request2 = request1.addHeader("_cycle_tried_times", "_cycle_tried_times");
      Request request3 = request2.setCharset("");
      Request request4 = request2.putExtra("", request3);
      Request request5 = request4.setPriority(10L);
      // Undeclared exception!
      try { 
        spider1.onSuccess(request5);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("task or site can not be null");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("task or site can not be null", "2;H3/Cb<.?zz");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline("2;H3/Cb<.?zz");
      Spider spider3 = spider2.addPipeline(filePipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider3.setSpiderListeners(linkedList0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(1, 1, 1, timeUnit0, priorityBlockingQueue0, (ThreadFactory) null, threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e=6#BYGIN|rN+DbEKOF");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider0.thread(3);
      spider0.setEmptySleepTime(0);
      Spider spider3 = spider1.clearPipeline();
      spider3.pageProcessor = (PageProcessor) simplePageProcessor0;
      spider0.getSpiderListeners();
      spider3.start();
      Spider spider4 = spider2.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider4.setScheduler(queueScheduler0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(md8ug6JbHBM*");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "(md8ug6JbHBM*";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "ipC0ys{3'cB`z");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpawnUrl(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<SpiderListener> list0 = spider0.getAll((Collection<String>) linkedHashSet0);
      Spider spider3 = spider2.setSpiderListeners(list0);
      spider3.getSpiderListeners();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      assertEquals(Spider.Status.Stopped, spider0.getStatus());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pcH@NjJR7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("koH(LV.q97!?`A");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      Spider spider1 = spider0.thread(30000);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(86, threadFactory0);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(30000, scheduledThreadPoolExecutor0);
      spider1.threadPool = countableThreadPool0;
      spider0.close();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.getThreadAlive();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "threadNum should be more than one!";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("threadNum should be more than one!", "threadNum should be more than one!");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      ExecutorService executorService0 = null;
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      // Undeclared exception!
      try { 
        spider2.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("threadNum should be more than one!", "threadNum should be more than one!");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("threadNum should be more than one!");
      fileCacheQueueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider2.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page.fail();
      Spider spider1 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider1.get("kvOPS*\n8:GHDg");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cfHpToHYK?eB");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = false;
      Spider spider1 = spider0.setExitWhenComplete(false);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yes");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cfHpToHYK?eB");
      Spider spider0 = new Spider(simplePageProcessor0);
      boolean boolean0 = true;
      Spider spider1 = spider0.setExitWhenComplete(true);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider1.startRequest(list0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      QueueScheduler queueScheduler0 = new QueueScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.setUUID("pNaQF5hYd*St'v?F`");
      spider2.setExecutorService((ExecutorService) null);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = ".";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      request0.setUrl("Init");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_cycle_tried_times");
      requestArray0[1] = null;
      spider0.getStartTime();
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".-*8, 92-F_#'|");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.exitWhenComplete = true;
      spider0.stop();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(0);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", bytes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.extractAndAddRequests((Page) null, false);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      spider0.getCollectorPipeline();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 2271;
      Spider.Status.fromValue(2271);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page sthtus code error, page {} , co>e: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList1);
      // Undeclared exception!
      try { 
        spider3.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/!;MG!bLQ");
      Request request0 = new Request();
      int int0 = Spider.STAT_RUNNING;
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request1 = request0.setBinaryContent(true);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      Request request1 = request0.setUrl("Init");
      requestArray0[0] = request1;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Page.fail();
      Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.fromValue(867);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$9-)+,#k7U");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("$9-)+,#k7U");
      Page page0 = Page.fail();
      boolean boolean0 = true;
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x UARXP)FB%V.tv");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider0.sleep(1134);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      spider0.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json0 = new Json(linkedList0);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider1.setPipelines((List<Pipeline>) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      page0.setSkip(true);
      // Undeclared exception!
      try { 
        spider0.thread((-2306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("threadNum should be more than one!", "threadNum should be more than one!");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.setExecutorService((ExecutorService) null);
      Spider spider2 = spider0.clearPipeline();
      Spider spider3 = spider2.setExitWhenComplete(false);
      spider3.setDownloader(phantomJSDownloader0);
      spider3.thread(67);
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader("threadNum should be more than one!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      page0.setSkip(true);
      page0.setRawText("");
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 2);
      Spider spider2 = spider1.downloader((Downloader) null);
      Spider spider3 = spider2.clearPipeline();
      spider3.checkIfRunning();
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.getThreadAlive();
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      Page page2 = page1.setRawText("");
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_mN)w/7o$/0TE5mZ");
      Spider spider0 = new Spider(simplePageProcessor0);
      List<String> list0 = null;
      Json json0 = new Json((List<String>) null);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider0.setPipelines((List<Pipeline>) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1460), (-1460), (-1L), timeUnit0, priorityBlockingQueue0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", bytes=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Stopped");
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      spider2.setDownloader((Downloader) null);
      spider1.setSpawnUrl(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedHashSet0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.scheduler = (Scheduler) queueScheduler0;
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      // Undeclared exception!
      try { 
        spider0.sleep((-1693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Spider.Status.fromValue(867);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", acceptStatCode=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread(835);
      spider1.runAsync();
      //  // Unstable assertion: assertEquals(Spider.Status.Init, spider0.getStatus());
      
      int int0 = spider1.getThreadAlive();
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider0.getStatus());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "select text error! ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("select text error! ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.pipeline(filePipeline0);
      LinkedBlockingQueue<JsonFilePipeline> linkedBlockingQueue0 = new LinkedBlockingQueue<JsonFilePipeline>();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>(linkedBlockingQueue0);
      spider1.setPipelines(linkedList0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("!3`^Xx");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "x";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      int int0 = 1;
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      spider3.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("kvOPS*\n8:GHDg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.setScheduler(queueScheduler0);
      spider1.addPipeline((Pipeline) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
