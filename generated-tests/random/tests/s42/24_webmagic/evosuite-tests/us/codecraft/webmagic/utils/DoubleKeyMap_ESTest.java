/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:04:17 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, String>();
      Map<Map<String, String>, String> map0 = doubleKeyMap0.remove((Map<String, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Map<String, Object>, Object, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Object, HashMap<Integer, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      doubleKeyMap0.put((Map<String, Object>) hashMap0, (Object) null, hashMap1);
      HashMap<Integer, String> hashMap2 = doubleKeyMap0.remove((Map<String, Object>) hashMap0, (Object) null);
      assertNotNull(hashMap2);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Object, Integer, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<String, String>>();
      Integer integer0 = new Integer(0);
      HashMap<String, String> hashMap0 = doubleKeyMap0.remove((Object) "Oo'oO}PED'", integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Map<String, Object>, Object, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Object, HashMap<Integer, String>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((Map<String, Object>) hashMap0, (Object) map0, hashMap1);
      HashMap<Integer, String> hashMap2 = doubleKeyMap0.remove((Map<String, Object>) hashMap0, (Object) null);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-3448));
      DoubleKeyMap<HashMap<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap0, (Object) integer0, integer0);
      Integer integer1 = doubleKeyMap0.put(hashMap0, (Object) integer0, integer0);
      assertEquals((-3448), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Integer, Map<Object, Map<String, Object>>> hashMap0 = new HashMap<Integer, Map<Object, Map<String, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<String, Object>>(hashMap0, class0);
      Integer integer0 = new Integer((-1));
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      hashMap0.put(integer0, map0);
      Map<String, Object> map1 = doubleKeyMap0.get(integer0, (Object) hashMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer0 = new Integer(1);
      String string0 = doubleKeyMap0.get(integer0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, HashMap<String, Object>>();
      Map<Integer, Map<Object, HashMap<Object, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<Object, Object>>(map0);
      Map<Object, HashMap<Object, Object>> map1 = doubleKeyMap1.remove(integer0);
      assertNull(map1);
  }
}
