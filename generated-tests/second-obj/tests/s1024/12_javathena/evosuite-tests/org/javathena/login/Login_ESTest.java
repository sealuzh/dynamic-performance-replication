/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:15:57 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Calendar;
import javolution.util.FastComparator;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("\n", 50);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      login0.save_config_in_log();
      int int0 = Login.auth_num;
      login0.setAuth_max(0);
      int int1 = login0.getAuth_num();
      assertEquals(0, int1);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      // Undeclared exception!
      try { 
        login0.check_auth_sync();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      MySQLConfig.setLogin_server_pw("  But, NO IP IS AUTHORISED!");
      UserManagement.addUserTXT("conf/subnet_athena.conf", " does not have a field named '", "@ph_sy", '1');
      UserManagement.addAccountIdCount(100000000);
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data((Socket) null, fromChar0);
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      MySQLConfig.setLogin_server_pw("  But, NO IP IS AUTHORISED!");
      UserManagement.addUserTXT("\n", "", "conf/subnet_athena.conf", 'c');
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      login0.do_initTXT();
      login0.getServer_fd();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      assertEquals(2000000, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      MySQLConfig.setLogin_server_ip("conf/subnet_athena.conf");
      MockSocket mockSocket0 = new MockSocket();
      login0.check_ipmask(8, "2[1t$*ZC$KJ')oC'");
      login0.setAuth_max(30);
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initXML();
      login0.getAuth_num();
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      login0.check_ip(inetAddress0);
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      UserManagement.setAccountIdCount(2);
      classLoader0.getParent();
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        login0.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      String string0 = "@ph_sy";
      Login.mmo_auth_syncTXT();
      ConfigurationManagement.setAccess_denynum(2);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.login_log("nm|;3_i");
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.parse_console("~?FRRW[u!]wUs{0Vk)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      login0.getAuth_max();
      Login.setPASSWORDENC(100000000);
      login0.getServer_fd();
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      FastMap<Integer, Auth_data> fastMap0 = FastMap.newInstance();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(fastComparator0).hashCodeOf(any());
      FastMap<Integer, Auth_data> fastMap1 = fastMap0.setKeyComparator(fastComparator0);
      FastComparator<Auth_data> fastComparator1 = (FastComparator<Auth_data>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      FastMap<Integer, Auth_data> fastMap2 = fastMap1.setValueComparator(fastComparator1);
      Integer integer0 = new Integer((-637));
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null, (Integer) null).when(auth_data0).getAccount_id();
      doReturn((String) null).when(auth_data0).getUserid();
      fastMap2.put(integer0, auth_data0);
      UserManagement.setAuth_dats(fastMap2);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login.display_title();
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("\"Z+1wS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login.display_title();
      // Undeclared exception!
      try { 
        Login.mmo_auth_syncXML();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 50;
      intArray0[2] = 30;
      ConfigurationManagement.setSubnetmaski(intArray0);
      Login.display_title();
      login0.getServer_fd();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.logUnknownPackets(socket_data0);
      assertNull(socket_data0.getMd5key());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      login0.do_final();
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login.setPASSWORDENC(30002);
      Login login0 = new Login();
      int[] intArray0 = new int[2];
      intArray0[0] = 100000000;
      intArray0[1] = 2000000;
      login0.server_fd = intArray0;
      login0.setOut((PrintWriter) null);
      assertEquals(0, login0.getAuth_max());
      assertEquals(30002, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      Login.mmo_auth_syncTXT();
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      MySQLConfig.setLogin_server_pw("  But, NO IP IS AUTHORISED!");
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      Login.mmo_auth_syncTXT();
      MySQLConfig.setLogin_server_pw("  But, NO IP IS AUTHORISED!");
      UserManagement.addUserTXT("\n", "", "conf/subnet_athena.conf", 'c');
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      login0.do_initTXT();
      login0.getServer_fd();
      assertEquals(2000000, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      login0.do_initTXT();
      login0.getServer_fd();
      assertEquals(2000000, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      Login login1 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      byte[] byteArray0 = new byte[0];
      Login.showTab(byteArray0);
      // Undeclared exception!
      try { 
        login1.parse_console("G?%l*w(E0mF\"nhQ(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      FastMap.newInstance();
      FastComparator<Object> fastComparator0 = (FastComparator<Object>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      login0.yesNoOnOffToBoolean("OFF");
      // Undeclared exception!
      try { 
        Login.login_log("OFF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setDefault_codepage("conf/subnet_athena.conf");
      login0.do_final();
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      Login.setPASSWORDENC(31060);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)7;
      Login.showTab(byteArray0);
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login.getDbManagemtType();
      Login login0 = new Login();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("conf/subnet_athena.conf", 2000000, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:2000000
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Login login0 = new Login();
      login0.getServer_fd();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      // Undeclared exception!
      try { 
        login0.parse_admin((-36), socket_data0, (Login) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      Login login0 = new Login();
      login0.yesNoOnOffToBoolean("NO");
      // Undeclared exception!
      try { 
        Login.login_log("conf/subnet_athena.conf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      login0.getLog_fp();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      MySQLConfig.setLogin_server_pw("Finished.");
      UserManagement.addUserTXT("S`yRW!>o", "S`yRW!>o", "Finished.", '8');
      UserManagement.addAccountIdCount((-1091));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)46;
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      login0.do_initTXT();
      int int0 = Login.START_ACCOUNT_NUM;
      // Undeclared exception!
      try { 
        login0.parse_console("end");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      Login.mmo_auth_initTXT();
      login0.parse_console("OSQ38hs3o$/");
      login0.check_ipmask((-719), "<v]|Hd:.");
      UserManagement.addUserTXT((String) null, "<v]|Hd:.", "a<$22E'hKnb:E", '');
      Login.setPASSWORDENC(2000000);
      MySQLConfig.setLogin_server_port(2);
      Login login1 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login1.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      UserManagement.addUserTXT("Could not access ", "|7DJNyh.Nf@'(#V?RY", "conf/subnet_athena.conf", 'Z');
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync2 = login0.new Timer_interval_check_auth_sync();
      Login.getDbManagemtType();
      FromChar fromChar0 = new FromChar();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.check_ipmask((-2344), "m[ 9!$");
      UserManagement.addUserTXT("a<$22E'hKnb:E", "a<$22E'hKnb:E", "conf/subnet_athena.conf", '%');
      Login.setPASSWORDENC((-2344));
      MySQLConfig.setLogin_server_port(30);
      Login login1 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      UserManagement.addUserTXT((String) null, "<~b%)a2V+", "<~b%)a2V+", 'C');
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync2 = login0.new Timer_interval_check_auth_sync();
      Login.getDbManagemtType();
      FromChar fromChar0 = new FromChar();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      ConfigurationManagement.setAccess_allownum(10023);
      login0.getServer_fd();
      login0.do_initTXT();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      MockSocket mockSocket1 = new MockSocket();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      login0.check_ip(inetAddress0);
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      ConfigurationManagement.setAccess_allownum(2);
      FromChar fromChar1 = new FromChar();
      FromChar fromChar2 = new FromChar();
      login0.do_initTXT();
      MySQLConfig.setLogin_server_port((-1503));
      login0.parse_console("By}$Av',(]$+&");
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      Login.ConnectionListener login_ConnectionListener1 = null;
      try {
        login_ConnectionListener1 = login0.new ConnectionListener();
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Failed to open TCP port
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoSuiteSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      ConfigurationManagement.setAccess_denynum(2);
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      ConfigurationManagement.setAccess_allownum(2);
      FromChar fromChar0 = new FromChar();
      FromChar fromChar1 = new FromChar();
      login0.do_initTXT();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MySQLConfig.setLogin_server_port(393);
      Login.getPASSWORDENC();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      login0.do_initTXT();
      ConfigurationManagement.setAccess_allownum(10023);
      Login.mmo_auth_initTXT();
      String string0 = "level";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+ wy8q~R");
      login0.yesNoOnOffToBoolean("ON");
      // Undeclared exception!
      try { 
        Login.showTab((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      login0.getOut();
      MockSocket mockSocket0 = new MockSocket();
      FromChar fromChar0 = new FromChar();
      mockSocket0.close();
      ConfigurationManagement.setAccess_allownum(4433);
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromChar0);
      login0.parse_admin(10039, socket_data0, login0);
      Login.getPASSWORDENC();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("shutdown");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      int int0 = Calendar.MONDAY;
      int int1 = FromChar.WAN_UPDATE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.xml");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      MockSocket mockSocket0 = new MockSocket();
      FromAdmin fromAdmin0 = new FromAdmin();
      ConfigurationManagement.setAccess_allownum(31048);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      ConfigurationManagement.setAuth_before_save_file(4);
      Login login1 = new Login();
      UserManagement.setAccountIdCount((-1753213378));
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      UserManagement.addUserTXT(": ", "vPyR>Gz`V5a@A*pW==K", "com.thoughtworks.xstream.mapper.ClassAliasingMapper", ',');
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync2 = login1.new Timer_interval_check_auth_sync();
      Login.getDbManagemtType();
      FromChar fromChar0 = new FromChar();
      Login login2 = new Login();
      login1.do_initTXT();
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      FromAdmin fromAdmin0 = new FromAdmin();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromAdmin0);
      socket_data0.setAccount_id((-1));
      socket_data0.setMaintenance(0);
      Login.getMd5Data(socket_data0);
      Login.setPASSWORDENC((-1));
      socket_data0.cancel();
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }
}
