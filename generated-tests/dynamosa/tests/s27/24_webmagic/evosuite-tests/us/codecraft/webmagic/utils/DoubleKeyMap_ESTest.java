/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:13:39 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put("K[", (Object) "K[", (Object) "K[");
      Object object0 = doubleKeyMap0.remove("K[", (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put((Object) null, hashMap1);
      Map<Object, String> map0 = doubleKeyMap0.remove((Object) null);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Map<Map<String, Object>, String>> hashMap0 = new HashMap<Object, Map<Map<String, Object>, String>>();
      Class<Map> class0 = Map.class;
      HashMap<Map<String, Object>, String> hashMap1 = new HashMap<Map<String, Object>, String>();
      DoubleKeyMap<HashMap<String, Object>, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Integer, HashMap<String, Integer>>();
      Map<String, Object> map0 = doubleKeyMap0.newMap();
      hashMap1.put(map0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      hashMap0.put(class0, hashMap1);
      DoubleKeyMap<Object, Map<String, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, String>(hashMap0, class0);
      Map<Map<String, Object>, String> map1 = doubleKeyMap1.remove((Object) class0);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(map0);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(4766);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      String string0 = doubleKeyMap0.remove((Object) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>>();
      DoubleKeyMap<Object, Object, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<String, Object>>();
      HashMap<String, Object> hashMap0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, HashMap<Integer, Integer>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null);
      Object object0 = doubleKeyMap1.put("", "@IGzReX", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Map<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Map<String, Object>, Object>();
      Object object0 = doubleKeyMap0.put((Map<Integer, String>) null, (Map<String, Object>) null, (Object) "2m,J2");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, String>();
      DoubleKeyMap<Map<Integer, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, Object, Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-4176));
      Integer integer1 = doubleKeyMap1.put((Map<Integer, String>) hashMap0, (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(map0);
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Object, Map<String, String>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap3 = new DoubleKeyMap<Object, String, String>(map1);
      String string0 = doubleKeyMap3.put((Object) doubleKeyMap1, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Map<HashMap<Integer, Object>, Map<Object, HashMap<Object, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Object>>(map0);
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Integer integer0 = new Integer((-924));
      Object object0 = doubleKeyMap2.get((Object) doubleKeyMap1, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0);
      DoubleKeyMap<Object, String, Map<Integer, String>> doubleKeyMap2 = new DoubleKeyMap<Object, String, Map<Integer, String>>();
      Map<String, Map<Integer, String>> map1 = doubleKeyMap2.get((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Map<HashMap<Integer, String>, Map<Integer, String>>> hashMap0 = new HashMap<String, Map<HashMap<Integer, String>, Map<Integer, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Integer, String>, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, String>, Map<Integer, String>>(hashMap0, class0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("N3KUd>Yw1", hashMap1, (Map<Integer, String>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Object, Object>, HashMap<String, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, HashMap<String, Object>>((Map<Integer, Map<Map<Object, Object>, HashMap<String, Object>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<Integer, String>> hashMap0 = new HashMap<Map<Integer, String>, Map<Integer, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, String>(hashMap0, class0);
      Map<Integer, String> map0 = doubleKeyMap0.get((Map<Integer, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "_RK6=_", (Object) null);
      Object object0 = doubleKeyMap0.remove("", (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "_RK6=_", (Object) null);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = doubleKeyMap0.put("", (Object) "", (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, Object, HashMap<Object, Object>>();
      DoubleKeyMap<Map<Integer, String>, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<Integer, String>, Object, Integer>();
      Map<Map<HashMap<Map<Object, Object>, Object>, Map<Integer, String>>, Map<String, HashMap<Map<Object, Object>, Object>>> map0 = doubleKeyMap2.newMap();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      doubleKeyMap1.put((HashMap<Integer, Object>) null, (Object) map0, hashMap0);
      HashMap<Object, Object> hashMap1 = doubleKeyMap1.get((HashMap<Integer, Object>) null, (Object) doubleKeyMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put("K[", (Object) "K[", (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.remove("K[", (Object) "K[");
      assertEquals(0, hashMap1.size());
  }
}
