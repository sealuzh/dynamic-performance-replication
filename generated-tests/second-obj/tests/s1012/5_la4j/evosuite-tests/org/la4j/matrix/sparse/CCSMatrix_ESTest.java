/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:56:52 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(757);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 758
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(189, 3863.3723852);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(834.8).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1045, 0, matrixFunction0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.blankOfColumns(1463);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      CCSMatrix.identity(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 32;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-866));
      // Undeclared exception!
      try { 
        CCSMatrix.random((-866), (-866), (double) (-866), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(17);
      // Undeclared exception!
      try { 
        CCSMatrix.random(130, 17, (double) 130, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[] doubleArray0 = new double[27];
      mockRandom0.nextInt();
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1204), (-1204), 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(6, 6);
      cCSMatrix0.toSparseMatrix();
      Vector vector0 = cCSMatrix0.getRow((-2175));
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(6, vector0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 0);
      Matrix.block(matrix0, matrix0, matrix0, matrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.blankOfShape(0, 0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      cCSMatrix0.getRow(2562);
      cCSMatrix0.columnMajorIterator();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      mockRandom0.nextLong();
      mockRandom0.doubles((long) 0, (-1371.595), (double) 8);
      cCSMatrix0.setAll(0.0);
      CCSMatrix.diagonal(8, 0.0);
      cCSMatrix0.getRow(8);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("=]P_`\"$ik +@JRv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 37;
      doubleArray0[3] = (double) 480;
      int[] intArray0 = new int[4];
      intArray0[0] = 480;
      intArray0[1] = 37;
      MockRandom mockRandom0 = new MockRandom(37);
      mockRandom0.doubles(0L, (-1489.85215754), 1.278976924368181E-13);
      Integer integer0 = new Integer(13);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random(13, 189, 1.278976924368181E-13, (Random) mockRandom0);
      Matrix matrix0 = Matrix.randomSymmetric(5, mockRandom0);
      CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(37);
      cCSMatrix0.isColumnMajor();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1348, 1348, 1348);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(1348, vectorFunction0);
      MatrixFunction matrixFunction0 = null;
      int int0 = 17;
      int int1 = 3598;
      cCSMatrix1.updateAt(int0, int1, matrixFunction0);
      int int2 = (-4488);
      org.evosuite.runtime.Random.setNextRandom(int2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.to(matrixFactory0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertSame(cCSMatrix0, cCSMatrix1);
      assertSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertSame(cCSMatrix0, cCSMatrix1);
      
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertSame(cCSMatrix0, cCSMatrix1);
      assertNotNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(4);
      assertEquals(0, int0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (-1136), 1477.88706690666);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1136), 1489, (double) (-1136), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(0, 0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      String string0 = cRSMatrix0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("", string0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(string0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      cRSMatrix0.updateColumn(13, vectorFunction0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(13, 1592, (-417.34035));
      assertEquals(1592, basic2DMatrix0.columns());
      assertEquals(13, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) cRSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(0.0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cCSMatrix0.add((Matrix) cRSMatrix0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      
      CompressedVector compressedVector1 = (CompressedVector)cCSMatrix0.getRow(0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfRow(0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertNotNull(vectorIterator0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(32, 3363, (-1456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1456.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(386, 386, 386);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(386, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(386, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(2.0);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 8;
      int[] intArray0 = new int[5];
      intArray0[0] = 457;
      intArray0[1] = 457;
      intArray0[2] = 8;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3560, 457);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3560, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(457, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3560, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(457, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(48, vectorProcedure0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3560, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(457, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1881.914801614634;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1881.914801614634;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(Double.NEGATIVE_INFINITY, cCSMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      cCSMatrix0.setAll(0.0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("]#k@te}:9~X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = Double.BYTES;
      assertEquals(8, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1448));
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(936);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blankOfShape(0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      String string0 = cCSMatrix1.mkString((NumberFormat) null, "This matrix can't grow up.", "e8w->0ja/|e");
      assertEquals("", string0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(string0);
      
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.toColumnMajorSparseMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix2.max(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0, cCSMatrix2.columns());
      assertEquals(Double.NaN, cCSMatrix2.density(), 0.01);
      assertEquals(0, cCSMatrix2.cardinality());
      assertEquals(0, cCSMatrix2.rows());
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix2);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertSame(cCSMatrix1, cCSMatrix2);
      assertSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix2);
      
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroAt(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1494);
      Matrix matrix0 = cCSMatrix0.copyOfShape(7, 2050);
      CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copy();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      int int1 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3484;
      doubleArray0[1] = (double) 3484;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1;
      CCSMatrix cCSMatrix2 = CCSMatrix.from1DArray(1, 7, doubleArray0);
      assertEquals(0.0, cCSMatrix2.min(), 0.01);
      assertEquals(7, cCSMatrix2.columns());
      assertEquals(4, cCSMatrix2.cardinality());
      assertEquals(1, cCSMatrix2.rows());
      assertEquals(3484.0, cCSMatrix2.max(), 0.01);
      assertFalse(cCSMatrix2.isRowMajor());
      assertEquals(0.5714285714285714, cCSMatrix2.density(), 0.01);
      assertNotSame(cCSMatrix2, cCSMatrix1);
      assertNotSame(cCSMatrix2, cCSMatrix0);
      assertArrayEquals(new double[] {3484.0, 3484.0, 0.0, 0.0, 1.0, 7.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix2.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix2);
      
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Fc>^}eO>j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[1][2];
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(32);
      assertEquals(32, sparseMatrix0.columns());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(32, sparseMatrix0.cardinality());
      assertEquals(32, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0.03125, sparseMatrix0.density(), 0.01);
      assertNotNull(sparseMatrix0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, sparseMatrix0, cCSMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1494);
      int int0 = 1475;
      Matrix matrix0 = cCSMatrix0.copyOfShape(1493, 1475);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
      int int1 = 4;
      cCSMatrix1.blankOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(472.372643).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, (-50.197815));
      cCSMatrix0.updateAt(1, 1, matrixFunction0);
      cCSMatrix0.toRowVector();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeRow(1478);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[] doubleArray0 = new double[20];
      mockRandom0.nextInt();
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1, 1.0);
      Integer integer0 = new Integer(1);
      CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix1);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double double0 = (-50.197815);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, (-50.197815));
      Matrix matrix0 = cCSMatrix0.transpose();
      Matrix matrix1 = cCSMatrix0.insert(matrix0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.iterator();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix1, matrix1, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      doubleArray0[3] = (double) 457;
      int[] intArray0 = new int[5];
      intArray0[0] = 457;
      intArray0[1] = 457;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2086);
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      ((CCSMatrix) columnMajorSparseMatrix0).max();
      int int0 = 12;
      double double0 = (-3358.960938106419);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(37, 13, (double) 457, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(int0, double0);
      Matrix matrix0 = cCSMatrix0.rotate();
      cCSMatrix0.iteratorOrNonZeroColumns();
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix.block(matrix0, cCSMatrix0, columnMajorSparseMatrix0, cCSMatrix0);
      CCSMatrix.block(cCSMatrix0, columnMajorSparseMatrix1, matrix0, columnMajorSparseMatrix1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toRowVector();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      SparseMatrix.from1DArray(0, 0, doubleArray0[0]);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      columnMajorSparseMatrix0.updateColumn(0, vectorFunction0);
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).updateAt(0, 3, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 2059;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2059, 1);
      cCSMatrix0.setColumn(1, (double) 2059);
      int int1 = 184;
      cCSMatrix0.getRow(int1);
      int int2 = 2;
      cCSMatrix0.minInColumn(int2);
      MockRandom mockRandom0 = new MockRandom();
      int int3 = (-1702);
      org.evosuite.runtime.Random.setNextRandom(int3);
      cCSMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.isColumnMajor();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      cCSMatrix0.norm();
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(23);
      Integer.getInteger((String) null, 23);
      Integer.getInteger("Can not remove from this iterator.");
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(472.372643).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 5.7671858643372715);
      int int0 = (-16);
      cCSMatrix0.updateAt((-16), 1, matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(419, 1647.1224841353053);
      cCSMatrix1.minInColumn(2);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.zero(419, 23);
      cCSMatrix0.shuffle();
      DenseMatrix.constant(25, 23, 1647.1224841353053);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[0][7];
      CCSMatrix.from2DArray(doubleArray0);
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 48);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.copyOfShape(3, 3);
      Matrix matrix0 = null;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      cCSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("\"a')+wvg}EJ6iVD{9pA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      cCSMatrix0.eachNonZero(matrixProcedure0);
      SparseMatrix.from1DArray(0, 0, doubleArray0[0]);
      cCSMatrix0.toColumnMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-1648.64031)).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      Matrix.diagonal(0, 0);
      cCSMatrix0.getRow(0);
      ((CCSMatrix) columnMajorSparseMatrix0).getColumn(0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      double[] doubleArray0 = new double[20];
      mockRandom0.nextInt();
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(0, 1.0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      cCSMatrix0.min();
      int int0 = 2072;
      int[] intArray0 = new int[4];
      intArray0[0] = 12;
      intArray0[1] = 2072;
      intArray0[2] = 0;
      intArray0[3] = (-324);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix.diagonal(2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(0, 37);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3558);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, (-50.197815));
      cCSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.identity(2082);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.getRow(2082);
      int int0 = 1391;
      cCSMatrix0.copyOfShape(296, 2);
      cCSMatrix0.minInColumn(296);
      int int1 = (-1745);
      double[] doubleArray0 = new double[1];
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      int int2 = 2862;
      cCSMatrix1.copyOfShape(int2, int2);
      String string0 = "%M*/1DNEHRYQ";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 8;
      int int1 = 457;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 457;
      int[] intArray0 = new int[5];
      intArray0[0] = 457;
      intArray0[1] = 457;
      double[][] doubleArray1 = new double[9][8];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.isColumnMajor();
      cCSMatrix0.setAll(Double.POSITIVE_INFINITY);
      int int2 = 246;
      // Undeclared exception!
      try { 
        cCSMatrix0.slice(457, 457, (-201), 246);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [457..-201][457..246].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      MatrixFunction matrixFunction0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix.identity(8);
      CCSMatrix.diagonal(8, 24.63565);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("4");
      ooPlaceMatricesMultiplication1.partiallyApply((ColumnMajorSparseMatrix) cCSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int0 = (-186);
      cCSMatrix0.add((double) (-186));
      MockRandom mockRandom0 = new MockRandom(13);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((-1355), Double.NEGATIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1355x-1355
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      int int0 = 2;
      CCSMatrix.zero(2, 2);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, (-50.197815));
      Matrix.from1DArray(37, 32, doubleArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateColumn(2, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1244);
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copy();
      Matrix.diagonal(48, 2088.207322);
      cCSMatrix1.nonZeroAt(1244, 16);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      doubleArray0[2] = (double) 1219;
      int[] intArray0 = new int[2];
      intArray0[0] = 1219;
      intArray0[1] = 2065;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1219, 2065, 13, doubleArray0, intArray0, intArray0);
      double double0 = new Double(2065);
      SparseMatrix.identity(4);
      // Undeclared exception!
      try { 
        cCSMatrix0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(37, 2);
      Integer integer0 = new Integer(37);
      Integer.getInteger((String) null, 37);
      cCSMatrix0.blankOfShape(2, 2);
      Integer.getInteger((String) null);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixOperation0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(472.372643).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(2, 5.7671858643372715);
      cCSMatrix1.add((-1668.64761046));
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix1.updateAt((-16), 1, matrixFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(785.7757699214069, (double)(-16)).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      int int0 = (-2573);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(37, 3366, (-2573));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -2573.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1137);
      cCSMatrix0.isColumnMajor();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(408, vectorFunction0);
      cCSMatrix0.updateAt((-442), Integer.MAX_VALUE, (MatrixFunction) null);
      int int0 = 91;
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      doubleArray0[3] = (double) 457;
      int[] intArray0 = new int[4];
      intArray0[0] = 457;
      intArray0[1] = 37;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 37);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2086);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ((CCSMatrix) columnMajorSparseMatrix0).updateAt(457, 457, matrixFunction0);
      cCSMatrix0.getOrElse(0, 457, 1);
      int int0 = 17;
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 1232;
      int int2 = 236;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      // Undeclared exception!
      CCSMatrix.random(236, 1011, (double) 1, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 37;
      int int1 = 408;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(408);
      cCSMatrix0.isColumnMajor();
      int int2 = 6;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(5776.0).when(vectorAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZeroInColumn(6, vectorAccumulator0);
      Matrix.diagonal(37, 408);
      int int3 = 17;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("H.");
      cCSMatrix1.getColumn(int0);
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[8];
      double double1 = (-1856.1);
      doubleArray2[0] = double1;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int3;
      doubleArray2[4] = (double) int3;
      doubleArray2[5] = (double) int1;
      doubleArray2[6] = double0;
      doubleArray2[7] = (double) int3;
      doubleArray1[3] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = double0;
      doubleArray3[1] = (double) int1;
      doubleArray1[4] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray1[5] = doubleArray4;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      cCSMatrix1.subtract((double) int2);
      Matrix.diagonal(int1, double0);
      double double2 = 100.0;
      cCSMatrix0.setAll(double2);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1489);
      cCSMatrix0.isColumnMajor();
      Matrix matrix0 = cCSMatrix0.copyOfColumns(1489);
      cCSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.iteratorOrNonZeroColumns();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 13;
      intArray0[1] = 1489;
      intArray0[2] = 2038;
      intArray0[3] = 13;
      intArray0[4] = 2038;
      matrix0.select(intArray0, intArray0);
      cCSMatrix0.minInColumn(intArray0[0]);
      String string0 = "Can not decode CCSMatrix from the given byte array.";
      CCSMatrix.fromMatrixMarket(string0);
      MockRandom mockRandom1 = new MockRandom();
      org.evosuite.runtime.Random.setNextRandom(intArray0[1]);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      double[] doubleArray0 = new double[20];
      mockRandom0.nextInt();
      doubleArray0[0] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1, 1.0);
      CCSMatrix.diagonal(1, 1.0);
      Integer integer0 = new Integer(1);
      cCSMatrix1.insert((Matrix) cCSMatrix0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CCSMatrix cCSMatrix2 = new CCSMatrix(4, 5);
      CCSMatrix cCSMatrix3 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix2.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      double[] doubleArray0 = new double[5];
      mockRandom0.nextInt();
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1, 1.0);
      Matrix matrix0 = cCSMatrix0.multiply((Matrix) cCSMatrix1);
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      denseMatrix0.getRow(1);
      cCSMatrix1.equals((Object) matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(426);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 426
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, (-50.197815));
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-107), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -107x2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      Integer integer0 = new Integer(1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.minInColumn(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix1.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 457);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2086);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(37, (-797.14641));
      cCSMatrix1.nonZeroIteratorOfRow(4);
      ((CCSMatrix) columnMajorSparseMatrix0).minInColumn(37);
      CCSMatrix.fromMatrixMarket("");
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.transpose();
      Matrix matrix1 = cCSMatrix0.insert(matrix0);
      cCSMatrix0.columnMajorIterator();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix1, matrix1, matrix1, cCSMatrix0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix1.add(50.197815);
      int[] intArray0 = new int[4];
      intArray0[0] = (-382);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1, 1.0);
      Matrix matrix0 = cCSMatrix0.multiply((Matrix) cCSMatrix1);
      Integer integer0 = new Integer(1);
      cCSMatrix0.insert((Matrix) cCSMatrix1);
      VectorOperation<Object> vectorOperation0 = (VectorOperation<Object>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      int int0 = 20;
      CCSMatrix cCSMatrix2 = CCSMatrix.randomSymmetric(20, 1.0, (Random) mockRandom0);
      int int1 = 13;
      // Undeclared exception!
      try { 
        cCSMatrix2.insert(matrix0, 0, 1, 13, 1, 20, 3987);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 20 rows and 3987 cols at 13, 1 in a 20x20 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      doubleArray0[3] = (double) 457;
      int[] intArray0 = new int[4];
      intArray0[0] = 457;
      intArray0[1] = 37;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 37);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2086);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(37, (-797.14641));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ((CCSMatrix) columnMajorSparseMatrix0).updateAt(37, 457, matrixFunction0);
      cCSMatrix1.minInColumn(8);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      doubleArray0[3] = (double) 457;
      int[] intArray0 = new int[4];
      intArray0[0] = 457;
      intArray0[1] = 37;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1425, 457);
      ColumnMajorSparseMatrix.identity(1436);
      CCSMatrix.diagonal(1176, 37);
      cCSMatrix0.copyOfShape(2086, 37);
      cCSMatrix0.maxInColumn(6);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 46;
      doubleArray0[3] = (double) 457;
      int[] intArray0 = new int[3];
      intArray0[0] = 457;
      intArray0[1] = 46;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(46, 46);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(457);
      CCSMatrix.diagonal(46, 0.0);
      cCSMatrix0.copyOfShape(457, 46);
      cCSMatrix1.maxInColumn(46);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 37;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 37;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(37, 37.0);
      cCSMatrix0.columnMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix.zero(37, 37);
      int int1 = (-1814);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(5);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int2 = 1504;
      ooPlaceMatricesMultiplication0.partiallyApply((ColumnMajorSparseMatrix) cCSMatrix0);
      int int3 = (-186);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      int int4 = 2641;
      int int5 = 37;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int4, int5);
      ColumnMajorSparseMatrix.identity(int1);
      cCSMatrix0.minInColumn(int5);
      int int6 = 48;
      int int7 = 1000;
      CCSMatrix.zero(int3, int6, int7);
      int int8 = (-2641);
      cCSMatrix1.getOrElse(int0, int8, int2);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 37;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      doubleArray0[2] = (double) 457;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(457, 457);
      cCSMatrix0.columnMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(29, 29);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix1);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, cCSMatrix1);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      int int1 = 2696;
      CCSMatrix cCSMatrix3 = new CCSMatrix(int1, int1);
      int int2 = 8;
      ColumnMajorSparseMatrix.identity(int2);
      double double0 = Double.NEGATIVE_INFINITY;
      CCSMatrix.diagonal(int2, double0);
      int int3 = (-791);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.updateAt(int3, int3, matrixFunction0);
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix.identity(19);
      CCSMatrix cCSMatrix0 = new CCSMatrix(19, 19, 19);
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)10;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        CCSMatrix.zero((int) (byte)73, 0, (int) (byte)73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 37;
      doubleArray0[3] = (double) 457;
      int[] intArray0 = new int[4];
      intArray0[0] = 457;
      intArray0[1] = 37;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(431, 457);
      ColumnMajorSparseMatrix.identity(457);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1962, 2106);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(1962, 431, matrixFunction0);
      cCSMatrix1.select(intArray0, intArray0);
      CCSMatrix.from1DArray(5, 424, doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 37;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 37;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(37, 37.0);
      cCSMatrix0.columnMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      int int1 = 29;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(37, 37);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      CCSMatrix.block(cCSMatrix0, denseMatrix0, matrix0, matrix0);
      int int2 = 1;
      int int3 = 8;
      denseMatrix0.removeLastRow();
      int int4 = (-1814);
      int int5 = 1504;
      int int6 = (-186);
      denseMatrix0.insert((Matrix) cCSMatrix1, int1, int4, int5, int6, int3, int2);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      int int7 = 2641;
      int int8 = 37;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int7, int8);
      ColumnMajorSparseMatrix.identity(int4);
      cCSMatrix0.minInColumn(int8);
      int int9 = 48;
      int int10 = 1000;
      CCSMatrix.zero(int6, int9, int10);
      int int11 = (-2641);
      cCSMatrix2.getOrElse(int0, int11, int5);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 37;
      doubleArray0[3] = (double) 480;
      int[] intArray0 = new int[4];
      doubleArray0[0] = (double) 37;
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray1[5];
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 0);
      Matrix matrix0 = cCSMatrix0.multiply(37.0);
      cCSMatrix0.toCSV();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2106);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(37, (-797.14641));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      ((CCSMatrix) columnMajorSparseMatrix0).set(480, 0, 2106);
      CCSMatrix.from1DArray(0, 0, doubleArray0);
      ColumnMajorSparseMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix1);
      byte[] byteArray0 = null;
      int int0 = (-3364);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CCSMatrix) columnMajorSparseMatrix0).eachInColumn(int0, vectorProcedure0);
      double double0 = Double.NEGATIVE_INFINITY;
      cCSMatrix0.setAll(double0);
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(19);
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)73;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      CCSMatrix.identity(3145);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(397, Double.NEGATIVE_INFINITY);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction1).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(8, (byte)10, matrixFunction1);
      cCSMatrix1.maxInColumn(9);
      CCSMatrix.identity((-1464));
      double[][] doubleArrayArray0 = null;
      Matrix.from2DArray(doubleArrayArray0);
      int int0 = 3;
      cCSMatrix0.copyOfShape(int0, byte0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(19);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)19, (double)19, (double)19, (double)19, (double)19).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(19, 19, 19);
      byte[] byteArray0 = new byte[23];
      byte byte0 = (byte)10;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)0;
      int int0 = (-4398);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(19, (-4398), matrixFunction1);
      int int1 = (-186);
      cCSMatrix1.add((double) int0);
      cCSMatrix0.columnMajorIterator();
      MockRandom mockRandom0 = new MockRandom(int0);
      int int2 = (-1355);
      double double0 = (-4656.709);
      MockRandom mockRandom1 = new MockRandom();
      ColumnMajorSparseMatrix.randomSymmetric(int1, double0, (Random) mockRandom1);
      cCSMatrix0.toColumnVector();
      int int3 = Integer.MAX_VALUE;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int2);
      cCSMatrix0.maxInColumn(int3);
      CCSMatrix.identity(byte0);
      int int4 = 408;
      int int5 = (-1104);
      MatrixFunction matrixFunction2 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.updateAt(int4, int5, matrixFunction2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(26);
      CCSMatrix cCSMatrix1 = new CCSMatrix(26, 26);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix.identity(26);
      cCSMatrix0.multiply((Matrix) cCSMatrix1);
      cCSMatrix0.copy();
      int int0 = 9;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 26;
      doubleArray0[3] = 2089.5188926;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 26;
      doubleArray0[6] = (double) 9;
      CCSMatrix cCSMatrix2 = CCSMatrix.from1DArray(9, 9, doubleArray0);
      cCSMatrix2.diagonalProduct();
      Integer integer0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 449;
      int[] intArray0 = new int[4];
      intArray0[0] = 449;
      double[][] doubleArray1 = new double[26][8];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray1[5];
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 0);
      cCSMatrix0.setAll(37);
      Matrix matrix0 = cCSMatrix0.multiply(404.306585298578);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.block(matrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)ColumnMajorSparseMatrix.identity(2106);
      CCSMatrix.diagonal(37, 37);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.set(449, 0, 2106);
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.blankOfShape(449, 449);
      cCSMatrix1.toDenseMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray0;
      CCSMatrix cCSMatrix3 = CCSMatrix.from2DArray(doubleArray2);
      ooPlaceMatricesMultiplication0.apply((DenseMatrix) basic2DMatrix0, (ColumnMajorSparseMatrix) cCSMatrix3);
      String string0 = "-Je)nf";
      CCSMatrix cCSMatrix4 = CCSMatrix.fromCSV(string0);
      CCSMatrix.block(cCSMatrix2, cCSMatrix4, cCSMatrix4, cCSMatrix3);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 2043;
      int int1 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2043, 32, 2043);
      int int2 = 3;
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)4;
      CCSMatrix.fromBinary(byteArray0);
      Matrix.random(int2, int2, mockRandom0);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.toBinary();
      double[][] doubleArray0 = new double[0][5];
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix1.getRow(int0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      int int3 = 4;
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int3, int1, int1);
      int int4 = 1053;
      cCSMatrix2.getColumn(int4);
      cCSMatrix2.maxInColumn(int3);
      String string0 = "";
      CCSMatrix cCSMatrix3 = CCSMatrix.fromMatrixMarket(string0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.to(matrixFactory0);
      int int5 = 2033;
      cCSMatrix2.set(int3, int5, int2);
      int int6 = (-306);
      double double0 = 1.0;
      cCSMatrix3.set(int6, int1, double0);
  }
}
