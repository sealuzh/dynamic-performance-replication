/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 15:42:10 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PropertyFilter;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isNumber("1");
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToBoolean("1");
      Class<Integer> class0 = Integer.class;
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      MockThread mockThread0 = new MockThread("fastjson.parser.deny");
      MockThread mockThread1 = new MockThread(mockThread0, "fastjson.parser.autoTypeSupport");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("AU", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.instrumentation.InstrumentingClassLoader@4a817b6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Long long0 = new Long((-1L));
      TypeUtils.castToInt(long0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("AD.@L:s#mT}-q\"|Yc", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. AD.@L:s#mT}-q\"|Yc
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("]]KNvB\"&w:]4U7");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<InternalError> class1 = InternalError.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("]]KNvB\"&w:]4U7", "]]KNvB\"&w:]4U7");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      identityHashMap0.put("]]KNvB\"&w:]4U7", "]]KNvB\"&w:]4U7");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      identityHashMap0.put("]]KNvB\"&w:]4U7", "]]KNvB\"&w:]4U7");
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy1);
      String string0 = "can not create ASMParser";
      TypeUtils.isNumber("can not create ASMParser");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      WeakHashMap<SQLRecoverableException, MapDeserializer> weakHashMap0 = new WeakHashMap<SQLRecoverableException, MapDeserializer>();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SecurityException> class0 = SecurityException.class;
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      TypeUtils.loadClass(")Ji~K|<-lYH1RD");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getRawClass(class1);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(")Ji~K|<-lYH1RD");
      TypeUtils.isHibernateInitialized(stringIndexOutOfBoundsException0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) null;
      typeArray0[2] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-75);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bigInteger0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@9e64f6ab
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.fnv1a_64("org.springframework.remoting.support.RemoteInvocation");
      Class<?> class0 = TypeUtils.loadClass("java.awt.Color");
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.loadClass("L+O,aRK-W(n(DP[M");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("L+O,aRK-W(n(DP[M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("L^B5~~");
      assertEquals("l^B5~~", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      TypeUtils.loadClass(")Ji~K|<-lYH1RD");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getRawClass(class1);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(")Ji~K|<-lYH1RD");
      String string0 = "can not cast to byte, value : ";
      TypeUtils.isHibernateInitialized(stringIndexOutOfBoundsException0);
      String string1 = "L0FntMSt.{";
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("2WaR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2WaR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException>();
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      BufferCapabilities bufferCapabilities0 = TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, parserConfig0);
      assertNull(bufferCapabilities0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.fnv1a_64("getbooleanValue");
      Type[] typeArray0 = new Type[0];
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getGenericParamType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(parameterizedTypeImpl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      Class<Float> class0 = Float.TYPE;
      Class<Short> class1 = Short.TYPE;
      TypeUtils.unwrapOptional(class1);
      TypeUtils.isPath(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("getgetNextException");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getgetNextException\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      InterruptedException interruptedException0 = new InterruptedException("fastjson.parser.autoTypeAccept");
      StackTraceElement stackTraceElement0 = new StackTraceElement("$ref", "fastjson.parser.autoTypeAccept", "M", 1227);
      Class<Character> class0 = Character.TYPE;
      Integer integer0 = new Integer(1227);
      TypeUtils.isNumber("$ref");
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1233);
      Class<Character> class0 = Character.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("1");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      JSONObject jSONObject0 = new JSONObject();
      TypeUtils.isNumber("\"PvcW?yJPm_Z#7");
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.isNumber("8ld{<P8");
      Type[] typeArray0 = new Type[0];
      Class<Short> class0 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.clear();
      identityHashMap0.put("w|y\"zg~", "w|y\"zg~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(!k2&");
      Double double0 = new Double(1457.89612);
      TypeUtils.castToLong(double0);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.decapitalize("w9Vg7iO&m+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<RuntimeException> class0 = RuntimeException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashMap0);
      javaBeanSerializer0.getPropertyFilters();
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class0);
      javaBeanSerializer1.getType();
      String string0 = ";)Z";
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError(";)Z");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(noClassDefFoundError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Object> class0 = Object.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      TypeUtils.getCollectionItemType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = ParserConfig.DENYS;
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.isKotlin(class1);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      TypeUtils.getParserFeatures(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.autoTypeSupport");
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      classLoader0.setDefaultAssertionStatus(false);
      typeArray0[3] = (Type) class2;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray1 = new Type[6];
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader0);
      typeArray1[0] = (Type) null;
      Class<Long> class3 = Long.TYPE;
      typeArray1[1] = (Type) class3;
      typeArray1[2] = (Type) parameterizedTypeImpl0;
      typeArray1[3] = (Type) class1;
      typeArray1[4] = (Type) class2;
      typeArray1[5] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray1, typeArray1[2], typeArray1[4]);
      TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
      ParserConfig.getGlobalInstance();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(concurrentHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "BeanToArray";
      TypeUtils.toLocale("BeanToArray");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.testdata.FileSystemHandling@37bc3c46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("Y$ZLI", classLoader1);
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.loadClass("country", (ClassLoader) null, true);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.isNumber("Pe?etx5sbL.");
      ParserConfig.getGlobalInstance();
      Field[] fieldArray0 = new Field[8];
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Character> class1 = Character.TYPE;
      FieldInfo fieldInfo0 = new FieldInfo("YdLn*%[", class0, class0, class1, (Field) null, (-59432204), 40, 40);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Fh07[$m@Uie(rc", linkedHashMap0);
      fieldArray0[1] = null;
      ParserConfig.getFieldFromCache("^6zb.T7dE&V~", linkedHashMap0);
      fieldArray0[3] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(fieldInfo0.declaringClass, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("C}If");
      assertEquals((-4925007675849722322L), long0);
      
      TypeUtils.loadClass("C}If");
      Class<Field> class0 = Field.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      Class<Double> class0 = Double.TYPE;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      TypeUtils.loadClass((String) null);
      TypeUtils.unwrapOptional(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getCollectionItemType(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLDataException> class1 = SQLDataException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, parserConfig0.propertyNamingStrategy);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache(":Zc2OUi", weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("=f9vkV*oQXqxh");
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("java.awt.Point");
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, class1);
      InstantiationError instantiationError0 = new InstantiationError("java.awt.Point");
      Class<NegativeArraySizeException> class2 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      Class<Character> class0 = Character.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("1");
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("5fD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 5fD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "getgetNextException";
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      Class<Character> class0 = Character.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("getgetNextException");
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("^B5~~");
      assertNull(class0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(gridBagConstraints0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      String string0 = TypeUtils.castToString(jdk8DateCodec0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("w|y\"zg~", "w|y\"zg~");
      Class<Double> class1 = Double.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      Long long0 = new Long((-8109300701639721088L));
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      NumberFormat.getPercentInstance(locale0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalThreadStateException: fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.toLocale("java.beans.Transient");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      Class<Rectangle> class0 = Rectangle.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.autoTypeAccept");
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, illegalThreadStateException0);
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'n';
      charArray0[2] = 'N';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17, 17);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      TypeUtils.isNumber("clone");
      TypeUtils.getCollectionItemType(type0);
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      Class<Double> class0 = Double.TYPE;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      TypeUtils.loadClass((String) null);
      TypeUtils.unwrapOptional(class0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      Class<?> class1 = javaBeanSerializer0.getType();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      mockIllegalArgumentException0.toString();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalArgumentException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException -> java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "Pe?etx5sbL.";
      TypeUtils.isNumber("Pe?etx5sbL.");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Pe?etx5sbL.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      TypeUtils.isNumber("hveqt<{MHeig-I");
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("hveqt<{MHeig-I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hveqt<{MHeig-I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GenericArrayType genericArrayType0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d}?Og.iJ,IH/HFm_", linkedHashMap0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig.getGlobalInstance();
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("1w|y\"g~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 1w|y\"g~
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(true);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@22424f21
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.computeIfPresent("getCurrencySymbol", biFunction0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "";
      TypeUtils.fnv1a_64_lower("");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap");
      TimeZone.getAvailableIDs();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(javaBeanInfo0.clazz);
      javaBeanSerializer0.getType();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, javaBeanInfo0.clazz, javaBeanInfo0.clazz);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      mockIllegalArgumentException0.toString();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.isPath(class0);
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("w9Vg7iO&m+q");
      StackTraceElement stackTraceElement0 = new StackTraceElement("5fD", "5fD", "w9Vg7iO&m+q", 12);
      byte[] byteArray0 = TypeUtils.castToBytes("w9Vg7iO&m+q");
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = null;
      HttpCookie httpCookie0 = new HttpCookie("BeanToArray", "X>..cjQ^?");
      httpCookie0.setValue("qv=l,@6COf87KA4-<");
      httpCookie0.setMaxAge(7442624256860549330L);
      httpCookie0.setMaxAge(0L);
      httpCookie0.setValue("X>..cjQ^?");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Zjo,N>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Zjo,N>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d}?Og.iJ,IH/HFm_", linkedHashMap0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[4];
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) optionalCodec0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 20, json : {\"fastMatchToken\":12}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("LisgetMessage").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass("getMetaClass");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("3=tH1;q'-(pLG=nv8i", classLoader0, true);
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("]]KNvB\"&w:]4U7");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("]]KNvB\"&w:]4U7", "]]KNvB\"&w:]4U7");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      identityHashMap0.put("]]KNvB\"&w:]4U7", "]]KNvB\"&w:]4U7");
      identityHashMap0.put("]]KNvB\"&w:]4U7", "vtqD#{MX@9fw9iC<V");
      Class<ClassLoader> class1 = ClassLoader.class;
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap1, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<StackTraceElement> class2 = StackTraceElement.class;
      JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy1);
      TypeUtils.isNumber("vtqD#{MX@9fw9iC<V");
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, class0, parserConfig0);
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "^l{bCX[\"Mwc}c";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^l{bCX[\"Mwc}c");
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      TypeUtils.isHibernateInitialized(sQLIntegrityConstraintViolationException0);
      TypeUtils.isNumber("");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      TypeUtils.getParserFeatures(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeUtils.clearClassMapping();
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.autoTypeSupport");
      Class<Boolean> class0 = Boolean.class;
      JSONObject jSONObject0 = new JSONObject();
      TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setPackageAssertionStatus("8=g+2", true);
      TypeUtils.loadClass("8=g+2", classLoader1);
      TypeUtils.fnv1a_64_lower("S+=");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("ownerContext");
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      HashSet<HttpCookie> hashSet0 = new HashSet<HttpCookie>();
      // Undeclared exception!
      try { 
        treeMap1.remove((Object) hashSet0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("Y$ZLI", classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "getMetaClass";
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("getMetaClass");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : getMetaCla
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.autoTypeAccept");
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, illegalThreadStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(renderingHints0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      Class<InstantiationException> class1 = InstantiationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Lorg.springframework.util.LinkedMultiValueMap", linkedHashMap0);
      linkedHashMap0.replace("Ljava.awt.Color", (Field) null);
      String string0 = "ixq";
      String string1 = "fastjson.compatibleWithJavaBean";
      Class<SQLWarning> class2 = SQLWarning.class;
      Field[] fieldArray0 = new Field[5];
      fieldArray0[0] = null;
      fieldArray0[1] = null;
      fieldArray0[2] = null;
      fieldArray0[3] = null;
      fieldArray0[4] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, "Ljava.awt.Font", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d}?Og.iJ,IH/HFm_", linkedHashMap0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[0], typeArray0[2], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"classLoader\":{\"instrumentation\":{},\"loadedClasses\":[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],\"viewOfInstrumentedClasses\":[\"com.alibaba.fastjson.asm.ClassWriter\",\"com.alibaba.fastjson.parser.deserializer.AbstractDateDeserializer\",\"com.alibaba.fastjson.serializer.AwtCodec\",\"com.alibaba.fastjson.util.ASMUtils\",\"com.alibaba.fastjson.JSONPath\",\"com.alibaba.fastjson.parser.JSONScanner\",\"com.alibaba.fastjson.parser.JSONLexerBase\",\"com.alibaba.fastjson.parser.deserializer.ParseProcess\",\"com.alibaba.fastjson.parser.deserializer.FieldTypeResolver\",\"com.alibaba.fastjson.serializer.JSONSerializable\",\"com.alibaba.fastjson.parser.deserializer.OptionalCodec\",\"com.alibaba.fastjson.serializer.SerializeWriter\",\"com.alibaba.fastjson.serializer.ReferenceCodec\",\"com.alibaba.fastjson.JSONException\",\"com.alibaba.fastjson.asm.TypeCollector$1\",\"com.alibaba.fastjson.serializer.ObjectArrayCodec\",\"com.alibaba.fastjson.serializer.ToStringSerializer\",\"com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer\",\"com.alibaba.fastjson.serializer.SerialContext\",\"com.alibaba.fastjson.serializer.AfterFilter\",\"com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer\",\"com.alibaba.fastjson.serializer.ObjectSerializer\",\"com.alibaba.fastjson.TypeReference\",\"com.alibaba.fastjson.serializer.MapSerializer\",\"com.alibaba.fastjson.asm.Item\",\"com.alibaba.fastjson.serializer.DateCodec\",\"com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer\",\"com.alibaba.fastjson.parser.deserializer.EnumDeserializer\",\"com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider\",\"com.alibaba.fastjson.parser.DefaultJSONParser$ResolveTask\",\"com.alibaba.fastjson.serializer.BigDecimalCodec\",\"com.alibaba.fastjson.serializer.PrimitiveArraySerializer\",\"com.alibaba.fastjson.util.FieldInfo\",\"com.alibaba.fastjson.annotation.JSONField\",\"com.alibaba.fastjson.serializer.PropertyFilter\",\"com.alibaba.fastjson.parser.SymbolTable\",\"com.alibaba.fastjson.serializer.ListSerializer\",\"com.alibaba.fastjson.serializer.NameFilter\",\"com.alibaba.fastjson.JSONArray\",\"com.alibaba.fastjson.JSONAware\",\"com.alibaba.fastjson.serializer.LongCodec\",\"com.alibaba.fastjson.serializer.EnumSerializer\",\"com.alibaba.fastjson.util.ASMClassLoader\",\"com.alibaba.fastjson.PropertyNamingStrategy\",\"com.alibaba.fastjson.parser.deserializer.JSONPDeserializer\",\"com.alibaba.fastjson.parser.JSONToken\",\"com.alibaba.fastjson.serializer.AppendableSerializer\",\"com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec\",\"com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer\",\"com.alibaba.fastjson.parser.deserializer.AutowiredObjectDeserializer\",\"com.alibaba.fastjson.serializer.ContextValueFilter\",\"com.alibaba.fastjson.util.ServiceLoader\",\"com.alibaba.fastjson.serializer.ASMSerializerFactory$Context\",\"com.alibaba.fastjson.parser.deserializer.ArrayListTypeFieldDeserializer\",\"com.alibaba.fastjson.serializer.ContextObjectSerializer\",\"com.alibaba.fastjson.parser.DefaultJSONParser\",\"com.alibaba.fastjson.parser.deserializer.MapDeserializer\",\"com.alibaba.fastjson.serializer.SimplePropertyPreFilter\",\"com.alibaba.fastjson.serializer.BeanContext\",\"com.alibaba.fastjson.serializer.AutowiredObjectSerializer\",\"com.alibaba.fastjson.util.IdentityHashMap\",\"com.alibaba.fastjson.serializer.BigIntegerCodec\",\"com.alibaba.fastjson.JSON\",\"com.alibaba.fastjson.serializer.StringCodec\",\"com.alibaba.fastjson.serializer.SerializeFilterable\",\"com.alibaba.fastjson.JSONWriter\",\"com.alibaba.fastjson.asm.Opcodes\",\"com.alibaba.fastjson.JSONReader\",\"com.alibaba.fastjson.JSONStreamAware\",\"com.alibaba.fastjson.asm.MethodWriter\",\"com.alibaba.fastjson.serializer.SerializeBeanInfo\",\"com.alibaba.fastjson.serializer.SerializerFeature\",\"com.alibaba.fastjson.TypeReference$1\",\"com.alibaba.fastjson.serializer.CalendarCodec\",\"com.alibaba.fastjson.PropertyNamingStrategy$1\",\"com.alibaba.fastjson.util.IOUtils\",\"com.alibaba.fastjson.util.TypeUtils\",\"com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer\",\"com.alibaba.fastjson.asm.ClassReader\",\"com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory\",\"com.alibaba.fastjson.serializer.MiscCodec\",\"com.alibaba.fastjson.util.IOUtils$1\",\"com.alibaba.fastjson.serializer.IntegerCodec\",\"com.alibaba.fastjson.serializer.SerializeFilter\",\"com.alibaba.fastjson.JSONPObject\",\"com.alibaba.fastjson.parser.deserializer.ExtraProcessor\",\"com.alibaba.fastjson.serializer.BeforeFilter\",\"com.alibaba.fastjson.parser.deserializer.ExtraProcessable\",\"com.alibaba.fastjson.serializer.ArraySerializer\",\"com.alibaba.fastjson.util.ParameterizedTypeImpl\",\"com.alibaba.fastjson.parser.deserializer.TimeDeserializer\",\"com.alibaba.fastjson.JSONObject\",\"com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer\",\"com.alibaba.fastjson.serializer.CharacterCodec\",\"com.alibaba.fastjson.asm.TypeCollector\",\"com.alibaba.fastjson.parser.deserializer.ObjectDeserializer\",\"com.alibaba.fastjson.asm.ByteVector\",\"com.alibaba.fastjson.parser.JSONLexer\",\"com.alibaba.fastjson.asm.Label\",\"com.alibaba.fastjson.util.ASMClassLoader$1\",\"com.alibaba.fastjson.asm.FieldWriter\",\"com.alibaba.fastjson.serializer.JSONSerializer\",\"com.alibaba.fastjson.util.JavaBeanInfo\",\"com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer\",\"com.alibaba.fastjson.serializer.SerializeConfig\",\"com.alibaba.fastjson.serializer.AtomicCodec\",\"com.alibaba.fastjson.parser.deserializer.ContextObjectDeserializer\",\"com.alibaba.fastjson.serializer.FieldSerializer$RuntimeSerializerInfo\",\"com.alibaba.fastjson.asm.Type\",\"com.alibaba.fastjson.serializer.FieldSerializer\",\"com.alibaba.fastjson.serializer.FloatCodec\",\"com.alibaba.fastjson.parser.JSONReaderScanner\",\"com.alibaba.fastjson.serializer.ValueFilter\",\"com.alibaba.fastjson.JSONPathException\",\"com.alibaba.fastjson.parser.deserializer.FieldDeserializer\",\"com.alibaba.fastjson.serializer.Labels\",\"com.alibaba.fastjson.serializer.CollectionCodec\",\"com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer\",\"com.alibaba.fastjson.parser.deserializer.PropertyProcessable\",\"com.alibaba.fastjson.serializer.CharArrayCodec\",\"com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context\",\"com.alibaba.fastjson.asm.MethodVisitor\",\"com.alibaba.fastjson.annotation.JSONCreator\",\"com.alibaba.fastjson.asm.MethodCollector\",\"com.alibaba.fastjson.parser.deserializer.NumberDeserializer\",\"com.alibaba.fastjson.annotation.JSONType\",\"com.alibaba.fastjson.serializer.LabelFilter\",\"com.alibaba.fastjson.util.UTF8Decoder\",\"com.alibaba.fastjson.serializer.JavaBeanSerializer\",\"com.alibaba.fastjson.util.IdentityHashMap$Entry\",\"com.alibaba.fastjson.serializer.DoubleSerializer\",\"com.alibaba.fastjson.serializer.ASMSerializerFactory\",\"com.alibaba.fastjson.serializer.BooleanCodec\",\"com.alibaba.fastjson.parser.ParserConfig\",\"com.alibaba.fastjson.parser.Feature\",\"com.alibaba.fastjson.serializer.PropertyPreFilter\",\"com.alibaba.fastjson.parser.ParseContext\"]}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("fastjson.parser.deny");
      Class<InstantiationError> class2 = InstantiationError.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeUtils.getParserFeatures(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-13);
      byteArray1[1] = (byte) (-13);
      byteArray1[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[2] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.loadClass("i,)9s!", (ClassLoader) null);
      TypeUtils.isGenericParamType((Type) null);
      Class<Field> class1 = Field.class;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      parserConfig0.setAutoTypeSupport(false);
      TypeUtils.cast((Object) null, class1, parserConfig0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "TK87JIZT*";
      TypeUtils.loadClass("TK87JIZT*");
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      jobAttributes0.setSides(jobAttributes_SidesType0);
      jobAttributes0.setToPage(47);
      TypeUtils.castToString(jobAttributes0);
      TypeUtils.isNumber("TK87JIZT*");
      TypeUtils.getCollectionItemType((Type) null);
      Class<Point> class0 = Point.class;
      Field[] fieldArray0 = new Field[2];
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache(".\u0000[f>]Pj", concurrentHashMap0);
      fieldArray0[0] = null;
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      Field[] fieldArray1 = new Field[0];
      TypeUtils.getField(class1, "TK87JIZT*", fieldArray1);
      fieldArray0[1] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, ".\u0000[f>]Pj", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Type type0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      ClassLoader.getSystemClassLoader();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      java.util.IdentityHashMap<Long, NoSuchMethodException> identityHashMap0 = new java.util.IdentityHashMap<Long, NoSuchMethodException>();
      Class<RenderingHints> class2 = RenderingHints.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.isNumber("c,2d");
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      TypeUtils.castToLong((Object) null);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      TypeUtils.loadClass(")J-~K|<-jYH1;D");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getRawClass(class1);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      MockFile mockFile0 = new MockFile("2WaR");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "can not cast to byte, value : ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // can not cast to byte, value : 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gethashCode");
      String string0 = "can not cast to Timestamp, value : ";
      TypeUtils.isNumber("can not cast to Timestamp, value : ");
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      Class<VerifyError> class1 = VerifyError.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.isNumber("Lorg.springframework.util.LinkedMultiValueMap");
      Class<Rectangle> class3 = Rectangle.class;
      TypeUtils.computeGetters(class3, (Map<String, String>) null, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d}?Og.iJ,IH/HFm_", linkedHashMap0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) parameterizedTypeImpl0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) optionalCodec0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 17, json : {\"fastMatchToken\":12}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-1L));
      atomicLong0.compareAndSet((-1L), (-1L));
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.computeIfPresent("fastjson.parser.autoTypeAccept", biFunction0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Class class1 = (Class)FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) hashMap1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      Locale locale0 = Locale.CANADA_FRENCH;
      TypeUtils.fnv1a_64(")$42?WI)xuFA");
      Constructor<SQLInvalidAuthorizationSpecException>[] constructorArray0 = (Constructor<SQLInvalidAuthorizationSpecException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      BreakIterator.getWordInstance();
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'G79");
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'm';
      charArray0[2] = 'i';
      charArray0[3] = '0';
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      charArray0[4] = '[';
      charArray0[5] = ')';
      charArray0[6] = 'V';
      charArray0[7] = 'y';
      charArray0[8] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1020, 1020);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "cause", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("=f9vkV*oQXqxh");
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      TypeUtils.isNumber("false");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      Long long0 = new Long((byte)65);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, map0, (Map<String, Field>) identityHashMap0, false, (PropertyNamingStrategy) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPutAll(map0);
      ParserConfig parserConfig1 = ParserConfig.global;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<InterruptedException> class1 = InterruptedException.class;
      TypeUtils.getSerializeFeatures(class1);
      boolean boolean0 = new Boolean("$M");
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null, false);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils.decapitalize("w9Vg7iO&m+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<Character> class0 = Character.TYPE;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("w9Vg7iO&m+q", linkedHashMap0);
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("@\u0005-YfP", "Ljava.awt.Font");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "$if#y)", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "g";
      TypeUtils.fnv1a_64("g");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : g
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass("M");
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetNextException", "Y", "Y", 1182);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      String string0 = ")Ji~K|<-lYH1RD";
      TypeUtils.loadClass("isgetMessage");
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      TypeUtils.isNumber("M");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      Long long0 = new Long(1221);
      Long.max(1221, 1221);
      Integer integer0 = new Integer(1221);
      Integer.toUnsignedLong(111);
      Time time0 = TypeUtils.castToSqlTime(integer0);
      assertEquals("00:00:01", time0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      String string0 = "fillInStackTrace";
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setExponentSeparator("<init>");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DecimalFormat decimalFormat0 = new DecimalFormat("fillInStackTrace", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.DecimalFormat@bf80a4a1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, (String) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("5fD", "[0vECR~+s", "@c9sTeD`&?ygr*", 177);
      Class<Character> class0 = Character.class;
      TypeUtils.getSerializeFeatures(class0);
      boolean boolean0 = TypeUtils.isNumber("p");
      assertFalse(boolean0);
      
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) null, false);
      assertEquals(15, list0.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("j#FG", "` ?");
      Class<InternalError> class2 = InternalError.class;
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      identityHashMap1.put("` ?", (String) null);
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap1);
      assertFalse(list1.equals((Object)list0));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("ceaV4_", classLoader0);
      long long0 = TypeUtils.fnv1a_64_lower("org.springframework.security.web.authentication.WebAuthenticationDetails");
      assertEquals((-8321392922815851340L), long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("<H+[v").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "getMetaClass";
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      BreakIterator.getWordInstance();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("cause");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : cause
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "\\XEl`_u";
      TypeUtils.toLocale("XEl`_u");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = "Zjo,N>";
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie("Zjo,N>", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal cookie name
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1182);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Long> class0 = Long.TYPE;
      Class<Long> class1 = Long.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      TypeUtils.cast((Object) parameterizedTypeImpl1, (ParameterizedType) parameterizedTypeImpl1, (ParserConfig) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "BeanToArray", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("UseObjectArray", (ClassLoader) aSMClassLoader0);
      TypeUtils.fnv1a_64("Dy6%Tg$X[y3");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = ParserConfig.DENYS;
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.getParserFeatures(class1);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.autoTypeSupport");
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Long> class2 = Long.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[4]);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl1, (Type) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@9f0e8b48
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      Class<Short> class0 = Short.TYPE;
      TypeUtils.isNumber("Erf~?Pz-WA(k9Q)TkX%");
      TypeUtils.unwrapOptional(class0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      locale2.getDisplayCountry();
      Double double0 = new Double((-3209.570589345164));
      TypeUtils.castToDate(double0);
      TypeUtils.getRawClass(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class1 = TypeUtils.loadClass("z]2Z9X4.Q5?M0*QO", classLoader1, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "^`5~~";
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("getgetNexntException");
      locale0.getDisplayCountry();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DateFormatSymbols@17f3ada4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.autoTypeAccept");
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, illegalThreadStateException0);
      TypeUtils.isHibernateInitialized(renderingHints0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<InterruptedException> class1 = InterruptedException.class;
      TypeUtils.getSerializeFeatures(class1);
      Boolean boolean0 = new Boolean("$M");
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null, false);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.isNumber(">4e3K)^SI");
      Class<Rectangle> class1 = Rectangle.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null, true);
      Double double0 = new Double((-2312.5917706357));
      Long long0 = TypeUtils.castToLong(double0);
      assertEquals((-2312L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      JSONObject jSONObject0 = new JSONObject();
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.awt.BufferCapabilities(java.awt.ImageCapabilities,java.awt.ImageCapabilities,java.awt.BufferCapabilities$FlipContents)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isPath(class0);
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap1, true);
      WeakHashMap<SQLRecoverableException, MapDeserializer> weakHashMap2 = new WeakHashMap<SQLRecoverableException, MapDeserializer>();
      SQLWarning sQLWarning0 = new SQLWarning("is");
      DataTruncation dataTruncation0 = new DataTruncation(1130, false, false, 1130, (-2837), sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeUtils.toLocale("uq");
      TypeUtils.fnv1a_64("uq");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      InterruptedException interruptedException0 = new InterruptedException("");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      Class<TimeDeserializer> class2 = TimeDeserializer.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.isNumber("token");
      TypeUtils.computeGetters(class2, (Map<String, String>) null, true);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.deny", "java.awt.Rectangle", 0, interruptedException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLIntegrityConstraintViolationException0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(42);
      MockThrowable mockThrowable0 = new MockThrowable("typ", stringIndexOutOfBoundsException0);
      stringIndexOutOfBoundsException0.initCause(mockThrowable0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.StringIndexOutOfBoundsException: String index out of range: 42
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedHashMap<BigInteger, Point> linkedHashMap0 = new LinkedHashMap<BigInteger, Point>();
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      Point point0 = new Point();
      point0.setLocation(0.0, 940.0421);
      linkedHashMap0.put((BigInteger) null, point0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) linkedHashMap0, class0, parserConfig0);
      Class<HttpCookie> class1 = HttpCookie.class;
      Class<HttpCookie> class2 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class2, class2, class1, (Field) null, 3566, (-2571), (-2571));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<Collator> class4 = Collator.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("91DpzW>=eO^H", "fastjson.parser.autoTypeSupport");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) hashMap0, propertyNamingStrategy1);
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.text.Collator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",2X");
      Class<Float> class0 = Float.TYPE;
      Class<Short> class1 = Short.TYPE;
      TypeUtils.isNumber(",2X");
      TypeUtils.unwrapOptional(class1);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      TreeSet<SQLNonTransientConnectionException> treeSet0 = new TreeSet<SQLNonTransientConnectionException>();
      Class<Rectangle> class2 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getGenericParamType(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(parameterizedTypeImpl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<MapDeserializer> class0 = MapDeserializer.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Class<String> class2 = String.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.isNumber("^OT.=gKFVRP oESl.");
      TypeUtils.computeGetters(class1, (Map<String, String>) null, true);
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      atomicInteger0.set(0);
      Long long0 = TypeUtils.castToLong(atomicInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils.isNumber("Pe?etx5sbL.");
      Class<AtomicInteger> class0 = AtomicInteger.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Pe?etx5sbL.", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicInteger
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      locale0.getDisplayCountry();
      MockThread mockThread0 = new MockThread((Runnable) null, "|exH3mTH@EtYP");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("|exH3mTH@EtYP", classLoader0);
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TypeUtils.loadClass("L+O,aRK-W(n(DP[M");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Collator collator0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertNull(collator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.getClassFromMapping("java.awt.Color");
      Class<Properties> class0 = Properties.class;
      Class<Double> class1 = Double.class;
      TypeUtils.getParserFeatures(class1);
      String string0 = "hashCode";
      TypeUtils.isNumber("hashCode");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gethashCode");
      TypeUtils.isNumber("can not cast to Timestamp, value : ");
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.getParserFeatures(class0);
      ClassLoader.getSystemClassLoader();
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      String string0 = "M";
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", class0, (-118));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.parser.deserializer.JSONPDeserializer -> java.lang.Double
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("cause");
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, breakIterator0);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sunHints_Key0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      ParserConfig.getGlobalInstance();
      Class<LinkageError> class0 = LinkageError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<InternalError> class1 = InternalError.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0);
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("ha", hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      String string0 = null;
      Class<NoSuchFieldError> class3 = NoSuchFieldError.class;
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, (Method) null, (Field) null, class3, class2, 34, (-1185), 232, (JSONField) null, (JSONField) null, "fastjson.parser.deny");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(3551L);
      atomicLong0.compareAndSet(3551L, 3551L);
      Class<SQLException> class0 = SQLException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      aSMDeserializerFactory1.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      parserConfig0.setAsmEnable(false);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) javaBeanInfo0.clazz, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.getCollectionItemType(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      TypeUtils.getGenericParamType(class0);
      LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException> linkedHashMap1 = new LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<HttpCookie> class0 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, parserConfig0.propertyNamingStrategy);
      TypeUtils.loadClass("Ljava.awt.Rectangle");
      TypeUtils.unwrapOptional(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) null, class0, parserConfig0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      String string0 = TypeUtils.castToString(throwableDeserializer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Ljava.awt.Font");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.awt.Font", true);
      classLoader0.setPackageAssertionStatus("Ljava.awt.Font", true);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0, false);
      TypeUtils.getCollectionItemClass((Type) null);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      SQLWarning sQLWarning0 = new SQLWarning("", "Ljava.awt.Font");
      illegalAccessError0.addSuppressed(sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(illegalAccessError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TypeUtils.fnv1a_64("float");
      Class<?> class0 = TypeUtils.loadClass("float");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.isPath(class0);
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.castToChar((Object) null);
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      String string0 = "";
      Field[] fieldArray0 = new Field[7];
      String string1 = null;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, concurrentHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      Integer integer0 = new Integer((-458));
      TypeUtils.isNumber("1");
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToBoolean((Object) null);
      Point point0 = new Point((-458), 1020);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(integer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass("M");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONObject jSONObject0 = new JSONObject();
      classLoader0.setPackageAssertionStatus("B}\"<^;.<\"Q\"~vZr%&", true);
      TypeUtils.loadClass("mN{`ckG0B$::C", classLoader0);
      byte[] byteArray0 = TypeUtils.castToBytes("getgetNextException");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<InterruptedException> class1 = InterruptedException.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.isNumber("$M");
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TypeUtils.toLocale("BeanToArray");
      Class<SQLDataException> class0 = SQLDataException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.getGlobalInstance();
      Class<String> class1 = String.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy1);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(serializeBeanInfo0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetNextException", "getgetNextException", "5fD", 1210);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("5fD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 5fD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("PFL*E");
      illegalAccessError0.getSuppressed();
      illegalAccessError0.printStackTrace();
      illegalAccessError0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(illegalAccessError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalAccessError: PFL*E
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("^l{bCX[\"Mwc}c");
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      TypeUtils.isHibernateInitialized(sQLIntegrityConstraintViolationException0);
      TypeUtils.isNumber("");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<VerifyError> class0 = VerifyError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      TypeUtils.loadClass((String) null);
      TypeUtils.unwrapOptional((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("fastjson.parser.autoTypeAccept");
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, illegalThreadStateException0);
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("-HlLs{|Q>`?0huZY");
      TimeZone.getAvailableIDs();
      Class<Short> class0 = Short.TYPE;
      TypeUtils.isNumber("Erf~?Pz-WA(k9Q)TkX%");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = locale0.getDisplayCountry();
      assertEquals("China", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("17EG1;r9)%Jt#{H");
      TypeUtils.decapitalize("17EG1;r9)%Jt#{H");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte((Object) null);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Fb'7_h0P{cC_-v4OtY^", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.util.concurrent.ConcurrentSkipListSet", (Class<?>) null, class0, class1, (Field) null, 0, 0, 0);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean1 = TypeUtils.isTransient((Method) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("i~l", "yU(^Kr$6mMS&Z1:,6uf");
      identityHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      TypeUtils.castToShort((Object) null);
      TypeUtils.getGenericParamType(class0);
      Class<Point> class1 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Rectangle\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      TypeUtils.castToLong((Object) null);
      Class<Double> class0 = Double.TYPE;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(1239L, consumer0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.loadClass((String) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TypeUtils.loadClass("L+O,aRK-W(n(DP[M");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeSet0, (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TypeUtils.toLocale("BeanToArray");
      Class<InternalError> class0 = InternalError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig parserConfig2 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(hashtable0);
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.awt.BufferCapabilities(java.awt.ImageCapabilities,java.awt.ImageCapabilities,java.awt.BufferCapabilities$FlipContents)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException");
      String string0 = "5fD";
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException();
      TypeUtils.loadClass("getgetNextException");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("getgetNextException");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getgetNextException\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "L+O,aRK-W(Bn(DP[M";
      TypeUtils.loadClass("L+O,aRK-W(Bn(DP[M");
      String string1 = null;
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.fnv1a_64("");
      Class<?> class1 = TypeUtils.loadClass("TSbm_");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-1L));
      atomicLong0.compareAndSet((-1L), (-1L));
      Class<SQLException> class0 = SQLException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) javaBeanInfo0.clazz, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("i~l", "yU(^Kr$6mMS&Z1:,6uf");
      identityHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-21);
      TypeUtils.castToShort((Object) null);
      TypeUtils.getGenericParamType(class0);
      Class<Point> class1 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.awt.Rectangle\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "=");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(aSMClassLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.util.ASMClassLoader@71c5ff22
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig1 = ParserConfig.global;
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "^`5~~";
      TypeUtils.isNumber("^`5~~");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^`5~~";
      stringArray0[1] = "^`5~~";
      stringArray0[2] = "^`5~~";
      stringArray0[3] = "^`5~~";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getFieldValuesMap("^`5~~");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      javaBeanSerializer0.getSize(optionalCodec0);
      List<PropertyFilter> list0 = javaBeanSerializer0.getPropertyFilters();
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.isGenericParamType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(list0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TypeUtils.decapitalize("getgetNextException");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getgetNextException", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : getgetNextException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.getSerializeFeatures(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(0, 19);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<MockDateFormat> class1 = MockDateFormat.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TypeUtils.getSerializeFeatures(class0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("localizedMessage", hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DataTruncation> class2 = DataTruncation.class;
      Class<JavaObjectDeserializer> class3 = JavaObjectDeserializer.class;
      Class<StackTraceElement> class4 = StackTraceElement.class;
      FieldInfo fieldInfo0 = new FieldInfo("localizedMessage", class4, class1, class1, (Field) null, 34, 0, 34);
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
      Class<Properties> class5 = Properties.class;
      FieldInfo fieldInfo1 = null;
      try {
        fieldInfo1 = new FieldInfo("localizedMessage", (Method) null, (Field) null, class5, class4, 34, 34, (-18548323), (JSONField) null, (JSONField) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TypeUtils.isNumber("Pe?etx5sbL.");
      TypeUtils.fnv1a_64_lower("Pe?etx5sbL.");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<InternalError> class1 = InternalError.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("com.alibaba.fastjson.JSONObject", "com.alibaba.fastjson.JSONObject");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      identityHashMap0.put((String) null, "parse error");
      identityHashMap0.put("com.alibaba.fastjson.JSONObject", "v=qWBV");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy1);
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("can not create ASMParser");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"can not create ASMParser\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<MockCalendar> class1 = MockCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPutAll(identityHashMap0);
      ParserConfig parserConfig1 = ParserConfig.global;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, map0, propertyNamingStrategy1, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "5fD", "5fD", 1221);
      TypeUtils.isNumber("M");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      Long long0 = new Long(1221);
      Long.max(1221, 1221);
      Locale locale0 = Locale.GERMANY;
      BreakIterator breakIterator0 = BreakIterator.getLineInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(breakIterator0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sun.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = ParserConfig.DENYS;
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.isKotlin(class1);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      TypeUtils.getParserFeatures(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.autoTypeSupport");
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class2;
      typeArray0[6] = (Type) class0;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, typeArray0[6]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalMonitorStateException0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.IllegalMonitorStateException -> java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.isNumber("LisgetMessage");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      Long long0 = new Long(1278L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = TypeUtils.castToBigInteger(bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TypeUtils.decapitalize("9Vg7iOm+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) choiceFormat0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.ChoiceFormat@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 734, 734);
      char[] charArray1 = new char[5];
      charArray1[0] = 'N';
      charArray1[1] = 'n';
      charArray1[2] = 'n';
      charArray1[3] = 'n';
      charArray1[4] = 'n';
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, type0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@e5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TypeUtils.fnv1a_64("^`#~~");
      TypeUtils.loadClass("^`#~~");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException((String) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "M", "getClass", 1221);
      Class<Float> class0 = Float.TYPE;
      Class<Short> class1 = Short.TYPE;
      TypeUtils.isNumber("y$IuF9k;Tn%N");
      TypeUtils.unwrapOptional(class1);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      Double double0 = new Double(1221);
      TypeUtils.castToInt(double0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : M.M(getClass:1221)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      AtomicLong atomicLong0 = new AtomicLong(988L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      atomicLong0.compareAndSet(5944107969236155580L, 988L);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(indexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemType(class1);
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      TreeMap<String, NoClassDefFoundError> treeMap0 = new TreeMap<String, NoClassDefFoundError>();
      jSONObject0.fluentPutAll(treeMap0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, "BeanToArray");
      jSONObject0.put("aj{", (Object) renderingHints0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToString(sunHints_Key0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      Class<?> class1 = TypeUtils.loadClass("aj{", classLoader1, true);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1182);
      Map<String, String> map0 = null;
      Class<Date> class0 = Date.class;
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("getClass", sQLWarning0);
      Long.getLong("M");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TypeUtils.loadClass("WriteNullListAsEmpty");
      TypeUtils.getCollectionItemClass((Type) null);
      AtomicLong atomicLong0 = new AtomicLong((-1L));
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("java.util.concurrent.ConcurrentSkipListMap", linkedHashMap0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[1];
      Class<?> class1 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      typeArray0[0] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class1, type0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      parameterizedTypeImpl1.getTypeName();
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.util.concurrent.ConcurrentSkipListMap", (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "getgetNextException";
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      Class<Character> class0 = Character.class;
      Integer integer0 = new Integer(1221);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("<cK").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.fluentPutAll(jSONObject0);
      ParserConfig.getGlobalInstance();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      Class<Character> class0 = Character.class;
      Class<DecimalFormat> class1 = DecimalFormat.class;
      TypeUtils.getSerializeFeatures(class1);
      boolean boolean0 = TypeUtils.isNumber("5fD");
      assertFalse(boolean0);
      
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      Byte byte0 = new Byte((byte) (-9));
      Byte.compare((byte) (-87), (byte) (-9));
      TypeUtils.castToLong(byte0);
      Class<String> class2 = String.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class1, (Map<String, String>) null);
      assertEquals(17, list0.size());
      
      TypeUtils.getRawClass(class2);
      SQLDataException sQLDataException0 = new SQLDataException();
      SecurityException securityException0 = new SecurityException(sQLDataException0);
      boolean boolean1 = TypeUtils.isHibernateInitialized(securityException0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      BreakIterator.getWordInstance();
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeSupport", identityHashMap0);
      identityHashMap0.put("fastjson.parser.deny", (Field) null);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class0, map0);
      TypeUtils.unwrapOptional(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      outOfMemoryError0.fillInStackTrace();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(outOfMemoryError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("17EG1;r9)%Jt#{H");
      TypeUtils.decapitalize("17EG1;r9)%Jt#{H");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte((Object) null);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, map0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPutAll(identityHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.awt.BufferCapabilities(java.awt.ImageCapabilities,java.awt.ImageCapabilities,java.awt.BufferCapabilities$FlipContents)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToInt((Object) null);
      System.setCurrentTimeMillis(1L);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1030;
      Integer integer0 = new Integer(1030);
      TypeUtils.isNumber("1");
      ParserConfig parserConfig0 = ParserConfig.global;
      Boolean boolean0 = TypeUtils.castToBoolean("1");
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.isNumber("8ld{<P8");
      Type[] typeArray0 = new Type[0];
      Class<Short> class0 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      TypeUtils.getCollectionItemType(class0);
      HttpCookie httpCookie0 = new HttpCookie("Lorg.springframework.util.LinkedMultiValueMap", "G`^'");
      // Undeclared exception!
      try { 
        Timestamp.valueOf("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "xpWGD|b<OaY|";
      TypeUtils.decapitalize("xpWGD|b<OaY|");
      Class<NumberFormat> class0 = NumberFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.isKotlin(class1);
      TypeUtils.getClass((Type) class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(54, 54, false);
      // Undeclared exception!
      try { 
        ZoneId.of("xpWGD|b<OaY|", (Map<String, String>) linkedHashMap0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for region-based ZoneId, invalid format: xpWGD|b<OaY|
         //
         verifyException("java.time.ZoneRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Type[] typeArray0 = new Type[5];
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getGenericParamType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = Locale.CANADA;
      locale0.hasExtensions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = locale0.stripExtensions();
      locale0.getDisplayVariant(locale1);
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.lookupTag(arrayList0, hashSet0);
      locale0.getDisplayName();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : en_CA
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPutAll(hashtable0);
      TypeReference<RuleBasedCollator> typeReference0 = (TypeReference<RuleBasedCollator>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((TypeReference) typeReference0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      TypeUtils.getGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(jobAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : copies=1,defaultSelection=all,destination=printer,dialog=native,fileName=null,fromPage=1,maxPage=2147483647,minPage=1,multiple-document-handling=separate-documents-uncollated-copies,page-ranges=[1:1],printer=null,sides=one-sided,toPage=1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TypeUtils.toLocale("XEl`_u");
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)29;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("XEl`_u");
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("XEl`_u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : XEl`_u
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.isNumber("8ld{<P8");
      Type[] typeArray0 = new Type[0];
      Class<Short> class0 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DisableCircularReferenceDetect");
      TypeUtils.fnv1a_64("g");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      Field[] fieldArray0 = new Field[1];
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("mT", hashtable0);
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "g", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      boolean boolean0 = TypeUtils.isNumber("3Ocb'2[7CCZP~X{U2&K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = "11v\":^t+|O &?";
      Field[] fieldArray0 = new Field[9];
      Class<DataTruncation> class1 = DataTruncation.class;
      String string1 = "([C)I";
      Field[] fieldArray1 = new Field[0];
      TypeUtils.getField(class1, "([C)I", fieldArray1);
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("([C)I", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<Short> class1 = Short.TYPE;
      TypeUtils.isNumber(",2X");
      Long.max(16, (-1386L));
      long long0 = TypeUtils.fnv1a_64_lower(",2X");
      assertEquals((-1774354378913439559L), long0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Integer integer0 = new Integer(1030);
      TypeUtils.isNumber("1");
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.createJavaBeanDeserializer(class0, class0);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[2]);
      TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      TypeUtils.castToBytes("1");
      int[] intArray0 = new int[9];
      intArray0[0] = 1030;
      intArray0[1] = 1030;
      intArray0[2] = 1030;
      intArray0[3] = 1030;
      intArray0[4] = 1030;
      intArray0[5] = 1030;
      intArray0[6] = 1030;
      intArray0[7] = 1030;
      intArray0[8] = 1030;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("1", intArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.BatchUpdateException: 1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(1030);
      String string0 = "1";
      TypeUtils.isNumber("1");
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("getbooleanValue");
      assertEquals(5636082210313096842L, long0);
      
      Type[] typeArray0 = new Type[0];
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.getClass((Type) class0);
      long long1 = TypeUtils.fnv1a_64_lower("getbooleanValue");
      assertEquals((-8180934398669554646L), long1);
      
      TypeUtils.castToDate((Object) null);
      boolean boolean0 = TypeUtils.isNumber("getbooleanValue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.getGlobalInstance();
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = ParserConfig.DENYS;
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.isKotlin(class1);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      TypeUtils.getParserFeatures(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.autoTypeSupport");
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class2;
      typeArray0[6] = (Type) class0;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, typeArray0[6]);
      java.util.IdentityHashMap<Long, NoSuchMethodException> identityHashMap0 = new java.util.IdentityHashMap<Long, NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.ParserConfig@e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("oracle.sql.TIMESTAMP");
      locale0.getDisplayCountry();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormatSymbols0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Locale.getISOLanguages();
      TypeUtils.isNumber("BeanToArray");
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) typeArray0[0], typeArray0[1], parserConfig0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      TreeMap<Exception, NumberDeserializer> treeMap0 = new TreeMap<Exception, NumberDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("-HlLs{|Q>`?0huZY");
      Class<Double> class0 = Double.TYPE;
      TimeZone.getAvailableIDs();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      Class<Float> class1 = Float.TYPE;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      Class<Short> class2 = Short.TYPE;
      typeArray0[3] = (Type) class2;
      TypeUtils.isNumber("Erf~?Pz-WA(k9Q)TkX%");
      TypeUtils.unwrapOptional(typeArray0[1]);
      TypeUtils.fnv1a_64("Erf~?Pz-WA(k9Q)TkX%");
      Constructor<GridBagConstraints>[] constructorArray0 = (Constructor<GridBagConstraints>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.isNumber("1");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2Nam", "(I)");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLTimeoutException: 2Nam
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", weakHashMap0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(aSMDeserializerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("L", "L", "L", 1012);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("L");
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      locale0.getDisplayCountry();
      MockThread mockThread0 = new MockThread((Runnable) null, "|exH3mTH@EtYP");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      Class<DataTruncation> class2 = DataTruncation.class;
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fileSystemHandling0, class2, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LinkedHashMap<BigInteger, Point> linkedHashMap0 = new LinkedHashMap<BigInteger, Point>();
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      Point point0 = new Point();
      point0.setLocation(0.0, 940.0421);
      linkedHashMap0.put((BigInteger) null, point0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) linkedHashMap0, class0, parserConfig0);
      Class<HttpCookie> class1 = HttpCookie.class;
      Class<HttpCookie> class2 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class2, class2, class1, (Field) null, 3566, (-2571), (-2571));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<Collator> class4 = Collator.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("91DpzW>=eO^H", "fastjson.parser.autoTypeSupport");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) hashMap0, propertyNamingStrategy1);
      TypeUtils.clearClassMapping();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, parserConfig0.propertyNamingStrategy);
      BigInteger bigInteger0 = BigInteger.ONE;
      Type[] typeArray0 = new Type[5];
      Class<?> class5 = TypeUtils.getCollectionItemClass(fieldInfo0.fieldType);
      typeArray0[0] = (Type) class5;
      typeArray0[1] = (Type) class3;
      typeArray0[2] = (Type) class4;
      typeArray0[3] = (Type) class0;
      Type type0 = TypeUtils.getCollectionItemType(class1);
      typeArray0[4] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, fieldInfo0.declaringClass, typeArray0[2]);
      LinkedList<SQLNonTransientException> linkedList0 = TypeUtils.cast((Object) bigInteger0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "-HlLs{|Q>`?0huZY";
      TypeUtils.fnv1a_64_lower("-HlLs{|Q>`?0huZY");
      Class<Double> class0 = Double.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.loadClass("-HlLs{|Q>`?0huZY");
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("-HlLs{|Q>`?0huZY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = null;
      identityHashMap0.put((String) null, (String) null);
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      identityHashMap0.put((String) null, "?+.{wp*");
      identityHashMap0.put("[J", "[J");
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, parserConfig1.propertyNamingStrategy);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("d>Yw1q`<>o6-Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = null;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "^`5~~";
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      Class<TimeUnit> class2 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, "^`5~~", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("=f9vkV*oQXqxh");
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      concurrentHashMap0.put("fastjson.compatibleWithFieldName", "eO%y");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("g", biFunction0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      linkedHashMap0.computeIfAbsent("s`$Y5Pi", function0);
      concurrentHashMap0.putAll(linkedHashMap0);
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.isNumber("(o[[%A:TCZN<kFQ");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "getgetNextException";
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetNextException", "getgetNextException", "5fD", 1221);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("getgetNextException", linkedHashMap0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Hashtable<NoSuchFieldException, Collator> hashtable0 = new Hashtable<NoSuchFieldException, Collator>();
      TypeUtils.castToInt((Object) null);
      TypeUtils.isNumber("getgetNextException");
      // Undeclared exception!
      try { 
        NumberFormat.getPercentInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Cu&1{vSI=x'f{", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Cu&1{vSI=x'f{
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      TypeUtils.getParserFeatures(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.decapitalize("17EG1;r9)%Jt#{H");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte((Object) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      WeakHashMap<MockCalendar, DateFormatSymbols> weakHashMap0 = new WeakHashMap<MockCalendar, DateFormatSymbols>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, propertyNamingStrategy0);
      Class<DataTruncation> class1 = DataTruncation.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLTimeoutException>[] classArray0 = (Class<SQLTimeoutException>[]) Array.newInstance(Class.class, 2);
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      classArray0[0] = class2;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      classArray0[1] = class3;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getkeySet", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("float");
      Class<Short> class0 = Short.TYPE;
      TypeUtils.isNumber("Erf~?Pz-WA(k9Q)TkX%");
      TypeUtils.unwrapOptional(class0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayCountry();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Erf~?Pz-WA(k9Q)TkX%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Erf~?Pz-WA(k9Q)TkX%
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      TypeUtils.getGenericParamType((Type) null);
      LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("4wZrDvvD@drt99S%LEQ");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.lang.MockThrowable: 4wZrDvvD@drt99S%LEQ
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.computeIfPresent("YF<s[V_Jd6S", biFunction0);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("float");
      Class<?> class0 = TypeUtils.loadClass("float");
      String string0 = "java.";
      SecurityException securityException0 = new SecurityException("java.");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.", "float", securityException0);
      sQLInvalidAuthorizationSpecException0.spliterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("SHORT_STANDALONE", sQLInvalidAuthorizationSpecException0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLSyntaxErrorException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLSyntaxErrorException: SHORT_STANDALONE
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType(";Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: ;Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils typeUtils0 = new TypeUtils();
      MockThread mockThread0 = new MockThread();
      mockThread0.getContextClassLoader();
      JSONType jSONType0 = null;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "zD&>FeWcD-eocHtW9";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("zD&>FeWcD-eocHtW9", classLoader0);
      System.setCurrentTimeMillis(1006L);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      TypeUtils.castToString(noSuchMethodException0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      boolean boolean0 = false;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, linkedHashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("BeanToArray");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      MockThread mockThread0 = new MockThread((Runnable) null, "|exH3mTH@EtYP");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("|exH3mTH@EtYP", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DisableCircularReferenceDetect");
      TypeUtils.fnv1a_64("g");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.getGenericParamType((Type) null);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("isgetMessage");
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      parserConfig0.setDefaultClassLoader(classLoader1);
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("AD.@L:s#mT}-q\"BYc", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. AD.@L:s#mT}-q\"BYc
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("^`#~~");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      locale0.getDisplayCountry();
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isPath(class0);
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) locale0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("17EG1;r9)%Jt#{H");
      TypeUtils.decapitalize("17EG1;r9)%Jt#{H");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte((Object) null);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, map0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPutAll(identityHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, map0, parserConfig0.propertyNamingStrategy, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      InterruptedException interruptedException0 = new InterruptedException("BeanToArray");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("17EG1;r9)%Jt#{H");
      TypeUtils.decapitalize("17EG1;r9)%Jt#{H");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte((Object) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, concurrentHashMap0, true, propertyNamingStrategy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("-HlLs{|Q>`?0huZY");
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.loadClass("-HlLs{|Q>`?0huZY");
      TimeZone.getAvailableIDs();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("-HlLs{|Q>`?0huZY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      Class<Double> class1 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(identityHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.awt.BufferCapabilities(java.awt.ImageCapabilities,java.awt.ImageCapabilities,java.awt.BufferCapabilities$FlipContents)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("^O5R");
      assertEquals((-4945251120147426259L), long0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, Field> hashMap0 = new LinkedHashMap<String, Field>();
      Class<PageAttributes> class0 = PageAttributes.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException((String) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "Ljava.awt.Rectangle", (-1840700268), illegalMonitorStateException0);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      MockInstant.ofEpochSecond((long) (-1840700268), (-1106L));
      Float float0 = new Float(567.8158F);
      TypeUtils.castToDouble(float0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<RenderingHints> class2 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) parameterizedTypeImpl0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      TypeUtils.decapitalize("9Vg7iOm+q");
      TypeUtils.isNumber("9Vg7iOm+q");
      TypeUtils.decapitalize("9D");
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("kotlin.ranges.ClosedDoubleRange");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kotlin.ranges.ClosedDoubleRange\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      String string0 = null;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0);
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = false;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(aSMClassLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.ASMClassLoader@65dbb1ae
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "Ljava.awt.Color";
      TypeUtils.toLocale("Ljava.awt.Color");
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("17EG1;r9)%Jt#{H");
      TypeUtils.decapitalize("17EG1;r9)%Jt#{H");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte((Object) null);
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, map0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPutAll(identityHashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("17EG1;r9)%Jt#{H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"17EG1;r9)%Jt#{H\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      boolean boolean0 = linkedHashMap0.replace("_YE&:H%E^+6", "_YE&:H%E^+6", "_YE&:H%E^+6");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      linkedHashMap0.put("w\n,J[7jqmrt3~~", "_YE&:H%E^+6");
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      TypeUtils.getParserFeatures(class1);
      TreeMap<SimpleTimeZone, Short> treeMap0 = new TreeMap<SimpleTimeZone, Short>();
      TypeUtils.castToString(class0);
      boolean boolean1 = TypeUtils.isPath(class1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "getgetNextException";
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      String string1 = "5fD";
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TypeUtils.fnv1a_64("^`#~~");
      StackTraceElement stackTraceElement0 = new StackTraceElement("^`#~~", "p!GK", "^`#~~", 0);
      Class<Character> class0 = Character.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("y@7SPl@b*wV$");
      Map<String, String> map0 = null;
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("^`#~~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : ^`#~~
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      locale0.getDisplayCountry();
      Time time0 = TypeUtils.castToSqlTime("");
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TypeUtils.loadClass("^B5~~");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) identityHashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getSQLState", (String) null);
      identityHashMap0.put((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiConsumer<Object, String> biConsumer0 = (BiConsumer<Object, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      identityHashMap0.put((String) null, "?+.{wp*");
      identityHashMap0.put("[J", "[J");
      TypeUtils.fnv1a_64("java.util.concurrent.ConcurrentSkipListSet");
      Class<?> class0 = TypeUtils.loadClass("[J");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy1);
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      // Undeclared exception!
      try { 
        Timestamp.valueOf("~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(77, 77, 77);
      Type[] typeArray0 = new Type[2];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      typeArray0[1] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f6f5292d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TypeUtils.decapitalize("L");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("java.util.concurrent.ConcurrentSkipListSet");
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONObject> class1 = JSONObject.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, (PropertyNamingStrategy) null);
      // Undeclared exception!
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("BeanToArray");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      Class<VerifyError> class1 = VerifyError.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.isNumber("Lorg.springframework.util.LinkedMultiValueMap");
      Class<Rectangle> class3 = Rectangle.class;
      TypeUtils.computeGetters(class3, (Map<String, String>) null, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      StackTraceElement stackTraceElement0 = new StackTraceElement("Lorg.springframework.util.LinkedMultiValueMap", "M", "Lorg.springframework.util.LinkedMultiValueMap", 1251);
      MockThread mockThread0 = new MockThread("getshortValue");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[short", classLoader0);
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Integer integer0 = new Integer(1030);
      TypeUtils.isNumber("3B");
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      TypeUtils.isNumber("1.2.46");
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class2.isEnum());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      String string0 = TypeUtils.decapitalize("M");
      assertEquals("m", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      Field[] fieldArray0 = new Field[3];
      String string0 = "d}?Og.iJ,IH/HFm_";
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d}?Og.iJ,IH/HFm_", linkedHashMap0);
      fieldArray0[0] = null;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Hashtable<NoSuchFieldException, Collator> hashtable0 = new Hashtable<NoSuchFieldException, Collator>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      TypeUtils.unwrapOptional((Type) null);
      LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, StringIndexOutOfBoundsException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-708));
      linkedHashMap0.put(sQLTransactionRollbackException0, stringIndexOutOfBoundsException0);
      linkedHashMap0.put(sQLTransactionRollbackException0, stringIndexOutOfBoundsException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("|Wp");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.InterruptedException: |Wp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.TAIWAN;
      locale0.getDisplayCountry();
      InternalError internalError0 = new InternalError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.awt.Point");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.IllegalThreadStateException: Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, typeArray0[2], parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("BeanToArray");
      locale0.getDisplayCountry();
      MockThread mockThread0 = new MockThread((Runnable) null, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getClass((Type) class0);
      Collection collection0 = new Vector<FieldInfo>();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) collection0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TypeUtils.decapitalize("SVgvOm+q");
      String string0 = "kotlin.ranges.ClosedDoubleRange";
      TypeUtils.isNumber("SVgvOm+q");
      String string1 = "9D";
      TypeUtils.decapitalize("9D");
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("kotlin.ranges.ClosedDoubleRange");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kotlin.ranges.ClosedDoubleRange\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.isPath(class0);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.isKotlin(class1);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Properties> class3 = Properties.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.getGlobalInstance();
      Class<LinkageError> class4 = LinkageError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo.build((Class<?>) class4, (Type) class4, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      Class<Double> class0 = Double.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "Lorg.springframework.util.LinkedMultiValueMap", fieldArray0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Sv]", linkedHashMap0);
      ParserConfig.getFieldFromCache("Lorg.springframework.util.LinkedMultiValueMap", linkedHashMap0);
      TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListSet");
      Hashtable<String, String> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<String, String>((-806), 0.75F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -806
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<MockDate> class1 = MockDate.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      Integer integer0 = new Integer(2833);
      TypeUtils.isNumber("1");
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1");
      TimeZone.getDefault();
      TypeUtils.castToLong((Object) null);
      Class<SQLClientInfoException> class3 = SQLClientInfoException.class;
      TypeUtils.isPath(class1);
      TypeUtils.loadClass("/Date(");
      Class class4 = (Class)TypeUtils.unwrapOptional(class3);
      assertFalse(class4.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("-HlLs{|Q>`?0huZY");
      Class<Double> class0 = Double.TYPE;
      TimeZone.getAvailableIDs();
      Class<Character> class1 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<NoClassDefFoundError> class2 = NoClassDefFoundError.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      Float.isFinite(0.0F);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("C}If");
      assertEquals((-4925007675849722322L), long0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("S+=", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("8=g+2", class0, class1, class0, (Field) null, 106, 106, 46);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "C";
      HttpCookie httpCookie0 = new HttpCookie("C", "Zjo,N>");
      httpCookie0.setValue("Zjo,N>");
      httpCookie0.setMaxAge((byte) (-78));
      httpCookie0.setMaxAge(0L);
      httpCookie0.setValue("yH2q.");
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Zjo,N>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ZjoN>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, SQLFeatureNotSupportedException> hashMap0 = new HashMap<String, SQLFeatureNotSupportedException>();
      jSONObject0.fluentPutAll(hashMap0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.isNumber("fastjson.parser.deny");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap1, false, parserConfig0.propertyNamingStrategy);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<MockCalendar> class1 = MockCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("writeFieldValueStringWithDoubleQuote");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TreeSet<SQLTransientException> treeSet0 = new TreeSet<SQLTransientException>();
      ParserConfig parserConfig1 = new ParserConfig(false);
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("fastjson.parser.deny", (String) null, 57, illegalMonitorStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransientConnectionException0, (Type) class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransientConnectionException: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TypeUtils.decapitalize("9Vg7iOm+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONObject> class1 = JSONObject.class;
      parserConfig0.addDeny("kotlin.ranges.ClosedDoubleRange");
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, (PropertyNamingStrategy) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (JSONType) null, (Map<String, String>) hashMap0, (Map<String, Field>) hashMap1, false, (PropertyNamingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      TypeUtils.decapitalize("w9Vg7iO&m+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) choiceFormat0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.ChoiceFormat@0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.unwrapOptional(class0);
      TypeUtils.loadClass("B1?EE. ");
      TypeUtils.getKoltinConstructorParameters((Class) null);
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "1w|y\"g~";
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      Class<NumberFormat> class1 = NumberFormat.class;
      String string1 = "19]Qn50^";
      Field[] fieldArray0 = new Field[3];
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d}?Og.iJ,IH/HFm_", linkedHashMap0);
      fieldArray0[0] = null;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isProxy(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TypeUtils.decapitalize("w9Vg7iO&m+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      Class<Character> class0 = Character.TYPE;
      ClassLoader.getSystemClassLoader();
      TypeUtils.getGenericParamType(class0);
      TypeUtils.isGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Character> class0 = Character.class;
      Class<Float> class1 = Float.TYPE;
      Class<Short> class2 = Short.TYPE;
      TypeUtils.isNumber("l8b9/ZzU\"/");
      TypeUtils.unwrapOptional(class0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class2, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = new ParserConfig(false);
      ParserConfig.getGlobalInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig parserConfig2 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(propertyNamingStrategy0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TypeUtils.decapitalize("9Vg7iOm+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToBoolean((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("9Vg7iOm+q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9Vg7iOm+q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      String string0 = "1w|y\"g~";
      identityHashMap0.put("1w|y\"g~", "1w|y\"g~");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("1w|y\"g~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1w|y\"g~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      String string0 = "fillInStackTrace";
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setExponentSeparator("<init>");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DecimalFormat decimalFormat0 = new DecimalFormat("fillInStackTrace", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.DecimalFormat@bf80a4a1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Object> class1 = Object.class;
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<Short> class3 = Short.TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class3;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      ParserConfig parserConfig1 = ParserConfig.global;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchMethodError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String[] stringArray0 = ParserConfig.DENYS;
      Class<PageAttributes> class0 = PageAttributes.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      TypeUtils.isKotlin(class1);
      Class<Properties> class2 = Properties.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.getGlobalInstance();
      Class<LinkageError> class3 = LinkageError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class3, (Type) class2, propertyNamingStrategy0);
      Field[] fieldArray0 = new Field[5];
      Class<SQLTimeoutException> class4 = SQLTimeoutException.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DataTruncation> class5 = DataTruncation.class;
      TypeUtils.getSuperMethodAnnotation(javaBeanInfo0.clazz, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("java.lang.LinkageError", (Method) null, (Field) null, class5, class0, 0, 232, 34, (JSONField) null, (JSONField) null, "fastjson.parser.autoTypeAccept");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Character> class0 = Character.TYPE;
      Class<Short> class1 = Short.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("wEy7oF;j7TCwe").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "getMetaClass";
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("getMetaClass");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : getMetaCla
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("pD@#A-^DZPC,<t#", "fastjson.parser.autoTypeSupport").when(genericArrayType0).toString();
      doReturn(type0).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      boolean boolean0 = new Boolean(true);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      boolean boolean1 = TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      assertFalse(boolean1);
      
      Type type2 = TypeUtils.getCollectionItemType(type0);
      assertNotNull(type2);
      
      TypeUtils.unwrapOptional(type1);
      assertNotSame(type0, type2);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("PFL*E");
      illegalAccessError0.getSuppressed();
      illegalAccessError0.printStackTrace();
      IllegalAccessError illegalAccessError1 = new IllegalAccessError();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.getClassFromMapping("PFL*E");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("a>*H=5YC$fTNtqWg").when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<PageAttributes> class1 = PageAttributes.class;
      TypeUtils.isKotlin(class1);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Properties> class2 = Properties.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.getGlobalInstance();
      Class<LinkageError> class3 = LinkageError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo.build((Class<?>) class3, (Type) class2, propertyNamingStrategy0);
      ParserConfig.getGlobalInstance();
      HttpCookie httpCookie0 = new HttpCookie("PFL*E", "java.util.ArrayList@0000000004");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) httpCookie0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      TreeSet<BitSet> treeSet0 = new TreeSet<BitSet>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, map0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentPutAll(hashMap0);
      TypeUtils.castToInt((Object) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLException sQLException0 = new SQLException("@type", "scanFieldUUID", 94, sQLFeatureNotSupportedException0);
      SQLDataException sQLDataException0 = new SQLDataException("@type", "yyyy-MM-dd HH:mm:ss", 3089, sQLException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1.2.46", "", sQLDataException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLTransientConnectionException: 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TypeUtils.fnv1a_64("^`5~~");
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayCountry();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("5fD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 5fD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TypeUtils.decapitalize("9Vg7iOm+q");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("kotlin.ranges.ClosedDoubleRange");
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<JSONObject> class1 = JSONObject.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, (PropertyNamingStrategy) null);
      // Undeclared exception!
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.loadClass((String) null);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("dou");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(hashtable0);
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("/Date(");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONStringWithDateFormat(indexOutOfBoundsException0, "1.2.46", serializerFeatureArray0);
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.awt.BufferCapabilities(java.awt.ImageCapabilities,java.awt.ImageCapabilities,java.awt.BufferCapabilities$FlipContents)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("1w|e\"M~", "1w|e\"M~");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      Field[] fieldArray0 = new Field[3];
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("d}?Og.iJ,IH/HFm_", linkedHashMap0);
      fieldArray0[0] = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("1w|e\"M~", "19]Qn50^");
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.clearClassMapping();
      Class<Double> class2 = Double.class;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<Character> class3 = Character.TYPE;
      Class<?> class4 = TypeUtils.getClass((Type) class3);
      assertEquals(1041, class4.getModifiers());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Class<?> class1 = TypeUtils.loadClass("Oe#!4U");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "*", 1221);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) bigInteger0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Object> class1 = Object.class;
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<NoClassDefFoundError> class3 = NoClassDefFoundError.class;
      TypeUtils.isKotlin(class3);
      Class<Float> class4 = Float.TYPE;
      Class<Short> class5 = Short.TYPE;
      TypeUtils.isNumber("/p{R-nWjxY");
      TypeUtils.unwrapOptional(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class org.evosuite.runtime.mock.java.util.MockCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      StackTraceElement stackTraceElement0 = new StackTraceElement("toP", "toP", "isgetCalendar", (-348));
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.isNumber("=M/ILX)sGYo_{u}|gF");
      LinkedHashSet<SQLTransientException> linkedHashSet0 = new LinkedHashSet<SQLTransientException>();
      Long long0 = new Long((-348));
      Double double0 = new Double(0.0);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class<Properties> class0 = Properties.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isNumber("17EG1;r9)%Jt#{H");
      TypeUtils.decapitalize("17EG1;r9)%Jt#{H");
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte((Object) null);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Fb'7_h0P{cC_-v4OtY^", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("Ljava.util.concurrent.ConcurrentSkipListSet", (Class<?>) null, class0, class1, (Field) null, 0, 0, 0);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("  F,JC=5uTnc;K}", "  F,JC=5uTnc;K}");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<TimeUnit> class2 = TimeUnit.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.clearClassMapping();
      Class<Collator> class3 = Collator.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("[int", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      Class<Integer> class0 = Integer.class;
      TypeUtils.isPath(class0);
      JSONObject jSONObject0 = new JSONObject(705);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(jSONObject0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      Class<VerifyError> class1 = VerifyError.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.isNumber("Lorg.springframework.util.LinkedMultiValueMap");
      Class<Rectangle> class3 = Rectangle.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class3, (Map<String, String>) null, true);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : [bounds, bounds2D, centerX, centerY, empty, frame, height, location, maxX, maxY, minX, minY, size, width, x, y]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("getgetNextException", "getgetNextException");
      InterruptedException interruptedException0 = new InterruptedException("getgetNextException");
      StackTraceElement stackTraceElement0 = new StackTraceElement("M", "getgetNextException", "5fD", 1221);
      Class<Character> class0 = Character.class;
      Class<Float> class1 = Float.TYPE;
      Class<Short> class2 = Short.TYPE;
      TypeUtils.isNumber("l8b9/ZzU\"/");
      TypeUtils.unwrapOptional(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TypeUtils.computeGetters(class1, map0);
      Class<?> class3 = TypeUtils.getRawClass(class0);
      assertFalse(class3.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      JobAttributes.SidesType jobAttributes_SidesType0 = JobAttributes.SidesType.TWO_SIDED_LONG_EDGE;
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      TypeUtils.castToString(jdk8DateCodec0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("*dmK$&}pZ-%#_I! cHN");
      Class<NumberFormat> class0 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockIllegalAccessException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      InterruptedException interruptedException0 = new InterruptedException("Lorg.springframework.util.LinkedMultiValueMap");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Lorg.springframework.util.LinkedMultiValueMap", "M", "Lorg.springframework.util.LinkedMultiValueMap", 1221);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap", "M", 1221);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("*L", "*L", ")xHjbc", 51);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Lorg.springframework.util.LinkedMultiValueMap", ",xi?&viu;SGXA", "M", (-2227));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(",xi?&viu;SGXA", "M", (String) null, (-2227));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("M", ",xi?&viu;SGXA", "QX-q`N", 51);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("M", "QX-q`N", "p|KmbQ.KcAo0Y", 1221);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("can not cast oracle.sql.DATE to Date", "M", "UiHt", (-2227));
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("$", "p|KmbQ.KcAo0Y", ",xi?&viu;SGXA", 51);
      stackTraceElementArray0[8] = stackTraceElement8;
      interruptedException0.setStackTrace(stackTraceElementArray0);
      sQLWarning0.addSuppressed(interruptedException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLWarning: Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
