/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:37:23 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BALOAD;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FALOAD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGE;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.ReturnInstruction;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GOTO gOTO0 = new GOTO((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO(gOTO0);
      RETURN rETURN0 = new RETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRETURN(rETURN0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD(cALOAD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)1055);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DUP2 dUP2_0 = new DUP2();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2((IMPDEP2) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitICONST((ICONST) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCONST dCONST0 = new DCONST(0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      NEW nEW0 = new NEW(0);
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCONST lCONST0 = new LCONST(0L);
      instConstraintVisitor0.visitLCONST(lCONST0);
      assertEquals(1, lCONST0.getLength());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LSTORE lSTORE0 = new LSTORE((byte)46);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      LDIV lDIV0 = new LDIV();
      LDIV lDIV1 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PUTFIELD pUTFIELD0 = new PUTFIELD(35);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(35);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals("dstore", dSTORE0.getName());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LCMP lCMP0 = (LCMP)InstructionConstants.LCMP;
      InstructionList instructionList0 = new InstructionList(lCMP0);
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lCMP0);
      GOTO_W gOTO_W0 = new GOTO_W(instructionHandle0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(122);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(aNEWARRAY0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ILOAD iLOAD0 = new ILOAD(200);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      assertEquals(200, iLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LADD lADD0 = new LADD();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(366, 366);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEINTERFACE0);
      ConstantDouble constantDouble0 = new ConstantDouble(191);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitALOAD((ALOAD) null);
      LADD lADD1 = new LADD();
      assertTrue(lADD1.equals((Object)lADD0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LLOAD lLOAD0 = new LLOAD(3);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals((short)0, nOP0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IRETURN iRETURN0 = new IRETURN();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString("tableswitch");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      GETFIELD gETFIELD0 = new GETFIELD(1359);
      PUTFIELD pUTFIELD0 = new PUTFIELD(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(pUTFIELD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction PUTFIELD constraint violated: Index '2' should refer to a CONSTANT_Fieldref_info structure, but refers to 'CONSTANT_String[8](string_index = 1)'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      GETSTATIC gETSTATIC0 = new GETSTATIC(2582);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals(2582, gETSTATIC0.getIndex());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(942, 3325);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      assertEquals("jsr_w", jSR_W0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FCONST fCONST0 = new FCONST(0.0F);
      fCONST0.toString(true);
      instConstraintVisitor0.visitFCONST(fCONST0);
      DALOAD dALOAD0 = (DALOAD)InstructionConstants.DALOAD;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE((IFGE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE(109);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      JSR jSR0 = new JSR((InstructionHandle) null);
      instConstraintVisitor0.visitJSR(jSR0);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2796);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.getClone();
      ObjectType objectType0 = new ObjectType("5TU2VP8o7");
      OperandStack operandStack0 = new OperandStack(2796, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2796);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(lSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: '5TU2VP8o7'; Instruction type: 'long'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1184);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2555);
      LSTORE lSTORE1 = new LSTORE(1184);
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Object object0 = new Object();
      operandStack0.toString();
      localVariables0.getClone();
      localVariables2.getClone();
      String string0 = Constants.ILLEGAL_OPCODE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2F d2F0 = new D2F();
      I2B i2B0 = new I2B();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(2796);
      localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("5TU2VP8o7");
      OperandStack operandStack0 = new OperandStack(2796, objectType0);
      operandStack0.getClone();
      Frame frame0 = new Frame(2796, 2796);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2796);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(lSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      int int0 = 1184;
      LocalVariables localVariables0 = new LocalVariables(1184);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2555);
      LSTORE lSTORE1 = new LSTORE(1184);
      instConstraintVisitor0.visitISTORE((ISTORE) null);
      DRETURN dRETURN0 = new DRETURN();
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = null;
      try {
        iNVOKEVIRTUAL0 = new INVOKEVIRTUAL((-1748));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative index value: -1748
         //
         verifyException("org.apache.bcel.generic.CPInstruction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = 2555;
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1184);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2555);
      LSTORE lSTORE1 = new LSTORE(1184);
      F2D f2D0 = new F2D();
      SASTORE sASTORE0 = new SASTORE();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      SASTORE sASTORE1 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LXOR lXOR0 = new LXOR();
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'org.apache.bcel.generic.Type'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType(".Y");
      OperandStack operandStack0 = new OperandStack(1777, objectType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(1777);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables0.merge(localVariables2);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0);
      LSTORE lSTORE0 = new LSTORE(324);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type '.Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("Stack next-to-top must be of type double[] but is '");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      LocalVariables localVariables0 = new LocalVariables(825);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(825, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(37);
      LSTORE lSTORE1 = new LSTORE(2709);
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      FSUB fSUB0 = new FSUB();
      assertEquals("fsub", fSUB0.getName());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(40, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2555);
      LocalVariables localVariables1 = new LocalVariables(2555);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.equals(localVariables1);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      Frame.setThis((UninitializedObjectType) null);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(40);
      DNEG dNEG0 = new DNEG();
      DNEG dNEG1 = new DNEG();
      DNEG dNEG2 = new DNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG(dNEG2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DNEG constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      assertNotNull(localVariables0);
      assertEquals(99, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      assertNotNull(operandStack0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string0 = localVariables1.toString();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(string0);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = new LocalVariables(5);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(5, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertNotNull(localVariables3);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables3.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      LSTORE lSTORE0 = new LSTORE((byte)99);
      assertNotNull(lSTORE0);
      assertEquals(99, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(2, lSTORE0.getLength());
      
      LSTORE lSTORE1 = new LSTORE(5);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals(5, lSTORE1.getIndex());
      assertEquals("lstore", lSTORE1.getName());
      assertEquals(2, lSTORE1.getLength());
      
      LSTORE lSTORE2 = new LSTORE(354);
      assertFalse(lSTORE2.equals((Object)lSTORE1));
      assertFalse(lSTORE2.equals((Object)lSTORE0));
      assertNotNull(lSTORE2);
      assertEquals(4, lSTORE2.getLength());
      assertEquals("lstore", lSTORE2.getName());
      assertEquals((short)55, lSTORE2.getOpcode());
      assertEquals(354, lSTORE2.getIndex());
      assertEquals((short)55, lSTORE2.getCanonicalTag());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BALOAD bALOAD0 = new BALOAD();
      assertNotNull(bALOAD0);
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals("baload", bALOAD0.getName());
      assertEquals(1, bALOAD0.getLength());
      
      BALOAD bALOAD1 = new BALOAD();
      assertTrue(bALOAD1.equals((Object)bALOAD0));
      assertNotNull(bALOAD1);
      assertEquals("baload", bALOAD1.getName());
      assertEquals((short)51, bALOAD1.getOpcode());
      assertEquals(1, bALOAD1.getLength());
      
      // Undeclared exception!
      try { 
        bALOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction BALOAD constraint violated: Cannot consume 2 stack slots: only 1 slot(s) left on stack!
         // Stack:
         // Slots used: 1 MaxStack: 99.
         // NEW must not be used to create an array. (Size: 1)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n", string0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      
      LSTORE lSTORE1 = new LSTORE(1174);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals(1174, lSTORE1.getIndex());
      assertEquals(4, lSTORE1.getLength());
      assertEquals("lstore", lSTORE1.getName());
      
      F2D f2D0 = new F2D();
      assertNotNull(f2D0);
      assertEquals(1, f2D0.getLength());
      assertEquals((short)141, f2D0.getOpcode());
      assertEquals("f2d", f2D0.getName());
      
      SASTORE sASTORE0 = new SASTORE();
      assertNotNull(sASTORE0);
      assertEquals("sastore", sASTORE0.getName());
      assertEquals(1, sASTORE0.getLength());
      assertEquals((short)86, sASTORE0.getOpcode());
      
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      assertFalse(instConstraintVisitor1.equals((Object)instConstraintVisitor0));
      assertNotNull(instConstraintVisitor1);
      
      FNEG fNEG0 = new FNEG();
      assertNotNull(fNEG0);
      assertEquals(1, fNEG0.getLength());
      assertEquals((short)118, fNEG0.getOpcode());
      assertEquals("fneg", fNEG0.getName());
      
      LDIV lDIV0 = new LDIV();
      assertNotNull(lDIV0);
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals(1, lDIV0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\norg.apache.bcel.generic.Type (Size: 1)\n", string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1174, localVariables0.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1174, localVariables0.maxLocals());
      
      LOR lOR0 = new LOR();
      assertNotNull(lOR0);
      assertEquals("lor", lOR0.getName());
      assertEquals(1, lOR0.getLength());
      assertEquals((short)129, lOR0.getOpcode());
      
      LXOR lXOR0 = new LXOR();
      assertNotNull(lXOR0);
      assertEquals((short)131, lXOR0.getOpcode());
      assertEquals("lxor", lXOR0.getName());
      assertEquals(1, lXOR0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type 'org.apache.bcel.generic.Type'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n", string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals("lstore", lSTORE0.getName());
      
      LocalVariables localVariables4 = new LocalVariables(452);
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertFalse(localVariables4.equals((Object)localVariables3));
      assertNotNull(localVariables4);
      assertEquals(452, localVariables4.maxLocals());
      
      LocalVariables localVariables5 = localVariables4.getClone();
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables5);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables5, localVariables3);
      assertNotSame(localVariables5, localVariables0);
      assertNotSame(localVariables5, localVariables1);
      assertNotSame(localVariables5, localVariables2);
      assertNotSame(localVariables5, localVariables4);
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertFalse(localVariables4.equals((Object)localVariables3));
      assertFalse(localVariables5.equals((Object)localVariables3));
      assertFalse(localVariables5.equals((Object)localVariables0));
      assertFalse(localVariables5.equals((Object)localVariables1));
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertFalse(localVariables5.equals((Object)localVariables2));
      assertNotNull(localVariables5);
      assertEquals(452, localVariables4.maxLocals());
      assertEquals(452, localVariables5.maxLocals());
      
      String string1 = operandStack0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n", string1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      DUP dUP0 = new DUP();
      assertNotNull(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      String string2 = dUP0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("dup[89](1)", string2);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      FREM fREM0 = new FREM();
      assertNotNull(fREM0);
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals("frem", fREM0.getName());
      assertEquals(1, fREM0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-23);
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      
      int int0 = 1184;
      LocalVariables localVariables0 = new LocalVariables(1184);
      assertNotNull(localVariables0);
      assertEquals(1184, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(4, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(2555, lSTORE0.getIndex());
      
      LSTORE lSTORE1 = new LSTORE(1184);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals(4, lSTORE1.getLength());
      assertEquals("lstore", lSTORE1.getName());
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals(1184, lSTORE1.getIndex());
      assertEquals((short)55, lSTORE1.getOpcode());
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(32782);
      assertNotNull(iNSTANCEOF0);
      assertEquals(32782, iNSTANCEOF0.getIndex());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      
      ObjectType objectType0 = new ObjectType("NEW must not e uGed t create an array.");
      assertNotNull(objectType0);
      assertEquals("LNEW must not e uGed t create an array/;", objectType0.getSignature());
      assertEquals("NEW must not e uGed t create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      assertNotNull(localVariables0);
      assertEquals(99, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LNEW must not e uGed t create an array/;", objectType0.getSignature());
      assertEquals("NEW must not e uGed t create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(99, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("LNEW must not e uGed t create an array/;", objectType0.getSignature());
      assertEquals("NEW must not e uGed t create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(99, operandStack0.maxStack());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables2.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertEquals("LNEW must not e uGed t create an array/;", objectType0.getSignature());
      assertEquals("NEW must not e uGed t create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(99, operandStack0.maxStack());
      
      LSTORE lSTORE0 = new LSTORE((byte)99);
      assertNotNull(lSTORE0);
      assertEquals(2, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(99, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      
      LSTORE lSTORE1 = new LSTORE(5);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals("lstore", lSTORE1.getName());
      assertEquals(2, lSTORE1.getLength());
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals(5, lSTORE1.getIndex());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      GETFIELD gETFIELD0 = new GETFIELD(5);
      assertNotNull(gETFIELD0);
      assertEquals("getfield", gETFIELD0.getName());
      assertEquals((short)180, gETFIELD0.getOpcode());
      assertEquals(3, gETFIELD0.getLength());
      assertEquals(5, gETFIELD0.getIndex());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      
      LDIV lDIV0 = new LDIV();
      assertNotNull(lDIV0);
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals(1, lDIV0.getLength());
      
      LocalVariables localVariables0 = new LocalVariables(1184);
      assertNotNull(localVariables0);
      assertEquals(1184, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      
      ObjectType objectType0 = new ObjectType("Fh");
      assertNotNull(objectType0);
      assertEquals("LFh;", objectType0.getSignature());
      assertEquals("Fh", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(1184, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LFh;", objectType0.getSignature());
      assertEquals("Fh", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1184, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals("LFh;", objectType0.getSignature());
      assertEquals("Fh", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1184, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals("LFh;", objectType0.getSignature());
      assertEquals("Fh", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1184, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      F2I f2I0 = new F2I();
      assertNotNull(f2I0);
      assertEquals((short)139, f2I0.getOpcode());
      assertEquals(1, f2I0.getLength());
      assertEquals("f2i", f2I0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type 'Fh'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      
      ObjectType objectType0 = new ObjectType("The 'arrayref' does not refer to an array but is of type ");
      assertNotNull(objectType0);
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      assertNotNull(localVariables0);
      assertEquals(99, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables((byte)99);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(99, localVariables1.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 99.\nThe 'arrayref' does not refer to an array but is of type  (Size: 1)\n", string0);
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables2.maxLocals());
      assertEquals(99, localVariables3.maxLocals());
      
      localVariables2.merge(localVariables0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The 'arrayref' does not refer to an array but is of type ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      NOP nOP0 = new NOP();
      assertNotNull(nOP0);
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      
      instConstraintVisitor0.visitNOP(nOP0);
      assertEquals("nop", nOP0.getName());
      assertEquals((short)0, nOP0.getOpcode());
      assertEquals(1, nOP0.getLength());
      
      FASTORE fASTORE0 = new FASTORE();
      assertNotNull(fASTORE0);
      assertEquals("fastore", fASTORE0.getName());
      assertEquals((short)81, fASTORE0.getOpcode());
      assertEquals(1, fASTORE0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'The 'arrayref' does not refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      String string0 = localVariables0.toString();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertNotNull(string0);
      assertEquals(1174, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(4, lSTORE0.getLength());
      
      LocalVariables localVariables4 = new LocalVariables(452);
      assertFalse(localVariables4.equals((Object)localVariables3));
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertNotNull(localVariables4);
      assertEquals(452, localVariables4.maxLocals());
      
      LocalVariables localVariables5 = localVariables4.getClone();
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables5);
      assertNotSame(localVariables5, localVariables0);
      assertNotSame(localVariables5, localVariables1);
      assertNotSame(localVariables5, localVariables2);
      assertNotSame(localVariables5, localVariables3);
      assertNotSame(localVariables5, localVariables4);
      assertFalse(localVariables4.equals((Object)localVariables3));
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertFalse(localVariables5.equals((Object)localVariables0));
      assertFalse(localVariables5.equals((Object)localVariables1));
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertFalse(localVariables5.equals((Object)localVariables2));
      assertFalse(localVariables5.equals((Object)localVariables3));
      assertNotNull(localVariables5);
      assertEquals(452, localVariables4.maxLocals());
      assertEquals(452, localVariables5.maxLocals());
      
      String string1 = operandStack0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Slots used: 1 MaxStack: 2555.\n (Size: 1)\n", string1);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      DUP dUP0 = new DUP();
      assertNotNull(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      String string2 = dUP0.toString(true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("dup[89](1)", string2);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      String string3 = dUP0.toString();
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("dup[89](1)", string3);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      LUSHR lUSHR0 = new LUSHR();
      assertNotNull(lUSHR0);
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", lUSHR0.getName());
      
      Instruction instruction0 = lUSHR0.copy();
      assertSame(lUSHR0, instruction0);
      assertSame(instruction0, lUSHR0);
      assertNotNull(instruction0);
      assertEquals((short)125, lUSHR0.getOpcode());
      assertEquals(1, lUSHR0.getLength());
      assertEquals("lushr", lUSHR0.getName());
      assertEquals((short)125, instruction0.getOpcode());
      assertEquals(1, instruction0.getLength());
      assertEquals("lushr", instruction0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(2555);
      assertNotNull(localVariables0);
      assertEquals(2555, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, localVariables0.maxLocals());
      
      boolean boolean0 = frame0.equals(objectType0);
      assertFalse(boolean0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, localVariables0.maxLocals());
      
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      assertNull(uninitializedObjectType0);
      
      IUSHR iUSHR0 = new IUSHR();
      assertNotNull(iUSHR0);
      assertEquals(1, iUSHR0.getLength());
      assertEquals("iushr", iUSHR0.getName());
      assertEquals((short)124, iUSHR0.getOpcode());
      
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, localVariables0.maxLocals());
      
      UninitializedObjectType uninitializedObjectType1 = new UninitializedObjectType(uninitializedObjectType0.STRING);
      assertNotNull(uninitializedObjectType1);
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.String'>", uninitializedObjectType1.getSignature());
      assertEquals(1, uninitializedObjectType1.getSize());
      assertEquals((byte)15, uninitializedObjectType1.getType());
      
      Frame.setThis(uninitializedObjectType1);
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'java.lang.String'>", uninitializedObjectType1.getSignature());
      assertEquals(1, uninitializedObjectType1.getSize());
      assertEquals((byte)15, uninitializedObjectType1.getType());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, localVariables0.maxLocals());
      
      DADD dADD0 = new DADD();
      assertNotNull(dADD0);
      assertEquals("dadd", dADD0.getName());
      assertEquals(1, dADD0.getLength());
      assertEquals((short)99, dADD0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      Object object0 = frame0.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(object0.equals((Object)frame0));
      assertNotNull(object0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      localVariables2.merge(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(frame0, object0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)object0));
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      operandStack0.push(objectType0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(4, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BALOAD bALOAD0 = new BALOAD();
      assertNotNull(bALOAD0);
      assertEquals("baload", bALOAD0.getName());
      assertEquals((short)51, bALOAD0.getOpcode());
      assertEquals(1, bALOAD0.getLength());
      
      // Undeclared exception!
      try { 
        bALOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction BALOAD constraint violated: The 'index' is not of type int but of type NEW must not be used to create an array..
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2555);
      assertNotNull(operandStack0);
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(1154);
      assertNotNull(localVariables0);
      assertEquals(1154, localVariables0.maxLocals());
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1154, localVariables0.maxLocals());
      assertEquals(1154, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1154, localVariables0.maxLocals());
      assertEquals(1154, localVariables2.maxLocals());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = operandStack0.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(1154, localVariables0.maxLocals());
      assertEquals(1154, localVariables1.maxLocals());
      
      String string0 = localVariables2.toString();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(string0);
      assertEquals(1154, localVariables0.maxLocals());
      assertEquals(1154, localVariables2.maxLocals());
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      operandStack0.push(objectType0);
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("L;", objectType0.getSignature());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      Frame frame1 = frame0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1154, localVariables0.maxLocals());
      assertEquals(1154, localVariables1.maxLocals());
      
      String string1 = localVariables0.toString();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1154, localVariables0.maxLocals());
      
      instConstraintVisitor0.setFrame(frame1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1154, localVariables0.maxLocals());
      assertEquals(1154, localVariables1.maxLocals());
      
      I2L i2L0 = new I2L();
      assertNotNull(i2L0);
      assertEquals("i2l", i2L0.getName());
      assertEquals((short)133, i2L0.getOpcode());
      assertEquals(1, i2L0.getLength());
      
      FLOAD fLOAD0 = new FLOAD(21);
      assertNotNull(fLOAD0);
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals(21, fLOAD0.getIndex());
      assertEquals(2, fLOAD0.getLength());
      assertEquals("fload", fLOAD0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(fLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FLOAD constraint violated: Read-Access on local variable 21 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte) (-23);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)13, (byte)0, (byte) (-23)}, byteArray0);
      assertFalse(boolean0);
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a$TZK{#Q>{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocalVariables localVariables0 = new LocalVariables(1184);
      assertNotNull(localVariables0);
      assertEquals(1184, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      assertEquals(1184, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables1.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals(4, lSTORE0.getLength());
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((short)55, lSTORE0.getOpcode());
      
      LSTORE lSTORE1 = new LSTORE(1184);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals(4, lSTORE1.getLength());
      assertEquals(1184, lSTORE1.getIndex());
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals("lstore", lSTORE1.getName());
      
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(32782);
      assertNotNull(iNSTANCEOF0);
      assertEquals(32782, iNSTANCEOF0.getIndex());
      assertEquals(3, iNSTANCEOF0.getLength());
      assertEquals((short)193, iNSTANCEOF0.getOpcode());
      assertEquals("instanceof", iNSTANCEOF0.getName());
      
      LCMP lCMP0 = new LCMP();
      assertNotNull(lCMP0);
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      
      int int0 = lCMP0.consumeStack(constantPoolGen0);
      assertEquals(4, int0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, lCMP0.getLength());
      assertEquals((short)148, lCMP0.getOpcode());
      assertEquals("lcmp", lCMP0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\norg.apache.bcel.generic.Type (Size: 1)\n", string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      
      LOR lOR0 = new LOR();
      assertNotNull(lOR0);
      assertEquals(1, lOR0.getLength());
      assertEquals("lor", lOR0.getName());
      assertEquals((short)129, lOR0.getOpcode());
      
      LXOR lXOR0 = new LXOR();
      assertNotNull(lXOR0);
      assertEquals("lxor", lXOR0.getName());
      assertEquals(1, lXOR0.getLength());
      assertEquals((short)131, lXOR0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type 'org.apache.bcel.generic.Type'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals(1, lADD0.getLength());
      assertEquals("ladd", lADD0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NEW must not be used to create an array.");
      assertFalse(boolean0);
      
      LocalVariables localVariables0 = new LocalVariables(1197);
      assertNotNull(localVariables0);
      assertEquals(1197, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n", string0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      LocalVariables localVariables3 = (LocalVariables)localVariables2.clone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      assertEquals(1197, localVariables3.maxLocals());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      
      Frame frame1 = (Frame)frame0.clone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      
      LocalVariables localVariables4 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables3);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertNotNull(localVariables4);
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      assertEquals(1197, localVariables4.maxLocals());
      
      localVariables2.merge(localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables1.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      
      Frame frame2 = frame0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame2, frame1);
      assertNotSame(frame2, frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame0.equals((Object)frame2));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      operandStack0.push(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(4, lSTORE0.getLength());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LocalVariables localVariables5 = (LocalVariables)localVariables2.clone();
      assertNotSame(localVariables5, localVariables0);
      assertNotSame(localVariables5, localVariables3);
      assertNotSame(localVariables5, localVariables2);
      assertNotSame(localVariables5, localVariables1);
      assertNotSame(localVariables5, localVariables4);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables5);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertTrue(localVariables5.equals((Object)localVariables3));
      assertTrue(localVariables5.equals((Object)localVariables0));
      assertTrue(localVariables5.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables5);
      assertEquals(1197, localVariables5.maxLocals());
      assertEquals(1197, localVariables0.maxLocals());
      assertEquals(1197, localVariables2.maxLocals());
      
      LSUB lSUB0 = new LSUB();
      assertNotNull(lSUB0);
      assertEquals(1, lSUB0.getLength());
      assertEquals("lsub", lSUB0.getName());
      assertEquals((short)101, lSUB0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      assertNotNull(localVariables0);
      assertEquals(99, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      String string0 = localVariables1.toString();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(string0);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = new LocalVariables(5);
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(5, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertNotNull(localVariables3);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables3.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LSTORE lSTORE0 = new LSTORE((byte)99);
      assertNotNull(lSTORE0);
      assertEquals(99, lSTORE0.getIndex());
      assertEquals(2, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((short)55, lSTORE0.getOpcode());
      
      LSTORE lSTORE1 = new LSTORE(5);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals(5, lSTORE1.getIndex());
      assertEquals(2, lSTORE1.getLength());
      assertEquals("lstore", lSTORE1.getName());
      
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL((byte)99);
      assertNotNull(iNVOKESPECIAL0);
      assertEquals(3, iNVOKESPECIAL0.getLength());
      assertEquals("invokespecial", iNVOKESPECIAL0.getName());
      assertEquals((short)183, iNVOKESPECIAL0.getOpcode());
      assertEquals(99, iNVOKESPECIAL0.getIndex());
      
      IDIV iDIV0 = new IDIV();
      assertNotNull(iDIV0);
      assertEquals(1, iDIV0.getLength());
      assertEquals("idiv", iDIV0.getName());
      assertEquals((short)108, iDIV0.getOpcode());
      
      IDIV iDIV1 = new IDIV();
      assertTrue(iDIV1.equals((Object)iDIV0));
      assertNotNull(iDIV1);
      assertEquals((short)108, iDIV1.getOpcode());
      assertEquals(1, iDIV1.getLength());
      assertEquals("idiv", iDIV1.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals("ladd", lADD0.getName());
      
      LDIV lDIV0 = new LDIV();
      assertNotNull(lDIV0);
      assertEquals(1, lDIV0.getLength());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals("ldiv", lDIV0.getName());
      
      LocalVariables localVariables0 = new LocalVariables(1184);
      assertNotNull(localVariables0);
      assertEquals(1184, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables(1184);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1184, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals(1184, localVariables2.maxLocals());
      
      ObjectType objectType0 = new ObjectType("2f");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("2f", objectType0.getClassName());
      assertEquals("L2f;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(1184, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("2f", objectType0.getClassName());
      assertEquals("L2f;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1184, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertNotNull(frame0);
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("2f", objectType0.getClassName());
      assertEquals("L2f;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1184, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals(1184, localVariables1.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("2f", objectType0.getClassName());
      assertEquals("L2f;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1184, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals(1184, localVariables0.maxLocals());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("2f", objectType0.getClassName());
      assertEquals("L2f;", objectType0.getSignature());
      assertEquals(1, operandStack0.size());
      assertEquals(1184, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string0 = Character.getName(3001);
      assertNotNull(string0);
      assertEquals("TAMIL LETTER HA", string0);
      
      LocalVariables localVariables3 = new LocalVariables(1184);
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertNotNull(localVariables3);
      assertEquals(1184, localVariables3.maxLocals());
      
      IMUL iMUL0 = new IMUL();
      assertNotNull(iMUL0);
      assertEquals(1, iMUL0.getLength());
      assertEquals("imul", iMUL0.getName());
      assertEquals((short)104, iMUL0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type '2f'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}B");
      assertFalse(boolean0);
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2518, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2518, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(5);
      assertNotNull(localVariables0);
      assertEquals(5, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2518, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(5, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(5, localVariables0.maxLocals());
      assertEquals(5, localVariables1.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2518, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(5, localVariables0.maxLocals());
      
      DSUB dSUB0 = new DSUB();
      assertNotNull(dSUB0);
      assertEquals("dsub", dSUB0.getName());
      assertEquals((short)103, dSUB0.getOpcode());
      assertEquals(1, dSUB0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB(dSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSUB constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      
      ObjectType objectType1 = ObjectType.getInstance("The value at the stack next-to-top is not of type 'double', but of type '");
      assertNotSame(objectType1, objectType0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotNull(objectType1);
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      String string0 = operandStack0.toString();
      assertNotSame(objectType1, objectType0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\nThe value at the stack next-to-top is not of type 'double', but of type ' (Size: 1)\n", string0);
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertNotSame(objectType1, objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(2555, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      LocalVariables localVariables0 = new LocalVariables(403);
      assertNotNull(localVariables0);
      assertEquals(403, localVariables0.maxLocals());
      
      String string1 = operandStack1.toString();
      assertNotSame(objectType1, objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Slots used: 1 MaxStack: 2555.\nThe value at the stack next-to-top is not of type 'double', but of type ' (Size: 1)\n", string1);
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(2555, operandStack1.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertFalse(objectType1.equals((Object)objectType0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(403, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(403, localVariables0.maxLocals());
      assertEquals(403, localVariables1.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(objectType1, objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(403, localVariables0.maxLocals());
      
      operandStack0.push(objectType0);
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType1, objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(objectType0.equals((Object)objectType1));
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      LocalVariables localVariables2 = new LocalVariables(59);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(59, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(403, localVariables0.maxLocals());
      assertEquals(403, localVariables3.maxLocals());
      
      String string2 = operandStack0.toString();
      assertNotSame(objectType1, objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Slots used: 2 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\nThe value at the stack next-to-top is not of type 'double', but of type ' (Size: 1)\n", string2);
      assertEquals((byte)14, objectType1.getType());
      assertEquals("The value at the stack next-to-top is not of type 'double', but of type '", objectType1.getClassName());
      assertEquals(1, objectType1.getSize());
      assertEquals("LThe value at the stack next-to-top is not of type 'double', but of type ';", objectType1.getSignature());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      LocalVariables localVariables4 = localVariables1.getClone();
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables4);
      assertEquals(403, localVariables4.maxLocals());
      assertEquals(403, localVariables0.maxLocals());
      assertEquals(403, localVariables1.maxLocals());
      
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(167);
      assertNotNull(aNEWARRAY0);
      assertEquals("anewarray", aNEWARRAY0.getName());
      assertEquals((short)189, aNEWARRAY0.getOpcode());
      assertEquals(167, aNEWARRAY0.getIndex());
      assertEquals(3, aNEWARRAY0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals("ladd", lADD0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW mus not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.size());
      assertEquals(2555, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(2555);
      assertNotNull(localVariables0);
      assertEquals(2555, localVariables0.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW mus not be used to create an array. (Size: 1)\n", string0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(2555, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertNotNull(localVariables1);
      assertEquals(2555, localVariables0.maxLocals());
      assertEquals(2555, localVariables1.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(2555, localVariables0.maxLocals());
      
      operandStack0.push(objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      LocalVariables localVariables2 = new LocalVariables(452);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(452, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertNotNull(localVariables3);
      assertEquals(452, localVariables2.maxLocals());
      assertEquals(452, localVariables3.maxLocals());
      
      String string1 = operandStack0.toString();
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Slots used: 2 MaxStack: 2555.\nNEW mus not be used to create an array. (Size: 1)\nNEW mus not be used to create an array. (Size: 1)\n", string1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW mus not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW mus not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.slotsUsed());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      LocalVariables localVariables4 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables2);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables4.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertNotNull(localVariables4);
      assertEquals(2555, localVariables0.maxLocals());
      assertEquals(2555, localVariables4.maxLocals());
      
      IMUL iMUL0 = new IMUL();
      assertNotNull(iMUL0);
      assertEquals("imul", iMUL0.getName());
      assertEquals((short)104, iMUL0.getOpcode());
      assertEquals(1, iMUL0.getLength());
      
      SWAP sWAP0 = new SWAP();
      assertNotNull(sWAP0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      assertNotNull(mONITORENTER0);
      assertEquals((short)194, mONITORENTER0.getOpcode());
      assertEquals("monitorenter", mONITORENTER0.getName());
      assertEquals(1, mONITORENTER0.getLength());
      
      IADD iADD0 = new IADD();
      assertNotNull(iADD0);
      assertEquals(1, iADD0.getLength());
      assertEquals((short)96, iADD0.getOpcode());
      assertEquals("iadd", iADD0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD(iADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IADD constraint violated: The value at the stack top is not of type 'int', but of type 'NEW mus not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      assertNotNull(objectType0);
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(83);
      assertNotNull(localVariables0);
      assertEquals(83, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(83, localVariables0.maxLocals());
      assertEquals(83, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(83, localVariables0.maxLocals());
      assertEquals(83, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(83, localVariables0.maxLocals());
      assertEquals(83, localVariables3.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\norg.apache.bcel.generic.Type (Size: 1)\n", string0);
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      String string1 = operandStack0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Slots used: 1 MaxStack: 2555.\norg.apache.bcel.generic.Type (Size: 1)\n", string1);
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      localVariables0.merge(localVariables1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(83, localVariables0.maxLocals());
      assertEquals(83, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertNotNull(frame0);
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(83, localVariables0.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(83, localVariables0.maxLocals());
      
      operandStack0.push(objectType0);
      assertEquals("Lorg/apache/bcel/generic/Type;", objectType0.getSignature());
      assertEquals("org.apache.bcel.generic.Type", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      
      ATHROW aTHROW0 = new ATHROW();
      assertNotNull(aTHROW0);
      assertEquals("athrow", aTHROW0.getName());
      assertEquals(1, aTHROW0.getLength());
      assertEquals((short)191, aTHROW0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ATHROW constraint violated: The 'objectref' is not of class Throwable or of a subclass of Throwable, but of 'org.apache.bcel.generic.Type'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-40);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)13, (byte) (-40)}, byteArray0);
      assertFalse(boolean0);
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LocalVariables localVariables0 = new LocalVariables(1184);
      assertNotNull(localVariables0);
      assertEquals(1184, localVariables0.maxLocals());
      
      int int0 = constantPoolGen0.lookupFieldref("NEW must not be used to create an array.", "NEW must not be used to create an array.", "NEW must not be used to create an array.");
      assertEquals((-1), int0);
      assertEquals(1, constantPoolGen0.getSize());
      
      LocalVariables localVariables1 = new LocalVariables(1184);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1184, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1184, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(1184, localVariables1.maxLocals());
      assertEquals(1184, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(1184, localVariables1.maxLocals());
      assertEquals(1184, localVariables3.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1184, localVariables1.maxLocals());
      
      LDIV lDIV0 = new LDIV();
      assertNotNull(lDIV0);
      assertEquals(1, lDIV0.getLength());
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      
      Instruction instruction0 = lDIV0.copy();
      assertSame(lDIV0, instruction0);
      assertSame(instruction0, lDIV0);
      assertNotNull(instruction0);
      assertEquals(1, lDIV0.getLength());
      assertEquals("ldiv", lDIV0.getName());
      assertEquals((short)109, lDIV0.getOpcode());
      assertEquals((short)109, instruction0.getOpcode());
      assertEquals("ldiv", instruction0.getName());
      assertEquals(1, instruction0.getLength());
      
      Character character0 = new Character('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      assertNotNull(pUSH0);
      assertEquals(1, constantPoolGen0.getSize());
      
      InstructionList instructionList0 = pUSH0.getInstructionList();
      assertNotNull(instructionList0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertNotNull(instructionHandle0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertEquals((-1), instructionHandle0.getPosition());
      assertFalse(instructionHandle0.hasTargeters());
      
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ(instructionHandle0);
      assertNotNull(iF_ICMPEQ0);
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals(1, instructionList0.size());
      assertEquals(1, instructionList0.getLength());
      assertFalse(instructionList0.isEmpty());
      assertTrue(instructionHandle0.hasTargeters());
      assertEquals((-1), instructionHandle0.getPosition());
      assertEquals(3, iF_ICMPEQ0.getLength());
      assertEquals((short)159, iF_ICMPEQ0.getOpcode());
      assertEquals(0, iF_ICMPEQ0.getIndex());
      assertEquals("if_icmpeq", iF_ICMPEQ0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals(1, lADD0.getLength());
      
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      assertNotNull(localVariables0);
      assertEquals(99, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      assertNotNull(operandStack0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(99, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(99, operandStack0.maxStack());
      
      String string0 = localVariables1.toString();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(string0);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = new LocalVariables(5);
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(5, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables3 = (LocalVariables)localVariables0.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables3.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(99, operandStack0.maxStack());
      
      LSTORE lSTORE0 = new LSTORE((byte)99);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(99, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(2, lSTORE0.getLength());
      
      LSTORE lSTORE1 = new LSTORE(5);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals(5, lSTORE1.getIndex());
      assertEquals(2, lSTORE1.getLength());
      assertEquals("lstore", lSTORE1.getName());
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      FLOAD fLOAD0 = new FLOAD(552);
      assertNotNull(fLOAD0);
      assertEquals("fload", fLOAD0.getName());
      assertEquals(552, fLOAD0.getIndex());
      assertEquals(4, fLOAD0.getLength());
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals("fload", fLOAD0.getName());
      assertEquals(552, fLOAD0.getIndex());
      assertEquals(4, fLOAD0.getLength());
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      
      instConstraintVisitor0.visitLocalVariableInstruction(lSTORE1);
      assertNotSame(lSTORE1, lSTORE0);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertEquals(5, lSTORE1.getIndex());
      assertEquals(2, lSTORE1.getLength());
      assertEquals("lstore", lSTORE1.getName());
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      
      IALOAD iALOAD0 = new IALOAD();
      assertNotNull(iALOAD0);
      assertEquals("iaload", iALOAD0.getName());
      assertEquals((short)46, iALOAD0.getOpcode());
      assertEquals(1, iALOAD0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIALOAD(iALOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IALOAD constraint violated: The 'index' is not of type int but of type NEW must not be used to create an array..
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals(1, lADD0.getLength());
      assertEquals("ladd", lADD0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = new ObjectType(".Y");
      assertNotNull(objectType0);
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(".Y", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      int int0 = 1777;
      OperandStack operandStack0 = new OperandStack(1777, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(".Y", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1777, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(1777);
      assertNotNull(localVariables0);
      assertEquals(1777, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(".Y", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1777, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(".Y", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1777, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      
      localVariables0.merge(localVariables2);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(".Y", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1777, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(1777);
      assertNotNull(lSTORE0);
      assertEquals(4, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(1777, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((short)55, lSTORE0.getOpcode());
      
      LSTORE lSTORE1 = new LSTORE(1777);
      assertTrue(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals("lstore", lSTORE1.getName());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals(1777, lSTORE1.getIndex());
      assertEquals(4, lSTORE1.getLength());
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      
      int int1 = 552;
      FLOAD fLOAD0 = new FLOAD(1777);
      assertNotNull(fLOAD0);
      assertEquals("fload", fLOAD0.getName());
      assertEquals(4, fLOAD0.getLength());
      assertEquals((short)23, fLOAD0.getCanonicalTag());
      assertEquals((short)23, fLOAD0.getOpcode());
      assertEquals(1777, fLOAD0.getIndex());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(fLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack1.size());
      assertEquals(2555, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertFalse(operandStack1.isEmpty());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack2, operandStack1);
      assertNotSame(operandStack2, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertNotNull(operandStack2);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack2.slotsUsed());
      assertEquals(2555, operandStack2.maxStack());
      assertFalse(operandStack2.isEmpty());
      assertEquals(1, operandStack2.size());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      operandStack0.push(objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(2, operandStack0.size());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(2555, lSTORE0.getIndex());
      
      LocalVariables localVariables3 = new LocalVariables(1174);
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables3.maxLocals());
      
      LocalVariables localVariables4 = localVariables3.getClone();
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables2);
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertNotNull(localVariables4);
      assertEquals(1174, localVariables3.maxLocals());
      assertEquals(1174, localVariables4.maxLocals());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      assertNull(instructionHandle0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      D2L d2L0 = new D2L();
      assertNotNull(d2L0);
      assertEquals(1, d2L0.getLength());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals("d2l", d2L0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals(1, lADD0.getLength());
      assertEquals("ladd", lADD0.getName());
      assertEquals((short)97, lADD0.getOpcode());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("Stack next-to-top must be of type double[] but is '");
      assertNotNull(objectType0);
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      LocalVariables localVariables0 = new LocalVariables((byte)43);
      assertNotNull(localVariables0);
      assertEquals(43, localVariables0.maxLocals());
      
      OperandStack operandStack0 = new OperandStack(825, objectType0);
      assertNotNull(operandStack0);
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(825, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      String string0 = Character.getName(825);
      assertNotNull(string0);
      assertEquals("COMBINING RIGHT HALF RING BELOW", string0);
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(43, localVariables0.maxLocals());
      assertEquals(825, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      assertNotNull(uninitializedObjectType0);
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'Stack next-to-top must be of type double[] but is ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      boolean boolean0 = uninitializedObjectType0.isAssignmentCompatibleWith(objectType0);
      assertFalse(boolean0);
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'Stack next-to-top must be of type double[] but is ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      Frame.setThis(uninitializedObjectType0);
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("<UNINITIALIZED OBJECT OF TYPE 'Stack next-to-top must be of type double[] but is ''>", uninitializedObjectType0.getSignature());
      assertEquals((byte)15, uninitializedObjectType0.getType());
      assertEquals(1, uninitializedObjectType0.getSize());
      
      instConstraintVisitor0.setFrame(frame0);
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(43, localVariables0.maxLocals());
      assertEquals(825, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      
      DADD dADD0 = new DADD();
      assertNotNull(dADD0);
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      assertEquals((short)99, dADD0.getOpcode());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ALOAD aLOAD0 = new ALOAD((byte)43);
      assertNotNull(aLOAD0);
      assertEquals(2, aLOAD0.getLength());
      assertEquals(43, aLOAD0.getIndex());
      assertEquals("aload", aLOAD0.getName());
      assertEquals((short)25, aLOAD0.getCanonicalTag());
      assertEquals((short)25, aLOAD0.getOpcode());
      
      LMUL lMUL0 = new LMUL();
      assertNotNull(lMUL0);
      assertEquals("lmul", lMUL0.getName());
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals(1, lMUL0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'Stack next-to-top must be of type double[] but is ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n", string0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      Frame frame1 = (Frame)frame0.clone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      Frame frame2 = frame0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame2, frame0);
      assertNotSame(frame2, frame1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame2.equals((Object)frame1));
      assertNotNull(frame2);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables4 = (LocalVariables)localVariables3.clone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertNotNull(localVariables4);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      assertEquals(1174, localVariables4.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(frame0, frame2);
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertNotSame(frame1, frame2);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(frame0.equals((Object)frame1));
      assertTrue(frame1.equals((Object)frame0));
      assertTrue(frame1.equals((Object)frame2));
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(1174);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(1174, lSTORE0.getIndex());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      
      LocalVariables localVariables5 = new LocalVariables(0);
      assertFalse(localVariables5.equals((Object)localVariables0));
      assertFalse(localVariables5.equals((Object)localVariables2));
      assertFalse(localVariables5.equals((Object)localVariables1));
      assertFalse(localVariables5.equals((Object)localVariables4));
      assertFalse(localVariables5.equals((Object)localVariables3));
      assertNotNull(localVariables5);
      assertEquals(0, localVariables5.maxLocals());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = operandStack0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n", string1);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      
      DUP dUP0 = new DUP();
      assertNotNull(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      instConstraintVisitor0.visitStackInstruction(dUP0);
      assertEquals(1, dUP0.getLength());
      assertEquals("dup", dUP0.getName());
      assertEquals((short)89, dUP0.getOpcode());
      
      FASTORE fASTORE0 = new FASTORE();
      assertNotNull(fASTORE0);
      assertEquals(1, fASTORE0.getLength());
      assertEquals("fastore", fASTORE0.getName());
      assertEquals((short)81, fASTORE0.getOpcode());
      
      FASTORE fASTORE1 = new FASTORE();
      assertTrue(fASTORE1.equals((Object)fASTORE0));
      assertNotNull(fASTORE1);
      assertEquals((short)81, fASTORE1.getOpcode());
      assertEquals(1, fASTORE1.getLength());
      assertEquals("fastore", fASTORE1.getName());
      
      IUSHR iUSHR0 = new IUSHR();
      assertNotNull(iUSHR0);
      assertEquals((short)124, iUSHR0.getOpcode());
      assertEquals("iushr", iUSHR0.getName());
      assertEquals(1, iUSHR0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals(1, lADD0.getLength());
      assertEquals("ladd", lADD0.getName());
      assertEquals((short)97, lADD0.getOpcode());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(1759, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1759, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(1759);
      assertNotNull(localVariables0);
      assertEquals(1759, localVariables0.maxLocals());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1759, operandStack0.maxStack());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1759, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1759, localVariables0.maxLocals());
      assertEquals(1759, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(1759, 1759);
      assertNotNull(frame0);
      
      Frame frame1 = new Frame(localVariables1, operandStack0);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertFalse(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1759, operandStack0.maxStack());
      assertEquals(1759, localVariables0.maxLocals());
      assertEquals(1759, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1759, localVariables0.maxLocals());
      assertEquals(1759, localVariables2.maxLocals());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      localVariables1.merge(localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(1759, localVariables0.maxLocals());
      assertEquals(1759, localVariables1.maxLocals());
      assertEquals(1759, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      operandStack0.push(objectType0);
      assertNotSame(operandStack0, operandStack1);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1759, operandStack0.maxStack());
      
      LSTORE lSTORE0 = new LSTORE(1084);
      assertNotNull(lSTORE0);
      assertEquals("lstore", lSTORE0.getName());
      assertEquals(1084, lSTORE0.getIndex());
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals((short)55, lSTORE0.getOpcode());
      
      instConstraintVisitor0.setFrame(frame1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(frame1, frame0);
      assertFalse(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertFalse(frame1.equals((Object)frame0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1759, operandStack0.maxStack());
      assertEquals(1759, localVariables0.maxLocals());
      assertEquals(1759, localVariables1.maxLocals());
      
      LSTORE lSTORE1 = new LSTORE(1084);
      assertTrue(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals("lstore", lSTORE1.getName());
      assertEquals(1084, lSTORE1.getIndex());
      assertEquals(4, lSTORE1.getLength());
      
      LSTORE lSTORE2 = new LSTORE(1759);
      assertFalse(lSTORE2.equals((Object)lSTORE0));
      assertFalse(lSTORE2.equals((Object)lSTORE1));
      assertNotNull(lSTORE2);
      assertEquals((short)55, lSTORE2.getOpcode());
      assertEquals(1759, lSTORE2.getIndex());
      assertEquals((short)55, lSTORE2.getCanonicalTag());
      assertEquals(4, lSTORE2.getLength());
      assertEquals("lstore", lSTORE2.getName());
      
      SWAP sWAP0 = new SWAP();
      assertNotNull(sWAP0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      
      instConstraintVisitor0.visitSWAP(sWAP0);
      assertEquals("swap", sWAP0.getName());
      assertEquals((short)95, sWAP0.getOpcode());
      assertEquals(1, sWAP0.getLength());
      
      FSUB fSUB0 = new FSUB();
      assertNotNull(fSUB0);
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals("fsub", fSUB0.getName());
      assertEquals(1, fSUB0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB(fSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FSUB constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals(1, lADD0.getLength());
      assertEquals("ladd", lADD0.getName());
      
      ObjectType objectType0 = new ObjectType("The 'arrayref' does not refer to an array but is of type ");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      assertNotNull(localVariables0);
      assertEquals(99, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = new LocalVariables((byte)99);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(99, localVariables1.maxLocals());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 99.\nThe 'arrayref' does not refer to an array but is of type  (Size: 1)\n", string0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables2.maxLocals());
      
      Frame frame1 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      assertEquals(99, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables2.maxLocals());
      assertEquals(99, localVariables3.maxLocals());
      
      localVariables2.merge(localVariables0);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(frame0, frame1);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(frame0.equals((Object)frame1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("The 'arrayref' does not refer to an array but is of type ", objectType0.getClassName());
      assertEquals("LThe 'arrayref' does not refer to an array but is of type ;", objectType0.getSignature());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(99, operandStack0.maxStack());
      
      LASTORE lASTORE0 = new LASTORE();
      assertNotNull(lASTORE0);
      assertEquals((short)80, lASTORE0.getOpcode());
      assertEquals("lastore", lASTORE0.getName());
      assertEquals(1, lASTORE0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'The 'arrayref' does not refer to an array but is of type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("");
      assertNotNull(objectType0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(4, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      
      String string0 = localVariables0.toString();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertNotNull(string0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LSTORE lSTORE1 = new LSTORE(1174);
      assertFalse(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals(1174, lSTORE1.getIndex());
      assertEquals("lstore", lSTORE1.getName());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals(4, lSTORE1.getLength());
      
      OperandStack operandStack1 = operandStack0.getClone();
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      
      OperandStack operandStack2 = new OperandStack(2555, objectType0);
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertNotNull(operandStack2);
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack2.isEmpty());
      assertEquals(2555, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertEquals(1, operandStack2.slotsUsed());
      
      operandStack2.merge(operandStack1);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(operandStack1, operandStack2);
      assertNotSame(operandStack1, operandStack0);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(operandStack1.equals((Object)operandStack2));
      assertTrue(operandStack2.equals((Object)operandStack1));
      assertTrue(operandStack2.equals((Object)operandStack0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack1.maxStack());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertFalse(operandStack2.isEmpty());
      assertEquals(2555, operandStack2.maxStack());
      assertEquals(1, operandStack2.size());
      assertEquals(1, operandStack2.slotsUsed());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      operandStack2.push(objectType0);
      assertNotSame(operandStack2, operandStack0);
      assertNotSame(operandStack2, operandStack1);
      assertFalse(operandStack2.equals((Object)operandStack0));
      assertFalse(operandStack2.equals((Object)operandStack1));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertFalse(operandStack2.isEmpty());
      assertEquals(2555, operandStack2.maxStack());
      assertEquals(2, operandStack2.size());
      assertEquals(2, operandStack2.slotsUsed());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack0, operandStack2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertFalse(operandStack0.equals((Object)operandStack2));
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("L;", objectType0.getSignature());
      assertEquals("", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.size());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(5, (short)21);
      assertNotNull(mULTIANEWARRAY0);
      assertEquals((short)197, mULTIANEWARRAY0.getOpcode());
      assertEquals(5, mULTIANEWARRAY0.getIndex());
      assertEquals(4, mULTIANEWARRAY0.getLength());
      assertEquals("multianewarray", mULTIANEWARRAY0.getName());
      assertEquals((short)21, mULTIANEWARRAY0.getDimensions());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '21' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-23);
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(1184);
      assertNotNull(localVariables0);
      assertEquals(1184, localVariables0.maxLocals());
      
      Frame frame0 = new Frame(localVariables0, operandStack0);
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1184, localVariables0.maxLocals());
      
      Frame frame1 = frame0.getClone();
      assertNotSame(frame0, frame1);
      assertNotSame(frame1, frame0);
      assertTrue(frame1.equals((Object)frame0));
      assertNotNull(frame1);
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1184, localVariables0.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(frame0, frame1);
      assertTrue(frame0.equals((Object)frame1));
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertEquals(1184, localVariables0.maxLocals());
      
      ARETURN aRETURN0 = new ARETURN();
      assertNotNull(aRETURN0);
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
      
      instConstraintVisitor0.visitARETURN(aRETURN0);
      assertEquals(1, aRETURN0.getLength());
      assertEquals("areturn", aRETURN0.getName());
      assertEquals((short)176, aRETURN0.getOpcode());
      
      Boolean boolean0 = new Boolean("NEW must not be used to create an array.");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      FMUL fMUL0 = new FMUL();
      assertNotNull(fMUL0);
      assertEquals(1, fMUL0.getLength());
      assertEquals("fmul", fMUL0.getName());
      assertEquals((short)106, fMUL0.getOpcode());
      
      LNEG lNEG0 = new LNEG();
      assertNotNull(lNEG0);
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      assertEquals(1, lNEG0.getLength());
      
      L2I l2I0 = new L2I();
      assertNotNull(l2I0);
      assertEquals(1, l2I0.getLength());
      assertEquals((short)136, l2I0.getOpcode());
      assertEquals("l2i", l2I0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      ObjectType objectType1 = (ObjectType)operandStack0.pop();
      assertSame(objectType0, objectType1);
      assertSame(objectType1, objectType0);
      assertNotNull(objectType1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals((byte)14, objectType1.getType());
      assertEquals("NEW must not be used to create an array.", objectType1.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType1.getSignature());
      assertEquals(1, objectType1.getSize());
      
      String string0 = operandStack0.toString();
      assertSame(objectType0, objectType1);
      assertNotNull(string0);
      assertEquals("Slots used: 0 MaxStack: 2555.\n", string0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertSame(objectType0, objectType1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(0, operandStack0.slotsUsed());
      assertTrue(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(0, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      operandStack0.push(objectType0);
      assertSame(objectType0, objectType1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      
      LSTORE lSTORE0 = new LSTORE(2555);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(4, lSTORE0.getLength());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(2555, lSTORE0.getIndex());
      assertEquals("lstore", lSTORE0.getName());
      
      LocalVariables localVariables3 = new LocalVariables(452);
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertNotNull(localVariables3);
      assertEquals(452, localVariables3.maxLocals());
      
      LocalVariables localVariables4 = localVariables3.getClone();
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables1);
      assertNotSame(localVariables4, localVariables3);
      assertFalse(localVariables3.equals((Object)localVariables2));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertFalse(localVariables4.equals((Object)localVariables0));
      assertFalse(localVariables4.equals((Object)localVariables2));
      assertFalse(localVariables4.equals((Object)localVariables1));
      assertNotNull(localVariables4);
      assertEquals(452, localVariables3.maxLocals());
      assertEquals(452, localVariables4.maxLocals());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList0);
      assertNull(instructionHandle0);
      assertEquals(0, instructionList0.getLength());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.size());
      
      D2L d2L0 = new D2L();
      assertNotNull(d2L0);
      assertEquals(1, d2L0.getLength());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals("d2l", d2L0.getName());
      
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      assertNotNull(iFNULL0);
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(0, iFNULL0.getIndex());
      
      iFNULL0.updateTarget((InstructionHandle) null, (InstructionHandle) null);
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(0, iFNULL0.getIndex());
      
      iFNULL0.updateTarget((InstructionHandle) null, (InstructionHandle) null);
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(0, iFNULL0.getIndex());
      
      instConstraintVisitor0.visitIFNULL(iFNULL0);
      assertEquals((short)198, iFNULL0.getOpcode());
      assertEquals(3, iFNULL0.getLength());
      assertEquals("ifnull", iFNULL0.getName());
      assertEquals(0, iFNULL0.getIndex());
      
      FREM fREM0 = new FREM();
      assertNotNull(fREM0);
      assertEquals((short)114, fREM0.getOpcode());
      assertEquals(1, fREM0.getLength());
      assertEquals("frem", fREM0.getName());
      
      LNEG lNEG0 = new LNEG();
      assertNotNull(lNEG0);
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals(1, lNEG0.getLength());
      assertEquals("lneg", lNEG0.getName());
      
      GETSTATIC gETSTATIC0 = new GETSTATIC(2555);
      assertNotNull(gETSTATIC0);
      assertEquals(2555, gETSTATIC0.getIndex());
      assertEquals(3, gETSTATIC0.getLength());
      assertEquals("getstatic", gETSTATIC0.getName());
      assertEquals((short)178, gETSTATIC0.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFieldInstruction(gETSTATIC0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals(1, lADD0.getLength());
      assertEquals("ladd", lADD0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n", string0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = (LocalVariables)localVariables2.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      String string1 = frame0.toString();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables4 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertNotNull(localVariables4);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      assertEquals(1174, localVariables4.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables4);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      DCMPG dCMPG0 = new DCMPG();
      assertNotNull(dCMPG0);
      assertEquals((short)152, dCMPG0.getOpcode());
      assertEquals("dcmpg", dCMPG0.getName());
      assertEquals(1, dCMPG0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals((short)97, lADD0.getOpcode());
      assertEquals(1, lADD0.getLength());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance(".Y");
      assertNotNull(objectType0);
      assertEquals(".Y", objectType0.getClassName());
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      
      OperandStack operandStack0 = new OperandStack(1777, objectType0);
      assertNotNull(operandStack0);
      assertEquals(".Y", objectType0.getClassName());
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1777, operandStack0.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(1777);
      assertNotNull(localVariables0);
      assertEquals(1777, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables1.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals(".Y", objectType0.getClassName());
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1777, operandStack0.maxStack());
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      
      Object object0 = frame0.clone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(frame0, object0);
      assertNotSame(object0, frame0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(object0);
      assertEquals(".Y", objectType0.getClassName());
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1777, operandStack0.maxStack());
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables2.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      assertEquals(1777, localVariables3.maxLocals());
      
      localVariables2.merge(localVariables3);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      assertEquals(1777, localVariables3.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(frame0, object0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertEquals(".Y", objectType0.getClassName());
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.size());
      assertEquals(1777, operandStack0.maxStack());
      assertEquals(1777, localVariables0.maxLocals());
      assertEquals(1777, localVariables1.maxLocals());
      assertEquals(1777, localVariables2.maxLocals());
      
      operandStack0.push(objectType0);
      assertEquals(".Y", objectType0.getClassName());
      assertEquals("L/Y;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(2, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2, operandStack0.size());
      assertEquals(1777, operandStack0.maxStack());
      
      LSTORE lSTORE0 = new LSTORE(340);
      assertNotNull(lSTORE0);
      assertEquals(4, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(340, lSTORE0.getIndex());
      
      FMUL fMUL0 = new FMUL();
      assertNotNull(fMUL0);
      assertEquals(1, fMUL0.getLength());
      assertEquals((short)106, fMUL0.getOpcode());
      assertEquals("fmul", fMUL0.getName());
      
      IREM iREM0 = new IREM();
      assertNotNull(iREM0);
      assertEquals((short)112, iREM0.getOpcode());
      assertEquals("irem", iREM0.getName());
      assertEquals(1, iREM0.getLength());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type '.Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LADD lADD0 = new LADD();
      assertNotNull(lADD0);
      assertEquals("ladd", lADD0.getName());
      assertEquals(1, lADD0.getLength());
      assertEquals((short)97, lADD0.getOpcode());
      
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      
      LocalVariables localVariables0 = new LocalVariables(245);
      assertNotNull(localVariables0);
      assertEquals(245, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(245, localVariables0.maxLocals());
      assertEquals(245, localVariables1.maxLocals());
      
      OperandStack operandStack0 = new OperandStack(13, objectType0);
      assertNotNull(operandStack0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(13, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      String string0 = operandStack0.toString();
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 13.\nNEW must not be used to create an array. (Size: 1)\n", string0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(13, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(245, localVariables0.maxLocals());
      assertEquals(245, localVariables1.maxLocals());
      assertEquals(13, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      LocalVariables localVariables2 = new LocalVariables(5);
      assertFalse(localVariables2.equals((Object)localVariables1));
      assertFalse(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(5, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables3 = new LocalVariables(5);
      assertFalse(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertFalse(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(5, localVariables3.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertFalse(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertFalse(localVariables0.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables3));
      assertFalse(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals(1, objectType0.getSize());
      assertEquals(245, localVariables0.maxLocals());
      assertEquals(245, localVariables1.maxLocals());
      assertEquals(13, operandStack0.maxStack());
      assertEquals(1, operandStack0.slotsUsed());
      assertEquals(1, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      
      FSUB fSUB0 = new FSUB();
      assertNotNull(fSUB0);
      assertEquals((short)102, fSUB0.getOpcode());
      assertEquals("fsub", fSUB0.getName());
      assertEquals(1, fSUB0.getLength());
      
      DUP2 dUP2_0 = new DUP2();
      assertNotNull(dUP2_0);
      assertEquals(1, dUP2_0.getLength());
      assertEquals((short)92, dUP2_0.getOpcode());
      assertEquals("dup2", dUP2_0.getName());
      
      DUP2 dUP2_1 = new DUP2();
      assertTrue(dUP2_1.equals((Object)dUP2_0));
      assertNotNull(dUP2_1);
      assertEquals(1, dUP2_1.getLength());
      assertEquals("dup2", dUP2_1.getName());
      assertEquals((short)92, dUP2_1.getOpcode());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      
      byte byte0 = (byte)99;
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      assertNotNull(localVariables0);
      assertEquals(99, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      assertNotNull(operandStack0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.size());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Frame frame0 = new Frame(localVariables1, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(frame0);
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.size());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      LocalVariables localVariables2 = new LocalVariables((byte)99);
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertNotNull(localVariables2);
      assertEquals(99, localVariables2.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertNotSame(localVariables3, localVariables0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertNotNull(localVariables3);
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(99, localVariables3.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables2);
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertEquals((byte)14, objectType0.getType());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals(1, objectType0.getSize());
      assertEquals(99, localVariables0.maxLocals());
      assertEquals(99, localVariables1.maxLocals());
      assertEquals(1, operandStack0.size());
      assertEquals(99, operandStack0.maxStack());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack0.slotsUsed());
      
      LMUL lMUL0 = new LMUL();
      assertNotNull(lMUL0);
      assertEquals((short)105, lMUL0.getOpcode());
      assertEquals(1, lMUL0.getLength());
      assertEquals("lmul", lMUL0.getName());
      
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      
      LNEG lNEG0 = new LNEG();
      assertNotNull(lNEG0);
      assertEquals(1, lNEG0.getLength());
      assertEquals((short)117, lNEG0.getOpcode());
      assertEquals("lneg", lNEG0.getName());
      
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("Stack next-to-top must be of type double[] but is '");
      assertNotNull(objectType0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      
      OperandStack operandStack0 = new OperandStack(1403, objectType0);
      assertNotNull(operandStack0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals(1403, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      assertNotSame(operandStack0, operandStack1);
      assertNotSame(operandStack1, operandStack0);
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertNotNull(operandStack1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals(1403, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1403, operandStack1.maxStack());
      
      LocalVariables localVariables0 = new LocalVariables(1224);
      assertNotNull(localVariables0);
      assertEquals(1224, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1224, localVariables0.maxLocals());
      assertEquals(1224, localVariables1.maxLocals());
      
      String string0 = operandStack0.toString();
      assertNotSame(operandStack0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertNotNull(string0);
      assertEquals("Slots used: 1 MaxStack: 1403.\nStack next-to-top must be of type double[] but is ' (Size: 1)\n", string0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals(1403, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      
      Frame frame0 = new Frame(localVariables0, operandStack1);
      assertTrue(operandStack0.equals((Object)operandStack1));
      assertTrue(operandStack1.equals((Object)operandStack0));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      assertEquals(1403, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(1, operandStack1.size());
      assertFalse(operandStack1.isEmpty());
      assertEquals(1, operandStack1.slotsUsed());
      assertEquals(1403, operandStack1.maxStack());
      assertEquals(1224, localVariables0.maxLocals());
      
      String string1 = objectType0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Stack next-to-top must be of type double[] but is '", string1);
      assertEquals(1, objectType0.getSize());
      assertEquals((byte)14, objectType0.getType());
      assertEquals("Stack next-to-top must be of type double[] but is '", objectType0.getClassName());
      assertEquals("LStack next-to-top must be of type double[] but is ';", objectType0.getSignature());
      
      F2L f2L0 = new F2L();
      assertNotNull(f2L0);
      assertEquals(1, f2L0.getLength());
      assertEquals("f2l", f2L0.getName());
      assertEquals((short)140, f2L0.getOpcode());
      
      localVariables0.toString();
      Frame frame1 = frame0.getClone();
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LSTORE lSTORE0 = new LSTORE(19);
      LSTORE lSTORE1 = new LSTORE(19);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'Stack next-to-top must be of type double[] but is ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertNotNull(constantPoolGen0);
      assertEquals(1, constantPoolGen0.getSize());
      
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      assertNotNull(objectType0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      assertNotNull(operandStack0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      
      LocalVariables localVariables0 = new LocalVariables(1174);
      assertNotNull(localVariables0);
      assertEquals(1174, localVariables0.maxLocals());
      
      LocalVariables localVariables1 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables0);
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertNotNull(localVariables1);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      
      LocalVariables localVariables2 = localVariables0.getClone();
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(localVariables2);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      Frame frame0 = new Frame(localVariables2, operandStack0);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(frame0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LocalVariables localVariables3 = localVariables1.getClone();
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables3);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      assertNotNull(instConstraintVisitor0);
      
      LocalVariables localVariables4 = (LocalVariables)localVariables1.clone();
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables4, localVariables3);
      assertNotSame(localVariables4, localVariables2);
      assertNotSame(localVariables4, localVariables0);
      assertNotSame(localVariables4, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables4.equals((Object)localVariables0));
      assertTrue(localVariables4.equals((Object)localVariables2));
      assertTrue(localVariables4.equals((Object)localVariables1));
      assertTrue(localVariables4.equals((Object)localVariables3));
      assertNotNull(localVariables4);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      assertEquals(1174, localVariables4.maxLocals());
      
      instConstraintVisitor0.setFrame(frame0);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables4);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      LSTORE lSTORE0 = new LSTORE(671);
      assertNotNull(lSTORE0);
      assertEquals((short)55, lSTORE0.getOpcode());
      assertEquals(671, lSTORE0.getIndex());
      assertEquals((short)55, lSTORE0.getCanonicalTag());
      assertEquals(4, lSTORE0.getLength());
      assertEquals("lstore", lSTORE0.getName());
      
      String string0 = frame0.toString();
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables2, localVariables0);
      assertNotSame(localVariables2, localVariables1);
      assertNotSame(localVariables2, localVariables3);
      assertNotSame(localVariables2, localVariables4);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables0));
      assertTrue(localVariables2.equals((Object)localVariables3));
      assertTrue(localVariables2.equals((Object)localVariables4));
      assertTrue(localVariables2.equals((Object)localVariables1));
      assertNotNull(string0);
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(1, operandStack0.slotsUsed());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals(1, operandStack0.size());
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables2.maxLocals());
      
      String string1 = Character.getName(5);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ENQUIRY", string1);
      
      DADD dADD0 = new DADD();
      assertNotNull(dADD0);
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      assertFalse(constantPoolGen1.equals((Object)constantPoolGen0));
      assertNotNull(constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      
      BasicType basicType0 = (BasicType)dADD0.getType(constantPoolGen0);
      assertNotSame(constantPoolGen0, constantPoolGen1);
      assertFalse(constantPoolGen0.equals((Object)constantPoolGen1));
      assertNotNull(basicType0);
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      
      operandStack0.push(basicType0);
      assertNotSame(constantPoolGen0, constantPoolGen1);
      assertFalse(constantPoolGen0.equals((Object)constantPoolGen1));
      assertEquals("D", basicType0.getSignature());
      assertEquals(2, basicType0.getSize());
      assertEquals((byte)7, basicType0.getType());
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("LNEW must not be used to create an array/;", objectType0.getSignature());
      assertEquals("NEW must not be used to create an array.", objectType0.getClassName());
      assertEquals((byte)14, objectType0.getType());
      assertEquals(1, objectType0.getSize());
      assertEquals(3, operandStack0.slotsUsed());
      assertEquals(2, operandStack0.size());
      assertFalse(operandStack0.isEmpty());
      assertEquals(2555, operandStack0.maxStack());
      assertEquals((short)99, dADD0.getOpcode());
      assertEquals(1, dADD0.getLength());
      assertEquals("dadd", dADD0.getName());
      
      LSTORE lSTORE1 = new LSTORE(671);
      assertTrue(lSTORE1.equals((Object)lSTORE0));
      assertNotNull(lSTORE1);
      assertEquals("lstore", lSTORE1.getName());
      assertEquals((short)55, lSTORE1.getOpcode());
      assertEquals(671, lSTORE1.getIndex());
      assertEquals((short)55, lSTORE1.getCanonicalTag());
      assertEquals(4, lSTORE1.getLength());
      
      LocalVariables localVariables5 = new LocalVariables(1174);
      assertTrue(localVariables5.equals((Object)localVariables3));
      assertTrue(localVariables5.equals((Object)localVariables2));
      assertTrue(localVariables5.equals((Object)localVariables4));
      assertTrue(localVariables5.equals((Object)localVariables0));
      assertNotNull(localVariables5);
      assertEquals(1174, localVariables5.maxLocals());
      
      LocalVariables localVariables6 = localVariables3.getClone();
      assertNotSame(localVariables0, localVariables5);
      assertNotSame(localVariables0, localVariables3);
      assertNotSame(localVariables0, localVariables2);
      assertNotSame(localVariables0, localVariables4);
      assertNotSame(localVariables0, localVariables1);
      assertNotSame(localVariables0, localVariables6);
      assertNotSame(localVariables6, localVariables3);
      assertNotSame(localVariables6, localVariables2);
      assertNotSame(localVariables6, localVariables0);
      assertNotSame(localVariables6, localVariables1);
      assertNotSame(localVariables6, localVariables4);
      assertNotSame(localVariables6, localVariables5);
      assertNotSame(localVariables1, localVariables3);
      assertNotSame(localVariables1, localVariables5);
      assertNotSame(localVariables1, localVariables0);
      assertNotSame(localVariables1, localVariables6);
      assertNotSame(localVariables1, localVariables2);
      assertNotSame(localVariables1, localVariables4);
      assertNotSame(localVariables3, localVariables6);
      assertNotSame(localVariables3, localVariables0);
      assertNotSame(localVariables3, localVariables5);
      assertNotSame(localVariables3, localVariables4);
      assertNotSame(localVariables3, localVariables2);
      assertNotSame(localVariables3, localVariables1);
      assertTrue(localVariables0.equals((Object)localVariables2));
      assertTrue(localVariables0.equals((Object)localVariables4));
      assertTrue(localVariables0.equals((Object)localVariables1));
      assertTrue(localVariables0.equals((Object)localVariables3));
      assertTrue(localVariables6.equals((Object)localVariables1));
      assertTrue(localVariables6.equals((Object)localVariables2));
      assertTrue(localVariables6.equals((Object)localVariables4));
      assertTrue(localVariables6.equals((Object)localVariables3));
      assertTrue(localVariables1.equals((Object)localVariables0));
      assertTrue(localVariables1.equals((Object)localVariables2));
      assertTrue(localVariables1.equals((Object)localVariables4));
      assertTrue(localVariables1.equals((Object)localVariables3));
      assertTrue(localVariables3.equals((Object)localVariables2));
      assertTrue(localVariables3.equals((Object)localVariables1));
      assertTrue(localVariables3.equals((Object)localVariables4));
      assertTrue(localVariables3.equals((Object)localVariables0));
      assertNotNull(localVariables6);
      assertEquals(1174, localVariables0.maxLocals());
      assertEquals(1174, localVariables6.maxLocals());
      assertEquals(1174, localVariables1.maxLocals());
      assertEquals(1174, localVariables3.maxLocals());
      
      InstructionList instructionList0 = new InstructionList();
      assertNotNull(instructionList0);
      assertEquals(0, instructionList0.size());
      assertTrue(instructionList0.isEmpty());
      assertEquals(0, instructionList0.getLength());
      
      D2L d2L0 = new D2L();
      assertNotNull(d2L0);
      assertEquals("d2l", d2L0.getName());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals(1, d2L0.getLength());
      
      D2L d2L1 = new D2L();
      assertTrue(d2L1.equals((Object)d2L0));
      assertNotNull(d2L1);
      assertEquals("d2l", d2L1.getName());
      assertEquals(1, d2L1.getLength());
      assertEquals((short)143, d2L1.getOpcode());
      
      d2L0.accept(instConstraintVisitor0);
      assertNotSame(d2L0, d2L1);
      assertTrue(d2L0.equals((Object)d2L1));
      assertEquals("d2l", d2L0.getName());
      assertEquals((short)143, d2L0.getOpcode());
      assertEquals(1, d2L0.getLength());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(1174);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2709);
      LSTORE lSTORE1 = new LSTORE(1174);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X2(dUP_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.toString();
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      LSTORE lSTORE1 = new LSTORE(5);
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is 'NEW must not be used to create an array.' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1184);
      LocalVariables localVariables1 = new LocalVariables(1184);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.getClone();
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      lDIV0.copy();
      Character character0 = new Character('g');
      PUSH pUSH0 = new PUSH(constantPoolGen0, character0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      instructionList0.insert(instructionList0);
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("_invokeInterface");
      int int0 = Short.BYTES;
      LocalVariables localVariables0 = new LocalVariables(111);
      OperandStack operandStack0 = new OperandStack(111, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Pattern.quote("_invokeInterface");
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      LocalVariables localVariables2 = (LocalVariables)localVariables1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      operandStack0.equals(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables2.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FASTORE fASTORE0 = new FASTORE();
      FASTORE fASTORE1 = new FASTORE();
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-92));
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(83);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      LocalVariables localVariables2 = localVariables0.getClone();
      operandStack0.toString();
      localVariables2.getClone();
      operandStack0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D((L2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not e uGed t create an array.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LocalVariables localVariables0 = new LocalVariables((byte)109);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack((byte)109, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      localVariables0.clone();
      localVariables0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.merge(localVariables1);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      operandStack0.toString();
      DUP dUP0 = new DUP();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LSHR lSHR0 = new LSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR(lSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHR constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not e uGed t create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType.getInstance("uy/u6X!)]6");
      ObjectType objectType0 = ObjectType.getInstance("1^2u@:n$bW*");
      LocalVariables localVariables0 = new LocalVariables(1174);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(1174, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.equals("uy/u6X!)]6");
      operandStack0.equals((Object) null);
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type '1^2u@:n$bW*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance(".Y");
      OperandStack operandStack0 = new OperandStack(1777, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1777);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables2, operandStack0);
      frame0.clone();
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables2.merge(localVariables3);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0);
      LSTORE lSTORE0 = new LSTORE(340);
      FMUL fMUL0 = new FMUL();
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type '.Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      frame0.equals(objectType0);
      Frame.getThis();
      IUSHR iUSHR0 = new IUSHR();
      Frame.setThis((UninitializedObjectType) null);
      LocalVariables localVariables2 = new LocalVariables(2555);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LSTORE lSTORE0 = new LSTORE(5);
      FADD fADD0 = new FADD();
      DLOAD dLOAD0 = new DLOAD(2555);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      OperandStack operandStack1 = new OperandStack(2555);
      LocalVariables localVariables0 = new LocalVariables(1192);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      LocalVariables localVariables2 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      operandStack2.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      LocalVariables localVariables3 = new LocalVariables(1192);
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Pattern.quote("NEW must not be used to create an array.");
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      F2L f2L0 = new F2L();
      localVariables0.merge(localVariables2);
      IAND iAND0 = new IAND();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      iAND0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not e uGed t create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      LSTORE lSTORE1 = new LSTORE(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables2 = new LocalVariables((byte)99);
      instConstraintVisitor0.setFrame(frame0);
      GETFIELD gETFIELD0 = new GETFIELD((byte)99);
      DALOAD dALOAD0 = new DALOAD();
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not e uGed t create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2555);
      LSTORE lSTORE1 = new LSTORE(1174);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BALOAD bALOAD0 = new BALOAD();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BALOAD bALOAD1 = new BALOAD();
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.SHORT);
      IFNONNULL iFNONNULL0 = new IFNONNULL((InstructionHandle) null);
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV(dDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DDIV constraint violated: The value at the stack top is not of type 'double', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      int int0 = 23;
      OperandStack operandStack0 = new OperandStack(23, objectType0);
      operandStack0.clone();
      int int1 = 1;
      LocalVariables localVariables0 = new LocalVariables(1);
      LocalVariables localVariables1 = new LocalVariables(1);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.equals(localVariables1);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      localVariables1.toString();
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      LSTORE lSTORE1 = new LSTORE(5);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FLOAD fLOAD0 = new FLOAD(552);
      instConstraintVisitor0.visitLocalVariableInstruction(lSTORE1);
      IALOAD iALOAD0 = new IALOAD();
      I2C i2C0 = new I2C();
      ASTORE aSTORE0 = new ASTORE(552);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LADD lADD0 = new LADD();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NEW must not be used to create an array.");
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      byte[] byteArray0 = new byte[11];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[2] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack0 = new OperandStack(2545, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1184);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.equals(objectType0);
      localVariables1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LSTORE lSTORE0 = new LSTORE(2545);
      localVariables0.toString();
      LSTORE lSTORE1 = new LSTORE(1184);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LSTORE lSTORE2 = new LSTORE(2);
      FDIV fDIV0 = new FDIV();
      FDIV fDIV1 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType.getInstance("uy/u6X!)]6");
      ObjectType objectType0 = ObjectType.getInstance("1^2u@:n$bW*");
      LocalVariables localVariables0 = new LocalVariables(1174);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OperandStack operandStack0 = new OperandStack(1174, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LOR lOR0 = new LOR();
      LXOR lXOR0 = new LXOR();
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type '1^2u@:n$bW*'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      localVariables0.set(27, objectType0);
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack next-to-top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("Stack next-to-top must be of type double[] but is '");
      int int0 = 819;
      LocalVariables localVariables0 = new LocalVariables(819);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Stack next-to-top must be of type double[] but is '");
      OperandStack operandStack0 = new OperandStack(819, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.equals(instConstraintVisitor0);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(37);
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'Stack next-to-top must be of type double[] but is ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables3 = new LocalVariables(5);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      RET rET0 = new RET(3001);
      rET0.toString(true);
      RET rET1 = new RET((byte)99);
      ISTORE iSTORE0 = new ISTORE(1);
      instConstraintVisitor0.visitISTORE((ISTORE) null);
      LRETURN lRETURN0 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType(".Y");
      OperandStack operandStack0 = new OperandStack(1777, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1777);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables0.merge(localVariables2);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0);
      LSTORE lSTORE0 = new LSTORE(354);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RET rET0 = new RET(354);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 354.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      LocalVariables localVariables2 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      LocalVariables localVariables3 = new LocalVariables(1174);
      localVariables2.getClone();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instructionList0.spliterator();
      instructionList0.findHandle(3846);
      SWAP sWAP0 = new SWAP();
      FNEG fNEG0 = new FNEG();
      FALOAD fALOAD0 = new FALOAD();
      fALOAD0.getExceptions();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack next-to-top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Pattern.quote("NEW must not be used to create an array.");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      frame0.toString();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC((byte)99, 3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref("_invokeInterface", "KV93clCm&N qne=j", "KV93clCm&N qne=j");
      ObjectType objectType0 = ObjectType.getInstance("");
      byte[] byteArray0 = new byte[4];
      int int0 = Short.BYTES;
      byteArray0[0] = (byte)43;
      LocalVariables localVariables0 = new LocalVariables(825);
      localVariables0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(825, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.isAssignmentCompatibleWith(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LMUL lMUL0 = new LMUL();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      IINC iINC0 = new IINC(0, 3076);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 2555;
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      LocalVariables localVariables2 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      LocalVariables localVariables3 = new LocalVariables(1174);
      localVariables2.getClone();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      D2L d2L0 = new D2L();
      BALOAD bALOAD0 = new BALOAD();
      LocalVariables localVariables4 = new LocalVariables(1);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack next-to-top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      LocalVariables localVariables2 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      LocalVariables localVariables3 = new LocalVariables(1174);
      localVariables2.getClone();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      D2L d2L0 = new D2L();
      BALOAD bALOAD0 = new BALOAD();
      FREM fREM0 = new FREM();
      int int0 = Constants.MAX_SHORT;
      FREM fREM1 = new FREM();
      fREM1.toString((ConstantPool) null);
      FREM fREM2 = new FREM();
      F2D f2D0 = new F2D();
      instConstraintVisitor0.visitF2D(f2D0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)17);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)17, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(120);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables0.getClone();
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.toString();
      operandStack0.toString();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)17);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)17, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Pattern.quote("NEW must not be used to create an array.");
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.clone();
      localVariables2.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      frame0.getClone();
      localVariables0.toString();
      frame1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IADD iADD0 = new IADD();
      IADD iADD1 = new IADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT((IFLT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      operandStack0.initializeObject(uninitializedObjectType0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      LocalVariables localVariables2 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      LocalVariables localVariables3 = new LocalVariables(1174);
      localVariables2.getClone();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      D2L d2L0 = new D2L();
      BALOAD bALOAD0 = new BALOAD();
      LocalVariables localVariables4 = new LocalVariables(1);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LADD lADD0 = new LADD();
      LDIV lDIV0 = new LDIV();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1184, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables1.getClone();
      operandStack0.toString();
      localVariables0.getClone();
      Frame frame1 = new Frame(3, 1174);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(1174);
      ASTORE aSTORE0 = new ASTORE(628);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      aSTORE0.produceStack(constantPoolGen0);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      iF_ACMPEQ0.negate();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1174);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack1.clone();
      operandStack0.push(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DADD dADD0 = new DADD();
      BasicType basicType0 = (BasicType)dADD0.getType(constantPoolGen0);
      operandStack0.push(basicType0);
      LSTORE lSTORE0 = new LSTORE(1);
      LocalVariables localVariables2 = new LocalVariables(1174);
      localVariables1.getClone();
      InstructionList instructionList0 = new InstructionList();
      D2L d2L0 = new D2L();
      D2L d2L1 = new D2L();
      d2L0.accept(instConstraintVisitor0);
      BALOAD bALOAD0 = new BALOAD();
      FREM fREM0 = new FREM();
      int int0 = Constants.MAX_SHORT;
      FREM fREM1 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITOREXIT((MONITOREXIT) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not e uGed t create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      LSTORE lSTORE1 = new LSTORE(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DSUB dSUB0 = new DSUB();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)99, 5);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not e uGed t create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("Stack next-to-next-to-top must be of type long[] but is '");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      LocalVariables localVariables0 = new LocalVariables(825);
      localVariables0.toString();
      LocalVariables localVariables1 = new LocalVariables((byte)43);
      OperandStack operandStack0 = new OperandStack(825, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.isAssignmentCompatibleWith(objectType0);
      Frame.setThis(uninitializedObjectType0);
      instConstraintVisitor0.setFrame(frame0);
      DADD dADD0 = new DADD();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      LMUL lMUL0 = new LMUL();
      I2D i2D0 = new I2D();
      D2F d2F0 = new D2F();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      d2F0.getType(constantPoolGen0);
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'Stack next-to-next-to-top must be of type long[] but is ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      OperandStack operandStack0 = new OperandStack(2533, objectType0);
      LocalVariables localVariables0 = new LocalVariables(2533);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      boolean boolean0 = new Boolean("Slots used: 1 MaxStack: 2533.\norg.apache.bcel.generic.Type (Size: 1)\n");
      instConstraintVisitor0.setFrame(frame0);
      LXOR lXOR0 = new LXOR();
      LALOAD lALOAD0 = new LALOAD();
      FMUL fMUL0 = new FMUL();
      fMUL0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type 'org.apache.bcel.generic.Type'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(2555);
      LocalVariables localVariables1 = new LocalVariables(2555);
      OperandStack operandStack2 = operandStack1.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack2);
      LocalVariables localVariables2 = new LocalVariables(2555);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NEW must not be used to create an array.");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ISHL iSHL0 = new ISHL();
      byteSequence0.mark((byte)52);
      ISHL iSHL1 = new ISHL();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)52, (-987));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      IXOR iXOR0 = new IXOR();
      MockFile mockFile0 = new MockFile("NEW must not be used to create an array.");
      iXOR0.toString(constantPool0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("org.apache.bcel.generic.Type");
      FileSystemHandling.shouldAllThrowIOExceptions();
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(1174);
      localVariables0.toString();
      frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(2709);
      LSTORE lSTORE1 = new LSTORE(1174);
      DUP_X2 dUP_X2_0 = new DUP_X2();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(2709, 2555);
      IOR iOR0 = new IOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR(iOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IOR constraint violated: The value at the stack top is not of type 'int', but of type 'org.apache.bcel.generic.Type'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      operandStack0.clone();
      LocalVariables localVariables0 = new LocalVariables(1143);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      OperandStack operandStack1 = (OperandStack)operandStack0.clone();
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      L2I l2I0 = new L2I();
      Boolean boolean0 = new Boolean("NEW must not be used to create an array.");
      operandStack1.clone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      operandStack1.getClone();
      localVariables0.set(45, objectType0);
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      I2D i2D0 = new I2D();
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      operandStack0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.clone();
      operandStack0.push(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DADD dADD0 = new DADD();
      Type type0 = dADD0.getType(constantPoolGen0);
      operandStack0.push(type0);
      LSTORE lSTORE0 = new LSTORE(1);
      LocalVariables localVariables2 = new LocalVariables(1174);
      localVariables1.getClone();
      InstructionList instructionList0 = new InstructionList();
      D2L d2L0 = new D2L();
      D2L d2L1 = new D2L();
      d2L0.accept(instConstraintVisitor0);
      BALOAD bALOAD0 = new BALOAD();
      FREM fREM0 = new FREM();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",sWyiNA'>=M}");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      int int0 = 5;
      LocalVariables localVariables0 = new LocalVariables(5);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance(",sWyiNA'>=M}");
      OperandStack operandStack0 = new OperandStack(5, objectType0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]XHtET>Fk8r*;BCQqf");
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type ',sWyiNA'>=M}'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      byte byte0 = (byte)99;
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Boolean boolean0 = Boolean.TRUE;
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LUSHR lUSHR0 = new LUSHR();
      INEG iNEG0 = new INEG();
      INEG iNEG1 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not e uGed t create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(43);
      DSUB dSUB0 = new DSUB();
      ASTORE aSTORE0 = new ASTORE(5);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      aSTORE0.produceStack(constantPoolGen0);
      instConstraintVisitor0.visitStoreInstruction(aSTORE0);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ((InstructionHandle) null);
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not e uGed t create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      OperandStack operandStack1 = operandStack0.getClone();
      frame0.toString();
      operandStack0.toString();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      localVariables1.clone();
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      localVariables0.getClone();
      localVariables1.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LALOAD lALOAD0 = new LALOAD();
      BALOAD bALOAD0 = new BALOAD();
      FREM fREM0 = new FREM();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.set(22, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      frame0.toString();
      operandStack0.toString();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      frame1.clone();
      localVariables1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      localVariables0.getClone();
      localVariables1.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LALOAD lALOAD0 = new LALOAD();
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'float'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      OperandStack operandStack1 = operandStack0.getClone();
      frame0.toString();
      operandStack0.toString();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      localVariables1.clone();
      operandStack1.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.push(objectType0.FLOAT);
      localVariables0.getClone();
      localVariables1.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LALOAD lALOAD0 = new LALOAD();
      BALOAD bALOAD0 = new BALOAD();
      FREM fREM0 = new FREM();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      FNEG fNEG0 = new FNEG();
      instConstraintVisitor0.visitFNEG(fNEG0);
      POP2 pOP2_0 = new POP2();
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(2555);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INSTANCEOF constraint violated: The 'objectref' is not of a ReferenceType but of type float.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType(".Y");
      OperandStack operandStack0 = new OperandStack(1777, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1777);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables0.merge(localVariables2);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0);
      int int0 = 354;
      LSTORE lSTORE0 = new LSTORE(354);
      InstructionList instructionList0 = new InstructionList();
      PUSH pUSH0 = new PUSH(constantPoolGen0, 354);
      InstructionList instructionList1 = new InstructionList(pUSH0);
      InstructionHandle instructionHandle0 = instructionList0.insert(instructionList1);
      IFNE iFNE0 = new IFNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type '.Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance("7");
      OperandStack operandStack0 = new OperandStack(2531, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1179);
      LocalVariables localVariables1 = new LocalVariables(1179);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.merge(localVariables0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7");
      LocalVariables localVariables3 = new LocalVariables(1179);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      Class<INVOKEDYNAMIC> class0 = INVOKEDYNAMIC.class;
      Type.getType(class0);
      LocalVariables localVariables4 = new LocalVariables(1179);
      localVariables4.getClone();
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type '7'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("DIuLzsdH~5VT");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      instConstraintVisitor0.setFrame(frame0);
      frame0.toString();
      localVariables0.getClone();
      localVariables0.clone();
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type 'DIuLzsdH~5VT'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)17);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)17, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(120);
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables0.getClone();
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables2.toString();
      operandStack0.getClone();
      operandStack0.toString();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables0.getClone();
      String string0 = Constants.ILLEGAL_OPCODE;
      InstructionList instructionList0 = new InstructionList(lSTORE0);
      InstructionHandle instructionHandle0 = instructionList0.getEnd();
      LLOAD lLOAD0 = new LLOAD((byte)17);
      I2C i2C0 = new I2C();
      InstructionHandle instructionHandle1 = instructionList0.insert(instructionHandle0, (Instruction) lSTORE0);
      GOTO gOTO0 = new GOTO(instructionHandle1);
      IFGE iFGE0 = new IFGE(instructionHandle1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGE(iFGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGE constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LADD lADD0 = new LADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = ObjectType.getInstance(".Y");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(1777, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1777);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables1.getClone();
      Frame frame0 = new Frame(localVariables2, operandStack0);
      frame0.clone();
      LocalVariables localVariables3 = localVariables2.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localVariables2.merge(localVariables3);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0);
      LSTORE lSTORE0 = new LSTORE(340);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BALOAD bALOAD0 = new BALOAD();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BALOAD bALOAD1 = new BALOAD();
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.DOUBLE);
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) bALOAD1);
      IF_ACMPEQ iF_ACMPEQ0 = new IF_ACMPEQ(instructionHandle0);
      instConstraintVisitor0.visitIF_ACMPEQ(iF_ACMPEQ0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type '.Y'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1174);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      OperandStack operandStack1 = operandStack0.getClone();
      frame0.toString();
      operandStack0.toString();
      localVariables1.clone();
      operandStack1.clone();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0.FLOAT);
      AALOAD aALOAD0 = new AALOAD();
      LSTORE lSTORE0 = new LSTORE(1174);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack next-to-top is not of type 'float', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.equals(objectType0);
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      RET rET0 = new RET(3001);
      RET rET1 = new RET((byte)99);
      ISTORE iSTORE0 = new ISTORE(1);
      instConstraintVisitor0.visitISTORE((ISTORE) null);
      LRETURN lRETURN0 = new LRETURN();
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ(iFEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFEQ constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)114, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.toString();
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables2 = (LocalVariables)localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)114);
      localVariables2.clone();
      instConstraintVisitor0.setFrame(frame0);
      localVariables2.merge(localVariables1);
      LSTORE lSTORE1 = new LSTORE((byte)114);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RET rET0 = new RET(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR((ISHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.ILLEGAL_OPCODE;
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(1176, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      String string1 = File.separator;
      localVariables1.toString();
      String string2 = Constants.ILLEGAL_OPCODE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      DREM dREM0 = new DREM();
      dREM0.toString(false);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Pattern.quote("NEW must not be used to create an array.");
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.clone();
      localVariables2.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      frame1.getClone();
      instConstraintVisitor0.setFrame(frame0);
      IADD iADD0 = new IADD();
      IADD iADD1 = new IADD();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NEW must not be used to create an array.");
      OperandStack operandStack1 = new OperandStack((byte)99);
      operandStack0.toString();
      localVariables0.getClone();
      operandStack0.toString();
      InstructionList instructionList0 = new InstructionList();
      instructionList0.getEnd();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      iF_ICMPLT0.updateTarget((InstructionHandle) null, (InstructionHandle) null);
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      frame0.equals(objectType0);
      Frame.getThis();
      IUSHR iUSHR0 = new IUSHR();
      Frame.setThis((UninitializedObjectType) null);
      LocalVariables localVariables2 = new LocalVariables(2555);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LSTORE lSTORE0 = new LSTORE(5);
      LSTORE lSTORE1 = new LSTORE(467);
      Boolean boolean0 = new Boolean("NEW must not be used to create an array.");
      FLOAD fLOAD0 = new FLOAD(5);
      instConstraintVisitor0.visitIFNONNULL((IFNONNULL) null);
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type NEW must not be used to create an array..
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = new LocalVariables(5);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      localVariables1.getClone();
      LSTORE lSTORE1 = new LSTORE(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables3 = new LocalVariables((byte)99);
      localVariables0.toString();
      OperandStack operandStack1 = new OperandStack(5);
      operandStack1.toString();
      localVariables1.getClone();
      operandStack0.toString();
      InstructionList instructionList0 = new InstructionList(lSTORE1);
      InstructionList instructionList1 = instructionList0.copy();
      InstructionHandle instructionHandle0 = instructionList1.getEnd();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT(instructionHandle0);
      IF_ICMPNE iF_ICMPNE0 = new IF_ICMPNE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE(iF_ICMPNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPNE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(5);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.equals(objectType0);
      Frame.getThis();
      IUSHR iUSHR0 = new IUSHR();
      Frame.setThis((UninitializedObjectType) null);
      LocalVariables localVariables2 = new LocalVariables(2555);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-84);
      byte[] byteArray1 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ISHL iSHL0 = new ISHL();
      byteSequence0.mark(2555);
      ISHL iSHL1 = new ISHL();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      LNEG lNEG0 = new LNEG();
      LNEG lNEG1 = new LNEG();
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      LNEG lNEG2 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST((CHECKCAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      localVariables0.getClone();
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      String string0 = Constants.ILLEGAL_OPCODE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE((byte)99);
      frame0.toString();
      localVariables1.getClone();
      localVariables1.merge(localVariables1);
      LSTORE lSTORE1 = new LSTORE((byte)99);
      localVariables1.getClone();
      operandStack0.toString();
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)99, (byte)99);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Bmi[DH/&$+?/y0d");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, objectType0);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstructionHandle instructionHandle0 = instructionList0.getStart();
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("NEW must not be used to create an array.");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      LocalVariables localVariables2 = localVariables1.getClone();
      Frame frame1 = frame0.getClone();
      localVariables2.clone();
      localVariables2.merge(localVariables1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FCMPG fCMPG0 = new FCMPG();
      fCMPG0.toString();
      DLOAD dLOAD0 = new DLOAD((byte)99);
      LSHL lSHL0 = new LSHL();
      FSTORE fSTORE0 = new FSTORE((byte)99);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'NEW must not be used to create an array.'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables0.getClone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = localVariables1.toString();
      OperandStack operandStack0 = new OperandStack(1176, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables2.toString();
      String string1 = Constants.ILLEGAL_OPCODE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(120);
      LocalVariables localVariables3 = localVariables1.getClone();
      localVariables3.getClone();
      localVariables1.merge(localVariables3);
      localVariables1.getClone();
      operandStack0.toString();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(string0);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = new ObjectType("NEW must not be used to create an array.");
      OperandStack operandStack0 = new OperandStack(2555, objectType0);
      LocalVariables localVariables0 = new LocalVariables(1203);
      LocalVariables localVariables1 = localVariables0.getClone();
      operandStack0.toString();
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      String string0 = File.pathSeparator;
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.initializeObject((UninitializedObjectType) null);
      frame0.toString();
      operandStack1.merge(operandStack0);
      operandStack0.toString();
      localVariables1.clone();
      operandStack1.clone();
      Frame.setThis((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0.FLOAT);
      AALOAD aALOAD0 = new AALOAD();
      LSTORE lSTORE0 = new LSTORE(1203);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Slots used: 1 MaxStack: 2555.\nNEW must not be used to create an array. (Size: 1)\n");
      FMUL fMUL0 = new FMUL();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = new ObjectType("The'arrayref' does not refer wo an array but is o~ type ");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = new LocalVariables((byte)99);
      LocalVariables localVariables2 = localVariables1.getClone();
      localVariables2.toString();
      OperandStack operandStack0 = new OperandStack((byte)99, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Object object0 = new Object();
      operandStack0.toString();
      LocalVariables localVariables3 = localVariables1.getClone();
      Frame frame1 = new Frame(localVariables3, operandStack0);
      frame1.getClone();
      objectType0.toString();
      localVariables3.getClone();
      localVariables3.merge(localVariables2);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.push(objectType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariables localVariables4 = new LocalVariables((byte)99);
      LocalVariables localVariables5 = localVariables4.getClone();
      localVariables5.getClone();
      localVariables5.toString();
      OperandStack operandStack1 = new OperandStack(3857);
      operandStack1.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Slots used: 1 MaxStack: 99.\nThe'arrayref' does not refer wo an array but is o~ type  (Size: 1)\n");
      InstructionList instructionList0 = new InstructionList();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) lADD0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGE constraint violated: The value at the stack top is not of type 'int', but of type 'The'arrayref' does not refer wo an array but is o~ type '.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LADD lADD0 = new LADD();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables((byte)99);
      LocalVariables localVariables1 = localVariables0.getClone();
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = localVariables2.toString();
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(1176, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables2.toString();
      String string1 = Constants.ILLEGAL_OPCODE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(120);
      LocalVariables localVariables3 = localVariables2.getClone();
      localVariables3.getClone();
      localVariables1.getClone();
      operandStack0.toString();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(string0);
      IFLE iFLE0 = new IFLE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLE(iFLE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("_invokeInterface");
      int int0 = Short.BYTES;
      LocalVariables localVariables0 = new LocalVariables(2);
      OperandStack operandStack0 = new OperandStack(2, objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame.getThis();
      operandStack0.initializeObject((UninitializedObjectType) null);
      objectType0.isAssignmentCompatibleWith((Type) null);
      objectType0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IUSHR iUSHR0 = new IUSHR();
      LocalVariables localVariables1 = new LocalVariables(815);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      DSUB dSUB0 = new DSUB();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DUP dUP0 = new DUP();
      dUP0.accept(instConstraintVisitor0);
      dUP0.toString();
      LSHR lSHR0 = new LSHR();
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type '_invokeInterface'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
