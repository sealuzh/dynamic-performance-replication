/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:59:00 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte byte0 = (byte)53;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix0.set((-1224), (-1224), (-1224));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1224' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(9);
      DenseMatrix.constant(9, 4, 964.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      cCSMatrix0.blankOfShape(9, 9);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-1373));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1373
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(250, (-961.246));
      int[] intArray0 = new int[18];
      intArray0[0] = 250;
      intArray0[1] = 250;
      intArray0[2] = 250;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(250, 0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(250, (-961.246));
      int[] intArray0 = new int[18];
      intArray0[0] = 250;
      intArray0[1] = 250;
      intArray0[2] = 250;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)250).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(250, 0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, 0.0, (Random) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      
      double double0 = cCSMatrix0.max();
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, 3);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(3.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix1 = columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix1);
      assertSame(columnMajorSparseMatrix0, columnMajorSparseMatrix1);
      assertSame(columnMajorSparseMatrix1, columnMajorSparseMatrix0);
      assertEquals(3.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.3333333333333333, columnMajorSparseMatrix1.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix1.cardinality());
      assertEquals(3, columnMajorSparseMatrix1.columns());
      assertFalse(columnMajorSparseMatrix1.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix1.rows());
      assertEquals(0.0, columnMajorSparseMatrix1.min(), 0.01);
      assertEquals(3.0, columnMajorSparseMatrix1.max(), 0.01);
      
      // Undeclared exception!
      DenseMatrix.unit(3, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.to(matrixFactory0);
      assertNotNull(cCSMatrix1);
      assertSame(cCSMatrix0, cCSMatrix1);
      assertSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.rows());
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
      assertSame(cCSMatrix0, cCSMatrix1);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(250, (-961.246));
      int[] intArray0 = new int[18];
      intArray0[0] = 250;
      intArray0[1] = 250;
      intArray0[2] = 250;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1945.32)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(250, 0, matrixFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      assertNotNull(mockRandom0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      assertNotNull(cCSMatrix0);
      assertEquals(0.2, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      
      String string0 = cCSMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n1 3 3\n1 1 0.000\n1 2 0.100\n1 3 0.200\n", string0);
      assertNotNull(string0);
      assertEquals(0.2, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      
      BasicVector basicVector0 = (BasicVector)DenseVector.constant(3, 2180L);
      assertNotNull(basicVector0);
      assertEquals(3, basicVector0.length());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)basicVector0.toColumnMatrix();
      assertNotNull(basic2DMatrix0);
      assertEquals(3, basicVector0.length());
      assertEquals(1, basic2DMatrix0.columns());
      assertEquals(3, basic2DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, basic2DMatrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(234, 234);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(234, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(234, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfColumns(42);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(234, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(234, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(234, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(42, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      
      cCSMatrix0.min();
      CCSMatrix.fromMatrixMarket("hj}o=n");
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random(4, 4, 1796.434749, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      CCSMatrix.identity(3144);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.setAll(1);
      cCSMatrix1.sum();
      cCSMatrix1.toColumnVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(1, vectorProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.random(10, (-2451), (-1768.1313650563945), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 2180L;
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3, 819);
      cCSMatrix1.toSparseMatrix();
      cCSMatrix0.iteratorOfColumn(3);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte byte0 = (byte)53;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4554);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)4).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn((byte)53, vectorAccumulator0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity((byte)53);
      MockRandom mockRandom0 = new MockRandom(4);
      Matrix.random(4, 4, mockRandom0);
      CCSMatrix cCSMatrix2 = CCSMatrix.fromMatrixMarket("");
      cCSMatrix2.sum();
      cCSMatrix1.min();
      cCSMatrix2.iteratorOrNonZeroColumns();
      cCSMatrix0.setAll(byte0);
      cCSMatrix2.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 1599.2624632;
      doubleArray0[3] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 8, doubleArray0);
      int int0 = 0;
      cCSMatrix0.setColumn(0, 0.0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInRow(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, 0.5, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 2360.03414);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 2360.03414);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(1, 1, (-672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -672.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(23, 23);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(23, 8, 23);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.partiallyApply((ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(252, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 252
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 3);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.power(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 1 does not equal to 3.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 32);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(37, 1796.434749);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(13, 1190);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      cCSMatrix0.iteratorOfColumn(1190);
      CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, sparseMatrix0, cCSMatrix0);
      cCSMatrix0.toBinary();
      int int0 = 32;
      int int1 = 2447;
      CCSMatrix.zero(int1, int1, int0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 44;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(44, 44, 44);
      int[] intArray0 = new int[3];
      intArray0[0] = 8;
      intArray0[1] = 13;
      intArray0[1] = 44;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '44' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(872, 13, 999);
      cCSMatrix0.getColumn(7);
      cCSMatrix0.max();
      cCSMatrix0.iteratorOfColumn((-1464));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Integer integer0 = new Integer(1);
      cCSMatrix0.getRow(1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(251);
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1332), 251, Double.NEGATIVE_INFINITY, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 787;
      doubleArray0[2] = (double) 787;
      doubleArray0[3] = (double) 787;
      doubleArray0[4] = (double) 787;
      doubleArray0[5] = (double) 787;
      doubleArray0[6] = (double) 787;
      doubleArray0[7] = (double) 787;
      doubleArray0[8] = (double) 787;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(787, 787, doubleArray0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      numberFormat0.setMinimumIntegerDigits(3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(1, 2636, 1);
      int int0 = 8;
      Matrix.from1DArray(8, 3, (double[]) null);
      cCSMatrix1.nonZeroAt(1, 1);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(1, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, Double.NEGATIVE_INFINITY);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.nonZeroIteratorOfRow(1);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1, 1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.add(2196.998332586494);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(0, 777.4087742, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1;
      int int1 = 3;
      MockRandom mockRandom0 = new MockRandom(30L);
      CCSMatrix.random(1343, 1, (double) 1, (Random) mockRandom0);
      NumberFormat.getInstance();
      boolean boolean0 = true;
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(1, vectorProcedure0);
      cCSMatrix0.copyOfShape(2125, 1);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 4, 8);
      cCSMatrix0.setAll(0.29070165876675236);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (double)2180L, (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      mockRandom0.ints(1L);
      int int1 = 38;
      // Undeclared exception!
      try { 
        cCSMatrix0.set(38, 2, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '38' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(262, 262);
      int[] intArray0 = new int[27];
      intArray0[0] = 262;
      intArray0[1] = 262;
      intArray0[2] = 262;
      DenseMatrix.unit(253, 253);
      cCSMatrix0.isZeroAt(0, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(910, vectorProcedure0);
      cCSMatrix0.maxInColumn(intArray0[2]);
      int int0 = 4;
      int int1 = (-1205);
      cCSMatrix0.blankOfShape(int0, int1);
      int int2 = 1378;
      int int3 = 5;
      cCSMatrix0.blankOfShape(int2, int3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(12, 12, 12);
      int[] intArray0 = new int[27];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 12;
      DenseMatrix.unit(275, 275);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1945.32)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(12, 0, matrixFunction0);
      cCSMatrix0.isZeroAt(0, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(910, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 910
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      double double0 = 100.0;
      cCSMatrix0.setAll(100.0);
      cCSMatrix0.max();
      int int0 = (-1908874352);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-1908874352), (-296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1908874352x-296
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      mockRandom0.longs();
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      cCSMatrix0.mkString((NumberFormat) decimalFormat0, "WCNAWi-2DL=", "WCNAWi-2DL=");
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(1, 3, doubleArray0);
      cCSMatrix1.max();
      // Undeclared exception!
      try { 
        cCSMatrix1.eachNonZeroInColumn(3, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix.random(1, 10, mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3, 1);
      cCSMatrix1.toSparseMatrix();
      cCSMatrix0.toRowVector();
      cCSMatrix0.iteratorOfColumn(3);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 37;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(37, 37);
      NumberFormat.getInstance();
      MockRandom mockRandom0 = new MockRandom((-1284L));
      Matrix matrix0 = Matrix.random(32, 37, mockRandom0);
      Integer integer0 = new Integer(37);
      mockRandom0.doubles(22L);
      // Undeclared exception!
      try { 
        CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      mockRandom0.ints();
      cCSMatrix0.toRowVector();
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, 3);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix.unit(3, 253);
      inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CCSMatrix) columnMajorSparseMatrix0).each(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.transform(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(550L);
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(13, 440.098092223, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 169.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3, 3);
      cCSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(8, (double) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transform(matrixFunction0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix1.shuffle();
      cCSMatrix1.min();
      CCSMatrix cCSMatrix3 = CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix2, cCSMatrix0);
      cCSMatrix2.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cCSMatrix3.copyOfShape(1, (-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-111
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      numberFormat0.setMinimumIntegerDigits(3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(1, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.rank();
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(1, 2610, 1);
      cCSMatrix0.min();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix0.blankOfShape((-2021), (-3724));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2021x-3724
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      int int0 = 47;
      mockRandom0.nextInt(47);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(53);
      cCSMatrix0.nonZeroIteratorOfColumn(47);
      cCSMatrix0.toBinary();
      cCSMatrix0.setAll(0);
      cCSMatrix0.slice(3317, (-1), 53, (-278));
      cCSMatrix0.toColumnVector();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 3);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(3, 3);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int1 = 253;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 253);
      inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      matrix0.blankOfColumns(3);
      columnMajorSparseMatrix0.hadamardProduct(rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int2 = (-2300);
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).updateAt(3, (-2300), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2300
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32);
      cCSMatrix0.minInColumn(8);
      int[] intArray0 = new int[3];
      intArray0[0] = 8;
      int int1 = 13;
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("org.la4j.decomposition.EigenDecompositor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(37, 1798.1020962672467);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(37, 1190);
      int[] intArray0 = new int[1];
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      cCSMatrix0.toRowVector();
      cCSMatrix0.iteratorOfColumn(42);
      cCSMatrix0.select(intArray0, intArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.fromMatrixMarket("Can not remove from this iterator.");
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, sparseMatrix0);
      cCSMatrix0.toBinary();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
          RowMajorSparseMatrix.diagonal(34, 34);
          ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(34, 34);
          NumberFormat.getInstance();
          MockRandom mockRandom0 = new MockRandom((-1296L));
          Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.random(34, 34, mockRandom0);
          byte[] byteArray0 = new byte[5];
          byteArray0[0] = (byte)49;
          byteArray0[1] = (byte)49;
          byteArray0[4] = (byte)8;
          byteArray0[0] = (byte)18;
          columnMajorSparseMatrix0.toRowVector();
          columnMajorSparseMatrix0.nonZeroIteratorOfRow((byte)18);
          MockRandom mockRandom1 = new MockRandom(59L);
          mockRandom1.nextInt(34);
          Integer integer0 = new Integer((byte)18);
          int[] intArray0 = new int[1];
          intArray0[0] = (int) (byte)0;
          ((CCSMatrix) columnMajorSparseMatrix0).select(intArray0, intArray0);
          OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
          OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication2 = new OoPlaceMatricesMultiplication();
          // Undeclared exception!
          ooPlaceMatricesMultiplication2.apply((DenseMatrix) basic2DMatrix0, (DenseMatrix) basic2DMatrix0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      cCSMatrix0.minInColumn(8);
      int[] intArray0 = new int[3];
      intArray0[0] = 8;
      int int1 = 13;
      CCSMatrix.fromMatrixMarket("org.la4j.decomposition.EigenDecompositor");
      intArray0[1] = int1;
      intArray0[2] = int0;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix.diagonal(37, 37);
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 37, 37);
      NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(37, 37, mockRandom0);
      SparseMatrix.zero(37, 37, 37);
      double double0 = new Integer(37);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.setAll((-8.627069029670757));
      SparseMatrix.fromCSV("");
      cCSMatrix0.toColumnVector();
      cCSMatrix0.iteratorOfColumn(37);
      cCSMatrix0.getRow((-1373));
      cCSMatrix0.minInColumn(24);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("%%MatrixMarket matrix coordinate real general column-major\n37 37 0\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(314, 314, 314);
      cCSMatrix0.maxInColumn(8);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix.random(1, 10, mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3, 1);
      cCSMatrix1.toSparseMatrix();
      cCSMatrix0.iteratorOfColumn(3);
      mockRandom0.nextInt(1);
      int[] intArray0 = new int[0];
      cCSMatrix0.min();
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(283, (-961.246));
      int[] intArray0 = new int[6];
      intArray0[0] = 283;
      intArray0[1] = 283;
      intArray0[2] = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      intArray0[3] = 283;
      intArray0[4] = 283;
      intArray0[5] = 283;
      cCSMatrix0.select(intArray0, intArray0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-44);
      byteArray0[0] = byte0;
      byte byte1 = (byte)31;
      byteArray0[1] = byte1;
      byte byte2 = (byte)48;
      byteArray0[2] = byte2;
      byte byte3 = (byte)3;
      byteArray0[3] = byte3;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.toBinary();
      float float0 = new Integer(1);
      cCSMatrix1.setAll(1);
      cCSMatrix1.toColumnVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(1, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      SparseMatrix.diagonal(1, (-605.36567029));
      cCSMatrix0.each(matrixProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(1, vectorProcedure1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.updateAt(1, 1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(37, 37);
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 37, 37);
      NumberFormat.getInstance();
      cCSMatrix0.toMatrixMarket();
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(37, 37, mockRandom0);
      SparseMatrix.zero(37, 37, 37);
      cCSMatrix0.min();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.setAll(0.29070165876675236);
      cCSMatrix0.iteratorOfColumn(37);
      cCSMatrix0.setRow(1, 0.0);
      cCSMatrix0.toBinary();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(37, 490);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, denseMatrix0, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      Matrix.random(1, 3, mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1, 3, 3);
      cCSMatrix1.toSparseMatrix();
      cCSMatrix0.iteratorOfColumn(3);
      mockRandom0.nextInt(1);
      cCSMatrix1.min();
      cCSMatrix0.maxInColumn(1);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("kWJfyex");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.toBinary();
      mockRandom0.nextFloat();
      cCSMatrix1.setAll(1);
      cCSMatrix1.maxInColumn(1);
      // Undeclared exception!
      try { 
        cCSMatrix1.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(250, (-961.246));
      int[] intArray0 = new int[18];
      intArray0[0] = 250;
      intArray0[2] = 250;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1945.32)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(0, 0, matrixFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(910, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      mockRandom0.nextInt(47);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(3, 1815.803668642789);
      int int0 = 8;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(8, 3);
      byte[] byteArray0 = ((CCSMatrix) columnMajorSparseMatrix0).toBinary();
      Integer integer0 = new Integer((-1));
      CCSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom(9932L);
      mockRandom0.nextInt(3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) (-2991);
      doubleArray0[4] = (double) 68;
      doubleArray0[5] = (-114.360054195397);
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 68;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray((-2991), (-2991), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2991x-2991
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 250;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(250, (-961.246));
      MatrixFunction matrixFunction0 = null;
      cCSMatrix0.updateAt((-1546), 0, (MatrixFunction) null);
      VectorAccumulator vectorAccumulator0 = null;
      cCSMatrix0.foldColumns(vectorAccumulator0);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int1 = 1729;
      int int2 = (-529);
      int int3 = 800;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int2, int3);
      Consumer<Object> consumer0 = null;
      cCSMatrix1.forEach(consumer0);
      cCSMatrix0.transform(matrixFunction0);
      cCSMatrix1.add((double) int1);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix2 = CCSMatrix.randomSymmetric(int2, (double) int3, (Random) mockRandom0);
      double double0 = (-2595.365);
      cCSMatrix1.add(double0);
      double double1 = (-2083.0);
      cCSMatrix2.setAll(double1);
      CCSMatrix.identity(int0);
      cCSMatrix0.manhattanNorm();
      int int4 = (-766);
      cCSMatrix2.maxInColumn(int4);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      double double0 = (-0.4375);
      doubleArray1[0] = (-0.4375);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toBinary();
      SparseMatrix.from2DArray(doubleArray0);
      cCSMatrix0.min();
      cCSMatrix0.min();
      int int0 = 5;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[3];
      int int0 = 854;
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      CCSMatrix.randomSymmetric(854, 0.964, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(8, 3);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int1 = 238;
      DenseMatrix.zero(8, 238);
      columnMajorSparseMatrix0.setColumn(1, (double) 1);
      ((CCSMatrix) columnMajorSparseMatrix0).getRow((-1712));
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(247, (double) 247, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 61009.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix1.toRowMajorSparseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 294;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 294;
      doubleArray1[1] = 0.5;
      doubleArray1[3] = (double) 294;
      doubleArray1[5] = (double) 294;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = 1.0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 294.0;
      doubleArray2[2] = 0.5;
      doubleArray2[3] = (-2247.0);
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 1;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-2247.0);
      doubleArray4[1] = (double) 294;
      doubleArray4[2] = (double) 294;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 1;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 1;
      doubleArray4[7] = (-2247.0);
      doubleArray4[8] = (double) 294;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-2247.0);
      doubleArray5[1] = (-2247.0);
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (-2247.0);
      doubleArray5[4] = 294.0;
      doubleArray3[0] = (double) 1;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(294, 1);
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.hadamardProduct(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1x1 does not equal to 294x1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(305, 305, 305);
      int[] intArray0 = new int[29];
      intArray0[4] = 305;
      intArray0[1] = 305;
      cCSMatrix0.equals((Object) null);
      cCSMatrix0.multiply((double) 305);
      cCSMatrix0.setColumn(32, Double.POSITIVE_INFINITY);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.nonZeroColumnMajorIterator();
      int int0 = 4;
      cCSMatrix0.getRow(int0);
      MockRandom mockRandom0 = new MockRandom();
      String string0 = "dd@+!U?";
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormatSymbols decimalFormatSymbols1 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat(string0, decimalFormatSymbols1);
      cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      int int1 = (-1045);
      double double0 = 473.17063183;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      CCSMatrix.block(columnMajorSparseMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      String string1 = "6d";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string1);
      double[][] doubleArrayArray0 = null;
      DenseMatrix.from2DArray(doubleArrayArray0);
      org.evosuite.runtime.Random.setNextRandom(int0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.to(matrixFactory0);
  }
}
