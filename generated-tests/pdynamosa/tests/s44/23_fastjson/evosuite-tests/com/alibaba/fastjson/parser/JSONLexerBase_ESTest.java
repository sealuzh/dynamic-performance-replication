/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:20:38 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.Reader;
import java.io.StringReader;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-4348), (-4348));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'J';
      charArray0[2] = 'y';
      charArray0[3] = 'I';
      charArray0[4] = 'C';
      charArray0[5] = 'V';
      charArray0[6] = 'c';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDecimal('>');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gq ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.resetStringPosition();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      SymbolTable symbolTable0 = new SymbolTable(30);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '/');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'N';
      int int0 = (-457);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-457), (-457));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.sp = 68;
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ne\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanLong('a');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvyq");
      StringReader stringReader0 = new StringReader("Type: ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner1.nextToken();
      assertEquals(':', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("neFw");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = '$';
      charArray0[2] = 'U';
      charArray0[3] = '+';
      charArray0[4] = 'q';
      charArray0[5] = 'N';
      charArray0[6] = 'S';
      charArray0[7] = 'e';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals('n', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      int int0 = 3471;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3471);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("trgue");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "/%%?v(aB";
      JSONScanner jSONScanner0 = new JSONScanner("/%%?v(aB");
      int int0 = 3968;
      // Undeclared exception!
      try { 
        jSONScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '4';
      charArray0[2] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3, 3074);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDecimal('E');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("falsd");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.features = 40;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanDate('m');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("k`vZM+");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanDouble(']');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#Lc5*B%%U");
      SymbolTable symbolTable0 = new SymbolTable(83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : #
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(3L, long0);
      
      jSONReaderScanner0.scanBoolean('q');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1e!}ZT");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFloat('5');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" :~]");
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(17, jSONReaderScanner0.token());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o`dm:ogq2J7-PX.");
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanString('s');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'P';
      charArray0[2] = '';
      charArray0[3] = 'v';
      charArray0[4] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.sub_chars(2218, 2218);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.nextToken(3);
      assertEquals('P', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.scanLong(',');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "3%A^/;#qVIJo6:Gk ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      int int0 = (-1579);
      Class<Integer> class0 = Integer.class;
      char char0 = 'g';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('g');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'a';
      charArray0[2] = '\"';
      charArray0[3] = 'T';
      charArray0[4] = 'w';
      charArray0[5] = '\'';
      charArray0[6] = ',';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanUUID('#');
      jSONReaderScanner0.stringVal();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanDate('O');
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneRegion");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.nextToken(37);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" F");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '6';
      charArray0[2] = 'W';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Feature feature0 = Feature.AllowSingleQuotes;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d<+_U|pXZ['_s", 338);
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(17);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=e(&asM#yM`K<Tfuc");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanLong('c');
      boolean boolean0 = JSONLexerBase.isWhitespace('c');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("J;Z{@B(.#", 0);
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanFalse();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=e(asM#yM`K<Tfuc");
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2635);
      jSONReaderScanner1.features = 44;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
      
      jSONReaderScanner0.floatValue();
      jSONReaderScanner0.nextToken();
      assertEquals('A', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.scanDate('&');
      assertEquals('A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'S';
      charArray0[2] = 's';
      charArray0[3] = '$';
      charArray0[4] = '\\';
      charArray0[5] = 'l';
      charArray0[6] = 'z';
      Locale locale0 = new Locale("undefined", "undefined", "undefined");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      boolean boolean0 = jSONScanner0.isEnabled(1873, 1873);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.putChar('#');
      jSONReaderScanner0.numberString();
      Locale locale0 = Locale.UK;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      jSONReaderScanner0.calendar = calendar0;
      jSONReaderScanner0.scanString(')');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.getISOLanguages();
      jSONReaderScanner0.scanStringArray(linkedList0, '!');
      jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S\"w,");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFloat('J');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-981));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(`a");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UH~{}Cjm;t87");
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDouble('2');
      jSONScanner0.scanFloat('c');
      char[] charArray1 = new char[3];
      charArray1[0] = '\'';
      jSONScanner0.scanDecimal('\'');
      charArray1[1] = '2';
      charArray1[2] = '\'';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("td<=86$}");
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = '\\';
      charArray0[2] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59, 348);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.ch = ')';
      jSONReaderScanner0.nextToken();
      assertEquals(11, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1788));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "illega str";
      JSONScanner jSONScanner0 = new JSONScanner("illega str", 2515);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '(';
      charArray0[2] = '2';
      charArray0[3] = 'K';
      charArray0[4] = 'j';
      charArray0[5] = '\\';
      charArray0[6] = 'n';
      charArray0[7] = 'k';
      charArray0[8] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '\\';
      objectArray0[1] = (Object) '(';
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '7';
      charArray0[2] = '{';
      charArray0[3] = '~';
      charArray0[4] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.scanDouble('{');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('X');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J&h%XE%");
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("&", string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'U';
      charArray0[2] = '[';
      charArray0[3] = '3';
      charArray0[4] = '$';
      charArray0[5] = '\'';
      int int0 = 2778;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2778, 2778);
      jSONReaderScanner0.eofPos = (-1579);
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.features = 2778;
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanDecimal('g');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ', info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa,");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('/');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match / - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = 'o';
      charArray0[2] = 'X';
      charArray0[3] = 'M';
      charArray0[4] = '\"';
      charArray0[5] = 'j';
      charArray0[6] = 'O';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.token = 2277;
      jSONReaderScanner0.nextToken();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g:x8QaUrIax235aC");
      SymbolTable symbolTable0 = null;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanUUID('F');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 4096, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "not support type : ";
      jSONReaderScanner0.lexError("not support type : ", objectArray0);
      jSONReaderScanner0.isRef();
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('/', char0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string");
      jSONReaderScanner0.nextToken();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0r");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken();
      assertEquals('r', jSONReaderScanner0.getCurrent());
      
      String string0 = jSONReaderScanner0.numberString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = '>';
      charArray0[2] = 'F';
      charArray0[3] = ';';
      charArray0[4] = 'E';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.tokenName();
      jSONScanner0.scanDouble('E');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.subString(3979, 3979);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'F';
      charArray0[2] = '{';
      charArray0[3] = 'M';
      charArray0[4] = 'm';
      charArray0[5] = 'U';
      charArray0[6] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101, 3788);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '3');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("null");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanFloat('=');
      jSONReaderScanner0.scanString('=');
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      SymbolTable symbolTable0 = new SymbolTable(123);
      char char0 = 'b';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'b');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N(\"Kuwu");
      jSONReaderScanner0.scanString();
      assertEquals('', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      SymbolTable symbolTable0 = new SymbolTable(41);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      JSONScanner jSONScanner0 = new JSONScanner("3%A^/;#qVIJo6:Gk ");
      jSONScanner0.isBlankInput();
      jSONReaderScanner0.isRef();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "3%A^/;#qVIJo6:Gk ";
      objectArray0[1] = (Object) "n?";
      objectArray0[2] = (Object) "3%A^/;#qVIJo6:Gk ";
      objectArray0[3] = (Object) jSONScanner0;
      jSONScanner0.lexError("n?", objectArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 179);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.putChar('\u0083');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.scanString('\u0083');
      int int0 = JSONLexer.END;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '^';
      charArray0[2] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 100, 100);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = ',';
      charArray0[4] = 'o';
      charArray0[5] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10, 10);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      jSONReaderScanner0.scanInt('A');
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.token());
      
      jSONReaderScanner0.decimalValue(false);
      assertEquals('Q', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_ptq_?.qQ=>Tp");
      jSONScanner0.isBlankInput();
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'r');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvyq");
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'V';
      charArray0[2] = 'U';
      charArray0[3] = ':';
      charArray0[4] = '_';
      charArray0[5] = 'O';
      charArray0[6] = '?';
      charArray0[7] = '5';
      charArray0[8] = 's';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8, 117);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.isRef();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.nextToken();
      assertEquals(',', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7.
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 48);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(48, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=e(asM#yM`K<Tfuc");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      assertEquals('a', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ew");
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, '!');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.sp = 2640;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.putChar('-');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[2] = 's';
      charArray0[3] = '$';
      charArray0[4] = '\\';
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("new");
      int int0 = 57;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 57);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(123);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(611, (-3043), (-3043), symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xi=G");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) "7Aa";
      objectArray0[2] = (Object) jSONReaderScanner0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "7Aa";
      jSONReaderScanner0.lexError("error parse null or new", objectArray0);
      jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('@');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.subString(78, 78);
      jSONReaderScanner0.stringDefaultValue();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1e!}ZT");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('q');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.scanInt('p');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[i>");
      jSONReaderScanner0.nextToken();
      assertEquals('i', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'TWfb%,]");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      jSONReaderScanner0.scanDecimal('U');
      jSONReaderScanner0.nextToken();
      assertEquals('Q', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4Hw((y~mU4f~8");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('=');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(1060);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneRegion");
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals('.', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      char char0 = 'V';
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3%A^/;#qVIJo6:Gk ");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDouble('2');
      jSONScanner0.scanFloat('\'');
      jSONScanner0.scanDecimal('J');
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.stringVal();
      boolean boolean0 = JSONLexerBase.isWhitespace('6');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul4:l");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('`');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'L';
      charArray0[2] = 'A';
      charArray0[3] = 'F';
      charArray0[4] = 'V';
      charArray0[5] = '9';
      charArray0[6] = 'T';
      charArray0[7] = '=';
      int int0 = 76;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 76);
      jSONReaderScanner0.scanUUID('A');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanDouble('W');
      charArray0[0] = 'R';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), 348);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-32));
      jSONReaderScanner0.nextIdent();
      assertEquals(8, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{A{,");
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'l';
      charArray0[2] = '*';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.matchField(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanDouble('v');
      charArray0[0] = 'l';
      charArray0[1] = ' ';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals('Q', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n?");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jc");
      jSONReaderScanner0.nextToken(14);
      assertEquals('c', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.nextToken(44);
      jSONReaderScanner0.scanUUID('o');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-");
      jSONReaderScanner0.nextIdent();
      char char0 = '/';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 50900);
      jSONReaderScanner0.skipWhitespace();
      assertEquals(50900, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'h';
      charArray0[2] = '=';
      jSONReaderScanner0.scanNumber();
      charArray0[3] = 'W';
      charArray0[4] = 'T';
      charArray0[5] = 'A';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("qr#%7`,", 40);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(40, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDouble('L');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.putChar('L');
      assertEquals(9, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#Lc5*B%%U");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('p');
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=e(aM#yM`K<T:uc");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7YQ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.indexOf('e', 605);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanLong(',');
      jSONReaderScanner0.nextToken();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7aa", 2011);
      int int0 = jSONReaderScanner0.scanInt('}');
      assertEquals(7, int0);
      assertEquals(2011, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UH~{}Cjm;t87");
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDouble('2');
      jSONScanner0.scanFloat('c');
      char[] charArray1 = new char[3];
      charArray1[0] = '\'';
      jSONScanner0.scanDecimal('\'');
      charArray1[1] = '2';
      charArray1[2] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 1607);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      jSONReaderScanner0.numberString();
      jSONScanner0.scanDate('\u001A');
      SymbolTable symbolTable0 = new SymbolTable(1607);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '.';
      charArray0[2] = ';';
      charArray0[3] = '<';
      charArray0[4] = 'H';
      int int0 = 144;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 144);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.stringDefaultValue = "null";
      JSONScanner jSONScanner0 = new JSONScanner("><#?zSV");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N(\"Kuwu");
      jSONReaderScanner0.scanUUID('G');
      jSONReaderScanner0.scanString();
      int int0 = jSONReaderScanner0.pos();
      assertEquals('', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'D';
      charArray0[2] = 'Z';
      charArray0[3] = 'w';
      charArray0[4] = '1';
      charArray0[5] = 'K';
      charArray0[6] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4765, 10);
      jSONReaderScanner0.scanInt('G');
      Locale locale0 = Locale.forLanguageTag("l");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      linkedList0.retainAll(set0);
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.lookup(linkedList0, hashSet0);
      jSONReaderScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 1 - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      int int0 = jSONReaderScanner0.scanType((String) null);
      assertEquals((-2), int0);
      
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDate('A');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}2H(r^");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("62A!F");
      jSONReaderScanner0.nextToken();
      assertEquals('A', jSONReaderScanner0.getCurrent());
      
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.scanNumber();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~.");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.matchStat = (-2147483647);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('=');
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.ch = '\"';
      jSONReaderScanner0.scanUUID('4');
      jSONReaderScanner0.scanUUID('#');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SymbolTable symbolTable0 = null;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanUUID('#');
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.nextToken(1746);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.isEnabled(feature0);
      int int0 = (-1124088139);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1124088139), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.util.ASMUtils");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.info();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.scanInt('*');
      jSONReaderScanner0.putChar('K');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xi=G");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      jSONReaderScanner0.longValue();
      assertTrue(jSONReaderScanner0.isEOF());
      
      charArray0[1] = ']';
      charArray0[2] = 'l';
      charArray0[3] = 'd';
      charArray0[4] = ':';
      charArray0[5] = 'd';
      charArray0[6] = 'I';
      charArray0[7] = '7';
      charArray0[8] = '7';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanDouble(':');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.isEnabled(feature0);
      int int0 = (-1124088139);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1124088139), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xi=G");
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanString('4');
      jSONReaderScanner0.isEOF();
      charArray0[0] = 's';
      charArray0[1] = '_';
      charArray0[2] = '5';
      charArray0[3] = ',';
      charArray0[4] = 'v';
      charArray0[5] = 'S';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.subString(3, 3);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.pos();
      jSONReaderScanner0.tokenName();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = '!';
      charArray0[2] = '^';
      charArray0[3] = 'y';
      charArray0[4] = 'F';
      charArray0[5] = '!';
      charArray0[6] = 'h';
      charArray0[7] = 'k';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanType("new");
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      boolean boolean0 = JSONScanner.checkDate('e', '6', '6', '=', '%', 'l', (-1), (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'H';
      charArray0[2] = '%';
      charArray0[3] = '5';
      charArray0[4] = 'K';
      charArray0[5] = 'h';
      charArray0[6] = 'T';
      charArray0[7] = 'P';
      charArray0[8] = 'l';
      JSONLexerBase.readString(charArray0, 7);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.bytesValue();
      assertEquals('n', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" UUnGDNa");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("H#R1:d@Zl#");
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 97);
      jSONReaderScanner1.subString(69, 3189);
      jSONReaderScanner0.scanDouble('R');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanBoolean('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xi=G");
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(105);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'h');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("46");
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9,w");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanNullOrNew();
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      assertEquals(8, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      jSONScanner0.scanType(":VSS7B#V1F<H");
      int int0 = jSONScanner0.getFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanIdent();
      int int0 = jSONReaderScanner0.token();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d_GO\"y%fi: ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.lexError("d_GO\"y%fi: ", (Object[]) null);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa");
      double double0 = jSONReaderScanner0.scanDouble('P');
      assertEquals(7.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONLexerBase.isWhitespace('{');
      String string0 = "new";
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      int int0 = 72;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      int int0 = (-275);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-275), "");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.features = 0;
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'd';
      charArray0[2] = 'Z';
      charArray0[3] = '&';
      charArray0[4] = 'Y';
      charArray0[5] = '-';
      charArray0[6] = '~';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.nextToken();
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#8\"[)]v0x9eAi}LR,");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '\\';
      charArray0[2] = ';';
      jSONReaderScanner0.scanFieldInt(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = '/';
      charArray1[1] = 'x';
      charArray1[2] = '[';
      charArray1[3] = '[';
      charArray1[4] = 'k';
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.scanDecimal('\'');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o`dm:ogq2J7-PX.");
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = 'X';
      charArray0[2] = '>';
      charArray0[3] = 'S';
      charArray0[4] = 'd';
      charArray0[5] = '/';
      charArray0[6] = '-';
      char[] charArray1 = new char[2];
      charArray1[0] = '\"';
      charArray1[1] = '-';
      jSONReaderScanner0.scanFieldInt(charArray1);
      charArray0[7] = '3';
      charArray0[8] = 'L';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/Ay5Tn9_BlHQ@8Vk\"");
      jSONReaderScanner0.scanLong('L');
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/Ay5Tn9_BlHQ@8Vk\"");
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "s";
      objectArray0[1] = (Object) "/Ay5Tn9_BlHQ@8Vk\"";
      jSONReaderScanner0.lexError("s", objectArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("JvyQ");
      jSONReaderScanner0.setToken((-208));
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g:x8QaUrIax235aC");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`>R_>f_vVW=w'!^", 47);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('&');
      int int0 = jSONScanner0.getFeatures();
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, expect [, actual ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t77jZqB)>R", 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '';
      charArray0[2] = '1';
      charArray0[3] = ' ';
      charArray0[4] = 'H';
      charArray0[5] = 'l';
      Class<String> class0 = String.class;
      jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '=');
      jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Feature feature0 = Feature.AutoCloseSource;
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("hex", objectArray0);
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa");
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = ';';
      charArray0[2] = '4';
      charArray0[3] = '/';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.putChar('*');
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(884);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'S');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = '%';
      charArray0[2] = 'W';
      charArray0[3] = 'z';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('z');
      jSONReaderScanner0.charAt(1489);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.features = (-1355);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanFloat('D');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2900));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('z');
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDecimal('0');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 336;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      SymbolTable symbolTable0 = new SymbolTable(549);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'x');
      jSONReaderScanner0.stringVal();
      char[] charArray1 = new char[3];
      charArray1[0] = 'x';
      charArray1[1] = 'x';
      charArray1[2] = 'x';
      int int1 = 45380;
      int int2 = 64;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray1, 45380, 64, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.scanUUID('#');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa,");
      jSONReaderScanner0.nextToken();
      boolean boolean0 = JSONLexerBase.isWhitespace('z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2420));
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.intValue();
      assertEquals((-2), jSONScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 1602);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals(1602, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa,");
      jSONReaderScanner0.token = 110;
      JSONLexerBase.readString((char[]) null, 0);
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanDouble('B');
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+lse");
      jSONReaderScanner0.nextToken();
      assertEquals('l', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 753);
      jSONReaderScanner0.putChar('5');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(58, 753, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'I';
      charArray0[2] = '9';
      charArray0[3] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 104);
      boolean boolean0 = jSONReaderScanner0.isEnabled((-508));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(104, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.info();
      jSONScanner0.setTimeZone((TimeZone) null);
      int int0 = jSONScanner0.scanType("error parse true");
      assertEquals((-2), int0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"-8\"`.RW;A8@{e", 0);
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8/@83?[Z#\"K{o");
      jSONReaderScanner0.scanDate('D');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(2197);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NotWriteDefaultValue");
      jSONReaderScanner0.nextToken(7);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.longValue();
      JSONScanner jSONScanner0 = new JSONScanner("J/<_mF*G18~]T!S0=Pw");
      jSONScanner0.scanDouble('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = jSONScanner0.scanType("");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#Lc5*B%%U");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('p');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fa8\"lse");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanLong('o');
      jSONReaderScanner0.scanType("3%A^/;#qVIJo6:Gk ");
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.decimalValue(true);
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char char0 = '7';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDecimal('U');
      char char0 = '#';
      SymbolTable symbolTable0 = new SymbolTable(550);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uun");
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "DisableCircularReferenceDetect";
      JSONScanner jSONScanner0 = new JSONScanner("DisableCircularReferenceDetect");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":");
      jSONReaderScanner0.nextTokenWithColon();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '{';
      charArray0[2] = 'P';
      charArray0[3] = '4';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchField2(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fals{e");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = 'p';
      charArray0[4] = '(';
      charArray0[5] = 'j';
      charArray0[6] = '9';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 61, 61);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'B';
      charArray0[2] = '5';
      charArray0[3] = '}';
      charArray0[4] = 'c';
      charArray0[5] = 'Y';
      charArray0[6] = '`';
      charArray0[7] = 'D';
      charArray0[8] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 972, (-2000));
      jSONReaderScanner0.matchField(charArray0);
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("td<=86$}");
      jSONScanner0.token = 0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fal$u");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char char0 = '~';
      char char1 = 'y';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" oOW9P({;M", 1565);
      int int0 = 114;
      char[] charArray0 = new char[0];
      jSONScanner0.token = 512;
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(114, charArray0, 114, 24180);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('u');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8/@83?[Z#\"K{o");
      SymbolTable symbolTable0 = new SymbolTable(40);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'Z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@DK4M", 35);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - @, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextToken();
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-");
      SymbolTable symbolTable0 = new SymbolTable(13);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanString('(');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/%%?v(a");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      jSONScanner0.scanFieldStringArray(charArray0, 26, (SymbolTable) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a", 26);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.next();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "null";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char char0 = 'D';
      jSONReaderScanner0.scanInt('D');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanIdent();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-1791625326), 0, (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = (-1652);
      JSONScanner jSONScanner0 = new JSONScanner("new", (-1652));
      char[] charArray0 = new char[5];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      charArray0[0] = '4';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '8';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, ' ');
      charArray0[4] = '9';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.doubleValue();
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '7';
      charArray0[2] = '-';
      charArray0[3] = '|';
      charArray0[4] = 'j';
      charArray0[5] = 'N';
      charArray0[6] = 'B';
      charArray0[7] = 'X';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = 'K';
      charArray0[2] = 'A';
      charArray0[3] = '&';
      jSONReaderScanner0.charArrayCompare(charArray0);
      char[] charArray1 = new char[0];
      JSONLexerBase.readString(charArray1, 0);
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      jSONReaderScanner0.setLocale((Locale) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 105);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray1);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("td<=86$}");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("td<=86$}", 16372);
      jSONReaderScanner0.putChar('c');
      jSONReaderScanner0.numberString();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('w');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("td<=86$}", (-1335));
      jSONReaderScanner1.scanStringArray(linkedList0, 'w');
      assertEquals((-1335), jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.charAt(31);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("falsd");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(57);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("v^#l{>f9}&C<OR7)s#U");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals('^', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.isBlankInput();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      jSONReaderScanner0.scanStringArray(list0, 'g');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'g';
      charArray0[2] = '<';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'G';
      charArray0[6] = 'e';
      charArray0[7] = '9';
      charArray0[8] = '9';
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ew");
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '3';
      charArray0[2] = 'n';
      charArray0[3] = '7';
      charArray0[4] = '<';
      charArray0[5] = 'b';
      charArray0[6] = '(';
      charArray0[7] = '!';
      charArray0[8] = 'S';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      int int0 = jSONScanner0.scanType("scan false error");
      assertEquals((-2), int0);
      
      jSONScanner0.getCalendar();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(": zt?TsZ2a?");
      jSONReaderScanner0.scanBoolean('z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : :
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1e!}ZT");
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" UUnGDNa", 216);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.putChar('s');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.scanString('s');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      jSONReaderScanner0.scanStringArray(linkedList0, 's');
      jSONReaderScanner0.token();
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TG59");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(2619);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.addSymbol((-1), (-1), 123, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S\"w,");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.integerValue();
      Feature feature0 = Feature.AutoCloseSource;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("jvyq");
      jSONReaderScanner0.scanInt('9');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w");
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '\"');
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char char0 = 's';
      jSONReaderScanner0.scanLong('s');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@_q7XtkW92");
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'h';
      charArray0[4] = 'I';
      charArray0[5] = 'S';
      charArray0[6] = 'I';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int int0 = 216;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" UUnGDNa", 216);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("H#R1:d@Zl#");
      char char0 = 'S';
      jSONReaderScanner0.scanStringArray(arrayList0, 'S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(216);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - U, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanNullOrNew();
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '^';
      charArray0[2] = 'Q';
      charArray0[3] = 's';
      charArray0[4] = '~';
      charArray0[5] = '{';
      charArray0[6] = 'E';
      charArray0[7] = 'e';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 44, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      char[] charArray0 = new char[5];
      charArray0[1] = '6';
      charArray0[2] = 'l';
      charArray0[3] = '6';
      charArray0[4] = '7';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2551, 1541);
      jSONReaderScanner1.nextToken();
      assertEquals(2, jSONReaderScanner1.token());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'S';
      charArray0[2] = 's';
      charArray0[3] = '$';
      charArray0[4] = '\\';
      charArray0[5] = 'l';
      charArray0[6] = 'z';
      charArray0[7] = 'R';
      charArray0[8] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanType("new");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.putChar('#');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.scanString(')');
      SymbolTable symbolTable0 = new SymbolTable(896);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : /
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '?';
      charArray0[2] = '{';
      charArray0[3] = 'v';
      charArray0[4] = 'c';
      charArray0[5] = 'G';
      charArray0[6] = 't';
      SymbolTable symbolTable0 = new SymbolTable(44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 2939, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]YF!nPw`v%0T'}-TGMk");
      jSONReaderScanner0.nextToken();
      assertEquals('Y', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<Zq0hH_L3j");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[7];
      char char0 = '|';
      charArray0[0] = '|';
      char char1 = '6';
      charArray0[1] = '6';
      char char2 = '%';
      charArray0[2] = '%';
      charArray0[3] = 'w';
      jSONReaderScanner0.scanDate('6');
      charArray0[4] = 'K';
      char char3 = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'U';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'c';
      charArray0[0] = 'c';
      char char1 = 'N';
      charArray0[1] = 'N';
      int int0 = 2322;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2322, 2322);
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N(Kuw");
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '7';
      charArray0[2] = 'p';
      charArray0[3] = 'x';
      charArray0[4] = 'Y';
      charArray0[5] = 'j';
      charArray0[6] = '&';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('1');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '*';
      charArray0[2] = 'b';
      charArray0[3] = '%';
      charArray0[4] = 'p';
      charArray0[5] = '^';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.putChar('#');
      jSONReaderScanner0.numberString();
      SymbolTable symbolTable0 = new SymbolTable(256);
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.setToken(2776);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("false", (-2), 26, 256);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.stringDefaultValue = "/%%?v(a";
      jSONReaderScanner0.putChar('#');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.scanString(')');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONScanner jSONScanner0 = new JSONScanner("/", (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.nextToken();
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'x';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'k';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanDecimal('\'');
      assertEquals(',', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.nextToken();
      assertEquals('Q', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/Ay5Tn9_BlHQ@8Vk\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.putChar('#');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.scanString(')');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, '!');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanType("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[1];
      charArray1[0] = 'e';
      jSONScanner0.scanFieldInt(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa");
      double double0 = jSONReaderScanner0.scanDouble('A');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertEquals(7.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'S';
      char char1 = 's';
      charArray0[2] = 's';
      char char2 = '$';
      charArray0[3] = '$';
      char char3 = '\\';
      charArray0[4] = '\\';
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = 57;
      HashSet<String> hashSet0 = new HashSet<String>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TG59");
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'G';
      charArray0[2] = 'k';
      charArray0[3] = '4';
      charArray0[4] = '}';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 44, 46);
      jSONReaderScanner1.nextToken();
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.nextToken();
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'A';
      int int0 = JSONLexer.END;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 179);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-244));
      jSONReaderScanner0.isEnabled(123, (-292));
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'A';
      charArray0[2] = 's';
      charArray0[3] = '9';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 100, 29);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDouble('2');
      char char0 = 'c';
      char[] charArray1 = new char[3];
      charArray1[0] = 'K';
      charArray1[1] = '2';
      charArray1[2] = '\'';
      jSONScanner0.scanFieldDouble(charArray1);
      jSONScanner0.scanFloat('K');
      jSONScanner0.scanDecimal('2');
      int int0 = 68;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 68);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UTF-8");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = '\\';
      charArray1[1] = 'r';
      charArray1[2] = '4';
      charArray1[3] = '\\';
      charArray1[4] = '[';
      charArray1[5] = 'Z';
      charArray1[6] = 'r';
      charArray1[7] = 'r';
      charArray1[8] = ':';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("f");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.close();
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '{';
      charArray0[2] = 'x';
      charArray0[3] = 'd';
      int int0 = 45;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1562, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&]|WVtfAq(Y_<U_");
      int int0 = 8;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int int0 = 9999;
      JSONScanner jSONScanner0 = new JSONScanner("", 9999);
      jSONScanner0.tokenName();
      char char0 = 'a';
      jSONScanner0.scanDouble('a');
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192, 8192);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.isEOF();
      assertEquals(8192, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2420));
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.intValue();
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      boolean boolean0 = jSONScanner0.isEnabled(1919, 0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.indexOf('`', 23);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int int0 = (-1602);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7Aa", (-1602));
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2u.2VB!_.vN[R");
      char[] charArray0 = new char[0];
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2420));
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.intValue();
      Locale locale0 = Locale.GERMAN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char char0 = ',';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanTrue();
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ER#zqw }hXZp");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.compatibleWithFieldName");
      JSONScanner jSONScanner0 = new JSONScanner("RDQ>|KDl~\"Gyfd", 13);
      jSONScanner0.scanFloat('G');
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.isBlankInput();
      assertEquals((-2), jSONScanner0.matchStat);
      
      charArray0[0] = 'h';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(13, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xi=G");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanUUID('');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#Lc5*B%%U");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.pos = 69;
      jSONReaderScanner0.stringVal();
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('L', char0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.,");
      jSONReaderScanner0.nextToken();
      long long0 = jSONReaderScanner0.scanLong('N');
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDate('2');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      char char0 = 'v';
      jSONReaderScanner0.scanLong('v');
      SymbolTable symbolTable0 = new SymbolTable(1283);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-488), (-101), (-488), symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invald cNmrent");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.subString(76, 59);
      int int0 = jSONReaderScanner0.token();
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match z - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("new", 0);
      jSONReaderScanner2.nextToken();
      assertEquals(9, jSONReaderScanner2.token());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      jSONReaderScanner0.scanType("/%%?v(a");
      jSONReaderScanner0.stringDefaultValue = "/%%?v(a";
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : /
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TD");
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(380, int0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("yEo^rMRZ[y3oL1SzA;", 4867);
      char[] charArray0 = new char[2];
      char char0 = '`';
      char char1 = '!';
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("td<=86$}");
      jSONScanner0.token = 1015;
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nziwdeyr6");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Feature feature0 = Feature.AllowSingleQuotes;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertTrue(boolean0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e2ul");
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '8';
      charArray0[2] = '3';
      charArray0[3] = 'T';
      charArray0[4] = '=';
      charArray0[5] = ' ';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.isRef();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanBoolean('-');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowISO8601DateFormat");
      jSONReaderScanner0.stringDefaultValue = "AllowISO8601DateFormat";
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
      
      jSONReaderScanner0.stringDefaultValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      SymbolTable symbolTable0 = new SymbolTable(44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("falsd");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("falsd");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7.Q");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanUUID('f');
      assertEquals('Q', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      Locale locale0 = Locale.CHINESE;
      jSONReaderScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 512);
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(10);
      symbolTable0.addSymbol("illega str", (-5079), 10, Integer.MIN_VALUE);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'p');
      StringReader stringReader0 = new StringReader("7hR;CjDXTLi}");
      jSONReaderScanner0.isBlankInput();
      assertEquals(512, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tTzI'");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tTzI'");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '@';
      charArray0[2] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 823, 755);
      char[] charArray1 = new char[7];
      charArray1[0] = '@';
      charArray1[1] = '@';
      charArray1[2] = '\\';
      charArray1[3] = '$';
      charArray1[4] = '@';
      charArray1[5] = '\\';
      charArray1[6] = '\\';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray1);
      assertEquals(755, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanLong('~');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 't';
      charArray0[2] = 'V';
      charArray0[3] = 'T';
      charArray0[4] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 109);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3F36c(s2x>\t,0B'c7");
      jSONReaderScanner0.sp = (-1341);
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gxw^=<yyZ3V=pj");
      boolean boolean0 = jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("gxw^=<yyZ3V=pj");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setToken(0);
      boolean boolean1 = JSONLexerBase.isWhitespace('l');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFloat('-');
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("scan true error", objectArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("k", (-740));
      long long0 = jSONReaderScanner0.scanLong('B');
      assertEquals(0L, long0);
      assertEquals((-740), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      boolean boolean0 = jSONReaderScanner0.isEnabled(102);
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#0B");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "illega str");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tru");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o`dm:ogqJ7-YPX'.");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CustomMapDeserializer");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '>');
      jSONScanner0.nextToken();
      char char0 = 'V';
      jSONScanner0.scanUUID('V');
      jSONScanner0.matchField2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      jSONReaderScanner0.scanBoolean('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(24);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      Locale locale0 = Locale.UK;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.eofPos = 76;
      jSONReaderScanner0.scanDate(')');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'q';
      charArray0[2] = 'b';
      charArray0[3] = 'e';
      charArray0[4] = 'f';
      charArray0[5] = 'n';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1e!}ZT");
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '`';
      charArray0[2] = '\'';
      charArray0[3] = 'E';
      charArray0[4] = 'a';
      charArray0[5] = '\\';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '-';
      charArray0[2] = 'i';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",nul");
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'o';
      charArray0[2] = 'n';
      charArray0[3] = 'g';
      jSONReaderScanner0.isBlankInput();
      charArray0[4] = 'S';
      charArray0[5] = 'X';
      charArray0[6] = '~';
      charArray0[7] = 'L';
      charArray0[8] = '\\';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4t");
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '\"';
      charArray0[2] = '@';
      charArray0[3] = '4';
      charArray0[4] = 'V';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.isBlankInput();
      int int0 = jSONScanner0.intValue();
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NZIWDEyR6?z4JpDZy");
      jSONReaderScanner0.nextToken();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ew");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "DisableCircularReferenceDetect";
      JSONScanner jSONScanner0 = new JSONScanner("DisableCircularReferenceDetect");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. D
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '%';
      charArray0[2] = '|';
      charArray0[3] = 'w';
      charArray0[4] = 't';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "new";
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '3';
      charArray0[2] = 'D';
      charArray0[3] = 'h';
      charArray0[4] = '=';
      charArray0[5] = '?';
      charArray0[6] = 'd';
      charArray0[7] = '^';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanUUID('*');
      jSONReaderScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(1599);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, ']');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@_q7XtkW92");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gvxw^Y=<yyZ3V=pj");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("gvxw^Y=<yyZ3V=pj");
      jSONScanner0.scanISO8601DateIfMatch();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("7aa");
      jSONReaderScanner1.nextToken();
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 0, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextToken(3338);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '<';
      charArray0[2] = 'h';
      charArray0[3] = 'C';
      JSONScanner.charArrayCompare("new", 127, charArray0);
      jSONReaderScanner0.scanInt('0');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken((-345));
      jSONReaderScanner0.info();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, expect [, actual ");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t77jZqB)>R", 0);
      char[] charArray0 = new char[6];
      char char0 = '=';
      charArray0[0] = '=';
      charArray0[1] = '';
      charArray0[2] = '1';
      char char1 = ' ';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/%%?v(a");
      char char0 = '#';
      jSONReaderScanner0.putChar('#');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("bw2Y\"9\"]wzv{fc");
      jSONReaderScanner0.scanStringArray(arrayList0, '4');
      int int0 = 1;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3%A^/;#qVIJo6:Gk ");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      assertEquals('%', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7T");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('w');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, '&');
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
