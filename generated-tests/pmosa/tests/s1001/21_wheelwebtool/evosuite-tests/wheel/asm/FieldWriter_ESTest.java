/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:25:22 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-302), "`undimeVisibleAnnotations", "`undimeVisibleAnnotations", "`undimeVisibleAnnotations", "`undimeVisibleAnnotations");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-302), "RuntimeVisibleAnnotations", "T.p|", "H}", "T.p|");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&qFm;EE/_E7r4&";
      stringArray0[1] = "H}";
      stringArray0[2] = "T.p|";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "T.p|";
      stringArray0[7] = "&qFm;EE/_E7r4&";
      classWriter0.visitMethod((-3127), "&qFm;EE/_E7r4&", "RuntimeVisibleAnnotations", "", stringArray0);
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAnnotation("Signature", true);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte((-3016));
      ByteVector byteVector2 = byteVector1.put12(0, 1334);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("SvQm'M(yqtKh;", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2658);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2658, "", "B:@DJkt>o", "RuntimeInvisibleAnnotations", "B:@DJkt>o");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-302), "RuntimeVisibleAnnotations", "T.p|", "H}", "T.p|");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&qFm;EE/_E7r4&";
      stringArray0[1] = "H}";
      stringArray0[2] = "T.p|";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "T.p|";
      stringArray0[7] = "&qFm;EE/_E7r4&";
      classWriter0.visitMethod((-3127), "&qFm;EE/_E7r4&", "RuntimeVisibleAnnotations", "", stringArray0);
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAnnotation("uignature", true);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte((-3016));
      byteVector1.putByteArray((byte[]) null, (-3127), 4);
      int int0 = 0;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-302), "RuntimeVisibleAnnotations", "T.p|", "H}", "T.p|");
      int int0 = 66;
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 66, (String) null, "2d]Qg&{A5:3D#=!H^]%", "RuntimeVisibleParameterAnnotations", "H}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassWriter classWriter0 = new ClassWriter(2658);
      classWriter0.version = (-2079);
      classWriter0.visitAnnotation("B:@DJkt>o", false);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2658, "", "B:@DJkt>o", "RuntimeInvisibleAnnotations", "B:@DJkt>o");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-302), "RuntimeVisibleAnnotations", "T.p|", "H}", "T.p|");
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAnnotation("Signature", true);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte((-3016));
      ByteVector byteVector2 = byteVector1.put12(0, 1334);
      ByteVector byteVector3 = byteVector2.put12(1, (-3127));
      fieldWriter0.put(byteVector2);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-302), "RuntimeVisibleAnnotations", "T.p|", "RuntimeVisibleAnnotations", "T.p|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&qFm;EE/_E7r4&";
      stringArray0[1] = "T.p|";
      stringArray0[2] = "T.p|";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "T.p|";
      fieldWriter0.visitAnnotation("", false);
      stringArray0[7] = "RuntimeVisibleAnnotations";
      classWriter0.visitMethod((-3127), "&qFm;EE/_E7r4&", "RuntimeVisibleAnnotations", "", stringArray0);
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAnnotation("Signature", true);
      ByteVector byteVector0 = new ByteVector();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)49;
      // Undeclared exception!
      try { 
        byteVector0.putByteArray(byteArray0, 2, (byte)49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat(0.0F);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-302), "RuntimeVisibleAnnotations", "T.p|", "RuntimeVisibleAnnotations", "T.p|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&qFm;EE/_E7r4&";
      stringArray0[1] = "T.p|";
      stringArray0[2] = "T.p|";
      stringArray0[3] = "RuntimeVisibleAnnotations";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "T.p|";
      stringArray0[7] = "RuntimeVisibleAnnotations";
      classWriter0.visitMethod((-3127), "&qFm;EE/_E7r4&", "RuntimeVisibleAnnotations", "", stringArray0);
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAnnotation("RuntimeVisibleAnnotations", false);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte((-3437));
      byteVector1.putUTF8("T.p|");
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(717);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "wheel.asm.MethodWriter", "UiAW9hFnzNAP,\"X", "", "D)])yS{nC?(Iu");
      ByteVector byteVector0 = new ByteVector(717);
      ByteVector byteVector1 = byteVector0.putUTF8("");
      ByteVector byteVector2 = byteVector1.put11(717, 1);
      ByteVector byteVector3 = byteVector2.putByte(1);
      fieldWriter0.put(byteVector3);
      assertSame(byteVector3, byteVector2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2658);
      classWriter0.addType("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 451, "", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (Object) null);
      fieldWriter0.getSize();
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "RuntimeVisibleAnnotations", "D%dW{Z>cbB(0", "RuntimeInvisibleAnnotations", (Object) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RuntimeVisibleAnnotations";
      stringArray0[1] = "";
      stringArray0[2] = "RuntimeInvisibleAnnotations";
      stringArray0[3] = "D%dW{Z>cbB(0";
      stringArray0[4] = "T.p|";
      classWriter0.visitMethod((-1248), "org.apache.commons.io.filefilter.HiddenFileFilter", "27V", "", stringArray0);
      fieldWriter0.visitAnnotation("D%dW{Z>cbB(0", false);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte((-3523));
      byteVector1.putUTF8("");
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.key;
      Item item1 = classWriter0.key;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 12, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (String) null, "RuntimeVisibleAnnotations");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = new ByteVector();
      fieldWriter0.put(byteVector1);
      System.setCurrentTimeMillis((-302));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-839));
      classWriter0.version = (-839);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-319), "{@_DgS])_=HPB&VB", "{@_DgS])_=HPB&VB", "{@_DgS])_=HPB&VB", "{@_DgS])_=HPB&VB");
      fieldWriter0.visitAnnotation("{@_DgS])_=HPB&VB", false);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.put12(1440, 2914);
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(55);
      classWriter0.version = 55;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-332), "`undimeVisibleAnnotations", "`undimeVisibleAnnotations", "`undimeVisibleAnnotations", "`undimeVisibleAnnotations");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      System.setCurrentTimeMillis((-1L));
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }
}
