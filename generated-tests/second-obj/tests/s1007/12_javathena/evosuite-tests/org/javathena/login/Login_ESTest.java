/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:09:44 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(",.NO", 12345);
      Login.login_log("org.javathena.core.utiles.Constants$SUBTYPE");
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login.getPASSWORDENC();
      FromAdmin fromAdmin0 = new FromAdmin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(2000000);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(2000000, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      login0.setAuth_max(512);
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("Hn9zMi/~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("':**");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.check_ipmask(31036, "\"o}X");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      login0.setAuth_max((-1729381255));
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals((-1729381255), login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Login.showTab(byteArray0);
      Login.setPASSWORDENC(10029);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      login0.do_final();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      FromAdmin fromAdmin0 = new FromAdmin();
      Socket_data socket_data0 = new Socket_data((Socket) null, fromAdmin0);
      Login.logUnknownPackets(socket_data0);
      int int0 = login0.getAuth_num();
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      Proxy proxy0 = Proxy.NO_PROXY;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "!Xs/X{mv$");
      PrintWriter printWriter0 = null;
      login0.setOut((PrintWriter) null);
      login0.getLog_fp();
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login.getDbManagemtType();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)111;
      Login.showTab(byteArray0);
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.mmo_auth_syncXML();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("f#,Wz", 83);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Login.showTab(byteArray0);
      Login login0 = new Login();
      int int0 = Calendar.MAY;
      System.setCurrentTimeMillis(280L);
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.setAccountIdCount(10);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.xml");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "conf/subnet_athena.conf");
      Login.End login_End0 = login0.new End();
      MockThread.dumpStack();
      login_End0.run();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login.mmo_auth_initXML();
      Login.setPASSWORDENC(0);
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      FileSystemHandling.shouldAllThrowIOExceptions();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initXML();
      login0.do_initTXT();
      login0.check_auth_sync();
      // Undeclared exception!
      try { 
        login0.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Login login0 = new Login();
      login0.do_initTXT();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.txt");
      int int0 = FromChar.BAN_REQUEST;
      login0.parse_console(".ysJ+");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.mmo_auth_syncXML();
      MockInetSocketAddress.createUnresolved("f#,Wz", 83);
      Proxy proxy0 = Proxy.NO_PROXY;
      FromClient fromClient0 = new FromClient();
      Login.display_title();
      // Undeclared exception!
      try { 
        login0.save_config_in_log();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      login0.setAuth_max(517);
      Login.mmo_auth_syncTXT();
      String string0 = "qHn9zMi/~";
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      UserManagement.addAccountIdCount();
      login0.getOut();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login.mmo_auth_initXML();
      Login.setPASSWORDENC(0);
      Login login0 = new Login();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login.mmo_auth_syncXML();
      MockInetSocketAddress.createUnresolved("f#,Wz", 99);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.cancel();
      login_Timer_interval_check_auth_sync0.run();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      login0.setAuth_max((-1729381250));
      login0.do_initXML();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      assertEquals((-1729381250), login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Login.getMd5Data(socket_data0);
      Login.getDbManagemtType();
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getOOBInline();
      Login login0 = new Login();
      login0.do_initTXT();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)50;
      Login login1 = new Login();
      int[] intArray0 = new int[9];
      intArray0[1] = 2000000;
      intArray0[2] = (int) (byte)50;
      intArray0[3] = 10;
      intArray0[4] = 2000000;
      intArray0[7] = 5284;
      intArray0[6] = (int) (byte)111;
      intArray0[7] = (int) (byte)50;
      intArray0[8] = 50;
      login1.setServer_fd(intArray0);
      MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        login0.parse_console("end");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getOOBInline();
      mockSocket0.setSoLinger(false, 19);
      Login login0 = new Login();
      Login.mmo_auth_initXML();
      login0.do_initTXT();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("  To know if server is alive:", 31032);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      int[] intArray0 = new int[3];
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Login login1 = new Login();
      login0.parse_console("alive");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Login login2 = new Login();
      login2.check_auth_sync();
      login0.setServer_fd(intArray0);
      Login.display_title();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      login0.yesNoOnOffToBoolean("NO");
      int[] intArray0 = new int[9];
      intArray0[0] = 30;
      intArray0[1] = 10;
      intArray0[2] = (-3908);
      intArray0[3] = 2000000;
      intArray0[4] = 50;
      intArray0[5] = 100000000;
      intArray0[6] = 2;
      intArray0[7] = 50;
      intArray0[8] = 30;
      login0.server_fd = intArray0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        MySQLConfig.initConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setSendBufferSize(634);
      mockSocket0.getInetAddress();
      mockSocket0.getTcpNoDelay();
      mockSocket0.getOOBInline();
      Login login0 = new Login();
      login0.do_final();
      mockSocket0.setReceiveBufferSize(100000000);
      login0.do_initTXT();
      login0.check_auth_sync();
      int[] intArray0 = new int[0];
      login0.setServer_fd(intArray0);
      login0.check_auth_sync();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.getServer_fd();
      MockInetAddress.getLocalHost();
      UserManagement.addAccountIdCount((-40811373));
      int int0 = Login.auth_num;
      MySQLConfig.setLogin_server_db("- with a dynamic password error ban:");
      MockInetAddress.getLocalHost();
      UserManagement.addUserTXT("conf/subnet_athena.conf", (String) null, "kr)|zu4~Chc1E[", '\"');
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      ACO aCO1 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO1);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = FromChar.CHANGE_AN_EMAIL;
      MockInetAddress.getLocalHost();
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      System.setCurrentTimeMillis(1664L);
      ConfigurationManagement.setAccess_order(aCO0);
      MockSocket mockSocket0 = new MockSocket();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      MockSocket mockSocket1 = new MockSocket();
      assertFalse(mockSocket1.equals((Object)mockSocket0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/log/login.log");
      mockSocket0.setKeepAlive(false);
      mockSocket0.getReuseAddress();
      mockSocket0.setSoTimeout(99);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Ltm|n||I");
      mockSocket0.getKeepAlive();
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(2);
      login0.do_final();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      System.setCurrentTimeMillis(50);
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket("u|#uv|tu", (-1720214568), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1720214568
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      login0.do_final();
      String string0 = "NO";
      ThreadGroup threadGroup0 = new ThreadGroup("% djD%_vAV>");
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.setReceiveBufferSize(2000000);
      login0.do_initTXT();
      login0.check_auth_sync();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("{^#;FJUP2RO%.", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockInetAddress.getLocalHost();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setSendBufferSize(634);
      mockSocket0.getInetAddress();
      mockSocket0.getOOBInline();
      Login login0 = new Login();
      login0.do_final();
      mockSocket0.setReceiveBufferSize(100000000);
      login0.do_initTXT();
      login0.check_auth_sync();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockInetAddress.getByName(".ys+");
      FileSystemHandling.shouldAllThrowIOExceptions();
      login0.check_ip((InetAddress) null);
      MockInetAddress.getLocalHost();
      String string0 = "status";
      login0.parse_console("status");
      MySQLConfig.setLogin_server_db("exit");
      MockInetAddress.getLocalHost();
      UserManagement.addUserTXT("haE+wl6e$9|9", (String) null, "status", 'T');
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      login0.do_final();
      login0.do_initTXT();
      login0.check_auth_sync();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("  To know if server is alive:", 31032);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      InetAddress inetAddress0 = MockInetAddress.getByName("com.thoughtworks.xstream.mapper.AnnotationMapper$WeakHashSet");
      FileSystemHandling.shouldAllThrowIOExceptions();
      login0.check_ip(inetAddress0);
      MockInetAddress.getLocalHost();
      login0.parse_console("conf/subnet_athena.conf");
      // Undeclared exception!
      try { 
        login0.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Login login0 = new Login();
      login0.do_final();
      login0.do_initTXT();
      login0.check_auth_sync();
      login0.check_auth_sync();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("  To know if server is alive:", 31032);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockInetAddress.getLocalHost();
      login0.parse_console("help");
      Login login1 = new Login();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setSendBufferSize(634);
      mockSocket0.getInetAddress();
      mockSocket0.getTcpNoDelay();
      mockSocket0.getOOBInline();
      Login login0 = new Login();
      login0.do_final();
      mockSocket0.setReceiveBufferSize(100000000);
      login0.do_initTXT();
      login0.check_auth_sync();
      int[] intArray0 = new int[0];
      login0.setServer_fd(intArray0);
      login0.check_auth_sync();
      login0.getServer_fd();
      MockInetAddress.getLocalHost();
      UserManagement.addAccountIdCount((-40811373));
      int int0 = Login.auth_num;
      MySQLConfig.setLogin_server_db("- with a dynamic password error ban:");
      MockInetAddress.getLocalHost();
      UserManagement.addUserTXT("conf/subnet_athena.conf", (String) null, "kr)|zu4~Chc1E[", '\"');
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("- with a dynamic password error ban:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/log/login.log");
      mockSocket0.getKeepAlive();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "LtX|n||I");
      MockSocket mockSocket1 = new MockSocket();
      mockSocket1.getKeepAlive();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(2);
      login0.do_final();
      ThreadGroup threadGroup0 = new ThreadGroup("conf/subnet_athena.conf");
      mockSocket0.setReceiveBufferSize(906);
      login0.do_initTXT();
      login0.check_auth_sync();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(10);
      MockThread.dumpStack();
      login0.do_final();
      ThreadGroup threadGroup0 = new ThreadGroup("NO");
      mockSocket0.setReceiveBufferSize(10);
      login0.do_initTXT();
      login0.check_auth_sync();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("{^#;FJUP2RO%.", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockInetAddress.getLocalHost();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      String string0 = "NO";
      login0.yesNoOnOffToBoolean("YES");
      Login.login_log("~TV{Dnup^z^");
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getTcpNoDelay();
      Login login0 = new Login();
      ConfigurationManagement.setAccess_allownum(2000000);
      Thread[] threadArray0 = new Thread[0];
      MockThread.enumerate(threadArray0);
      login0.do_final();
      mockSocket0.setReceiveBufferSize(30);
      login0.do_initTXT();
      login0.check_auth_sync();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("java.util.Set", 10036);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 100000000;
      login0.setServer_fd(intArray0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "conf/subnet_athena.conf");
      MockInetAddress.getLocalHost();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.yesNoOnOffToBoolean("OFF");
      Login.login_log("Cq~Au~yww9nGWX");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/conf/login_athena.conf");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setSendBufferSize(634);
      MockInetAddress.getLoopbackAddress();
      mockSocket0.getOOBInline();
      Login login0 = new Login();
      login0.do_final();
      mockSocket0.setReceiveBufferSize(100000000);
      login0.do_initTXT();
      login0.check_auth_sync();
      int[] intArray0 = new int[0];
      login0.setServer_fd(intArray0);
      login0.check_auth_sync();
      int[] intArray1 = login0.server_fd;
      UserManagement.addAccountIdCount((-40811397));
      int int0 = Login.auth_num;
      Login.mmo_auth_initXML();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setSendBufferSize(634);
      MockInetAddress.getLoopbackAddress();
      mockSocket0.getOOBInline();
      MockSocket mockSocket1 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket1);
      Login login0 = new Login();
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      int int0 = Calendar.ERA;
      Login login1 = new Login();
      ConfigurationManagement.setAccess_denynum(10);
      login0.save_config_in_log();
      Login login2 = new Login();
      // Undeclared exception!
      try { 
        login1.parse_admin(634, socket_data0, login2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }
}
