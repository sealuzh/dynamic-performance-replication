/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:42:55 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.ParseException;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0, (String) null);
      jVCParser0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedReader pipedReader0 = new PipedReader(1107);
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.enable_tracing();
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      jVCParser0.ReInit(jVCParserTokenManager0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      jVCParser0.ReInit((Reader) null);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1107);
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.enable_tracing();
      jVCParser0.disable_tracing();
      Token token0 = jVCParser0.getNextToken();
      assertEquals(100, jVCParser0.debugColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0);
      jVCParser0.getNextToken();
      jVCParser0.parse();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      pipedReader0.close();
      Token token0 = jVCParser0.getToken(1);
      Token token1 = jVCParser0.getToken(2);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      
      String string0 = jVCParser0.parse();
      assertEquals("", string0);
      
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 24);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      JVCParser jVCParser0 = new JVCParser(charArrayReader0);
      jVCParser0.parse();
      lineNumberReader0.setLineNumber(24);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/IN_?OAD");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\r");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Predicate.isEqual((Object) "\r");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JVCParser jVCParser0 = new JVCParser("IN_?OAD", set0);
      jVCParser0.parse();
      JVCParser jVCParser1 = null;
      try {
        jVCParser1 = new JVCParser("_sb.append(\"\r\");\r", set0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/IN_?OAD");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "8");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      JVCParser jVCParser0 = new JVCParser("IN_?OAD", set0, true);
      JVCParser jVCParser1 = new JVCParser(jVCParser0.token_source);
      charset0.name();
      jVCParser0.parse();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Include file (");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JVCParser jVCParser2 = null;
      try {
        jVCParser2 = new JVCParser("Kv 1", linkedHashSet0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.getToken(2017);
      jVCParser0.getNextToken();
      jVCParser0.getToken(0);
      jVCParser0.enable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "\n");
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) "IN_?OAD");
      predicate1.or(predicate0);
      predicate0.negate();
      predicate1.or(predicate0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/IN_?OAD");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\n");
      JVCParser jVCParser0 = new JVCParser("IN_?OAD", set0);
      jVCParser0.parse();
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) null, "_sb.append(\"n\n\");\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/IN_?OAD");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "A~qv|\"b");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/IN_?OAD");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JVCParser jVCParser0 = new JVCParser("IN_?OAD", (Set<String>) null, true);
      jVCParser0.parse();
      jVCParser0.enable_tracing();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_sb.append(\"A~qv|\"b\");");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "_sb.append(\"A~qv|\"b\");");
      JVCParser jVCParser1 = null;
      try {
        jVCParser1 = new JVCParser("|\"|'", (Set<String>) null, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      pipedReader0.close();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "com.pmdesigns.jvc.tools.TokenMgrError";
      stringArray0[1] = "i}x)MD[}q";
      stringArray0[2] = "%BVO]D";
      stringArray0[3] = "...";
      Token token0 = Token.newToken(2046, "i}x)MD[}q");
      jVCParser0.token = token0;
      stringArray0[4] = "B";
      stringArray0[5] = "zUPg.a%#SqhLpwaOJR}";
      JVCParser.main(stringArray0);
      jVCParser0.getToken(1);
      jVCParser0.getToken(2);
      token0.next = jVCParser0.token;
      // Undeclared exception!
      try { 
        jVCParser0.parse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2046
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }
}
