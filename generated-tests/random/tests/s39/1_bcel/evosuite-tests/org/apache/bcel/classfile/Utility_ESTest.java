/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:49:54 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte)44;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2361), (-937));
      assertEquals("0:    fconst_2\n1:    fastore\n2:    ishl\n3:    d2f\n4:    fstore_1\n5:    laload\n6:    idiv\n7:    <illegal opcode>\n8:    aload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 4191, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "My2hv9$'q0?G\"7@*p2g";
      Utility.convertString("My2hv9$'q0?G\"7@*p2g");
      try { 
        Utility.typeOfSignature("My2hv9$'q0?G\"7@*p2g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: My2hv9$'q0?G\"7@*p2g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.convertString("he3(X)cz^WQ~={@");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-83);
      Utility.toHexString(byteArray0);
      Utility.replace("!_9M]}@94~t>i", "!_9M]}@94~t>i", "Illegal type: ");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)109, 2325);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "\t\t#";
      Utility.decode("\t\t#", false);
      try { 
        Utility.typeOfSignature("QY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)42;
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)51);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)88, 4331);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[3] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 93);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((byte)42);
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (int) (byte) (-41), false);
      assertEquals("1:    aconst_null\n2:    return\n3:    return\n4:    <illegal opcode>\n5:    baload\n6:    goto\t\t#6448\n", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.compactClassName("ddemY}YR9");
      Utility.convertString("ddemY}YR9");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byte byte0 = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)76;
      byte byte1 = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte)67;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte)81, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 512, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)112;
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)112, (byte)112);
      constantArray0[0] = (Constant) constantFieldref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong(1165L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 590, 1227, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.fillup("getstatic", 2, false, ';');
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.int";
      stringArray0[1] = "getstatic";
      stringArray0[2] = "impdep2";
      stringArray0[3] = "_";
      stringArray0[4] = "(\"";
      stringArray0[5] = "(\"";
      stringArray0[6] = "(\"";
      stringArray0[7] = "getstatic";
      stringArray0[8] = "getstatic";
      Utility.methodTypeToSignature("(\"", stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)16);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-39));
      constantArray0[1] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(254, (byte) (-90));
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("fconst_2", "V", true);
      int int0 = 182;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 182, 837, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.clearBit((-14), (-14));
      boolean boolean0 = false;
      Utility.format(163, 2, false, '&');
      try { 
        Utility.typeOfSignature("163");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 163
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-33);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)4;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 1175, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";j::\"o>49.yo/K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;j::\"o>49.yo/K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 963, (int) (byte) (-96), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tableswitch");
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-19);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)48;
      byte byte0 = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)62;
      byte byte1 = (byte)70;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.mark((byte)48);
      byteSequence0.skip((byte) (-65));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.replace("i2f", "i2f", "LineNumberTable");
      Utility.compactClassName("LineNumberTable", "LineNumberTable", false);
      Utility.convertString("i2f");
      try { 
        Utility.methodSignatureReturnType("LineNumberTable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumberTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      Utility.accessToString(72, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)78;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-212), (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lor
         // 1:    iconst_5
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-31);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E-Y|eeO\"`-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E-Y|eeO\"`-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("7NaT^0y-+*OZD", stringArray0);
      Utility.compactClassName("class", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "!%)zK'";
      try { 
        Utility.typeOfSignature("!%)zK'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %)zK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.setBit(940, (-2933));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)100;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("ifnonnull");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)98, (-943), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2539. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-89);
      byteArray0[0] = (byte)25;
      byteArray0[8] = (byte)20;
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)32);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)88, 4331);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[3] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 93);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((byte)20);
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (int) (byte) (-41), false);
      assertEquals("2:    return\n3:    pop2\n4:    <illegal opcode>\n5:    lload_2\n6:    goto\t\t#26\n", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.compactClassName("Oi");
      try { 
        Utility.typeOfSignature("Oi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)42;
      Constant[] constantArray0 = new Constant[6];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)51);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)88, 4331);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[3] = (Constant) constantString0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(8, 93);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((byte)42);
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (int) (byte) (-41), false);
      assertEquals("2:    return\n3:    pop2\n4:    <illegal opcode>\n5:    baload\n6:    goto\t\t#6448\n", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-117);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-49);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (-364), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "Row!}l_p&AGZlbp";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Row!}l_p&AGZlbp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Row!}l_p&AGZlbp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WjUvgN&Ns5zv Iy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WjUvgN&Ns5zv Iy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "G}eRX%k<";
      try { 
        Utility.typeOfSignature("G}eRX%k<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G}eRX%k<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.convertString(", catch_type = ");
      assertEquals(", catch_type = ", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload\t\t%120", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-127);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "/aw&eFW3xj1mi~q";
      try { 
        Utility.typeOfSignature("/aw&eFW3xj1mi~q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /aw&eFW3xj1mi~q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "!?";
      try { 
        Utility.typeOfSignature("!?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-110);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      stringArray0[7] = "void";
      stringArray0[8] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byte byte0 = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "if_icmplt";
      try { 
        Utility.methodSignatureReturnType("if_icmplt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmplt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X kW/W8g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X kW/W8g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)84;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-61), 122);
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[0] = constant0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1164, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('P');
      Utility.typeOfSignature("[{<");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 13
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-89);
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-65), 71);
      constantArray0[0] = (Constant) constantFieldref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString((byte) (-65));
      constantArray0[2] = (Constant) constantString0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte) (-116));
      constantArray0[3] = (Constant) constantInteger1;
      ConstantInteger constantInteger2 = new ConstantInteger(82);
      constantArray0[4] = (Constant) constantInteger2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 87, (-701));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.fillup("monitorenter", 182, true, 'X');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, 189, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.classOrInterface(91);
      String string0 = "multianewarray";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "multianewarray");
      Utility.fillup("CH5sU~]Z.~E3vR", (-682), false, '/');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (-346));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.getSignature("new");
      Utility.isSet(951, 951);
      Utility.classOrInterface(951);
      Utility.isSet(160, (-750));
      Utility.accessToString(18);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)64;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(197, (byte) (-59));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 951, 168);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, 84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-128);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4096, 180, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.format((-1155), (-1155), true, '\'');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)14;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)89, (int) (byte)92, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.compactClassName("HAY{Za2");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byte byte0 = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)78;
      byte byte1 = (byte)72;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)103;
      ConstantPool constantPool0 = null;
      int int0 = (-565);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-565), 8);
      boolean boolean0 = true;
      int int1 = (-2871);
      LocalVariable[] localVariableArray0 = new LocalVariable[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-89);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)85;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 43, false);
      assertEquals("0:    nop\n1:    lastore\n2:    iconst_3\n3:    castore\n", string0);
      
      String string1 = Utility.replace("]=", "null", "null");
      assertEquals("]=", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)107;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1376), 20);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    fload_1\n3:    istore_2\n4:    iconst_2\n5:    dmul\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      int int0 = Utility.clearBit((byte)107, (byte) (-19));
      assertEquals(107, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)52;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)52, (-4499), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "athrow";
      Utility.searchOpcode("athrow");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)66;
      int int0 = 76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.accessToString(845, true);
      try { 
        Utility.decode("!Fb1!$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.classOrInterface(3747);
      Utility.searchOpcode("ObJqfLJyb2N");
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)98;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)69, (byte)127);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)98, 1014);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&X8l+YC~An!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &X8l+YC~An!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)47;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(97, 68);
      assertEquals(97, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifge\t\t#7680", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-121);
      byteArray0[0] = (byte) (-121);
      byte byte1 = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byte byte2 = (byte)115;
      byteArray0[2] = (byte)115;
      byte byte3 = (byte)9;
      byteArray0[3] = (byte)9;
      byte byte4 = (byte)0;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("i2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "4c&:";
      try { 
        Utility.typeOfSignature("4c&:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4c&:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "6^WL(uz";
      try { 
        Utility.typeOfSignature("6^WL(uz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6^WL(uz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("sipush\t\t-18158", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Yry!2-H]!%E;sz$DsK";
      try { 
        Utility.typeOfSignature("Yry!2-H]!%E;sz$DsK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yry!2-H]!%E;sz$DsK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-120);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)43, 2454);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1140, (int) (byte) (-81));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 44440. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.compactClassName("\tdefault = ");
      Utility.replace("\tdefault = ", "\tdefault = ", "\tdefault = ");
      Utility.searchOpcode("Invalid IOCase name: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tdefault = ");
      try { 
        Utility.typeOfSignature("+76c}!@7h7s3cvl6h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 76c}!@7h7s3cvl6h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)84;
      byte byte0 = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-108);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.replace("-DOLoZ'bP}e96l", "-DOLoZ'bP}e96l", "-DOLoZ'bP}e96l");
      try { 
        Utility.typeOfSignature("-DOLoZ'bP}e96l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -DOLoZ'bP}e96l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.format(59, 80, false, '6');
      Utility.compactClassName("66666666666666666666666666666666666666666666666666666666666666666666666666666659", false);
      Utility.setBit(5767, 80);
      Utility.isSet(40, 53);
      Utility.isJavaIdentifierPart('6');
      Utility.convertString("66666666666666666666666666666666666666666666666666666666666666666666666666666659");
      Utility.convertString("66666666666666666666666666666666666666666666666666666666666666666666666666666659");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2533), 1255);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.compactClassName(">y^1>%", ">y^1>%", false);
      try { 
        Utility.typeOfSignature(">y^1>%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >y^1>%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.isJavaIdentifierPart('?');
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = Utility.decode("{java.lang.Object@5c224c1e, java.lang.Object@24fb0edb, java.lang.Object@1350ab25, java.lang.Object@1df82886, java.lang.Object@5374d59b, java.lang.Object@2f0594f8}", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 932, 932, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-106);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), (int) (byte) (-106), true);
      Utility.compactClassName("0:    lload_1\n1:    fcmpg\n");
      String string0 = "1Y^,+R`Cfd";
      String string1 = "goto";
      MockFile mockFile0 = new MockFile("goto", "0:    lload_1\n1:    fcmpg\n");
      File file0 = MockFile.createTempFile("1Y^,+R`Cfd", "0:    lload_1\n1:    fcmpg\n", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "0:    lload_1\n1:    fcmpg\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    lload_1
         // 1:    fcmpg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "?uI(U@w";
      char char0 = 'q';
      Utility.fillup("?uI(U@w", 42, false, 'q');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-56);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 496, (-2693));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.isSet(32, 72);
      byte[] byteArray0 = Utility.decode("+%Zmo73q~-", false);
      Utility.compactClassName("+%Zmo73q~-");
      int int0 = (-681);
      Utility.setBit((-681), 32);
      Utility.classOrInterface((-681));
      int int1 = 16;
      Utility.setBit(196, 16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (-681));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)42;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(201, (-4286));
      constantArray0[0] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, 1723, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "88888888888888888888888888888888888888888888888888888888888888888888871";
      try { 
        Utility.typeOfSignature("88888888888888888888888888888888888888888888888888888888888888888888871");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 88888888888888888888888888888888888888888888888888888888888888888888871
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?me}`F~G#");
      Utility.convertString("?me}`F~G#");
      byte[] byteArray0 = Utility.decode("?me}`F~G#", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      int int0 = (-2128);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 86, (-2128), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      Utility.typeOfSignature("ZNZ[b");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ZNZ[b", "{java.lang.Object@74aaa150, java.lang.Object@55f3d207, java.lang.Object@211d7204, java.lang.Object@5ce8f9f4, java.lang.Object@7de96318, java.lang.Object@3641e548, java.lang.Object@7c862cd6}", "{java.lang.Object@74aaa150, java.lang.Object@55f3d207, java.lang.Object@211d7204, java.lang.Object@5ce8f9f4, java.lang.Object@7de96318, java.lang.Object@3641e548, java.lang.Object@7c862cd6}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ZNZ[b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit((-1791582944), (-1791582944));
      String string0 = "$ ";
      boolean boolean0 = true;
      try { 
        Utility.decode("$ ", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "@";
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "2.=Je6E),\\D8K";
      try { 
        Utility.typeOfSignature("2.=Je6E),D8K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2.=Je6E),D8K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A^Aa?F^{t*69|^,I0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A^Aa?F^{t*69|^,I0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("]BHv5l!N?A", false);
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(54, 1747);
      Constant constant0 = constantFieldref0.copy();
      constantArray0[0] = constant0;
      ConstantClass constantClass0 = new ConstantClass((-2942));
      constantArray0[1] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      ConstantPool constantPool2 = constantPool0.copy();
      constantPool2.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool2, (-425), (-2942), true);
      assertArrayEquals(new byte[] {(byte)93, (byte)66, (byte)72, (byte)118, (byte)53, (byte)108, (byte)33, (byte)78, (byte)63, (byte)65}, byteArray0);
      assertEquals("0:    dup2_x1\n1:    lstore_3\n2:    dstore_1\n3:    fneg\n4:    saload\n5:    idiv\n6:    lload_3\n7:    astore_3\n8:    lstore_0\n9:    lstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)79, 80, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)114);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = " ";
      Utility.replace(" ", " ", " ");
      Utility.compactClassName(" ", " ", false);
      try { 
        Utility.typeOfSignature("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "L[GxfA.'lC}EfD";
      try { 
        Utility.methodSignatureReturnType("L[GxfA.'lC}EfD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L[GxfA.'lC}EfD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6U1U");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("if_icmple", false);
      assertEquals("if_icmple", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-45), (byte) (-111));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-111));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("i2b", string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      String string0 = "U6$lZ";
      try { 
        Utility.typeOfSignature("U6$lZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U6$lZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.format(90, 90, true, 'y');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-58);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (int) (byte) (-10));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 53310. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.fillup("}BA#m\"E?/n`TVr#~", 89, true, 'y');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-31);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-31));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-31), 82);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType((byte) (-31), 16384);
      constantArray0[2] = (Constant) constantNameAndType2;
      ConstantString constantString0 = new ConstantString((byte)63);
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1493, (int) (byte) (-31), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "QKpq9(a;";
      Utility.compactClassName("QKpq9(a;", "QKpq9(a;", true);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = (Object) "QKpq9(a;";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.getSignature("QKpq9(a;");
      try { 
        Utility.typeOfSignature("$q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte)18;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("/kH^_>pa2&7");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("52iuMxQ[AuYz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 52iuMxQ[AuYz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.convertString("zrN6LtF$~U~oN^%B");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "zrN6LtF$~U~oN^%B";
      stringArray0[1] = "%fL}+t8U%\"e,,";
      stringArray0[2] = "zrN6LtF$~U~oN^%B";
      stringArray0[3] = "zrN6LtF$~U~oN^%B";
      stringArray0[4] = "zrN6LtF$~U~oN^%B";
      stringArray0[5] = "zrN6LtF$~U~oN^%B";
      stringArray0[6] = "zrN6LtF$~U~oN^%B";
      Utility.methodTypeToSignature("zrN6LtF$~U~oN^%B", stringArray0);
      Utility.convertString("zrN6LtF$~U~oN^%B");
      Utility.convertString("putstatic");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-110);
      byte byte0 = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-94);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)3;
      byte byte1 = (byte)97;
      byteArray0[6] = (byte)97;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 228, (int) (byte)97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)115;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("double");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2523, 2523, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "??N1:_^`G8nqs[:";
      try { 
        Utility.typeOfSignature("??N1:_^`G8nqs[:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ??N1:_^`G8nqs[:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.accessToString(85);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-102);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, 214);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokevirtual");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dreturn");
      Utility.typeOfSignature("Bck}rWIg_mx}v>KRO:O");
      Utility.typeOfSignature("Bck}rWIg_mx}v>KRO:O");
      Utility.classOrInterface((byte)8);
      Utility.searchOpcode("class");
      try { 
        Utility.methodSignatureReturnType("jsr_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "CONSTANT_InvokeDynamic";
      Utility.typeOfSignature("CONSTANT_InvokeDynamic");
      try { 
        Utility.typeOfMethodSignature("CONSTANT_InvokeDynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_InvokeDynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.accessToString((-383), false);
      assertEquals("public transient interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)45;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte)59;
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte) (-109);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-109), 7);
      assertEquals("0:    aload_3\n1:    iaload\n2:    iaload\n3:    istore_0\n4:    istore_0\n5:    iaload\n6:    i2s\n", string1);
      
      short short0 = Utility.searchOpcode("\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("-r=Z;Ce");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(dataInputStream0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)81;
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, 2048);
      Utility.convertString("iushr");
      Utility.getSignature("2:    fastore\n");
      try { 
        Utility.methodSignatureReturnType("ior", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ior'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RrB'=2{B~C)");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "Illegal type: ";
      Utility.searchOpcode("Illegal type: ");
      String string1 = "3*D6mYFW`wlT9";
      try { 
        Utility.typeOfSignature("3*D6mYFW`wlT9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3*D6mYFW`wlT9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.isSet(157, 157);
      boolean boolean0 = Utility.isSet(157, 157);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-127);
      byteArray0[0] = (byte)28;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-61);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.classOrInterface((-61));
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "H";
      try { 
        Utility.methodSignatureReturnType("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "%Z6@:XL}:T3D";
      Utility.fillup("%Z6@:XL}:T3D", 40, true, '\\');
      Utility.clearBit(14, 40);
      String string1 = "._7nZ\"xH6$Gy:_s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tableswitch");
      Utility.compactClassName("._7nZ\"xH6$Gy:_s", false);
      Utility.isSet(1187, 40);
      String string2 = "P4&3v]_2Y|9RzK";
      try { 
        Utility.typeOfSignature("P4&3v]_2Y|9RzK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P4&3v]_2Y|9RzK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "0G.kvvcXI8b'";
      try { 
        Utility.typeOfSignature("0G.kvvcXI8b'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0G.kvvcXI8b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)39;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)33;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)34;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "F=%HpIjy,M~$4 KXq@";
      Utility.compactClassName("F=%HpIjy,M~$4 KXq@", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(3, 3, false, 'b');
      String string1 = "Dont call getValueByte() on a non BYTE ElementValue";
      Utility.getSignature("Dont call getValueByte() on a non BYTE ElementValue");
      Utility.accessToString(65, false);
      // Undeclared exception!
      try { 
        Utility.decode("F=%HpIjy,M~$4 KXq@", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4 \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)26);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("iload_0", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iload_0";
      stringArray0[1] = "dgS/o&#},>,xF{#";
      stringArray0[2] = "dgS/o&#},>,xF{#";
      stringArray0[3] = "dgS/o&#},>,xF{#";
      stringArray0[4] = "iload_0";
      stringArray0[5] = "dgS/o&#},>,xF{#";
      String string1 = Utility.methodTypeToSignature("dgS/o&#},>,xF{#", stringArray0);
      assertEquals("(Liload_0;LdgS/o&#},>,xF{#;LdgS/o&#},>,xF{#;LdgS/o&#},>,xF{#;Liload_0;LdgS/o&#},>,xF{#;)LdgS/o&#},>,xF{#;", string1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "goto";
      Utility.methodTypeToSignature("goto", stringArray0);
      Utility.methodSignatureToString("(Lgoto;)Lgoto;", "&", "&", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-116), (-3448));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 74;
      Utility.isSet(74, (-1377));
      String string0 = "JE.YdbXK9fo";
      Utility.searchOpcode("JE.YdbXK9fo");
      String string1 = "Lm<dGWZ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lm<dGWZ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lm<dGWZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("c('Z8u", "by@P}z^4", false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "by@P}z^4";
      stringArray0[1] = "c('Z8u";
      stringArray0[2] = "c('Z8u";
      Utility.methodTypeToSignature("c('Z8u", stringArray0);
      Utility.methodSignatureArgumentTypes("(Lby@P}z^4;Lc('Z8u;Lc('Z8u;)Lc('Z8u;");
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("c('Z8u", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c('Z8u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.format(465, 465, true, '_');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-101);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-101);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-263), 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iload\t\t%149
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = "Qf7wb F48cN{Vy)P";
      Utility.compactClassName("Qf7wb F48cN{Vy)P");
      try { 
        Utility.methodSignatureReturnType("Qf7wb F48cN{Vy)P", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)62;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-1355.3F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)62, (byte) (-74));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, 148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42046. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.compactClassName("Sensitive");
      Utility.accessToString((-2236), true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("lreturn");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Sensitive";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "Sensitive";
      objectArray0[3] = (Object) "Sensitive";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "Sensitive";
      objectArray0[7] = (Object) "Sensitive";
      PrintWriter printWriter0 = mockPrintWriter0.format("lreturn", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      try { 
        Utility.typeOfSignature("N}*#U46Y{8x;PLW^@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N}*#U46Y{8x;PLW^@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G*e\"TmH6)'Iu4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G*e\"TmH6)'Iu4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ret");
      Utility.accessToString(991, true);
      Utility.accessToString(175, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)53;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.classOrInterface(102);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.accessToString(197, false);
      Utility.compactClassName("public protected volatile transient", "public protected volatile transient", false);
      Utility.format(197, 197, false, 'H');
      try { 
        Utility.typeOfSignature("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH197");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH197
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)56;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte) (-98);
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-128), (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "Exceptions: ";
      Utility.convertString("Exceptions: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("XXs6~%)w))v4L6u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XXs6~%)w))v4L6u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)2;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-114);
      byte byte0 = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)31;
      byte byte1 = (byte) (-19);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)10;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte)31, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.classOrInterface(2717);
      Utility.isSet(2717, 2717);
      Utility.compactClassName("fw~0ueq_JJ.N%y;", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)65;
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-373), 107);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[2] = constant0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2657, 512);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong(316L);
      constantArray0[4] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("interface");
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(107);
      constantArray0[6] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2175), 106);
      constantArray0[7] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, (int) (byte)117, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      String string0 = Utility.getSignature("Fq x");
      assertEquals("LFq;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)112;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2134800145), (-2980));
      assertEquals("0:    <illegal opcode>\n1:    fload_3\n2:    if_icmpne\t\t#-14080\n5:    ishl\n6:    lload_0\n7:    irem\n", string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-128);
      byteArray0[0] = (byte) (-128);
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-128), 1);
      Utility.printArray((Object[]) null, false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "~zZR";
      String string1 = "H)/[5:I!|pf\"]0=@6jH";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("~zZR", "H)/[5:I!|pf\"]0=@6jH", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H)/[5:I!|pf\"]0=@6jH";
      Utility.methodTypeToSignature("~zZR", stringArray0);
      Utility.isSet((-1704), 1056);
      String string2 = "Tf,+";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tf,+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tf,+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.convertString("vr4vch\n");
      String string0 = null;
      String string1 = "volatile";
      String string2 = ")";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "volatile", ")");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.accessToString(5752);
      Utility.classOrInterface(5752);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)106;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("fmul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fmul'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)93;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "F:";
      Utility.typeOfSignature("F:");
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1097029359), (byte) (-73));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      String string1 = "athrow";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("athrow");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)94, (-1097029359));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(4);
      constantArray0[3] = (Constant) constantClass0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, (byte)6);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.accessToString(16384, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, (int) (byte) (-84), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString(171);
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "^sk2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ^sk2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-25);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, 1643, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "%9W#f^Rg.)gZm/h4_S";
      Utility.decode("%9W#f^Rg.)gZm/h4_S", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)64;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = ", end_pc = ";
      try { 
        Utility.typeOfSignature(", end_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , end_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "\"2]GWC~K?F";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"2]GWC~K?F");
      try { 
        Utility.methodSignatureReturnType("MB", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.accessToString((-1262));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.clearBit((-210), (-210));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-127);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$f8$81", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit((-3260), 13);
      Utility.getSignature("/aw&eFW3xj1mi~q");
      Utility.compactClassName("/aw&eFW3xj1mi~q", false);
      Utility.setBit(6, 1537);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "L/aw&eFW3xj1mi~q;";
      objectArray0[1] = (Object) "/aw&eFW3xj1mi~q";
      objectArray0[2] = (Object) ".aw&eFW3xj1mi~q";
      objectArray0[3] = (Object) "L/aw&eFW3xj1mi~q;";
      objectArray0[4] = (Object) "L/aw&eFW3xj1mi~q;";
      objectArray0[5] = (Object) "/aw&eFW3xj1mi~q";
      objectArray0[6] = (Object) "L/aw&eFW3xj1mi~q;";
      objectArray0[7] = (Object) ".aw&eFW3xj1mi~q";
      Utility.printArray(objectArray0, false, true);
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature(".aw&eFW3xj1mi~q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .aw&eFW3xj1mi~q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "%9W#f^Rg.)gZm/h4_S";
      Utility.decode("%9W#f^Rg.)gZm/h4_S", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)71;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "int");
      Utility.format(1138, (-6163), true, 'F');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-97);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1, 2531, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    castore
         // 2:    dstore_0
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+x'\"Rz-]}\u0003=+Jgq=");
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("+x'\"Rz-]}\u0003=+Jgq=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x'\"Rz-]}\u0003=+Jgq=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-41);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = null;
      String string1 = "SENSITIVE";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, "SENSITIVE", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      Utility.setBit(92, 92);
      try { 
        Utility.typeOfSignature("=3%yopO9)0Zej&QG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =3%yopO9)0Zej&QG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.accessToString(2568);
      Utility.fillup("L", 172, true, 'A');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">kPL+q&9-78^Eqi", "static interface strictfp", "static interface strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >kPL+q&9-78^Eqi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[s*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [s*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("DyhkHOoRN", stringArray0);
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.typeOfMethodSignature("()LDyhkHOoRN;");
      Utility.printArray((Object[]) stringArray0, false);
      try { 
        Utility.typeOfSignature("e^QQ-`XoY*v$]Q-a*('");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e^QQ-`XoY*v$]Q-a*('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-26), 456);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)79);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("if_acmpeq\t\t#20472", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-33);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-33), 66, true);
      Utility.classOrInterface((-1401));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t*AdrABpn)#ow");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("0:    aload_2\n1:    <illegal opcode>\n", "F]s5}+khx#0zPwH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // F]s5}+khx#0zPwH
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":%^]D'-@");
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6U1U");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("if_icmple", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-45), (byte) (-111));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-111));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.convertString("getstatic");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)7;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("getstatic", "wK", true);
      Utility.methodSignatureReturnType("J56j[F@veU3yHvd", true);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[5];
      DataInput dataInput0 = null;
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "SimpleElementValue doesnt know how to write out type ";
      Utility.typeOfSignature("SimpleElementValue doesnt know how to write out type ");
      int int0 = (-505);
      Utility.setBit((byte)9, (-505));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("Dont call getValueByte() on a non BYTE ElementValue", true);
      Utility.accessToString(1924);
      // Undeclared exception!
      try { 
        Utility.signatureToString("5u' Ur#r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5u' Ur#r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      Utility.typeOfSignature("Illegally nested brackets:");
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = new ConstantString((byte)10);
      constantArray0[0] = (Constant) constantString0;
      byte[] byteArray1 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.methodSignatureReturnType("BGY}z", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "byte";
      objectArray0[1] = (Object) "byte";
      Utility.printArray(objectArray0, true);
      String string0 = "UqDVn";
      try { 
        Utility.methodSignatureReturnType("UqDVn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UqDVn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)115;
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)48, (byte) (-49));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("monitorenter");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-49));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1608), (int) (byte)48, true);
      assertEquals("0:    <illegal opcode>\n1:    aconst_null\n2:    faload\n3:    lmul\n4:    <illegal opcode>\n5:    drem\n", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.isSet(157, 157);
      Utility.isSet(157, 157);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 43, false);
      assertEquals("0:    goto\t\t#20480\n3:    castore\n", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = ":7Ls9G] rKTm22[3Sj";
      try { 
        Utility.typeOfSignature(":7Ls9G] rKTm22[3Sj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :7Ls9G] rKTm22[3Sj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      stringArray0[5] = "\t\t#";
      Utility.methodTypeToSignature("\t\t#", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte) (-49);
      Utility.compactClassName("(L#;L#;L#;L#;L#;L#;)L#;");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.getSignature("Rw[a[pmsAMw:e;QT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[a[pmsAMw:e;QT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.clearBit((-825), (-825));
      String string0 = "<";
      Utility.convertString("<");
      Utility.getSignature("<");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-88);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      byte byte0 = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)41;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), 8, false);
      Utility.setBit((byte) (-66), (byte)66);
      String string1 = "se<rRq}kq?{_";
      try { 
        Utility.typeOfMethodSignature("se<rRq}kq?{_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: se<rRq}kq?{_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "NzIqmwrX4#n7wLtI%I";
      // Undeclared exception!
      try { 
        Utility.signatureToString("NzIqmwrX4#n7wLtI%I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NzIqmwrX4#n7wLtI%I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.typeOfSignature("Dont call getValueDouble() on a non DOUBLE ElementValue");
      try { 
        Utility.methodSignatureReturnType("Dont call getValueDouble() on a non DOUBLE ElementValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` on a non DOUBLE ElementValue'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.typeOfSignature("TV wjz?>E,2W-*G-");
      Utility.clearBit(103, 103);
      Utility.isSet((-1), (-2313));
      // Undeclared exception!
      try { 
        Utility.compactClassName("zVOhl~4D!wW+Kd_x6G", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The list of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.compactClassName("LineNumberTable", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)56;
      byte byte0 = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      Utility.toHexString(byteArray0);
      Utility.format((-2606), (byte) (-108), false, '3');
      String string0 = "jsr_w";
      Utility.searchOpcode("jsr_w");
      Utility.isSet((-2606), (-1767));
      Utility.getSignature("-2606");
      try { 
        Utility.methodSignatureReturnType("Qj52]PJg(,lBJnAybW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qj52]PJg(,lBJnAybW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "ZTnAoz`\"Dcwq[PM";
      Utility.signatureToString("ZTnAoz`\"Dcwq[PM", true);
      Utility.methodSignatureReturnType("ZTnAoz`\"Dcwq[PM", true);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("c-0&[s<\u0001hbcDR", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c-0&[s<\u0001hbcDR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.replace("athrow", "u`mJedsW+.>GG<c", "h");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-45);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (int) (byte)2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-623), true);
      String string0 = "S";
      Utility.methodSignatureReturnType("S");
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("public final transient native abstract strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public final transient native abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "KUWO";
      // Undeclared exception!
      try { 
        Utility.signatureToString("KUWO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KUWO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 5;
      Utility.accessToString(5, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("<illegal opcode>", true);
      Utility.format((byte) (-26), (byte) (-26), true, '6');
      try { 
        Utility.typeOfSignature("#=)N:2a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #=)N:2a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-61);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.accessToString((-61), false);
      String string0 = "VY@@=rQNsq;@n@";
      Utility.typeOfSignature("VY@@=rQNsq;@n@");
      try { 
        Utility.typeOfSignature("s&ttI1F:n2t:X, ps)t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s&ttI1F:n2t:X, ps)t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.format(83, 4772, true, 'S');
      Utility.signatureToString("Illegal type: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = "java.lang.";
      File file0 = MockFile.createTempFile("int", "java.lang.");
      String string1 = ", high = ";
      MockFile mockFile0 = new MockFile(file0, ", high = ");
      try { 
        MockFile.createTempFile("Illegal type: ", "aload_3", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "J^Xenm";
      Utility.typeOfSignature("J^Xenm");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("J^Xenm", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J^Xenm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.ExceptionTable";
      Utility.compactClassName("false", "org.apache.bcel.classfile.ExceptionTable", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)82;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)22;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (int) (byte) (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      ConstantPool constantPool0 = null;
      String string0 = "invokeinterface";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokeinterface");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, 67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "E_`Vs";
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E_`Vs", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E_`Vs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("hzl^fPReV2%<(F");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.accessToString((int) (byte)78, false);
      assertEquals("private protected static volatile", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("istore_2", string2);
      
      String string3 = Utility.convertString("vSQc%5~yqV>32 cM");
      assertEquals("vSQc%5~yqV>32 cM", string3);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("O%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-30);
      byte byte0 = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)107;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "R%zDfP8~fc:bUDu8~O";
      Utility.fillup("R%zDfP8~fc:bUDu8~O", 0, false, 'f');
      try { 
        Utility.methodSignatureReturnType("R%zDfP8~fc:bUDu8~O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R%zDfP8~fc:bUDu8~O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.compactClassName("org.apache.commons.io.filefilter.WildcardFileFilter", "", true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "org.apache.commons.io.filefilter.WildcardFileFilter";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("nz", "org.apache.commons.io.filefilter.WildcardFileFilter", "(|p'MO`>!8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "9~*7|CV05vHHFf?";
      try { 
        Utility.typeOfSignature("9~*7|CV05vHHFf?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9~*7|CV05vHHFf?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)109;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "lsub";
      try { 
        Utility.typeOfSignature("lsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "[]";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.accessToString((-4435));
      assertEquals("public protected static synchronized transient interface abstract strictfp annotation enum", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "public protected static synchronized transient interface abstract strictfp annotation enum";
      stringArray0[3] = "public protected static synchronized transient interface abstract strictfp annotation enum";
      stringArray0[4] = "public protected static synchronized transient interface abstract strictfp annotation enum";
      stringArray0[5] = "short";
      stringArray0[6] = "public protected static synchronized transient interface abstract strictfp annotation enum";
      stringArray0[7] = "short";
      stringArray0[8] = "public protected static synchronized transient interface abstract strictfp annotation enum";
      String string1 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("(SSLpublic;Lpublic;Lpublic;SLpublic;SLpublic;)S", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.setBit(3326, 3386);
      Utility.getSignature("C 1X^L)");
      Utility.clearBit(74, (-837));
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "LC;";
      objectArray0[2] = (Object) "LC;";
      objectArray0[3] = (Object) "LC;";
      objectArray0[4] = (Object) "C 1X^L)";
      Utility.printArray(objectArray0, false, false);
      Utility.convertString("C 1X^L)");
      Utility.fillup("LC;", 181, false, 'h');
      Utility.fillup("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhLC;", 1493, false, 'h');
      Utility.convertString(", signature_index = ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(", signature_index = ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21227. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(anonymous)");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(anonymous)", "rQO@~_/)]ox2j'", "<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)118;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 122, 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.compactClassName(";", ";", true);
      assertEquals("", string0);
      
      Utility.compactClassName("");
      String string1 = Utility.compactClassName("\t(wide)", true);
      assertEquals("\t(wide)", string1);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\t(wide)";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "\t(wide)";
      objectArray0[5] = (Object) "\t(wide)";
      objectArray0[6] = (Object) ";";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      String string2 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l";
      stringArray0[1] = "l";
      stringArray0[2] = "l";
      stringArray0[3] = "l";
      stringArray0[4] = "'k";
      String string0 = Utility.methodTypeToSignature("l", stringArray0);
      assertEquals("(Ll;Ll;Ll;Ll;L'k;)Ll;", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\"l\", \"l\", \"l\", \"l\", \"'k\"}", string1);
      
      String string2 = Utility.accessToString(3918, true);
      assertEquals("private protected static volatile native abstract strictfp", string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-93);
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("a4$ec$C$A$a3", string3);
      
      Utility.accessToString((int) (byte) (-20), false);
      Utility.compactClassName("l", "hVVafIbxKN28G", false);
      String string4 = Utility.convertString("{\"l\", \"l\", \"l\", \"l\", \"'k\"}");
      assertEquals("{\\\"l\\\", \\\"l\\\", \\\"l\\\", \\\"l\\\", \\\"\\'k\\\"}", string4);
      
      byte[] byteArray1 = Utility.decode("annotation", false);
      assertArrayEquals(new byte[] {(byte)97, (byte)110, (byte)110, (byte)111, (byte)116, (byte)97, (byte)116, (byte)105, (byte)111, (byte)110}, byteArray1);
      
      String string5 = Utility.compactClassName("strictfp", "invokeinterface", true);
      assertEquals("strictfp", string5);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7;5n/y'w|b,";
      stringArray0[1] = "g";
      Utility.methodTypeToSignature("g", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(L7;5n/y'w|b,;Lg;)Lg;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5n/y'w|b,;Lg;)Lg;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.accessToString((-833), true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uF$d-'I%W~Y=:~");
      Utility.convertString("public private protected static final transient abstract strictfp synthetic annotation enum");
      String string0 = "Y$d_7<g7%QSu/";
      try { 
        Utility.methodSignatureReturnType("Y$d_7<g7%QSu/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y$d_7<g7%QSu/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)87;
      byte byte0 = (byte)60;
      byteArray0[7] = (byte)60;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 83, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = Utility.setBit(3326, 3386);
      assertEquals(67112190, int0);
      
      String string0 = Utility.getSignature("C 1X^L)");
      assertEquals("LC;", string0);
      
      int int1 = Utility.clearBit(74, (-837));
      assertEquals(74, int1);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "LC;";
      objectArray0[2] = (Object) "LC;";
      objectArray0[3] = (Object) "LC;";
      objectArray0[4] = (Object) "C 1X^L)";
      Utility.printArray(objectArray0, false, false);
      Utility.convertString("C 1X^L)");
      String string1 = Utility.fillup("LC;", 181, false, 'h');
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhLC;", string1);
      
      Utility.fillup("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhLC;", 1492, false, 'h');
      String string2 = Utility.convertString(", signature_index = ");
      assertEquals(", signature_index = ", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("swap", string3);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!jCit`Y&]");
      Utility.isSet((-3120), (-2154));
      Utility.isJavaIdentifierPart('Y');
      Utility.replace("!jCit`Y&]", "istore_2", "istore_2");
      // Undeclared exception!
      try { 
        Utility.signatureToString("!jCit`Y&]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!jCit`Y&]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      Utility.printArray(objectArray0, true, true);
      int int0 = 127;
      Utility.accessToString(127, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      Utility.compactClassName("null", false);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("null", stringArray0);
      assertEquals("()Lnull;", string0);
      
      String string1 = Utility.methodSignatureToString("()Lnull;", "null", "null", false);
      assertEquals("null null null()", string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.isSet(131, 3);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.fillup("2)(jP", (-222), true, 'M');
      Utility.compactClassName("YfPUb4!\"");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "hG)DKNR/VTR";
      stringArray0[1] = "2)(jP";
      stringArray0[2] = "&%On8'|T";
      stringArray0[3] = "2)(jP";
      stringArray0[4] = "5FY],";
      stringArray0[5] = "YfPUb4!\"";
      stringArray0[6] = "YfPUb4!\"";
      stringArray0[7] = "k8 D[1s~T";
      stringArray0[8] = "2)(jP";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("YfPUb4!\"", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[1s~T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-13), (int) (byte) (-48));
      Utility.getSignature("0:    <illegal opcode>\n1:    nop\n2:    <illegal opcode>\n3:    lstore_2\n4:    ishr\n5:    castore\n6:    arraylength\n");
      Utility.signatureToString("L0:;");
      try { 
        Utility.methodSignatureReturnType("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\t\t#";
      stringArray0[1] = "\t\t#";
      stringArray0[2] = "\t\t#";
      stringArray0[3] = "\t\t#";
      stringArray0[4] = "\t\t#";
      stringArray0[5] = "\t\t#";
      String string0 = Utility.methodTypeToSignature("\t\t#", stringArray0);
      assertEquals("(L#;L#;L#;L#;L#;L#;)L#;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte) (-49);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("56 20 12 c4 00 03 ca 2f cf", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.signatureToString("FQ'3S", false);
      try { 
        Utility.methodSignatureArgumentTypes("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = Utility.setBit(1, 139);
      assertEquals(2049, int0);
      
      Utility.printArray((Object[]) null, true);
      Utility.methodTypeToSignature("impdep2", (String[]) null);
      String string0 = Utility.methodTypeToSignature("V", (String[]) null);
      assertEquals("()LV;", string0);
      
      String string1 = Utility.classOrInterface(60);
      assertEquals("class", string1);
      
      String string2 = Utility.methodSignatureReturnType("V", true);
      assertEquals("void", string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-81);
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("b3 f7 29 c5 af af", string3);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = 85;
      boolean boolean0 = true;
      Utility.accessToString(85, true);
      Utility.compactClassName("public protected final volatile", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-112);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("6 fVlA", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-19);
      byteArray0[0] = (byte) (-19);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d2i");
      byte byte1 = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byte byte2 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      int int0 = (-1591);
      int int1 = 706;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1591), 706, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Utility.signatureToString("C':qr=La", false);
      assertEquals("char", string0);
      
      String string1 = Utility.format((-5906), 720, false, 'V');
      assertEqualsstring1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface((-1111));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)34;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte) (-55);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.convertString("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "2E";
      stringArray0[2] = "";
      stringArray0[3] = "=`} YRYw";
      stringArray0[4] = "";
      stringArray0[5] = "2E";
      stringArray0[6] = "{, , , , java.lang.Object@3aecddeb, null, , }";
      String string1 = Utility.methodTypeToSignature("{, , , , java.lang.Object@3aecddeb, null, , }", stringArray0);
      assertEquals("(L;L2E;L;L=`};L;L2E;L{,;)L{,;", string1);
      
      String string2 = Utility.getSignature("rY");
      assertEquals("LrY;", string2);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "putStatic";
      String string1 = "{ssu";
      Utility.replace("putStatic", "putStatic", "{ssu");
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.compactClassName("kDB6", "kDB6", false);
      Utility.accessToString(47);
      Utility.classOrInterface(47);
      int int0 = 34;
      Utility.fillup("JH}VV+g:C_6<y[)<e", 34, false, '?');
      try { 
        Utility.typeOfMethodSignature("U#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte) (-48));
      assertEquals("1:    lload_1\n2:    <illegal opcode>\n3:    sastore\n4:    ishr\n5:    castore\n6:    arraylength\n", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.clearBit((-1460), (-1460));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)79;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-3);
      Utility.toHexString(byteArray0);
      int int0 = 67;
      Utility.clearBit(67, (byte) (-3));
      Utility.encode(byteArray0, true);
      String string0 = "f2l";
      try { 
        Utility.methodSignatureArgumentTypes("f2l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      Utility.compactClassName(", end_pc = ");
      String string0 = "L{,;V";
      Utility.compactClassName("Z]N\"KJ*},~M(", "L{,;V", false);
      Utility.replace(", end_pc = ", "Only element values of type annotation can be built with this ctor - type specified: ", ", end_pc = ");
      int int0 = (-1011);
      Utility.accessToString((-1011));
      Utility.searchOpcode("boolean");
      try { 
        Utility.typeOfMethodSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("YFgx|(*Fxh(Wp", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)86;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)55;
      Utility.encode(byteArray0, false);
      Utility.accessToString(2080);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("YFgx|(*Fxh(Wp", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YFgx|(*Fxh(Wp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.convertString("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "f2l";
      stringArray0[2] = "";
      stringArray0[3] = "=`} YRYw";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "{, , , , java.lang.Object@dd8230a, , , }";
      String string0 = Utility.methodTypeToSignature("{, , , , java.lang.Object@dd8230a, , , }", stringArray0);
      assertEquals("(L;Lf2l;L;L=`};L;L;L{,;)L{,;", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.isSet(626, 626);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)0;
      MockFile mockFile0 = new MockFile("", "");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.fillup("land", (-571), true, 'q');
      try { 
        Utility.typeOfSignature("land");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: land
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("##R+|a`(,##wA~u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `##R+|a`(,##wA~u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MockFile mockFile0 = new MockFile("of", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(bufferedOutputStream0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(158, true);
      MockFile mockFile0 = new MockFile("@{p)kOpDWx4eZ7");
      MockFile mockFile1 = new MockFile(mockFile0, "(1,Hi0H~L}");
      String string0 = "h";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "h");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // h
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "KR|_4N";
      try { 
        Utility.typeOfSignature("KR|_4N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KR|_4N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rm)z^<v${8.]<");
      Utility.accessToString((-5731), true);
      byte[] byteArray0 = Utility.decode("public protected static final transient native strictfp annotation enum", false);
      Utility.compactClassName("rm)z^<v${8.]<", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2932), (-5731));
      Utility.convertString("0:    irem\n1:    lneg\n2:    fadd\n3:    idiv\n4:    lmul\n5:    dadd\n6:    lload_2\n7:    irem\n8:    frem\n9:    ddiv\n10:   ineg\n11:   lsub\n12:   dadd\n13:   ineg\n14:   lsub\n15:   isub\n16:   lload_2\n17:   drem\n18:   ineg\n19:   ladd\n20:   ineg\n21:   lmul\n22:   dadd\n23:   lload_2\n24:   fsub\n25:   lmul\n26:   fdiv\n27:   ladd\n28:   idiv\n29:   lload_2\n30:   ineg\n31:   frem\n32:   ladd\n33:   fdiv\n34:   drem\n35:   lmul\n36:   lsub\n37:   fdiv\n38:   ineg\n39:   lload_2\n40:   fdiv\n41:   ladd\n42:   ineg\n43:   lmul\n44:   fneg\n45:   lsub\n46:   lload_2\n47:   drem\n48:   ineg\n49:   frem\n50:   lmul\n51:   dadd\n52:   ineg\n53:   fsub\n54:   irem\n55:   lload_2\n56:   ladd\n57:   fdiv\n58:   fdiv\n59:   ddiv\n60:   ineg\n61:   ladd\n62:   ineg\n63:   lmul\n64:   ddiv\n65:   fdiv\n66:   lload_2\n67:   lsub\n68:   fdiv\n69:   lneg\n70:   ldiv\n");
      Utility.compactClassName("b.j\"k*O:^2)E", "Illegally nested brackets:", false);
      Utility.compactClassName("}Vt=l8#ON&w.", true);
      Utility.compactClassName("}Vt=l8#ON&w.", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Illegally nested brackets:";
      objectArray0[1] = (Object) "0:    irem\n1:    lneg\n2:    fadd\n3:    idiv\n4:    lmul\n5:    dadd\n6:    lload_2\n7:    irem\n8:    frem\n9:    ddiv\n10:   ineg\n11:   lsub\n12:   dadd\n13:   ineg\n14:   lsub\n15:   isub\n16:   lload_2\n17:   drem\n18:   ineg\n19:   ladd\n20:   ineg\n21:   lmul\n22:   dadd\n23:   lload_2\n24:   fsub\n25:   lmul\n26:   fdiv\n27:   ladd\n28:   idiv\n29:   lload_2\n30:   ineg\n31:   frem\n32:   ladd\n33:   fdiv\n34:   drem\n35:   lmul\n36:   lsub\n37:   fdiv\n38:   ineg\n39:   lload_2\n40:   fdiv\n41:   ladd\n42:   ineg\n43:   lmul\n44:   fneg\n45:   lsub\n46:   lload_2\n47:   drem\n48:   ineg\n49:   frem\n50:   lmul\n51:   dadd\n52:   ineg\n53:   fsub\n54:   irem\n55:   lload_2\n56:   ladd\n57:   fdiv\n58:   fdiv\n59:   ddiv\n60:   ineg\n61:   ladd\n62:   ineg\n63:   lmul\n64:   ddiv\n65:   fdiv\n66:   lload_2\n67:   lsub\n68:   fdiv\n69:   lneg\n70:   ldiv\n";
      Utility.printArray(objectArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-86);
      byte byte0 = (byte) (-58);
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte)102;
      Utility.toHexString(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 88, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) "java.lang.public protected final volatile";
      objectArray0[5] = (Object) "java.lang.public protected final volatile";
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) "java.lang.public protected final volatile";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "java.lang.public protected final volatile", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.clearBit((-1651), (-1651));
      String string0 = null;
      String string1 = ">^I1z+r]vN=}a,*5";
      boolean boolean0 = false;
      Method method0 = null;
      Method method1 = null;
      try {
        method1 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-571), true);
      String string0 = " (";
      try { 
        Utility.methodSignatureReturnType(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` ('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "!N=;p\"S2uK\">";
      Utility.searchOpcode("!N=;p\"S2uK\">");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("@UZ\"!n)^9)Y8");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.compactClassName("ishl");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ishl", "multianewarray", "ishl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ishl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-44);
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte) (-48));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1:    lload_1\n2:    <illegal opcode>\n3:    sastore\n4:    ishr\n5:    castore\n6:    <illegal opcode>\n";
      Utility.methodTypeToSignature("@!e]GL~+t", stringArray0);
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
