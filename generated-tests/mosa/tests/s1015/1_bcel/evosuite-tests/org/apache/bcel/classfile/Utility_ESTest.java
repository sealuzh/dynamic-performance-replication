/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:47:26 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("W)D]dN!<9Ut/LYf>Vyr");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("GPXNUMP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GPXNUMP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U/`,9%*-@$ddjS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U/`,9%*-@$ddjS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2421, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)19;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 13 00 00 00 00 00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L$ G>k+9@C+FB\"G;W5PD", "L$ G>k+9@C+FB\"G;W5PD", "L$ G>k+9@C+FB\"G;W5PD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L$ G>k+9@C+FB\"G;W5PD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.replace("IYcg{", "IYcg{", "IYcg{");
      assertEquals("IYcg{", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.convertString("W)D]dN!<9Ut/LYf>Vyr");
      assertEquals("W)D]dN!<9Ut/LYf>Vyr", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('c');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "fAH_U/[TU<Yl16";
      // Undeclared exception!
      try { 
        Utility.getSignature("fAH_U/[TU<Yl16");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[TU<Yl16
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.getSignature("Lq f>+9@C+FB\"G;W5PD");
      assertEquals("LLq;", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "short";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("short", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.classOrInterface(91);
      assertEquals("class", string0);
      
      String string1 = Utility.format(91, 91, true, 'Y');
      assertEquals("91YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I");
      assertEquals((byte)10, byte0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "I";
      Object object0 = new Object();
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"I\", null, null, null, null, null, null", string0);
      
      short short0 = Utility.searchOpcode("kp6^<>lH");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("=V*C{iYFBrrT9L_", (String[]) null);
      assertEquals("()L=V*C{iYFBrrT9L_;", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("()L=V*C{iYFBrrT9L_;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("short", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = Utility.clearBit((-4671), 95);
      assertEquals(2147478977, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Utility.decode("LOEkW4\"YDvIv'&,9;V", false);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(123, 123);
      assertEquals(123, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.classOrInterface((-3397));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = Utility.setBit((-1118), (-1118));
      assertEquals((-1114), int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.compactClassName("cP9pz_dsYB_*!?", "cP9pz_dsYB_*!?", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      short short0 = Utility.searchOpcode("The prefix must not be null");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "KB>l{jKa|y";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("KB>l{jKa|y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.typeOfSignature("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[2] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "5Kg%F";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5Kg%F");
      try { 
        Utility.typeOfSignature("5Kg%F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5Kg%F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "I";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("I");
      try { 
        Utility.typeOfSignature("05lw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 05lw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.typeOfSignature("94W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 94W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*.b]QfGYiLw_v|}TTbG");
      Utility.typeOfSignature("F98TcNORtO]>G@N^");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      Utility.methodSignatureReturnType
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.convertString("=HNQ^diO");
      try { 
        Utility.typeOfSignature("=HNQ^diO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =HNQ^diO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.convertString("[L4.L?F={(");
      // Undeclared exception!
      try { 
        Utility.getSignature("[L4.L?F={(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [L4.L?F={(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L$ f>+9@C+FB\"G;W5PD");
      assertEquals("$ f>+9@C+FB\"G", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[L4.L?F={(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L4.L?F={(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "3q_f$nK_";
      try { 
        Utility.typeOfSignature("3q_f$nK_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3q_f$nK_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      try { 
        Utility.typeOfSignature("/l=Ey~^o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /l=Ey~^o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.convertString("g| SzWe)eI,% ");
      assertEquals("g| SzWe)eI,% ", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      Utility.codeToString(byteArray0, constantPool0, (-526), 166);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-526), (-526));
      assertEquals("0:    fstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3610, 3610);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, 85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)95;
      byteArray0[1] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-112));
      assertEquals("0:    nop\n1:    d2f\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('n');
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString(57, true);
      assertEquals("public static final", string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)64;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)64);
      assertEquals("0:    nop\n1:    nop\n2:    lstore_1\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.getSignature("U/`,9%*-@$ddjS");
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("U/`,9%*-@$ddjS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U/`,9%*-@$ddjS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, 239, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (-4499));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.compactClassName("Dont call getValueBye() on a non BYTE ElementValue");
      Utility.replace("private pr", ".ZS=s]AxC04RA^z6`4", "$);tRJ@Qma)");
      Utility.typeOfSignature("Dont call getValueBye() on a non BYTE ElementValue");
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorexit'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = true;
      Utility.compactClassName("$-Pgs", "RuntimeVisibleParameterAnnotations", true);
      ConstantString constantString0 = new ConstantString((byte)75);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantString0.clone();
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      try { 
        Utility.methodSignatureReturnType("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-48);
      byteArray0[1] = (byte) (-48);
      String string0 = "+212#k(^hm";
      try { 
        Utility.typeOfSignature("+212#k(^hm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 212#k(^hm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      try { 
        Utility.typeOfSignature(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      try { 
        Utility.typeOfSignature("GPXNUMP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GPXNUMP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = Constants.T_BOOLEAN;
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Rk`ubZkQ@0_W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rk`ubZkQ@0_W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*.b]QfGYiLw_v|}TTbG");
      try { 
        Utility.typeOfSignature("*.b]QfGYiLw_v|}TTbG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .b]QfGYiLw_v|}TTbG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Juz-divzQJ_SoHYTH");
      byte byte0 = Constants.ATTR_UNKNOWN;
      Utility.typeOfSignature("Juz-divzQJ_SoHYTH");
      Utility.typeOfSignature("Juz-divzQJ_SoHYTH");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("ONkIyyp`8g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ONkIyyp`8g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Constants.T_UNKNOWN;
      byte byte1 = Utility.typeOfSignature("[[XXr2eEQWgM>^sFs");
      assertEquals((byte)13, byte1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = null;
      Utility.searchOpcode("putstatic");
      try { 
        Utility.decode("fstore_0", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "KO+";
      try { 
        Utility.typeOfSignature("KO+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KO+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.typeOfSignature("+CQ>XhiL Kkt(l;%");
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CONSTANT_String");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-85), (byte) (-85));
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodref0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-960), (int) (byte)48);
      assertEquals("0:    faload\n", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 2459, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("?Av2|])Mcce");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?Av2|])Mcce
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("W)D]dN!<9Ut/LYf>Vyr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W)D]dN!<9Ut/LYf>Vyr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("XDv(7HhZr>EZ:72");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XDv(7HhZr>EZ:72'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      Utility.convertString("Yf2m7i)E;a@5yo");
      try { 
        Utility.methodSignatureReturnType("Yf2m7i)E;a@5yo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E;a@5yo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("KI*(&/w+qOn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KI*(&/w+qOn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "-lBFQ";
      try { 
        Utility.typeOfSignature("-lBFQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -lBFQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      Utility.accessToString((-514));
      Utility.getSignature("\t\t#");
      Utility.typeOfSignature("L#;");
      try { 
        Utility.typeOfSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@]C$m0UmA$$mDG%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @]C$m0UmA$$mDG%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      Utility.compactClassName("$-PDs", "RuntimeVisibleParameterAnnotations", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-100);
      ConstantString constantString0 = new ConstantString((byte) (-100));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-274), (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "*7";
      try { 
        Utility.typeOfSignature("*7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(" ", (String[]) null);
      assertEquals("()L;", string0);
      
      String string1 = Utility.convertString(" ");
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-34);
      byteArray0[0] = (byte) (-34);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("P)~4(HdJV*P{pw,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P)~4(HdJV*P{pw,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZH$L");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.methodSignatureReturnType("ZH$L");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q$x%O0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q$x%O0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)53;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)85);
      assertEquals("0:    nop\n1:    nop\n2:    saload\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Utility.convertString("L0\"Y?^<a;V");
      assertEquals("L0\\\"Y?^<a;V", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.typeOfSignature("I");
      Utility.typeOfSignature("BootstrapMethods");
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      assertFalse(byte0 == byte1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("!`'`a0\">6G;T/x4$bV", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t$-PDs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t$-PDs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!`'`a0\">6G;T/x4$bV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `'`a0\">6G;T/x4$bV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.typeOfSignature("ONkIyyp`8g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ONkIyyp`8g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Constants.ILLEGAL_OPCODE;
      byte byte0 = Utility.typeOfSignature("SimpleElementValue doesnt know how to write out type ");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.convertString(" methods:\n");
      try { 
        Utility.typeOfMethodSignature(" methods:\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  methods:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = (byte)92;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1174, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, 180);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = ";Vh-87^='q-^a";
      try { 
        Utility.typeOfSignature(";Vh-87^='q-^a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Vh-87^='q-^a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.convertString(" methods:\n");
      String[] stringArray0 = new String[2];
      stringArray0[0] = " methods:\n";
      stringArray0[1] = " methods:\n";
      Utility.replace(" methods:\n", " methods:\n", " methods:\n");
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "%Zmlj4";
      try { 
        Utility.typeOfSignature("%Zmlj4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Zmlj4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)100;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-6027), 512);
      assertEquals("0:    ixor\n1:    isub\n", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2387, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 226, (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte) (-99));
      assertNotNull(string0);
      assertEquals("0:    ifgt\t\t#-25344\n", string0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-99), (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(nJ/}M(}/0U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nJ/}M(}/0U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("KB>l{jKa|y");
      assertNotNull(constantUtf8_0);
      assertEquals("KB>l{jKa|y", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      String string0 = Utility.methodTypeToSignature("=HNQ^diO", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L=HNQ^diO;", string0);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()L=HNQ^diO;");
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("$ped.z,3tiDj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$ped.z,3tiDj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4!@[3OB=vT&HfauOe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4!@[3OB=vT&HfauOe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)19);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)61;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1978, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1:    nop\n2:    istore_2\n3:    nop\n4:    nop\n", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)61, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4794, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      assertEquals((byte)2, byte0);
      
      try { 
        Utility.typeOfSignature("EZ2S/lVlK{vwRA1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EZ2S/lVlK{vwRA1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)81, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)81, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",l2~3");
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("O6uB<aJ|\"'(w+");
      assertNotNull(string0);
      assertEquals("O6uB<aJ|\\\"\\'(w+", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "(''(1=+C'O";
      try { 
        Utility.typeOfSignature("(''(1=+C'O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (''(1=+C'O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'U(Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'U(Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 512, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.convertString(" methods:\n");
      assertNotNull(string0);
      assertEquals(" methods:\\n", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)72;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertEquals("1c 14 ab 51 47 48", string0);
      assertArrayEquals(new byte[] {(byte)28, (byte)20, (byte) (-85), (byte)81, (byte)71, (byte)72}, byteArray0);
      
      String string1 = Utility.signatureToString("FHB#afD5F:t");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("float", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)28, (byte)20, (byte) (-85), (byte)81, (byte)71, (byte)72}, byteArray0);
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -85
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid methodsignature: ");
      assertNotNull(string0);
      assertEquals("int", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_NULL;
      assertEquals((byte)112, byte0);
      
      String string0 = Utility.accessToString((int) (byte)112, true);
      assertNotNull(string0);
      assertEquals("final volatile", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("final volatile");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "final volatile";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.accessToString((-514));
      assertNotNull(string0);
      assertEquals("private protected static final synchronized volatile transient native abstract strictfp synthetic annotation enum", string0);
      
      String string1 = Utility.getSignature("\t\t#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L#;", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)77;
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-514), 6, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    impdep2\n1:    astore_2\n2:    nop\n3:    nop\n4:    nop\n", string2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)77, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("private protected static final synchronized volatile transient native abstract strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static final synchronized volatile transient native abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, (-3052));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The filter must not be null");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.accessToString((int) (byte)14);
      assertNotNull(string0);
      assertEquals("private protected static", string0);
      
      String string1 = Utility.getSignature("u.Img'frV");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lu/Img'frV;", string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<illegal opcode>", string2);
      
      byte byte1 = Utility.typeOfSignature("The filter must not be null");
      assertTrue(byte1 == byte0);
      assertEquals((byte)14, byte1);
      
      try { 
        Utility.typeOfMethodSignature("ONkIyyp`8g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ONkIyyp`8g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("JavaClass.debug");
      assertNotNull(string0);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TVMG<#Ur6{d&#d*Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TVMG<#Ur6{d&#d*Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Byte code error: ");
      assertNotNull(string0);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)97;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (int) (byte)97);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    ladd\n2:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)97, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)51;
      try { 
        Utility.typeOfSignature("MaQ0A&)Gutadf-oQ!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MaQ0A&)Gutadf-oQ!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)66, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "fAH_U/[TU<Yl16";
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, (-1154), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)73;
      byteArray0[4] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, 68, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)60);
      assertNotNull(string0);
      assertEquals("0:    sastore\n1:    astore_1\n2:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)86, (byte)76, (byte)0}, byteArray0);
      
      byte byte0 = Constants.ITEM_Double;
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (-723));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-39);
      byteArray0[8] = (byte)59;
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{[B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8}";
      stringArray0[1] = "{[B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8}";
      stringArray0[2] = "class";
      stringArray0[3] = "{[B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("{[B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8, [B@3bd453a8}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.compactClassName("$-}6dxt}/r-_W", "", true);
      assertNotNull(string0);
      assertEquals("$-}6dxt}.r-_W", string0);
      
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-17);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2750, 199, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, 67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)51;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte)51);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    f2d\n2:    baload\n3:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-115), (byte)51, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)55;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83), false);
      assertNotNull(string0);
      assertEquals("0:    lreturn\n1:    f2d\n2:    lstore\t\t%0\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-115), (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)39;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), (int) (byte) (-47));
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    dload_1\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-47), (byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)123, (byte)123, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1064, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.convertString(" methods:\n");
      assertNotNull(string0);
      assertEquals(" methods:\\n", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " methods:\n";
      String string1 = Utility.methodTypeToSignature(" methods:\n", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(Lmethods:;)Lmethods:;", string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-5739), (-1137));
      assertNotNull(string0);
      assertEquals("0:    areturn\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    areturn\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    areturn
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)119, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NE<CU7;}~.[C`1(Wh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NE<CU7;}~.[C`1(Wh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, 441);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte) (-109);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)42, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)59;
      byteArray0[3] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-127);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-306), (int) (byte) (-127), false);
      assertNotNull(string0);
      assertEquals("0:    dstore_0\n1:    lor\n", string0);
      assertArrayEquals(new byte[] {(byte)71, (byte) (-127)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-806), (-806));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    nop\n1:    lreturn\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Utility.convertString(" methods:\n");
      assertNotNull(string0);
      assertEquals(" methods:\\n", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 1670);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(512, 34);
      assertNotNull(constantMethodref0);
      assertEquals(512, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(34, constantMethodref0.getNameAndTypeIndex());
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)36;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte) (-118);
      byteArray1[7] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)95, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-1493), (-457));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Utility.convertString("=HNQ^diO");
      assertNotNull(string0);
      assertEquals("=HNQ^diO", string0);
      
      byte[] byteArray0 = new byte[9];
      String string1 = Utility.encode(byteArray0, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("nop", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-1287));
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-1287), constantString0.getStringIndex());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)99;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (-1287), true);
      assertNotNull(string0);
      assertEquals("0:    d2l\n1:    impdep2\n2:    fdiv\n3:    dadd\n", string0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-1), (byte)110, (byte)99}, byteArray0);
      
      int int0 = Utility.setBit((-6536), (byte)110);
      assertEquals((-6536), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PpXeuE%:I0i$cE@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PpXeuE%:I0i$cE@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2331, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, 2086);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (int) (byte) (-122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2f
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-23);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 201, (int) (byte) (-23));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)59;
      byteArray0[1] = (byte)59;
      byte byte1 = (byte)116;
      byteArray0[3] = (byte)116;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte)116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (-1953));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte byte0 = Constants.T_UNKNOWN;
      assertEquals((byte)15, byte0);
      
      try { 
        Utility.typeOfSignature("6@=YT*qH3c<]yiHu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6@=YT*qH3c<]yiHu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte)45);
      assertNotNull(string0);
      assertEquals("0:    aload_3\n1:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)67;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), 46);
      assertNotNull(string0);
      assertEquals("0:    iushr\n1:    dconst_1\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    fconst_1\n5:    fstore_0\n", string0);
      assertArrayEquals(new byte[] {(byte)124, (byte)15, (byte) (-19), (byte) (-8), (byte)12, (byte)67}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1613, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-468), (int) (byte) (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L$ f>+9@C+FB\"G;W5PD");
      assertNotNull(constantUtf8_0);
      assertEquals("L$ f>+9@C+FB\"G;W5PD", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertNotNull(constantUtf8_1);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertEquals("L$ f>+9@C+FB\"G;W5PD", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("L$ f>+9@C+FB\"G;W5PD", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QU2~p-|ZmE<8w4rg4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QU2~p-|ZmE<8w4rg4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)23, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "putstatic", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-100), true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    ifge\t\t#1\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-100), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-115);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte) (-115), false);
      assertNotNull(string0);
      assertEquals("0:    f2d\n1:    dstore_3\n2:    f2d\n", string0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)74, (byte) (-115)}, byteArray0);
      
      String string1 = Utility.convertString("0Si3T!D!7y@.7!Rk~!");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0Si3T!D!7y@.7!Rk~!", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      String string0 = "1J@ou";
      try { 
        Utility.typeOfSignature("1J@ou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1J@ou
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[0] = (byte)37;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)37, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-66);
      byteArray0[0] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, (int) (byte) (-102));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      byteArray0[4] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)120, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.compactClassName("putfield", false);
      assertNotNull(string0);
      assertEquals("putfield", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)5;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, 3264);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.compactClassName(")Z-D", ">\t", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(")Z-D", string1);
      
      try { 
        Utility.typeOfSignature(")Z-D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )Z-D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)114;
      byteArray0[3] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, 479);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), (int) (byte) (-119));
      assertNotNull(string0);
      assertEquals("0:    l2f\n1:    nop\n2:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.classOrInterface(176);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 158, 194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-58);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), (int) (byte) (-58), false);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    ifnull\t\t#2\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-58), (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    nop\n2:    ifnull\t\t#2\n", false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Constants.T_BOOLEAN;
      assertEquals((byte)4, byte0);
      
      try { 
        Utility.typeOfSignature("H)6Pz,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H)6Pz,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      try { 
        Utility.methodSignatureReturnType("HI,HF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HI,HF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-47), 194);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    dload_0\n3:    dload_0\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-47), (byte)38, (byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = "< e\\ux+7\\y\\ePS\\nDob";
      try { 
        Utility.methodSignatureArgumentTypes(string1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: < e\\ux+7\\y\\ePS\\nDob
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-104);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 198);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    dcmpg\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1602, (int) (byte) (-82), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("uG$'^qS", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)71, (byte)0, (byte)94, (byte)113, (byte)83}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)117, (byte)71, (byte)0, (byte)94, (byte)113, (byte)83}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lneg", string0);
      assertArrayEquals(new byte[] {(byte)117, (byte)71, (byte)0, (byte)94, (byte)113, (byte)83}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-25);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-101), (-1473));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    areturn
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-122);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (int) (byte) (-122));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    i2f\n2:    nop\n3:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)64;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2560), 61, true);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    f2l\n2:    ifnull\t\t#19010\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte) (-58), (byte)74, (byte)64}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2250, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2245), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte) (-58), (byte)74, (byte)64}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals((-2245), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116), (byte) (-58), (byte)74, (byte)64}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, 60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Utility.convertString("Lah;V");
      assertNotNull(string0);
      assertEquals("Lah;V", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (int) (byte) (-117));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    f2i\n", string1);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-30);
      try { 
        Utility.typeOfSignature("AZ+@>DbkJ!RGT!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AZ+@>DbkJ!RGT!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 669, 180);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(512, 34);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(34, constantMethodref0.getNameAndTypeIndex());
      assertEquals(512, constantMethodref0.getClassIndex());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.clone();
      assertNotNull(constantMethodref1);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(34, constantMethodref0.getNameAndTypeIndex());
      assertEquals(512, constantMethodref0.getClassIndex());
      assertEquals(512, constantMethodref1.getClassIndex());
      assertEquals(34, constantMethodref1.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-57), (byte)7, (byte) (-68), (byte)98, (byte)125}, byteArray0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodref0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-415), 197, false);
      assertNotNull(string0);
      assertEquals("0:    iconst_5\n1:    ifnonnull\t\t#1981\n4:    fadd\n5:    lushr\n", string0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-57), (byte)7, (byte) (-68), (byte)98, (byte)125}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("0:    iconst_5\n1:    ifnonnull\t\t#1981\n4:    fadd\n5:    lushr\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    iconst_5
         // 1:    ifnonnull\t\t#1981
         // 4:    fadd
         // 5:    lushr
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(512, (byte) (-85));
      assertNotNull(constantMethodref0);
      assertEquals((-85), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(512, constantMethodref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), 170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, 688);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(512, 34);
      assertNotNull(constantMethodref0);
      assertEquals(34, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(512, constantMethodref0.getClassIndex());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)8, (byte) (-80), (byte)7, (byte) (-68), (byte)98, (byte)125}, byteArray0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodref0;
      Constant[] constantArray1 = new Constant[0];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      ConstantPool constantPool0 = new ConstantPool(constantArray1);
      assertNotNull(constantPool0);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantArray1, constantArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 240, (int) (byte)8, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-72);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3021), (int) (byte) (-72), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("L$ f>+9@C+FB\"G;W5PD");
      assertNotNull(constantUtf8_0);
      assertEquals("L$ f>+9@C+FB\"G;W5PD", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-59);
      byteArray0[1] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (-3825));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    lmul
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-109);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)33;
      byteArray1[3] = (byte) (-109);
      byteArray1[5] = (byte) (-109);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (-2337));
      assertNotNull(string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("0:    i2s\n1:    lload_3\n2:    nop\n3:    i2s\n4:    nop\n5:    i2s\n6:    nop\n", string0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)33, (byte)0, (byte) (-109), (byte)0, (byte) (-109), (byte)0}, byteArray1);
      
      String string1 = Utility.fillup("0:    i2s\n1:    lload_3\n2:    nop\n3:    i2s\n4:    nop\n5:    i2s\n6:    nop\n", (byte) (-109), false, 'L');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("0:    i2s\n1:    lload_3\n2:    nop\n3:    i2s\n4:    nop\n5:    i2s\n6:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte) (-128), false);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    ior\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = "liG;!i*";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("liG;!i*", "java.ext.dirs");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // java.ext.dirs
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)71;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)63;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)63);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    dstore_0\n2:    nop\n3:    dstore_0\n4:    fstore_3\n5:    lstore_0\n6:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)71, (byte)0, (byte)71, (byte)70, (byte)63, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-448), (-448), false);
      assertNotNull(string0);
      assertEquals("0:    jsr_w\t\t#0\n5:    nop\n6:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte byte0 = (byte)26;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)26;
      byteArray1[0] = (byte)26;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)26;
      byteArray1[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 102, 645);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-63);
      byteArray0[6] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, 3084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte) (-18);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1471), 204);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    ifle\t\t#-4369\n4:    nop\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-98), (byte) (-18), (byte) (-18), (byte)0, (byte) (-18), (byte) (-18), (byte) (-31), (byte) (-18)}, byteArray0);
      
      String string1 = Utility.getSignature("void");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("V", string1);
      
      byte byte0 = Constants.ITEM_Double;
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2999, 2999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6W~k,OC3c`";
      stringArray0[1] = "6W~k,OC3c`";
      String string0 = Utility.methodTypeToSignature("6W~k,OC3c`", stringArray0);
      assertNotNull(string0);
      assertEquals("(L6W~k,OC3c`;L6W~k,OC3c`;)L6W~k,OC3c`;", string0);
      
      short short0 = Utility.searchOpcode(":!P\"L`3X?Pu>");
      assertEquals((short) (-1), short0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(L6W~k,OC3c`;L6W~k,OC3c`;)L6W~k,OC3c`;");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("=V*C{iYFBrrT9L_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =V*C{iYFBrrT9L_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-92);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-811), (int) (byte) (-92));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    if_icmple\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("static");
      assertNotNull(constantUtf8_0);
      assertEquals("static", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-1046));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NkIyypn`g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NkIyypn`g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 201);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-85), (byte) (-85));
      assertNotNull(constantMethodref0);
      assertEquals((-85), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-85), constantMethodref0.getNameAndTypeIndex());
      
      Constant[] constantArray0 = new Constant[6];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-85);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), (int) (byte) (-114), true);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    d2i\n", string0);
      assertArrayEquals(new byte[] {(byte) (-114)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "-[c]$7soD";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      String string1 = Utility.fillup("DM{?bjB`F0_ Tioh", 220, false, '>');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DM{?bjB`F0_ Tioh", string1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('>');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-[c]$7soD";
      stringArray0[2] = " read ";
      stringArray0[3] = "DM{?bjB`F0_ Tioh";
      stringArray0[5] = "DM{?bjB`F0_ Tioh";
      stringArray0[6] = "DM{?bjB`F0_ Tioh";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DM{?bjB`F0_ Tioh", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3181, 433, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L0\"Y?^<a;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L0\"Y?^<a;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-89);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 173);
      assertNotNull(string0);
      assertEquals("0:    lushr\n1:    goto\t\t#1\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("0:    lushr\n1:    goto\t\t#1\n4:    nop\n5:    nop\n6:    nop\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 160, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("static");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("static", constantUtf8_0.getBytes());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byte byte0 = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-56);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(8, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(8, constantPool0.getLength());
      assertNotSame(constantPool0, constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 182, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t<");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("\t<", constantUtf8_0.getBytes());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$-";
      stringArray0[1] = "=V*C{iYFBrrT9L_";
      stringArray0[2] = "\t<";
      stringArray0[3] = "$-";
      try { 
        Utility.methodSignatureReturnType("M]H}dAcklEo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M]H}dAcklEo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 243, (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, 183, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.fillup("-[c]$7soD", 1173, false, '>');
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.fillup("DM{?bjB`F0_ Tioh", 220, false, '>');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DM{?bjB`F0_ Tioh", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('>');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-[c]$7soD";
      stringArray0[1] = string0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 138, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-70), 194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte byte0 = (byte) (-100);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-100);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-30));
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-30.0), constantDouble0.getBytes(), 0.01);
      
      String string0 = constantPool0.constantToString((Constant) constantDouble0);
      assertNotNull(string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-30.0), constantDouble0.getBytes(), 0.01);
      assertEquals("-30.0", string0);
      
      byteArray0[6] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 891, (int) (byte) (-30), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 180, (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-125);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-580), (-580));
      assertNotNull(string0);
      assertEquals("0:    lxor\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1865), 88);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    fcmpl\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("0:    fcmpl\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 109, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)51;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)51;
      byteArray1[3] = (byte) (-18);
      byteArray1[4] = (byte) (-18);
      byteArray1[5] = (byte) (-18);
      byteArray1[6] = (byte)51;
      byteArray1[7] = (byte) (-18);
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-115);
      byteArray2[1] = (byte) (-18);
      byteArray2[2] = (byte) (-115);
      byteArray2[3] = (byte) (-115);
      byteArray2[4] = (byte)51;
      byteArray2[5] = (byte) (-115);
      byteArray2[6] = (byte)3;
      byteArray2[7] = (byte) (-115);
      boolean boolean0 = Utility.equals(byteArray1, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte) (-18), (byte) (-18), (byte) (-18), (byte)51, (byte) (-18)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-18), (byte) (-115), (byte) (-115), (byte)51, (byte) (-115), (byte)3, (byte) (-115)}, byteArray2);
      
      boolean boolean1 = Utility.isSet(2131, (-2294));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "short";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)115;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-4807));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte) (-109);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)49, (int) (byte)49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("0", string0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(aL~]*'7*Ty'JTj", ";", "jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aL~]*'7*Ty'JTj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)104, (-168));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = Utility.fillup("-[c]$7soD", 1173, false, '>');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-5329), (int) (byte)100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    bastore
         // 1:    ifnonnull\t\t#25746
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
