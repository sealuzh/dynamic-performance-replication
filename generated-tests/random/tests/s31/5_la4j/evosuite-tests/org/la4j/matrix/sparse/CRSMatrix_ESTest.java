/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:32:15 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      CRSMatrix.diagonal(1, (-0.4375));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix.identity(36);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.1102230246251565E-14;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.1102230246251565E-14;
      doubleArray2[1] = 1.1102230246251565E-14;
      doubleArray2[2] = 1.1102230246251565E-14;
      doubleArray2[3] = 1.1102230246251565E-14;
      doubleArray2[4] = 1.1102230246251565E-14;
      doubleArray2[5] = 1.1102230246251565E-14;
      doubleArray2[6] = 1.1102230246251565E-14;
      doubleArray2[7] = 1.1102230246251565E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 1.1102230246251565E-14;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = 1.1102230246251565E-14;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 1.1102230246251565E-14;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray5[7] = 1.1102230246251565E-14;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 1.1102230246251565E-14;
      doubleArray6[3] = 1.1102230246251565E-14;
      doubleArray0[5] = doubleArray6;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(2, cRSMatrix0.rows());
      
      double double0 = cRSMatrix0.minInRow(1);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = 2;
      int int1 = 975;
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.max();
      int int2 = 1849;
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(2, 1849, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1401, 1401);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1401, (-840.2325446333873), (-1609.9051), (-1609.9051), 1127.4024).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.updateRow(5, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1401, 1401);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(5, vectorFunction0);
      Vector vector0 = cRSMatrix0.getColumn(Integer.MAX_VALUE);
      assertEquals(1401, vector0.length());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-52);
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-64);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4, 3);
      cRSMatrix0.subtract((double) 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.toColumnVector();
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.nonZeroIterator();
      cRSMatrix0.setAll(366.8240009796);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(3, 3, matrixFunction0);
      cRSMatrix0.min();
      cRSMatrix0.blankOfShape(3, 4);
      assertEquals(366.8240009796, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 66.7358258;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 597.15095215643;
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.min();
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.toString();
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(1, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(908, 908);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(876, 876);
      assertEquals(876, cRSMatrix1.cardinality());
      assertEquals(0.001141552511415525, cRSMatrix1.density(), 0.01);
      assertEquals(0.0011013215859030838, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 513;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(513, (-661.48651412));
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(954);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 930;
      int[] intArray0 = new int[8];
      intArray0[0] = 930;
      intArray0[1] = 930;
      intArray0[2] = 8;
      intArray0[3] = 930;
      intArray0[4] = 930;
      intArray0[6] = 8;
      intArray0[7] = 8;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 930, 8, doubleArray0, intArray0, intArray0);
      cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        cRSMatrix0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(32);
      cRSMatrix0.setAll((-3711.26842984796));
      int int1 = (-481);
      int int2 = (-2550);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      // Undeclared exception!
      cRSMatrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-745.756049);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-3359.1293495);
      doubleArray1[3] = (-66.4005);
      doubleArray1[4] = (-2299.4574);
      doubleArray1[5] = (-2530.809351);
      doubleArray1[6] = (-2300.19);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(752, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      Matrix.identity(1);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = 826.36;
      doubleArray1[7] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 826.36;
      doubleArray2[1] = (-867.0);
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = 826.36;
      doubleArray2[5] = 826.36;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 826.36;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 826.36;
      doubleArray5[3] = 826.36;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 1;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2320;
      double double0 = 0.964;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2320, 0.964);
      int int1 = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 120.4464227819;
      doubleArray1[1] = 0.964;
      doubleArray1[2] = 1079.2;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (-2204.1458);
      doubleArray1[5] = (-302.1337745);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, denseMatrix0, cRSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1422, 1422);
      double double0 = cRSMatrix0.maxInRow(1399);
      assertEquals(1422, cRSMatrix0.cardinality());
      assertEquals(1422.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 165;
      double double0 = 0.964;
      MockRandom mockRandom0 = new MockRandom(165);
      // Undeclared exception!
      CRSMatrix.randomSymmetric(165, 0.964, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 1236, 6);
      cRSMatrix0.max();
      int int1 = 113;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(113, vectorAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(6, 6);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.forEach(consumer0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("        ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 8;
      double double0 = 1712.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 1712.0);
      cRSMatrix0.multiplyByItsTranspose();
      int int1 = 870;
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(870);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 871
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1671;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1671, 1671, 8);
      cRSMatrix0.min();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1671;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 1671;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(1671, 1671, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 72;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(72, 72);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 13, 9);
      cRSMatrix0.setAll(0.964);
      int int1 = (-635);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(9, (-635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 9x-635
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      cRSMatrix0.mkString(numberFormat0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 1798);
      numberFormat0.format((Object) double0, stringBuffer0, fieldPosition0);
      numberFormat0.setMaximumIntegerDigits(1798);
      cRSMatrix0.mkString(numberFormat0);
      cRSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(8, 2841, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(680);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3409;
      int int1 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3409, 1036, 13);
      cRSMatrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(2, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2;
      int int1 = 556;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1403, 2, 556);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.toBinary();
      cRSMatrix0.infinityNorm();
      cRSMatrix0.getRow(1387);
      cRSMatrix0.nonZeroAt(1387, 1403);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1306, 5);
      cRSMatrix0.nonZeroAt(1189, 5);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(0);
      assertEquals(0, cRSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 930;
      int[] intArray0 = new int[8];
      intArray0[0] = 930;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 8;
      intArray0[3] = 930;
      intArray0[4] = 930;
      intArray0[5] = 1617;
      intArray0[6] = 8;
      intArray0[7] = 8;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 930, 8, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.toBinary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(313, 4, 4);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(4, vectorProcedure0);
      cRSMatrix0.toRowMajorSparseMatrix();
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(1006, vectorProcedure1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1006
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[9];
      intArray0[0] = 1574;
      Matrix matrix0 = cRSMatrix0.add((double) 1574);
      Matrix matrix1 = cRSMatrix0.multiply(matrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix1, 1574, 2277, 2277, 3090, 3, (-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 3x-1985
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-496.64);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(4, 4, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2652;
      doubleArray0[1] = 9.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2652;
      doubleArray0[6] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 2652, doubleArray0);
      Vector vector0 = cRSMatrix0.getColumn((-2892));
      assertEquals(2652, cRSMatrix0.columns());
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(54, 54, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(43, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1794;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1794;
      doubleArray0[1] = (double) 1794;
      doubleArray0[2] = (double) 1794;
      doubleArray0[3] = (double) 1794;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(1794, 1794, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 565;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(565, 0);
      int int2 = 3;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(3, vectorFunction0);
      int int3 = 8;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromMatrixMarket("Given matrices should have the same shape: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1615, 1615, 2708.64718038, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-994.894905269526);
      doubleArray2[1] = 1615.1149486695;
      doubleArray2[2] = 1206.56390563;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1615.1149486695;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1615.1149486695;
      doubleArray3[3] = 1206.56390563;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 3157.54936;
      doubleArray4[1] = (-994.894905269526);
      doubleArray4[2] = 1615.1149486695;
      doubleArray4[3] = 1615.1149486695;
      doubleArray4[4] = 1206.56390563;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 1615.1149486695;
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = 1615.1149486695;
      doubleArray9[1] = Double.NEGATIVE_INFINITY;
      doubleArray9[2] = 1196.0;
      doubleArray9[3] = 1206.56390563;
      doubleArray9[4] = (-994.894905269526);
      doubleArray9[5] = 3157.54936;
      doubleArray0[8] = doubleArray9;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 421.2029174482061;
      doubleArray1[1] = 823.66576519;
      doubleArray1[2] = (-1221.8068);
      doubleArray1[3] = 1856.0;
      doubleArray1[4] = (-852.536148964);
      doubleArray1[5] = 3560.453813843734;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1856.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1221.8068);
      doubleArray2[3] = 421.2029174482061;
      doubleArray2[4] = (-1221.8068);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1856.0;
      doubleArray2[7] = (-852.536148964);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 823.66576519;
      doubleArray3[1] = 823.66576519;
      doubleArray3[2] = (-1221.8068);
      doubleArray3[3] = (-863.0557290706);
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 9.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(9.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 425;
      int int0 = 3;
      intArray0[4] = 3;
      intArray0[5] = 3599;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 8, 8, (double[]) null, intArray0, intArray0);
      double double0 = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        cRSMatrix0.toColumnMajorSparseMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(611, 3628);
      cRSMatrix0.copyOfShape(1879, 611);
      cRSMatrix0.maxInRow(16);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(sparseVector0, sparseVector0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(3628, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 611.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(8);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix0.norm();
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix0.min();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 2.8284271247461903;
      doubleArray0[2] = 0.0;
      int int1 = (-1072);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-1072));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-119L));
      // Undeclared exception!
      try { 
        CRSMatrix.random((-5008), (-3017), (double) (-3017), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 10;
      int int1 = 32;
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 32);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MockRandom mockRandom0 = new MockRandom((-993L));
      DenseVector denseVector0 = DenseVector.random(2, mockRandom0);
      // Undeclared exception!
      try { 
        ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 9;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 9);
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(680);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-2535), (-2535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2535x-2535
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "#I)?lh+";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("#I)?lh+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = " \\,[bLG(h";
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV(" ,[bLG(h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(32, 0.0, (Random) mockRandom0);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      int int0 = 2;
      SparseMatrix sparseMatrix0 = SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.power(2);
      cRSMatrix0.kroneckerProduct(sparseMatrix0);
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Can not remove from this iterator.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 669);
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 0);
      RowMajorSparseMatrix.randomSymmetric(0, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
      // Undeclared exception!
      cRSMatrix0.setColumn(0, (-682.4255780402283));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("2iR$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 80;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(80, 80);
      cRSMatrix0.iteratorOfRow(80);
      // Undeclared exception!
      cRSMatrix0.removeColumn(60);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 8;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(8, 2510, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1716;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(1716, 1716, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 3482;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3482, 3482);
      int int1 = 0;
      cRSMatrix0.swapRows(395, 395);
      int[] intArray0 = new int[9];
      intArray0[0] = 395;
      intArray0[1] = 3048;
      intArray0[2] = 1694;
      intArray0[3] = 1694;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 395;
      intArray0[7] = 395;
      intArray0[8] = 0;
      cRSMatrix0.select(intArray0, intArray0);
      RowMajorSparseMatrix.zero(3525, 1694, 5);
      Matrix.fromCSV("");
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.set(395, (-2005), (-632.532));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2005' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2315);
      int int0 = 4667;
      cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.copyOfShape(2315, 4667);
      int int1 = 2302;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(2302, vectorProcedure0);
      // Undeclared exception!
      cRSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 316;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(316);
      MockRandom mockRandom0 = new MockRandom(1995L);
      mockRandom0.nextDouble();
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 1695;
      CRSMatrix.identity(1695);
      MatrixVectorOperation<Matrix> matrixVectorOperation0 = (MatrixVectorOperation<Matrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MockRandom mockRandom0 = new MockRandom(1L);
      DenseVector.random(1695, mockRandom0);
      double[][] doubleArray0 = new double[5][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1695;
      doubleArray1[1] = (double) 1695;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = 100.0;
      doubleArray1[4] = (double) 1L;
      doubleArray1[5] = (double) 1695;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = (double) 1695;
      doubleArray3[2] = (double) 1L;
      doubleArray3[3] = (double) 1L;
      doubleArray3[4] = 100.0;
      doubleArray3[5] = (double) 1L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) 1L;
      doubleArray4[1] = (double) 1L;
      doubleArray4[2] = 100.0;
      doubleArray4[3] = (double) 1695;
      doubleArray4[4] = (double) 1695;
      doubleArray4[5] = (double) 1695;
      doubleArray4[6] = (double) 1L;
      doubleArray4[7] = (double) 1L;
      doubleArray4[8] = (double) 1L;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 1L;
      doubleArray5[1] = (double) 1L;
      doubleArray5[2] = 100.0;
      doubleArray5[3] = (double) 1L;
      doubleArray5[4] = (double) 1695;
      doubleArray5[5] = (double) 1L;
      doubleArray5[6] = 100.0;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1424, (-1177.205842857395));
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1424, 0.3);
      assertEquals(1424, cRSMatrix1.cardinality());
      assertEquals(0.3, cRSMatrix1.max(), 0.01);
      
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1424;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1177.205842857395);
      doubleArray2[1] = 1879.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-1177.205842857395);
      doubleArray3[1] = (double) 1424;
      doubleArray3[2] = (double) 1424;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1177.205842857395);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.3;
      doubleArray4[3] = 0.3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.3;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 3840.54368589;
      doubleArray5[3] = (double) 1424;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-1177.205842857395);
      doubleArray6[1] = 0.3;
      doubleArray6[2] = (double) 1424;
      doubleArray6[3] = 0.3;
      doubleArray6[4] = (-1177.205842857395);
      doubleArray6[5] = 0.3;
      doubleArray0[5] = doubleArray6;
      CRSMatrix cRSMatrix2 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertEquals(1424.0, cRSMatrix2.max(), 0.01);
      assertEquals((-1177.205842857395), cRSMatrix2.min(), 0.01);
  }
}
