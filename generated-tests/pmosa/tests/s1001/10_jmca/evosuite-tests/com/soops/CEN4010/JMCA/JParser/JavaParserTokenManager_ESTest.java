/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:14:06 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      javaParserTokenManager0.jjround = 98;
      javaParserTokenManager0.defaultLexState = 98;
      javaParserTokenManager0.lengthOfMatch = 98;
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(65);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 65. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("protected");
      Locale locale0 = Locale.TAIWAN;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "suTObkAvF56%Bf^zY*", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      javaParserTokenManager0.setDebugStream(printStream0);
      javaParserTokenManager0.MoreLexicalActions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(111);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      StringReader stringReader0 = new StringReader("B");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.curChar = '\"';
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals("B", token0.toString());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW'#4b;5? y/r$_q ");
      StringReader stringReader1 = new StringReader("\":\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1783, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1783, column 50.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1435));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1435), javaCharStream0.getBeginColumn());
      assertEquals("|=", token0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1435));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(",", token0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?a,3m`%-!VAf?P?gYA");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, (-7));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = 8;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals("", token0.toString());
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#k]~j[Fq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 108);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 40);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(124, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 727);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(7, javaCharStream1.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?a,3m`%-!VAf?P?gYA");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1851), (-1851));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals((-1849), javaCharStream0.getBeginColumn());
      assertEquals(84, token1.kind);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 18, 21);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 18, column 23.  Encountered: \"\" (0), after : \"\\'b\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("booH'lean");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, (-856));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 108, column -850.  Encountered: \"e\" (101), after : \"\\'l\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DY,ULN");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1851), (-1851));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals((-1848), javaCharStream0.getBeginColumn());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("booH'lean");
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '-';
      charArray0[2] = '@';
      charArray0[3] = '|';
      charArray0[4] = 'l';
      charArray0[5] = 'n';
      charArray0[6] = '0';
      charArray0[7] = 'f';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, (-856));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DY,ULN");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1851), (-1851));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 38, (-1667));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-1667));
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(38, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-856), 108);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 27, (-3019));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.ReInit(javaCharStream0);
      assertEquals((-856), javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1851), 716);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1851));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1851. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      StringReader stringReader1 = new StringReader("strictfp");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 38, 1265);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken((-708));
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1266, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("booH'lean");
      StringReader stringReader1 = new StringReader("9y`:\"PH=\"|_+d_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 108, 108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 108, column 110.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-856), 79);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader1 = new StringReader("*E]i}&U%~=h");
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      stringReader1.read(charArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-856), 2);
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("booH'lean");
      StringReader stringReader1 = new StringReader("9y`:\"PH=\"|_+d_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 108, 108);
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '=';
      charArray0[2] = '/';
      charArray0[3] = '<';
      charArray0[4] = '{';
      charArray0[5] = 'e';
      charArray0[6] = 'X';
      charArray0[7] = '\"';
      charArray0[8] = 'J';
      stringReader1.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("_", token0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'X';
      charArray0[2] = 'W';
      charArray0[3] = ';';
      charArray0[4] = 'G';
      charArray0[5] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 33, 124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("JXW", token0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 97, 51);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      StringReader stringReader1 = new StringReader("b<`:r");
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = ']';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), 0);
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+n=1");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1863), (-1863));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1862), javaCharStream0.getColumn());
      assertEquals("n", token0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'f';
      charArray0[2] = 'X';
      charArray0[3] = '\\';
      charArray0[4] = 'G';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 33, 33);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(33, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 33, 44);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 33, column 45.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      stringReader0.read();
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1667), (-3074));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("iO", token0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'X';
      charArray0[2] = 'W';
      charArray0[3] = ';';
      charArray0[4] = 'G';
      charArray0[5] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 65);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream1, (-1099), 971, (-1099));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1099, column 971.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.curChar = 'Y';
      javaCharStream0.BeginToken();
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals("m", token0.toString());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("6/FiO:'~_:u");
      stringReader1.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1667), 85);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(88, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DY,ULN");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1851), (-1851));
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'G';
      charArray0[2] = ';';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-13), (-13));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaCharStream1.readChar();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(83, token0.kind);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 108);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.curChar = 'Y';
      javaCharStream0.BeginToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.jjFillToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(117, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'X';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'G';
      charArray0[5] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)80;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2059, (-4200));
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 108);
      javaCharStream0.nextCharInd = 10;
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(114, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#k]~j[Fq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 30);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 108);
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 'S';
      charArray0[2] = '9';
      charArray0[3] = '\"';
      charArray0[4] = 'b';
      charArray0[5] = 'd';
      charArray0[6] = ']';
      charArray0[7] = 'l';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 757, 3057);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjmatchedKind = 757;
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.lengthOfMatch = 0;
      // Undeclared exception!
      try { 
        javaParserTokenManager2.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y`:\"PH=\"|_+d_");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'X';
      charArray0[2] = 'C';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaCharStream0.column = 3;
      javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(8, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y`:\"PH=\"|_+d_");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1425), 28);
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'm';
      charArray0[2] = '=';
      charArray0[3] = '<';
      charArray0[4] = '{';
      charArray0[5] = '<';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      stringReader0.read(charArray0);
      javaCharStream0.bufsize = (-1425);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1425, column 34.  Encountered: <EOF> after : \"\\\"|_+d_\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, (-7));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 100. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'X';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2059, (-2967));
      charArrayReader0.read();
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2059, column -2964.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '!';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[5] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)80;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2059, (-4200));
      javaCharStream0.BeginToken();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      assertEquals((-4198), javaCharStream0.getBeginColumn());
      assertEquals((-4197), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#k]~j[Fq");
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = 'M';
      charArray0[3] = 't';
      StringReader stringReader1 = new StringReader("1#k]~j[Fq");
      stringReader1.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 24, 24);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-327));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -327. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      charArray0[2] = 'P';
      charArray0[3] = 'G';
      charArray0[4] = 'Q';
      charArray0[5] = 'F';
      charArray0[6] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'b', 'P', 'G', 'Q', 'F', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 115, 18);
      assertArrayEquals(new char[] {'\'', 'b', 'P', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertArrayEquals(new char[] {'\'', 'b', 'P', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\'', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\'', 'b', 'P', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'\'', 'b', 'P', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals("bPGQF1", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(115, token0.beginLine);
      assertEquals(19, token0.beginColumn);
      assertEquals(115, token0.endLine);
      assertEquals(24, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\'', 'b', 'P', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals("bPGQF1", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(115, token1.endLine);
      assertEquals(19, token1.beginColumn);
      assertEquals(115, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(24, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 361);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 361. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y`:\"PH=\"|_+d_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1425), 28);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'm';
      charArray0[2] = '=';
      charArray0[3] = '<';
      charArray0[4] = '{';
      charArray0[5] = '<';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals((-1425), javaCharStream0.getBeginLine());
      assertEquals((-1425), javaCharStream0.getLine());
      assertEquals((-1425), javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals("y", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1425), token0.endLine);
      assertEquals((-1425), token0.beginLine);
      assertEquals(28, token0.beginColumn);
      assertEquals(28, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1425, column 29.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("...");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 49, (-1667));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1665), javaCharStream0.getColumn());
      assertEquals((-1665), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-1667), javaCharStream0.getBeginColumn());
      assertEquals("...", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(121, token0.kind);
      assertEquals(49, token0.endLine);
      assertEquals(49, token0.beginLine);
      assertEquals((-1665), token0.endColumn);
      assertEquals((-1667), token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals((-1665), javaCharStream0.getColumn());
      assertEquals((-1665), javaCharStream0.getBeginColumn());
      assertEquals((-1665), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals((-1665), token1.beginColumn);
      assertEquals(49, token1.beginLine);
      assertEquals((-1665), token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("...");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-106), (-3091));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-106), javaCharStream0.getBeginLine());
      assertEquals((-3089), javaCharStream0.getEndColumn());
      assertEquals((-3091), javaCharStream0.getBeginColumn());
      assertEquals((-106), javaCharStream0.getLine());
      assertEquals((-3089), javaCharStream0.getColumn());
      assertEquals((-106), javaCharStream0.getEndLine());
      assertEquals("...", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-3091), token0.beginColumn);
      assertEquals((-106), token0.beginLine);
      assertEquals((-106), token0.endLine);
      assertEquals((-3089), token0.endColumn);
      assertEquals(121, token0.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      charArray0[2] = 'I';
      charArray0[3] = 'G';
      charArray0[4] = 'Q';
      charArray0[5] = 'F';
      charArray0[6] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 115, 18);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 122);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertNotNull(pushbackReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertNotNull(bufferedReader0);
      
      javaCharStream0.ReInit((Reader) bufferedReader0, 122, 115, 98);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.BeginToken();
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\'', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals("bIGQF1", token0.toString());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(121, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertEquals(116, token0.beginColumn);
      assertEquals(122, token0.beginLine);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertNotNull(token0);
      
      Token token1 = Token.newToken(18);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 361);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 361. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 97, 51);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[3] = '1';
      charArray0[4] = 'F';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', '\u0000', '1', 'F', '1', '1', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, 31, 902);
      assertArrayEquals(new char[] {'Q', 'Q', '\u0000', '1', 'F', '1', '1', '1'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('6', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertArrayEquals(new char[] {'Q', 'Q', '\u0000', '1', 'F', '1', '1', '1'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertArrayEquals(new char[] {'Q', 'Q', '\u0000', '1', 'F', '1', '1', '1'}, charArray0);
      assertEquals(903, javaCharStream2.getEndColumn());
      assertEquals(903, javaCharStream2.getColumn());
      assertEquals(902, javaCharStream2.getBeginColumn());
      assertEquals(31, javaCharStream2.getBeginLine());
      assertEquals(31, javaCharStream2.getLine());
      assertEquals(31, javaCharStream2.getEndLine());
      assertEquals("QQ", token0.toString());
      assertEquals(1, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(31, token0.endLine);
      assertEquals(903, token0.endColumn);
      assertEquals(31, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(902, token0.beginColumn);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 902);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 902. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 108);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.nextCharInd = 10;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 10, 108);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('E', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals("N4010", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(113, token0.endColumn);
      assertEquals(108, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(108, token0.beginLine);
      assertEquals(109, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      charArray0[2] = 'I';
      charArray0[3] = 'G';
      charArray0[4] = 'Q';
      charArray0[5] = 'F';
      charArray0[6] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 115, 18);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 122);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertNotNull(pushbackReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertNotNull(bufferedReader0);
      
      javaCharStream0.ReInit((Reader) bufferedReader0, 122, 115, 98);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.BeginToken();
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\'', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      char char1 = javaCharStream0.BeginToken();
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('b', char1);
      assertFalse(char1 == char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new char[] {'\'', 'b', 'I', 'G', 'Q', 'F', '1'}, charArray0);
      assertEquals("IGQF1", token0.toString());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(74, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(117, token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertEquals(121, token0.endColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 122);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 122. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|y`p:\"PH+\"|_+d_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1425), 18);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1425), javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals((-1425), javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals((-1425), javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1425), token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(18, token0.beginColumn);
      assertEquals(18, token0.endColumn);
      assertEquals((-1425), token0.endLine);
      assertNotNull(token0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-1425), javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals((-1425), javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals((-1425), javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('y', char0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1425, column 20.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&U4zPHOhkhA[P@!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1425), 28);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'm';
      charArray0[2] = '=';
      charArray0[3] = '<';
      charArray0[4] = '{';
      charArray0[5] = '<';
      charArray0[6] = '=';
      stringReader0.mark(26);
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'&', 'U', '4', 'z', 'P', 'H', 'O', 'h'}, charArray0);
      assertEquals(8, int0);
      
      javaCharStream0.bufsize = (-1425);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals((-1425), javaCharStream0.getEndLine());
      assertEquals((-1425), javaCharStream0.getBeginLine());
      assertEquals((-1425), javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals("khA", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(30, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1425), token0.endLine);
      assertEquals((-1425), token0.beginLine);
      assertEquals(28, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals((-1425), javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals((-1425), javaCharStream0.getBeginLine());
      assertEquals((-1425), javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("[", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(31, token1.endColumn);
      assertEquals((-1425), token1.beginLine);
      assertEquals(81, token1.kind);
      assertEquals(31, token1.beginColumn);
      assertEquals((-1425), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals((-1425), javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals((-1425), javaCharStream0.getBeginLine());
      assertEquals((-1425), javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[3] = 'Q';
      charArray0[5] = 'F';
      charArray0[6] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', 'I', 'Q', '\u0000', 'F', 'I'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 115, 18);
      assertArrayEquals(new char[] {'\'', '\'', 'I', 'Q', '\u0000', 'F', 'I'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 122);
      assertArrayEquals(new char[] {'\'', '\'', 'I', 'Q', '\u0000', 'F', 'I'}, charArray0);
      assertNotNull(pushbackReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'\'', '\'', 'I', 'Q', '\u0000', 'F', 'I'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 115, column 19.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW'#4b;5? y/r$_q ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-2408));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-2407), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2408), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-2407), javaCharStream0.getEndColumn());
      assertEquals("XW", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-2407), token0.endColumn);
      assertEquals((-2408), token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-2407), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2408), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-2407), javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column -2404.  Encountered: \"4\" (52), after : \"\\'#\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[2] = 'e';
      charArray0[3] = 'K';
      charArray0[4] = 'j';
      charArray0[5] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '\u0000', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 6, (-1895));
      assertArrayEquals(new char[] {'/', '\u0000', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'/', '\u0000', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'/', '\u0000', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'/', '\u0000', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1895), javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals((-1895), javaCharStream0.getBeginColumn());
      assertEquals((-1895), javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals("/", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1895), token0.endColumn);
      assertEquals((-1895), token0.beginColumn);
      assertEquals(6, token0.endLine);
      assertEquals(6, token0.beginLine);
      assertEquals(104, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1667), (-3307));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-1667), javaCharStream0.getEndLine());
      assertEquals((-1667), javaCharStream0.getBeginLine());
      assertEquals((-3307), javaCharStream0.getEndColumn());
      assertEquals((-3307), javaCharStream0.getBeginColumn());
      assertEquals((-1667), javaCharStream0.getLine());
      assertEquals((-3307), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('t', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1667), javaCharStream0.getEndLine());
      assertEquals((-1667), javaCharStream0.getBeginLine());
      assertEquals((-3306), javaCharStream0.getBeginColumn());
      assertEquals((-3304), javaCharStream0.getEndColumn());
      assertEquals((-3304), javaCharStream0.getColumn());
      assertEquals((-1667), javaCharStream0.getLine());
      assertEquals("viC", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-3306), token0.beginColumn);
      assertEquals((-1667), token0.endLine);
      assertEquals((-1667), token0.beginLine);
      assertEquals((-3304), token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("<<=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 124, 352);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(354, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals(354, javaCharStream0.getEndColumn());
      assertEquals("<<=", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(118, token0.kind);
      assertEquals(352, token0.beginColumn);
      assertEquals(354, token0.endColumn);
      assertEquals(124, token0.endLine);
      assertEquals(124, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(354, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals(354, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW'#4b;5? y/r$_q ");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ']';
      charArray0[4] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {')', ')', ')', ']', '<'}, charArray0);
      assertNotNull(charArrayReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      assertArrayEquals(new char[] {')', ')', ')', ']', '<'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, ')', 49);
      assertArrayEquals(new char[] {')', ')', ')', ']', '<'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 902, 41, 49);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new char[] {')', ')', ')', ']', '<'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(')', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {')', ')', ')', ']', '<'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertArrayEquals(new char[] {')', ')', ')', ']', '<'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(")", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token0.endLine);
      assertEquals(50, token0.endColumn);
      assertEquals(50, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(41, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 50. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("tviC", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("CHF3XFb", token2.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(12, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(6, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<EXPONENT>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1863), (-1863));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      long long0 = stringReader0.skip((-1863));
      assertEquals((-1L), long0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1863), javaCharStream0.getBeginColumn());
      assertEquals((-1863), javaCharStream0.getEndColumn());
      assertEquals((-1863), javaCharStream0.getColumn());
      assertEquals((-1863), javaCharStream0.getEndLine());
      assertEquals((-1863), javaCharStream0.getBeginLine());
      assertEquals((-1863), javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals((-1863), token0.endLine);
      assertEquals((-1863), token0.beginLine);
      assertEquals((-1863), token0.beginColumn);
      assertEquals((-1863), token0.endColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals((-1863), javaCharStream0.getBeginColumn());
      assertEquals((-1863), javaCharStream0.getEndColumn());
      assertEquals((-1863), javaCharStream0.getColumn());
      assertEquals((-1863), javaCharStream0.getEndLine());
      assertEquals((-1863), javaCharStream0.getBeginLine());
      assertEquals((-1863), javaCharStream0.getLine());
      assertEquals("<", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1863), token1.beginColumn);
      assertEquals((-1863), token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals((-1863), token1.beginLine);
      assertEquals((-1863), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertEquals((-1863), javaCharStream0.getBeginColumn());
      assertEquals((-1863), javaCharStream0.getEndColumn());
      assertEquals((-1863), javaCharStream0.getColumn());
      assertEquals((-1863), javaCharStream0.getEndLine());
      assertEquals((-1863), javaCharStream0.getBeginLine());
      assertEquals((-1863), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("sGYgnwV{");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 124, 352);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(358, javaCharStream0.getColumn());
      assertEquals(358, javaCharStream0.getEndColumn());
      assertEquals("sGYgnwV", token0.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(352, token0.beginColumn);
      assertEquals(124, token0.beginLine);
      assertEquals(358, token0.endColumn);
      assertEquals(124, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(358, javaCharStream0.getColumn());
      assertEquals(358, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'h';
      charArray0[2] = 'e';
      charArray0[3] = 'K';
      charArray0[4] = 'j';
      charArray0[5] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', 'h', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-4327), (-4327));
      assertArrayEquals(new char[] {'/', 'h', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'/', 'h', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.AdjustBuffSize();
      assertArrayEquals(new char[] {'/', 'h', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'/', 'h', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-4327), javaCharStream0.getEndColumn());
      assertEquals((-4327), javaCharStream0.getLine());
      assertEquals((-4327), javaCharStream0.getBeginLine());
      assertEquals((-4327), javaCharStream0.getColumn());
      assertEquals((-4327), javaCharStream0.getBeginColumn());
      assertEquals((-4327), javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4327), token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals((-4327), token0.endLine);
      assertEquals((-4327), token0.beginLine);
      assertEquals((-4327), token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'/', 'h', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-4327), javaCharStream0.getEndColumn());
      assertEquals((-4327), javaCharStream0.getLine());
      assertEquals((-4327), javaCharStream0.getBeginLine());
      assertEquals((-4327), javaCharStream0.getColumn());
      assertEquals((-4327), javaCharStream0.getBeginColumn());
      assertEquals((-4327), javaCharStream0.getEndLine());
      assertEquals("/", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token1.kind);
      assertEquals((-4327), token1.beginLine);
      assertEquals((-4327), token1.beginColumn);
      assertEquals((-4327), token1.endColumn);
      assertEquals((-4327), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'/', 'h', 'e', 'K', 'j', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-4322), javaCharStream0.getEndColumn());
      assertEquals((-4322), javaCharStream0.getColumn());
      assertEquals((-4327), javaCharStream0.getLine());
      assertEquals((-4327), javaCharStream0.getBeginLine());
      assertEquals((-4326), javaCharStream0.getBeginColumn());
      assertEquals((-4327), javaCharStream0.getEndLine());
      assertEquals("heKjF", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals((-4327), token2.endLine);
      assertEquals((-4322), token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals((-4326), token2.beginColumn);
      assertEquals((-4327), token2.beginLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#k]~j[Fq");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = ';';
      charArray0[2] = 'C';
      charArray0[3] = 'Z';
      charArray0[4] = 'f';
      charArray0[5] = 'd';
      charArray0[6] = '(';
      charArray0[7] = 'a';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'1', '#', 'k', ']', '~', 'j', '[', 'F'}, charArray0);
      assertEquals(8, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 89);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      assertNotNull(inputStreamReader0);
      
      String string0 = inputStreamReader0.getEncoding();
      assertEquals("ASCII", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)59;
      int int1 = sequenceInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)59}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(inputStreamReader0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals("q", token0.toString());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, token0.beginLine);
      assertEquals(89, token0.endColumn);
      assertEquals(89, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      Token token1 = Token.newToken('f');
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals("", token2.toString());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(89, token2.beginColumn);
      assertEquals(89, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+n=1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1863), (-1863));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(43, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      long long0 = stringReader0.skip((-1863));
      assertEquals((-1L), long0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1863), javaCharStream0.getEndLine());
      assertEquals((-1863), javaCharStream0.getLine());
      assertEquals((-1863), javaCharStream0.getEndColumn());
      assertEquals((-1863), javaCharStream0.getBeginColumn());
      assertEquals((-1863), javaCharStream0.getColumn());
      assertEquals((-1863), javaCharStream0.getBeginLine());
      assertEquals("+", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1863), token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals((-1863), token0.endLine);
      assertEquals((-1863), token0.beginLine);
      assertEquals((-1863), token0.beginColumn);
      assertNotNull(token0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-1863), javaCharStream0.getEndLine());
      assertEquals((-1863), javaCharStream0.getLine());
      assertEquals((-1862), javaCharStream0.getColumn());
      assertEquals((-1862), javaCharStream0.getEndColumn());
      assertEquals((-1862), javaCharStream0.getBeginColumn());
      assertEquals((-1863), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('n', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1863), javaCharStream0.getEndLine());
      assertEquals((-1863), javaCharStream0.getLine());
      assertEquals((-1862), javaCharStream0.getColumn());
      assertEquals((-1862), javaCharStream0.getEndColumn());
      assertEquals((-1862), javaCharStream0.getBeginColumn());
      assertEquals((-1863), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals((-1863), javaCharStream0.getEndLine());
      assertEquals((-1863), javaCharStream0.getLine());
      assertEquals((-1861), javaCharStream0.getBeginColumn());
      assertEquals((-1861), javaCharStream0.getColumn());
      assertEquals((-1863), javaCharStream0.getBeginLine());
      assertEquals((-1861), javaCharStream0.getEndColumn());
      assertEquals("=", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1861), token1.beginColumn);
      assertEquals((-1861), token1.endColumn);
      assertEquals((-1863), token1.beginLine);
      assertEquals((-1863), token1.endLine);
      assertEquals(87, token1.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 851, 21);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(851, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(851, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(851, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('t', char0);
      
      javaParserTokenManager0.curLexState = 21;
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(851, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(851, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(851, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(851, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(851, javaCharStream0.getLine());
      assertEquals(851, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(22, token0.beginColumn);
      assertEquals(851, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(851, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(851, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(851, javaCharStream0.getLine());
      assertEquals(851, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'X';
      StringReader stringReader0 = new StringReader("L60e");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('L', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("60e", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+n=1");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = 't';
      charArray0[3] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', '9', 't', 'Q'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 104);
      assertArrayEquals(new char[] {'9', '9', 't', 'Q'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'9', '9', 't', 'Q'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'9', '9', 't', 'Q'}, charArray0);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("99tQ", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(104, token0.beginColumn);
      assertEquals(107, token0.endColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'9', '9', 't', 'Q'}, charArray0);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'g';
      charArray0[2] = '~';
      charArray0[3] = '>';
      charArray0[4] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {',', 'g', '~', '>', 'l'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-236), (-2137));
      assertArrayEquals(new char[] {',', 'g', '~', '>', 'l'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('t', char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new char[] {',', 'g', '~', '>', 'l'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {',', 'g', '~', '>', 'l'}, charArray0);
      assertEquals((-2137), javaCharStream1.getColumn());
      assertEquals((-236), javaCharStream1.getEndLine());
      assertEquals((-236), javaCharStream1.getLine());
      assertEquals((-2137), javaCharStream1.getBeginColumn());
      assertEquals((-236), javaCharStream1.getBeginLine());
      assertEquals((-2137), javaCharStream1.getEndColumn());
      assertEquals(",", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(84, token0.kind);
      assertEquals((-236), token0.endLine);
      assertEquals((-236), token0.beginLine);
      assertEquals((-2137), token0.endColumn);
      assertEquals((-2137), token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {',', 'g', '~', '>', 'l'}, charArray0);
      assertEquals((-2136), javaCharStream1.getEndColumn());
      assertEquals((-236), javaCharStream1.getEndLine());
      assertEquals((-2136), javaCharStream1.getColumn());
      assertEquals((-236), javaCharStream1.getLine());
      assertEquals((-236), javaCharStream1.getBeginLine());
      assertEquals((-2136), javaCharStream1.getBeginColumn());
      assertEquals("g", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-2136), token1.beginColumn);
      assertEquals((-2136), token1.endColumn);
      assertEquals((-236), token1.beginLine);
      assertEquals((-236), token1.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {',', 'g', '~', '>', 'l'}, charArray0);
      assertEquals((-2136), javaCharStream1.getEndColumn());
      assertEquals((-236), javaCharStream1.getEndLine());
      assertEquals((-2136), javaCharStream1.getColumn());
      assertEquals((-236), javaCharStream1.getLine());
      assertEquals((-236), javaCharStream1.getBeginLine());
      assertEquals((-2136), javaCharStream1.getBeginColumn());
      assertEquals("g", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-236), token2.endLine);
      assertEquals((-236), token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals((-2136), token2.endColumn);
      assertEquals((-2136), token2.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (-236));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -236. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+n=1");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'9', 'L', 'L', 'Q'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 104);
      assertArrayEquals(new char[] {'9', 'L', 'L', 'Q'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'9', 'L', 'L', 'Q'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'9', 'L', 'L', 'Q'}, charArray0);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals("9LLQ", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.endLine);
      assertEquals(104, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(107, token0.endColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'9', 'L', 'L', 'Q'}, charArray0);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'X';
      StringReader stringReader0 = new StringReader("L60e");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("L60e", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#k]~j[Fq");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = 'M';
      charArray0[3] = 't';
      charArray0[4] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '^'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-174), 33);
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '^'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '^'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '^'}, charArray0);
      assertEquals((-174), javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals((-174), javaCharStream0.getLine());
      assertEquals((-174), javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals("l4Mt", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-174), token0.endLine);
      assertEquals(36, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-174), token0.beginLine);
      assertEquals(33, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '^'}, charArray0);
      assertEquals((-174), javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals((-174), javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals((-174), javaCharStream0.getEndLine());
      assertEquals("^", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(107, token1.kind);
      assertEquals((-174), token1.endLine);
      assertEquals(37, token1.endColumn);
      assertEquals(37, token1.beginColumn);
      assertEquals((-174), token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'H';
      charArray0[3] = '1';
      charArray0[5] = '<';
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)10, (byte)38, (byte)89, (byte)30, (byte) (-10), (byte)75, (byte) (-64), (byte)25}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)25, (byte)10, (byte)38, (byte)89, (byte)30, (byte) (-10), (byte)75, (byte) (-64), (byte)25}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, (byte)10, (-6306), (byte)89);
      assertArrayEquals(new byte[] {(byte)25, (byte)10, (byte)38, (byte)89, (byte)30, (byte) (-10), (byte)75, (byte) (-64), (byte)25}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)25, (byte)10, (byte)38, (byte)89, (byte)30, (byte) (-10), (byte)75, (byte) (-64), (byte)25}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream1.BeginToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new byte[] {(byte)25, (byte)10, (byte)38, (byte)89, (byte)30, (byte) (-10), (byte)75, (byte) (-64), (byte)25}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-6306), javaCharStream1.getColumn());
      assertEquals(10, javaCharStream1.getEndLine());
      assertEquals(10, javaCharStream1.getLine());
      assertEquals((-6306), javaCharStream1.getEndColumn());
      assertEquals(10, javaCharStream1.getBeginLine());
      assertEquals((-6306), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0019', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)25, (byte)10, (byte)38, (byte)89, (byte)30, (byte) (-10), (byte)75, (byte) (-64), (byte)25}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(11, javaCharStream1.getLine());
      assertEquals(11, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(11, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("&", token0.toString());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(11, token0.endLine);
      assertEquals(11, token0.beginLine);
      assertEquals(105, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '<';
      charArray0[5] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'H', '1', '1', '1', '<', '<'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3215), 101);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-3215), 902, 412);
      assertArrayEquals(new char[] {'H', '1', '1', '1', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new char[] {'H', '1', '1', '1', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'H', '1', '1', '1', '<', '<'}, charArray0);
      assertEquals((-3215), javaCharStream1.getLine());
      assertEquals(905, javaCharStream1.getColumn());
      assertEquals(902, javaCharStream1.getBeginColumn());
      assertEquals((-3215), javaCharStream1.getBeginLine());
      assertEquals((-3215), javaCharStream1.getEndLine());
      assertEquals(905, javaCharStream1.getEndColumn());
      assertEquals("H111", token0.toString());
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(902, token0.beginColumn);
      assertEquals((-3215), token0.endLine);
      assertEquals((-3215), token0.beginLine);
      assertEquals(905, token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'H', '1', '1', '1', '<', '<'}, charArray0);
      assertEquals((-3215), javaCharStream1.getLine());
      assertEquals(907, javaCharStream1.getColumn());
      assertEquals((-3215), javaCharStream1.getBeginLine());
      assertEquals((-3215), javaCharStream1.getEndLine());
      assertEquals(906, javaCharStream1.getBeginColumn());
      assertEquals(907, javaCharStream1.getEndColumn());
      assertEquals("<<", token1.toString());
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token1.kind);
      assertEquals(906, token1.beginColumn);
      assertEquals((-3215), token1.beginLine);
      assertEquals(907, token1.endColumn);
      assertEquals((-3215), token1.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {'H', '1', '1', '1', '<', '<'}, charArray0);
      assertEquals((-3215), javaCharStream1.getLine());
      assertEquals(907, javaCharStream1.getColumn());
      assertEquals((-3215), javaCharStream1.getBeginLine());
      assertEquals((-3215), javaCharStream1.getEndLine());
      assertEquals(907, javaCharStream1.getBeginColumn());
      assertEquals(907, javaCharStream1.getEndColumn());
      assertEquals("", token2.toString());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(907, token2.beginColumn);
      assertEquals((-3215), token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(907, token2.endColumn);
      assertEquals((-3215), token2.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("...");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1667), (-1667));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      long long0 = stringReader1.skip((-1667));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1667), javaCharStream0.getBeginLine());
      assertEquals((-1667), javaCharStream0.getBeginColumn());
      assertEquals((-1667), javaCharStream0.getLine());
      assertEquals((-1667), javaCharStream0.getEndColumn());
      assertEquals((-1667), javaCharStream0.getEndLine());
      assertEquals((-1667), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('.', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1667), javaCharStream0.getBeginLine());
      assertEquals((-1666), javaCharStream0.getBeginColumn());
      assertEquals((-1667), javaCharStream0.getLine());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertEquals((-1667), javaCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1666), token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals((-1666), token0.beginColumn);
      assertEquals((-1667), token0.endLine);
      assertEquals((-1667), token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals((-1667), javaCharStream0.getBeginLine());
      assertEquals((-1666), javaCharStream0.getBeginColumn());
      assertEquals((-1667), javaCharStream0.getLine());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertEquals((-1667), javaCharStream0.getEndLine());
      assertEquals(".", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1666), token1.beginColumn);
      assertEquals((-1667), token1.beginLine);
      assertEquals((-1667), token1.endLine);
      assertEquals((-1666), token1.endColumn);
      assertEquals(85, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1717986918);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1717986918. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zSdR:H,");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 40, 124);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals("zSdR", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(40, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.endLine);
      assertEquals(124, token0.beginColumn);
      assertEquals(127, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1#k]~j[Fq");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '4';
      charArray0[2] = 'M';
      charArray0[3] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 33, 1);
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '\u0000'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('l', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '\u0000'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'l', '4', 'M', 't', '\u0000'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("4Mt", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(33, token0.beginLine);
      assertEquals(33, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 33, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW'#4b;5? y/r$_q ");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'^', 't', 't', 't'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertArrayEquals(new char[] {'^', 't', 't', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'^', 't', 't', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'^', 't', 't', 't'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("^", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(107, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'^', 't', 't', 't'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("ttt", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'^', 't', 't', 't'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      StringReader stringReader0 = new StringReader("q~)mjq4:Eh\"O8");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 355);
      assertNotNull(pushbackReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0, (-174), (-174));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals((-174), javaCharStream0.getEndColumn());
      assertEquals((-174), javaCharStream0.getLine());
      assertEquals((-174), javaCharStream0.getColumn());
      assertEquals((-174), javaCharStream0.getEndLine());
      assertEquals((-174), javaCharStream0.getBeginLine());
      assertEquals((-174), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('q', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-174), javaCharStream0.getEndColumn());
      assertEquals((-174), javaCharStream0.getLine());
      assertEquals((-174), javaCharStream0.getColumn());
      assertEquals((-174), javaCharStream0.getEndLine());
      assertEquals((-174), javaCharStream0.getBeginLine());
      assertEquals((-174), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-174), javaCharStream0.getLine());
      assertEquals((-173), javaCharStream0.getEndColumn());
      assertEquals((-173), javaCharStream0.getColumn());
      assertEquals((-174), javaCharStream0.getEndLine());
      assertEquals((-174), javaCharStream0.getBeginLine());
      assertEquals((-173), javaCharStream0.getBeginColumn());
      assertEquals("~", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-174), token0.beginLine);
      assertEquals((-173), token0.beginColumn);
      assertEquals((-173), token0.endColumn);
      assertEquals(90, token0.kind);
      assertEquals((-174), token0.endLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-174), javaCharStream0.getLine());
      assertEquals((-173), javaCharStream0.getEndColumn());
      assertEquals((-173), javaCharStream0.getColumn());
      assertEquals((-174), javaCharStream0.getEndLine());
      assertEquals((-174), javaCharStream0.getBeginLine());
      assertEquals((-173), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals((-174), javaCharStream0.getLine());
      assertEquals((-173), javaCharStream0.getEndColumn());
      assertEquals((-173), javaCharStream0.getColumn());
      assertEquals((-174), javaCharStream0.getEndLine());
      assertEquals((-174), javaCharStream0.getBeginLine());
      assertEquals((-173), javaCharStream0.getBeginColumn());
      assertEquals("~", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-173), token1.endColumn);
      assertEquals(90, token1.kind);
      assertEquals((-174), token1.beginLine);
      assertEquals((-173), token1.beginColumn);
      assertEquals((-174), token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'Q';
      charArray0[2] = 't';
      charArray0[3] = 'L';
      charArray0[4] = 't';
      charArray0[5] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'t', 'Q', 't', 'L', 't', 'O'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 11);
      assertArrayEquals(new char[] {'t', 'Q', 't', 'L', 't', 'O'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 50, (-1));
      assertArrayEquals(new char[] {'t', 'Q', 't', 'L', 't', 'O'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new char[] {'t', 'Q', 't', 'L', 't', 'O'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'t', 'Q', 't', 'L', 't', 'O'}, charArray0);
      assertEquals(50, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(50, javaCharStream1.getBeginLine());
      assertEquals(50, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals("tQtLtO", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertEquals(50, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(50, token0.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'t', 'Q', 't', 'L', 't', 'O'}, charArray0);
      assertEquals(50, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(50, javaCharStream1.getBeginLine());
      assertEquals(50, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"=\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      charArray0[2] = 'I';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'\"', '=', '\"', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)31;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 1);
      assertArrayEquals(new byte[] {(byte)114, (byte)38, (byte)2, (byte)80, (byte)31, (byte)24}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)114, (byte)38, (byte)2, (byte)80, (byte)31, (byte)24}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)114, (byte)38, (byte)2, (byte)80, (byte)31, (byte)24}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)114, (byte)38, (byte)2, (byte)80, (byte)31, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)114, (byte)38, (byte)2, (byte)80, (byte)31, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)114, (byte)38, (byte)2, (byte)80, (byte)31, (byte)24}, byteArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("P", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
      assertArrayEquals(new byte[] {(byte)114, (byte)38, (byte)2, (byte)80, (byte)31, (byte)24}, byteArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("bu");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 19, 352);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(353, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals(353, javaCharStream0.getColumn());
      assertEquals("bu", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(19, token0.endLine);
      assertEquals(353, token0.endColumn);
      assertEquals(19, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(352, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(353, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals(353, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"while\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\"', char0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("while", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(65, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+n=1");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      StringReader stringReader1 = new StringReader("*E]i}&U%~=h");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read(charArray0);
      assertNotSame(stringReader1, stringReader0);
      assertArrayEquals(new char[] {'*', 'E', ']', 'i'}, charArray0);
      assertEquals(4, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 105, 105);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals("}", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.endLine);
      assertEquals(105, token0.endColumn);
      assertEquals(80, token0.kind);
      assertEquals(105, token0.beginColumn);
      assertEquals(105, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals("&", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(106, token1.endColumn);
      assertEquals(106, token1.beginColumn);
      assertEquals(105, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(105, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals("&", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token2.beginLine);
      assertEquals(105, token2.endLine);
      assertEquals(105, token2.kind);
      assertEquals(106, token2.endColumn);
      assertEquals(106, token2.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("m$%(+\"{B_/IS+_|gi");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("tviC", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \"C\" (67), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("m$%(+\"{B_/IS+_|gi");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("tviC", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 3);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: \"C\" (67), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+n=1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 20, (-856));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("*E]i}&U%~=h");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[4] = '{';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      int int0 = stringReader1.read(charArray0);
      assertNotSame(stringReader1, stringReader0);
      assertArrayEquals(new char[] {'*', 'E', ']', 'i', '}', '&', 'U'}, charArray0);
      assertEquals(7, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 103, 31);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals((-856), javaCharStream0.getEndColumn());
      assertEquals((-856), javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals((-856), javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-856), token0.beginColumn);
      assertEquals((-856), token0.endColumn);
      assertEquals(20, token0.endLine);
      assertEquals(101, token0.kind);
      assertEquals(20, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(31, javaCharStream1.getBeginColumn());
      assertEquals(103, javaCharStream1.getBeginLine());
      assertEquals(103, javaCharStream1.getEndLine());
      assertEquals(31, javaCharStream1.getEndColumn());
      assertEquals(103, javaCharStream1.getLine());
      assertEquals(31, javaCharStream1.getColumn());
      assertEquals("%", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(31, token1.endColumn);
      assertEquals(31, token1.beginColumn);
      assertEquals(103, token1.beginLine);
      assertEquals(103, token1.endLine);
      assertEquals(108, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals("%", token2.toString());
      assertEquals(31, javaCharStream1.getBeginColumn());
      assertEquals(103, javaCharStream1.getBeginLine());
      assertEquals(103, javaCharStream1.getEndLine());
      assertEquals(31, javaCharStream1.getEndColumn());
      assertEquals(103, javaCharStream1.getLine());
      assertEquals(31, javaCharStream1.getColumn());
      assertEquals(103, token2.beginLine);
      assertEquals(103, token2.endLine);
      assertEquals(108, token2.kind);
      assertEquals(31, token2.beginColumn);
      assertEquals(31, token2.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = 'U';
      charArray0[6] = '6';
      charArray0[7] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'r', '6', '6', '6', '6', 'U', '6', 'U'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 32, 32);
      assertArrayEquals(new char[] {'r', '6', '6', '6', '6', 'U', '6', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'r', '6', '6', '6', '6', 'U', '6', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'r', '6', '6', '6', '6', 'U', '6', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'r', '6', '6', '6', '6', 'U', '6', 'U'}, charArray0);
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals("r6666U6U", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(32, token0.endLine);
      assertEquals(39, token0.endColumn);
      assertEquals(32, token0.beginColumn);
      assertEquals(32, token0.beginLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'r', '6', '6', '6', '6', 'U', '6', 'U'}, charArray0);
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals("r6666U6U", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(32, token1.endLine);
      assertEquals(32, token1.beginLine);
      assertEquals(32, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(39, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = 's';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = 'n';
      charArray0[7] = '9';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'t', 'v', 'i', 'C', ':', 'C', 'H', 'F'}, charArray0);
      assertEquals(8, int0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 249, 446);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(449, javaCharStream0.getColumn());
      assertEquals(449, javaCharStream0.getEndColumn());
      assertEquals(249, javaCharStream0.getEndLine());
      assertEquals(249, javaCharStream0.getLine());
      assertEquals(249, javaCharStream0.getBeginLine());
      assertEquals(446, javaCharStream0.getBeginColumn());
      assertEquals("3XFb", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(249, token0.beginLine);
      assertEquals(449, token0.endColumn);
      assertEquals(446, token0.beginColumn);
      assertEquals(249, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(449, javaCharStream0.getBeginColumn());
      assertEquals(449, javaCharStream0.getColumn());
      assertEquals(449, javaCharStream0.getEndColumn());
      assertEquals(249, javaCharStream0.getEndLine());
      assertEquals(249, javaCharStream0.getLine());
      assertEquals(249, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(249, token1.beginLine);
      assertEquals(449, token1.endColumn);
      assertEquals(249, token1.endLine);
      assertEquals(449, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals("", token2.toString());
      assertEquals(449, javaCharStream0.getBeginColumn());
      assertEquals(449, javaCharStream0.getColumn());
      assertEquals(449, javaCharStream0.getEndColumn());
      assertEquals(249, javaCharStream0.getEndLine());
      assertEquals(249, javaCharStream0.getLine());
      assertEquals(249, javaCharStream0.getBeginLine());
      assertEquals(249, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(249, token2.endLine);
      assertEquals(449, token2.beginColumn);
      assertEquals(449, token2.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(449, javaCharStream0.getBeginColumn());
      assertEquals(449, javaCharStream0.getColumn());
      assertEquals(449, javaCharStream0.getEndColumn());
      assertEquals(249, javaCharStream0.getEndLine());
      assertEquals(249, javaCharStream0.getLine());
      assertEquals(249, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'B';
      charArray0[1] = '(';
      charArray0[3] = '6';
      charArray0[4] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'=', '(', '\u0000', '6', 'U'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'=', '(', '\u0000', '6', 'U'}, charArray0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2996, 32);
      assertArrayEquals(new char[] {'=', '(', '\u0000', '6', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'=', '(', '\u0000', '6', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'=', '(', '\u0000', '6', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'=', '(', '\u0000', '6', 'U'}, charArray0);
      assertEquals(2996, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(2996, javaCharStream0.getLine());
      assertEquals(2996, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals("=", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(87, token0.kind);
      assertEquals(2996, token0.beginLine);
      assertEquals(32, token0.endColumn);
      assertEquals(32, token0.beginColumn);
      assertEquals(2996, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'=', '(', '\u0000', '6', 'U'}, charArray0);
      assertEquals(2996, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(2996, javaCharStream0.getLine());
      assertEquals(2996, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals("(", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(33, token1.endColumn);
      assertEquals(2996, token1.endLine);
      assertEquals(33, token1.beginColumn);
      assertEquals(2996, token1.beginLine);
      assertEquals(77, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2996);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2996. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 108);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.nextCharInd = 7;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      javaCharStream0.prevCharIsLF = false;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      charArray0[1] = '4';
      charArray0[2] = '2';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[3] = '4';
      charArray0[4] = '|';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'c', 'o', 'm', '.', 's'}, charArray0);
      assertEquals(5, int0);
      
      javaCharStream0.bufcolumn = javaParserTokenManager1.jjnewLexState;
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals("4010", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.endLine);
      assertEquals(108, token0.beginLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(111, token0.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(".", token1.toString());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(85, token1.kind);
      assertEquals(112, token1.endColumn);
      assertEquals(112, token1.beginColumn);
      assertEquals(108, token1.endLine);
      assertEquals(108, token1.beginLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 'L';
      charArray0[2] = 't';
      charArray0[3] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'t', 'L', 't', 't'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 104, 87);
      assertArrayEquals(new char[] {'t', 'L', 't', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'t', 'L', 't', 't'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'t', 'L', 't', 't'}, charArray0);
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals("tLtt", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token0.endColumn);
      assertEquals(104, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginColumn);
      assertEquals(104, token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'t', 'L', 't', 't'}, charArray0);
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uV5LZI");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3061), (-1180));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-3061), javaCharStream0.getBeginLine());
      assertEquals((-1180), javaCharStream0.getBeginColumn());
      assertEquals((-1180), javaCharStream0.getColumn());
      assertEquals((-3061), javaCharStream0.getLine());
      assertEquals((-3061), javaCharStream0.getEndLine());
      assertEquals((-1180), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('u', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-3061), javaCharStream0.getBeginLine());
      assertEquals((-1179), javaCharStream0.getColumn());
      assertEquals((-3061), javaCharStream0.getLine());
      assertEquals((-3061), javaCharStream0.getEndLine());
      assertEquals((-1179), javaCharStream0.getEndColumn());
      assertEquals((-1179), javaCharStream0.getBeginColumn());
      assertEquals("V", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1179), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1179), token0.beginColumn);
      assertEquals((-3061), token0.endLine);
      assertEquals((-3061), token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'Q';
      charArray0[2] = 'e';
      charArray0[3] = 'L';
      charArray0[4] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'e', 'Q', 'e', 'L', 'e', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, 57);
      assertArrayEquals(new char[] {'e', 'Q', 'e', 'L', 'e', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'e', 'Q', 'e', 'L', 'e', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'e', 'Q', 'e', 'L', 'e', '\u0000'}, charArray0);
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals("eQeLe", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, token0.endColumn);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'e', 'Q', 'e', 'L', 'e', '\u0000'}, charArray0);
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XW'#4b;5? y/r$_q ");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-64)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-64)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-64)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-64)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)75, (byte) (-64)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("K", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8b;tT't{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('8', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("b", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8b;tT't{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 34, 34);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("8b", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('c', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("o", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+n=1");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = '^';
      charArray0[2] = 'M';
      charArray0[3] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'M', '^', 'M', '4'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-822), 10);
      assertArrayEquals(new char[] {'M', '^', 'M', '4'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'M', '^', 'M', '4'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'M', '^', 'M', '4'}, charArray0);
      assertEquals((-822), javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals((-822), javaCharStream0.getBeginLine());
      assertEquals((-822), javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals("M", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-822), token0.endLine);
      assertEquals((-822), token0.beginLine);
      assertEquals(10, token0.beginColumn);
      assertEquals(10, token0.endColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'M', '^', 'M', '4'}, charArray0);
      assertEquals((-822), javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals((-822), javaCharStream0.getBeginLine());
      assertEquals((-822), javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'M', '^', 'M', '4'}, charArray0);
      assertEquals((-822), javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals((-822), javaCharStream0.getBeginLine());
      assertEquals((-822), javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals("^", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(11, token1.beginColumn);
      assertEquals(11, token1.endColumn);
      assertEquals((-822), token1.endLine);
      assertEquals(107, token1.kind);
      assertEquals((-822), token1.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(54, int0);
      
      int int1 = stringReader0.read();
      assertEquals(47, int1);
      assertFalse(int1 == int0);
      
      int int2 = stringReader0.read();
      assertEquals(70, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1667), (-3074));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.curChar = 'R';
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('i', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("O", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("O", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tviC:CHF3XFb");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'c';
      charArray0[2] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'2', 'c', 'n'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 614, (-785));
      assertArrayEquals(new char[] {'2', 'c', 'n'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 295);
      assertArrayEquals(new char[] {'2', 'c', 'n'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertNotNull(lineNumberReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(lineNumberReader0);
      assertArrayEquals(new char[] {'2', 'c', 'n'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new char[] {'2', 'c', 'n'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'2', 'c', 'n'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertArrayEquals(new char[] {'2', 'c', 'n'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals("2cn", token0.toString());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'r';
      charArray0[4] = 'g';
      charArray0[5] = 'r';
      charArray0[6] = 'g';
      charArray0[7] = 'r';
      charArray0[8] = 'r';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'r', 'g', 'r', 'g', 'r', 'r'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 32, 69);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'r', 'g', 'r', 'g', 'r', 'r'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'r', 'g', 'r', 'g', 'r', 'r'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new char[] {'g', 'g', 'g', 'r', 'g', 'r', 'g', 'r', 'r'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'g', 'g', 'g', 'r', 'g', 'r', 'g', 'r', 'r'}, charArray0);
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals("gggrgrgrr", token0.toString());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.beginColumn);
      assertEquals(32, token0.endLine);
      assertEquals(77, token0.endColumn);
      assertEquals(32, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'r', 'g', 'r', 'g', 'r', 'r'}, charArray0);
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals("gggrgrgrr", token1.toString());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token1.endLine);
      assertEquals(77, token1.endColumn);
      assertEquals(32, token1.beginLine);
      assertEquals(69, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6/FiO:'~_:u");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-856), 79);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("*E]i}&U%~=h");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-856), (-1));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-856), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-856), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-856), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals("*", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-856), token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals((-856), token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals((-856), javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals((-856), javaCharStream0.getLine());
      assertEquals((-856), javaCharStream0.getEndLine());
      assertEquals("6", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-856), token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(79, token1.beginColumn);
      assertEquals(79, token1.endColumn);
      assertEquals((-856), token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9y`:\"PH=\"|_+d_");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("l<1");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 77, 352);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(352, javaCharStream0.getColumn());
      assertEquals(77, javaCharStream0.getEndLine());
      assertEquals(77, javaCharStream0.getLine());
      assertEquals(352, javaCharStream0.getEndColumn());
      assertEquals(77, javaCharStream0.getBeginLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals("l", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(352, token0.beginColumn);
      assertEquals(352, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(77, token0.endLine);
      assertEquals(77, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(352, javaCharStream0.getColumn());
      assertEquals(77, javaCharStream0.getEndLine());
      assertEquals(77, javaCharStream0.getLine());
      assertEquals(352, javaCharStream0.getEndColumn());
      assertEquals(77, javaCharStream0.getBeginLine());
      assertEquals(352, javaCharStream0.getBeginColumn());
      assertEquals("l", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(352, token0.beginColumn);
      assertEquals(352, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(77, token0.endLine);
      assertEquals(77, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v(M[$O>OIwq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 74, 26);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      javaParserTokenManager0.defaultLexState = (-2205);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '~';
      charArray0[4] = '4';
      charArray0[5] = '|';
      charArray0[7] = '4';
      charArray0[8] = '4';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'v', '(', 'M', '[', '$', 'O', '>', 'O', 'I'}, charArray0);
      assertEquals(9, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals("wq", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(27, token0.endColumn);
      assertEquals(26, token0.beginColumn);
      assertEquals(74, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(74, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bo9H'lean");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 120, 120);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(120, javaCharStream0.getBeginColumn());
      assertEquals(120, javaCharStream0.getColumn());
      assertEquals(120, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('b', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals(120, javaCharStream0.getEndLine());
      assertEquals("o9H", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(121, token0.beginColumn);
      assertEquals(123, token0.endColumn);
      assertEquals(120, token0.endLine);
      assertEquals(120, token0.beginLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      char char1 = javaCharStream0.BeginToken();
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginColumn());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(120, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals('\'', char1);
      assertFalse(char1 == char0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(128, javaCharStream0.getEndColumn());
      assertEquals(120, javaCharStream0.getEndLine());
      assertEquals("lean", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(120, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(120, token1.beginLine);
      assertEquals(128, token1.endColumn);
      assertEquals(125, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }
}
