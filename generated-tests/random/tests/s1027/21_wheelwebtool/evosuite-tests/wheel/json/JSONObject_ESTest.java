/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:22:12 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Float.max((-1.0F), (-1.0F));
      Float.isFinite((-1.0F));
      float float1 = (-1.0F);
      Float.max((-1.0F), (-1.0F));
      Float.max((-1.0F), (-1.0F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject.getNames(jSONObject0);
      Double double0 = new Double((-1.0F));
      jSONObject0.append("JSONArray initial value should be a string or collection or array.", double0);
      jSONObject0.optString("JSONArray initial value should be a string or collection or array.");
      jSONObject0.length();
      try { 
        jSONObject0.get("wheel.json.JSONArray@0000000021");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000021\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double((-916.117738477087));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("getvalueOf", (-1623L));
      jSONObject1.toString();
      Double.sum((-1.0), (-2400.23097143976));
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, double0);
      jSONObject2.toString();
      Double.isFinite((-916.117738477087));
      Double.min((-916.117738477087), 950L);
      jSONObject0.optLong("d@ /6)(:\"`j,(c", 950L);
      jSONObject0.optDouble("Oo", 1725.0);
      Double.min((-52.532717633319), 950L);
      StringWriter stringWriter0 = new StringWriter(4);
      jSONObject0.write(stringWriter0);
      jSONObject1.optInt("true", 2);
      try { 
        jSONObject2.getString("d@ /6)(:\"`j,(c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d@ /6)(:\\\"`j,(c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float float0 = (-1003.6518F);
      Float float1 = new Float((-1003.6518F));
      Float.sum((-1003.6518F), (-1003.6518F));
      Float.min((-144.0F), (-1003.6518F));
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = "toS";
      JSONObject jSONObject1 = jSONObject0.putOpt("toS", "toS");
      String string1 = "_:FRu}f";
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      jSONObject0.put("_:FRu}f", (Map) hashMap0);
      jSONObject1.optJSONObject("_:FRu}f");
      String string2 = "#{";
      String string3 = "9";
      try { 
        jSONObject1.getInt("isopt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isopt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(91);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Float float0 = new Float((-3479.0F));
      String string0 = JSONObject.valueToString(float0, 861, 32);
      jSONObject0.toString(55, 55);
      Boolean boolean0 = new Boolean("gethashCode");
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      Integer.compare(58, 4);
      jSONObject0.optDouble("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Float@0000000004", true);
      jSONObject2.toString(158);
      jSONObject2.optBoolean("java.lang.Float@0000000004");
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = (-3040);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("65`u1", (Collection) linkedList0);
      String string0 = "{}.AM0k{^`*FK";
      Map<Float, Object> map0 = null;
      JSONObject jSONObject2 = new JSONObject((Map) null);
      jSONObject1.put("{}.AM0k{^`*FK", (Object) jSONObject2);
      jSONObject1.putOpt("65`u1", linkedList0);
      jSONObject0.toString((-3040));
      String string1 = "issum";
      jSONObject0.optLong("issum", 0L);
      JSONObject jSONObject3 = new JSONObject((Map) null);
      JSONObject jSONObject4 = jSONObject2.append("{}.AM0k{^`*FK", jSONObject3);
      try { 
        jSONObject4.getBoolean("{}.AM0k{^`*FK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}.AM0k{^`*FK\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.keySet();
      Boolean boolean0 = Boolean.valueOf("wheel.json.JSONObject$1");
      Boolean.logicalXor(false, false);
      hashMap0.put("4", boolean0);
      Boolean boolean1 = new Boolean(false);
      Boolean.logicalXor(true, true);
      hashMap0.put("Lj%oXHn", boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("Lj%oXHn");
      String string0 = jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Boolean@0000000002", false);
      jSONObject0.optLong("a;[ID\"R^Jf0Mhl");
      jSONObject0.optDouble("wheel.json.JSONObject$1", 0.0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.getBoolean("java.lang.Boolean@0000000002");
      jSONObject0.optInt("Xy5vh)/w]Ws#");
      jSONObject0.put("java.lang.Boolean@0000000002", 0.0);
      jSONObject1.put("=hg9te", false);
      jSONObject1.optDouble("isoptJSONObject", 0.0);
      String string1 = jSONObject1.optString("4", "=hg9te");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      hashMap0.put(jSONObject0, "dec");
      hashMap0.replace(jSONObject0, "em!#./R*AJ[", "isnotify");
      hashMap0.put(jSONObject0, "em!#./R*AJ[");
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray1);
      jSONObject1.put("dec", 0.0);
      jSONArray0.optDouble(114);
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(0.0F);
      Float.min((-3805.3F), 1.0F);
      Float.isFinite(0.0F);
      JSONObject.valueToString(float0, 1658, 1501);
      try { 
        jSONObject0.getDouble("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("Z6C2gCt\u0005r\"gP$}", stringArray0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("Z6C2gCt\u0005r\"gP$}", (Map) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject0.getJSONObject("Z6C2gCt\u0005r\"gP$}");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double((-3251.90564112));
      Double.max((-588.3100055399175), (-3251.90564112));
      Double.min(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.max(1.0, 0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("to", double0);
      jSONObject1.accumulate("to", "to");
      JSONObject jSONObject2 = jSONObject1.accumulate("to", jSONObject0);
      boolean boolean0 = true;
      jSONObject2.put("to", true);
      jSONObject1.toString();
      jSONObject1.optDouble("] is not a JSONArray.", 0.0);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(1983, 1983);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("BJ\"", 0.0);
      Float float0 = new Float(2367.2327F);
      Integer integer0 = new Integer(1983);
      hashMap0.put(float0, integer0);
      Integer integer1 = new Integer(0);
      Integer.getInteger("x`??{qxErbvW=g", 0);
      jSONObject0.put("x`??{qxErbvW=g", (Object) integer1);
      jSONObject1.getDouble("x`??{qxErbvW=g");
      jSONObject0.optDouble("x`??{qxErbvW=g");
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString(51);
      JSONObject jSONObject1 = jSONObject0.put("{}", (long) 51);
      jSONObject0.optDouble("wheel.json.JSONObject$Null", (double) 51);
      JSONObject jSONObject2 = jSONObject1.putOpt("000", "000");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject1.put("000", (Collection) linkedList0);
      jSONObject0.optBoolean("LC&-60XMpYFX,$");
      jSONObject0.append("000", "000");
      JSONObject.doubleToString(51.0);
      jSONObject3.optJSONObject("000");
      long long0 = jSONObject2.optLong((String) null, (long) 51);
      assertEquals(51L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("?nQlGosz>ompqdf}D");
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", (Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      linkedList0.removeLastOccurrence(object0);
      jSONObject0.put("isdecode", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.append("istoUnsignedInt", "JSONArray initial value should be a string or collection or array.");
      jSONObject2.remove("?nQlGosz>ompqdf}D");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("istoUnsignedInt");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(":TmWtH}Y&,n", ":TmWtH}Y&,n");
      jSONObject1.getJSONArray(":TmWtH}Y&,n");
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      jSONObject0.put("(seB&=g`%YRX:J'q", (Map) hashMap0);
      String string0 = JSONObject.valueToString("(seB&=g`%YRX:J'q");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "JSONObject[";
      JSONObject jSONObject0 = new JSONObject((Object) "JSONObject[");
      String string1 = "iswrite";
      jSONObject0.remove("JSONObject[");
      int int0 = 10;
      JSONObject jSONObject1 = jSONObject0.put("iswrite", 10);
      try { 
        jSONObject1.getString("QZOp<//8<r|7uKsgW*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QZOp<\\//8<r|7uKsgW*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getcompareTo");
      JSONObject jSONObject1 = jSONObject0.append("getcompareTo", "getcompareTo");
      jSONObject0.optDouble("] is not a number.");
      jSONObject0.optBoolean("98~E<");
      JSONObject.getNames(jSONObject1);
      Float float0 = new Float(Double.NaN);
      Float.min((-1.0F), (-1.0F));
      Float.sum((-5134.4277F), (-5134.4277F));
      Float.min((-1194.3579F), (-1194.3579F));
      Float.min(1085.87F, 1479.42F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "PQx(~Zvd2kXiHowc";
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong((int) (short)92, (long) (short)92);
      jSONObject0.accumulate("PQx(~Zvd2kXiHowc", jSONArray0);
      jSONArray0.put((int) (short)92, true);
      try { 
        jSONArray0.getBoolean(131);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[131] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      JSONObject jSONObject1 = jSONObject0.put("0", (-1.0));
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.names();
      jSONObject2.isNull("iaIsW7'7");
      jSONObject1.optDouble("is", (-1.0));
      JSONObject jSONObject3 = jSONObject0.put("getparseUnsignedLong", 1370);
      StringWriter stringWriter0 = new StringWriter(88);
      jSONObject3.write(stringWriter0);
      jSONObject2.optInt("0", 1370);
      JSONObject jSONObject4 = jSONObject0.put("0", (double) 88);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject4.append("0", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[0] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "xP8QY}Y>,Mh2GZ|@4";
      jSONObject0.optString("xP8QY}Y>,Mh2GZ|@4", "xP8QY}Y>,Mh2GZ|@4");
      jSONObject0.optBoolean((String) null, true);
      JSONObject jSONObject1 = jSONObject0.put("getvalueOf", (Object) hashMap0);
      JSONObject.valueToString(hashMap0);
      double double0 = 1.0;
      jSONObject0.put("xP8QY}Y>,Mh2GZ|@4", 1.0);
      String string1 = "H+r8] >w$xp9K:_{0kx";
      jSONObject1.optJSONArray("H+r8] >w$xp9K:_{0kx");
      try { 
        jSONObject1.getBoolean("xP8QY}Y>,Mh2GZ|@4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xP8QY}Y>,Mh2GZ|@4\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(object1);
      JSONObject jSONObject1 = jSONObject0.accumulate("3Z7FM(,uw(\":V$T", object0);
      JSONObject.doubleToString(2660.554);
      jSONObject0.optLong("[+y 6", 0L);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long((-1194L));
      Integer integer0 = new Integer(88);
      Long long1 = new Long(0L);
      hashMap0.put(long1, (Integer) null);
      hashMap0.put(long0, integer0);
      hashMap0.clear();
      JSONObject jSONObject2 = jSONObject0.put("[+y 6", (Map) hashMap0);
      String string0 = "0..";
      Byte byte0 = new Byte((byte)30);
      jSONObject2.putOpt("0..", byte0);
      JSONObject.doubleToString(Double.NaN);
      try { 
        jSONObject1.get("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(91);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Float float0 = new Float((-3479.0F));
      JSONObject.valueToString(float0, 861, 32);
      jSONObject0.toString(55, 55);
      Boolean boolean0 = new Boolean("gethashCode");
      jSONObject0.append(": ", boolean0);
      Integer.compare(58, 4);
      jSONObject0.optDouble("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000004", true);
      jSONObject1.toString(158);
      boolean boolean1 = jSONObject1.optBoolean("java.lang.Float@0000000004");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.put("-_I|moA~CGUIqTq*=G?", true);
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject.getNames(object0);
      String string0 = "x:Kg";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("x:Kg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of x:Kg
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(true);
      int int0 = 64;
      Integer integer0 = new Integer(64);
      Boolean.logicalOr(true, true);
      Boolean.logicalXor(true, true);
      hashMap0.put(boolean0, integer0);
      String string0 = "Bi!P]K*.Nmzb";
      Integer.sum((-2904), (-2904));
      jSONObject0.put("Bi!P]K*.Nmzb", (Object) "Bi!P]K*.Nmzb");
      jSONObject0.optBoolean("Bi!P]K*.Nmzb", true);
      Integer.getInteger("Bi!P]K*.Nmzb");
      jSONObject0.names();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      JSONObject jSONObject1 = jSONObject0.put("0", (-1.0));
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.names();
      jSONObject2.isNull("iaIsW7'7");
      jSONObject1.optDouble("is", (-1.0));
      JSONObject jSONObject3 = jSONObject0.put("getparseUnsignedLong", 1370);
      StringWriter stringWriter0 = new StringWriter(88);
      jSONObject3.write(stringWriter0);
      jSONObject2.optInt("0", 1370);
      JSONObject jSONObject4 = jSONObject0.put("0", (double) 88);
      try { 
        jSONObject4.get("xl)P>^;qz~'g '6?K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xl)P>^;qz~'g '6?K\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("iswait", (Map) hashMap0);
      double double0 = (-1.0);
      jSONArray0.put((Object) null);
      Float float0 = new Float((-1.0));
      String string0 = "Missing value";
      jSONObject1.optDouble("Missing value");
      JSONObject jSONObject2 = jSONObject1.accumulate("getparseUnsignedLong", float0);
      JSONObject.valueToString(linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject2.put("Expected '", object0);
      jSONObject2.put("getparseUnsignedLong", (Object) linkedList0);
      String string1 = "}\\P\"YiU";
      try { 
        jSONObject3.getJSONObject("` QS'_cuob`@6:w+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"` QS'_cuob`@6:w+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(35);
      Integer.toUnsignedLong(1840);
      Double double0 = new Double(35);
      JSONObject jSONObject1 = jSONObject0.putOpt("^", "^");
      hashMap0.replace(integer0, double0, (Double) null);
      jSONObject0.toString((-1003), 2589);
      jSONObject0.toString();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("^", integer0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      Writer writer1 = jSONObject0.write(writer0);
      jSONObject0.write(writer1);
      jSONObject1.put("AnphrtuA/1nRkFuOf(", false);
      try { 
        jSONObject2.getInt("^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "}fI./&d?F{S0M5:");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString();
      jSONArray0.optBoolean(2607, true);
      JSONArray jSONArray1 = jSONArray0.put(2607, (Map) null);
      jSONObject0.putOpt("}fI./&d?F{S0M5:", jSONArray0);
      jSONObject0.put("^IJ'T:~/2U }", false);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 10, 10);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("#H[b~&");
      JSONObject jSONObject1 = jSONObject0.put("#H[b~&", true);
      String string0 = "%O/Php;Fg:}7S";
      jSONObject0.optDouble("%O/Php;Fg:}7S");
      try { 
        jSONObject1.put(": ", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{A+ro=RBkWm");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {A+ro=RBkWm
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-42));
      Byte.toUnsignedLong((byte) (-42));
      hashMap0.put("] not found.", byte0);
      Byte byte1 = new Byte((byte)31);
      hashMap0.put("bq[xkoJ8f*8", byte1);
      Byte byte2 = new Byte((byte)106);
      Byte.compare((byte)106, (byte) (-42));
      Float float0 = new Float((double) 214L);
      Float.max(214L, (-1.0F));
      jSONObject0.append("] not found.", float0);
      hashMap0.replace("] not found.", byte2, byte2);
      String string0 = jSONObject0.toString((-1890));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "iscopyValueOf";
      jSONObject0.put("iscopyValueOf", 0L);
      jSONObject0.toString();
      jSONObject0.optLong("iscopyValueOf");
      int int0 = 49;
      jSONObject0.put("{\"java.lang.String@0000000004\":java.lang.Long@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", 49);
      String string1 = "m-8;C;&1-";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("iscopyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of iscopyValueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.length();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Oa", "Oa");
      jSONObject1.optString("Oa", "Oa");
      JSONObject jSONObject2 = new JSONObject((Object) "java.lang.String@0000000005");
      jSONObject1.put("Oa", 0L);
      jSONObject1.put("wheel.json.JSONObject$Null", (long) 1);
      jSONObject2.append("wheel.json.JSONObject$Null", jSONArray0);
      JSONObject.valueToString(jSONObject2);
      try { 
        jSONArray0.getLong(2505);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2505] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer.getInteger("get");
      JSONObject jSONObject1 = jSONObject0.put("EF*T?cQ", (Object) null);
      jSONObject1.optInt("get");
      jSONObject0.toString(0);
      jSONObject0.has("null");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Null key.";
      jSONObject0.optInt("Null key.", (-376));
      JSONObject jSONObject1 = jSONObject0.put("Null key.", 218);
      jSONObject1.append("", "");
      jSONObject1.optDouble("Null key.", 0.0);
      JSONObject.getNames(jSONObject0);
      String string1 = "\\|k";
      try { 
        jSONObject0.getBoolean("|k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalOr(false, true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Byte byte0 = new Byte((byte)122);
      Byte.toUnsignedInt((byte)69);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "NN$wvzGy:.-]";
      Byte.toUnsignedInt((byte)122);
      Byte.compare((byte)122, (byte)100);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("NN$wvzGy:.-]", (Collection) linkedList0);
      JSONObject.valueToString((Object) null, 2200, (byte)69);
      String string1 = "Unterminated string";
      Byte.compare((byte)69, (byte)11);
      jSONObject0.isNull("Unterminated string");
      try { 
        jSONObject1.getLong("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Long long0 = new Long((-614L));
      Long.compareUnsigned((-614L), (-614L));
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.max(0, (-614L));
      jSONObject0.optJSONArray("ishashCode");
      try { 
        jSONObject0.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("null", (-1L));
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("Expected a ',' or ']'", "Expected a ',' or ']'");
      JSONObject.doubleToString((-3135.281733545));
      jSONObject0.toString((-1176), (-1176));
      Boolean boolean0 = new Boolean("wheel.json.JSONException");
      JSONObject jSONObject1 = jSONObject0.accumulate("null", boolean0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONObject jSONObject2 = jSONObject0.accumulate("-3135.281733545", "Expected a ',' or ']'");
      Boolean.logicalAnd(true, true);
      JSONObject.quote("isreverseBytes");
      jSONObject2.toJSONArray(jSONArray0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      hashMap0.values();
      jSONObject1.optDouble("isreverseBytes", (double) (-1L));
      jSONObject2.put("null", (Map) hashMap0);
      jSONObject0.toString((-1176), 162);
      jSONObject0.keys();
      jSONObject1.optString("wheel.json.JSONException");
      StringWriter stringWriter0 = new StringWriter(65);
      jSONObject0.write(stringWriter0);
      jSONObject0.optLong(".", (-79L));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "V_^-t8$D";
      Byte byte0 = new Byte((byte) (-119));
      JSONObject jSONObject1 = jSONObject0.put("V_^-t8$D", (Object) byte0);
      String string1 = "8y";
      jSONObject0.optBoolean("8y");
      String string2 = "val";
      jSONObject1.getLong("V_^-t8$D");
      jSONObject0.optInt("val");
      try { 
        jSONObject1.get("8y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "d.f?";
      jSONObject0.optInt("");
      jSONObject0.optLong("d.f?", 0L);
      JSONObject jSONObject1 = jSONObject0.put("d.f?", (-3425.6754354));
      boolean boolean0 = true;
      JSONObject jSONObject2 = jSONObject1.put("d.f?", true);
      String string1 = "8>qZ\\";
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      jSONObject2.put("", (Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "8>qZ";
      stringArray0[2] = null;
      stringArray0[3] = "8>qZ";
      stringArray0[4] = "d.f?";
      stringArray0[5] = "d.f?";
      stringArray0[6] = "d.f?";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.putOpt((String) null, jSONObject3);
      try { 
        jSONObject0.getDouble("8>qZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8>qZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject$1";
      jSONObject0.putOpt("] is not a number.", (Object) null);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", 1250L);
      jSONObject1.keys();
      try { 
        jSONObject1.getJSONArray("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{m|=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 3 of {m|=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject.doubleToString((-1.0));
      JSONObject.doubleToString(1448.017);
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "1503.9.";
      Boolean boolean0 = new Boolean("1503.9.");
      Boolean.logicalOr(false, false);
      Short short0 = new Short((short)2);
      hashMap0.put(boolean0, short0);
      String string1 = null;
      boolean boolean1 = false;
      JSONObject jSONObject1 = jSONObject0.put("jFY9'39#R-C#h", false);
      String string2 = "1503.9.";
      jSONObject1.optLong("1503.9.");
      jSONObject1.toString(3149, 3149);
      try { 
        jSONObject0.put((String) null, 3022L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getparseLong";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      long long0 = (-1L);
      Integer integer0 = new Integer((-829));
      Integer.getInteger("getparseLong");
      Integer integer1 = new Integer((-829));
      hashMap0.getOrDefault(integer0, integer1);
      jSONObject0.optLong("getparseLong", (-1L));
      jSONObject0.remove((String) null);
      jSONObject0.opt((String) null);
      // Undeclared exception!
      try { 
        Short.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(160);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(160);
      stringWriter0.write("isreverseBytes");
      jSONObject0.write(stringWriter0);
      assertEquals("isreverseBytes{}", stringWriter0.toString());
      
      double double0 = jSONObject0.optDouble("getreverseBytes");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Float float0 = new Float((-1762.0F));
      Float.isFinite(0.0F);
      Float.max((-939.149F), (-1762.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optString("get");
      jSONObject0.optInt("rev");
      try { 
        jSONObject0.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Short short0 = new Short((short)17);
      Short.compare((short)128, (short)17);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has((String) null);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Byte byte0 = new Byte((byte)9);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)23);
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Double double0 = new Double((-1837.54));
      Byte byte1 = new Byte((byte)40);
      hashMap0.put(double0, byte1);
      jSONObject0.put("istrim", (Map) hashMap0);
      String string0 = jSONObject0.optString("", "istrim");
      assertEquals("istrim", string0);
      
      jSONObject0.optJSONObject("");
      jSONObject0.toString(92, (int) (byte)9);
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      
      String string2 = JSONObject.quote("");
      assertEquals("\"\"", string2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject.doubleToString((-4034.4873));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(120);
      jSONObject0.keys();
      JSONObject.quote("{}");
      jSONObject0.opt("-4034.4873");
      Integer integer0 = new Integer(120);
      int int0 = 912;
      Integer.max(912, 912);
      JSONObject.valueToString(integer0);
      try { 
        jSONObject0.getJSONArray("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a JSONObject.");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.accumulate("J", "] is not a JSONObject.");
      // Undeclared exception!
      jSONObject1.toString(1246, 1246);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      Double.max(0.0, (-2692.2));
      Double.max(0.0, (-2161.9244594490387));
      JSONObject jSONObject1 = jSONObject0.putOpt("zD#1g5`cr(}", double0);
      jSONObject1.optJSONArray("false");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(true);
      int int0 = 64;
      Integer integer0 = new Integer(64);
      Boolean.logicalXor(true, true);
      hashMap0.put(boolean0, integer0);
      String string0 = "Bi!P]K*.Nmzb";
      Integer.sum((-2904), (-2904));
      jSONObject0.optBoolean("Bi!P]K*.Nmzb", true);
      Integer.getInteger("Bi!P]K*.Nmzb");
      jSONObject0.names();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{0*{:3n \" 4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {0*{:3n \" 4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put(">%-CW1-S1", object0);
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      jSONObject0.toString((-815));
      jSONObject0.put("[", (Map) hashMap0);
      String string0 = "Expected '";
      jSONObject0.isNull("Expected '");
      int int0 = (-30803738);
      jSONObject1.toString((-30803738));
      try { 
        jSONObject0.get("r~H2kg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r~H2kg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ";Wwr{Q8I4#S_70c^l";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener(";Wwr{Q8I4#S_70c^l");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ;Wwr{Q8I4#S_70c^l
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Float float0 = new Float((-2333.1453F));
      Float.sum((-858.5771F), (-2739.9827F));
      Float.max((-2333.1453F), (-858.5771F));
      Float.max((-858.5771F), (-2739.9827F));
      Float.max(2655.0F, 2655.0F);
      JSONObject.valueToString(float0, 9, 9);
      Long long0 = new Long((-1172L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.opt("java.lang.Float@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("0");
      JSONObject jSONObject1 = jSONObject0.put("]", (Collection) linkedList0);
      try { 
        jSONObject1.getDouble("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "low";
      jSONObject0.names();
      jSONObject0.optLong("low");
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("QX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\n";
      stringArray0[1] = "is";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong((String) null);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalXor(true, false);
      Boolean.logicalOr(true, true);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0, (-185), (-185));
      String string0 = "";
      hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      jSONObject1.optLong("getvalueOf", 0L);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\n";
      stringArray0[1] = "is";
      stringArray0[2] = "de";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.put("ax8#Kk/{", (Map) hashMap0);
      jSONObject0.optDouble("\n", 0.0);
      hashMap0.entrySet();
      JSONObject jSONObject1 = jSONObject0.putOpt("hig", hashMap0);
      jSONObject1.optDouble("B]FiBZ#!O(e2WNuTN j");
      jSONObject1.optLong("B]FiBZ#!O(e2WNuTN j", (-1095L));
      int int0 = 32;
      jSONObject0.toString(32);
      Integer integer0 = new Integer(39);
      try { 
        Integer.decode("ax8#Kk/{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ax8#Kk/{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = (-3798L);
      Long long1 = new Long((-3798L));
      Long.max(161L, 1L);
      JSONObject.valueToString(long1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "\\r";
      JSONTokener jSONTokener0 = new JSONTokener("\r");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(1961, 1961);
      jSONObject0.keys();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("N.=[)A4Ra");
      jSONObject0.length();
      String string0 = "NKY XiyYlwV1`%Y\\";
      JSONObject jSONObject1 = jSONObject0.putOpt("RH", "RH");
      try { 
        jSONObject1.getInt("J?/2^p{}nIn+Itf;m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J?/2^p{}nIn+Itf;m\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove("isrotateLeft");
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalXor(true, false);
      Boolean.logicalXor(true, false);
      JSONObject.getNames((Object) boolean0);
      jSONObject0.optDouble("");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("getrotateRight", object0);
      JSONObject.valueToString(object0);
      jSONObject1.accumulate("{}", "{}");
      jSONObject0.optDouble("getrotateRight");
      jSONObject1.names();
      JSONObject jSONObject2 = jSONObject0.accumulate("isrotateLeft", "");
      JSONObject jSONObject3 = jSONObject2.put("", (Map) null);
      Object object1 = new Object();
      JSONObject jSONObject4 = jSONObject3.putOpt("", object1);
      jSONObject4.toString((-1137), (-1137));
      jSONObject2.optInt((String) null);
      jSONObject2.optBoolean("getrotateRight");
      jSONObject1.names();
      JSONObject.getNames(jSONObject0);
      JSONObject.doubleToString(1.0);
      jSONObject1.optJSONObject("UN'P'X]Y_");
      jSONObject4.put("[]f=XDScVxFT:9O?", (double) (-1137));
      assertEquals(5, jSONObject0.length());
      assertEquals(5, jSONObject4.length());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.optDouble("");
      Long long1 = new Long((-1710L));
      Long.toUnsignedString(0L);
      Long.getLong("]WK\"eKiy(7Z\"_/UBw)4");
      Long.sum(2383L, (-1L));
      Long.getLong("", long1);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = 817;
      jSONObject0.optDouble("1448.0170");
      jSONObject0.toString(817);
      jSONObject0.optBoolean("V_@=N*\",H");
      Double double0 = new Double(0.0);
      Double.max((-5920.8785553), (-1213.6351348403355));
      Double.max((-339.27), (-1213.6351348403355));
      JSONObject.testValidity(double0);
      try { 
        jSONObject0.getLong("V_@=N*\",H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V_@=N*\\\",H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "] not found.";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(47);
      String[] stringArray0 = new String[3];
      String string0 = "JSONArray initial value should be a string or collection or array.";
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "])IDc";
      stringArray0[2] = "4`?7`S/>";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.optDouble("JSONArray initial value should be a string or collection or array.", 1.0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = jSONObject0.put("4`?7`S/>", (Map) hashMap0);
      short short0 = (short)473;
      Short short1 = new Short((short)473);
      JSONObject.getNames((Object) short1);
      Integer integer1 = new Integer(47);
      hashMap0.put(integer0, "])IDc");
      hashMap0.put(integer1, "JSONArray initial value should be a string or collection or array.");
      jSONObject1.toString(47, 47);
      JSONObject.valueToString("4`?7`S/>");
      jSONObject1.optLong("4`?7`S/>");
      int int0 = 8448;
      try { 
        jSONObject0.get("\"^T=;y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"^T=;y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      String string0 = "s;8iJSW-^0^hCP";
      jSONObject0.optDouble("s;8iJSW-^0^hCP", 0.0);
      stringArray0[0] = "s;8iJSW-^0^hCP";
      stringArray0[1] = "JSONArray[";
      stringArray0[2] = ".";
      String string1 = "kEL*0HCw0}v}49\"A";
      jSONObject0.optDouble("=ZQ={j5jL!Q4O");
      stringArray0[3] = "kEL*0HCw0}v}49\"A";
      stringArray0[4] = ",U@";
      stringArray0[5] = "|jrf}^J6";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string2 = ",%:Xb^bUh,^fJNif\\%:";
      try { 
        jSONObject1.get(",%:Xb^bUh,^fJNif%:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",%:Xb^bUh,^fJNif%:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "!p`[DIY=&/ImS_";
      JSONTokener jSONTokener0 = new JSONTokener("!p`[DIY=&/ImS_");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of !p`[DIY=&/ImS_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "has";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of has
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[1] = "] is not a JSONObject.";
      stringArray0[2] = "Unterminated string";
      stringArray0[3] = ")";
      stringArray0[4] = "getgetClass";
      stringArray0[5] = "kgonfpM(";
      stringArray0[6] = "D*Uq";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = 103;
      JSONObject jSONObject1 = jSONObject0.put("*y$%5`$Vp]8U7K(", 103);
      jSONObject1.toString();
      jSONObject0.putOpt("getgetClass", "Unterminated string");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(103, false);
      jSONArray0.put(103, (Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[103] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }
}
