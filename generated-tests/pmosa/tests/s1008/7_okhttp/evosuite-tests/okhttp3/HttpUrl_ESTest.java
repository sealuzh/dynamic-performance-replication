/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:20:18 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: \r
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(">,ha%.vzg@*]i");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("hFYo>RY@\"d8c", "hFYo>RY@\"d8c");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("gIeuBfO{y#");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("", "hFYo>RY@\"d8c");
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(56, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("%2B");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("\n not found: size=", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword = "/(";
      httpUrl_Builder0.encodedPath("/(");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f1Z:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f1Z:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.query();
      httpUrl0.newBuilder();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, (String) null, (-2620), 0, (String) null, false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:y");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://y/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.parse("[");
      HttpUrl.Builder.ParseResult.values();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("[", 16, 16, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:i@i");
      String string0 = httpUrl0.encodedUsername();
      assertEquals("i", string0);
      
      httpUrl0.querySize();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://i@i/", httpUrl0.toString());
      assertEquals("i", httpUrl0.username());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      try { 
        HttpUrl.getChecked("ck[EAi wz!vpO");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ck[EAi wz!vpO
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "t";
      httpUrl_Builder0.host("t");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:ui@I");
      httpUrl0.newBuilder();
      httpUrl0.query();
      assertEquals("http://ui@i/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:u:I");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "8gVxU";
      try { 
        HttpUrl.getChecked("8gVxU");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 8gVxU
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(4);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:u");
      httpUrl0.query();
      httpUrl0.encodedPassword();
      assertEquals("http://u/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("ht:0i:Z");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      try { 
        HttpUrl.getChecked("~%7bqsqkv%22%7d%7d.&r$pjp%3fa");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ~%7bqsqkv%22%7d%7d.&r$pjp%3fa
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:ui@I");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameter("http:ui@I");
      String string0 = httpUrl0.encodedFragment();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("ui", httpUrl0.username());
      assertEquals("http://ui@i/", httpUrl0.toString());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:u");
      httpUrl0.encodedQuery();
      httpUrl0.query();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://u/", httpUrl0.toString());
      
      int int0 = HttpUrl.decodeHexDigit('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("dGO*8Kr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: dGO*8Kr
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0000ffff";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("0000ffff");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("0000ffff");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("aRgx");
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\r";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "ffff0000";
      httpUrl_Builder0.encodedPassword("ffff0000");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("", "zuC^lgg}MxAGmeJ");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(1167, "UQ's6maX%-QNr4`");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1167, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("%40");
      try { 
        MockURI.URI("%40", "%40", "%40");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: %40:%2540#%2540
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("7e");
      assertEquals(2, list0.size());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = HttpUrl.defaultPort("7e");
      int int1 = HttpUrl.decodeHexDigit('m');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.defaultPort("|*GBCO}]dw-:Sck(x%S");
      try { 
        HttpUrl.getChecked("|*GBCO}]dw-:Sck(x%S");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for |*GBCO}]dw-:Sck(x%S
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      String string1 = "\\[Mef02vS#lpt!2m";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("[Mef02vS#lpt!2m");
      String string2 = "";
      httpUrl_Builder2.addEncodedPathSegments("");
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("[Mef02vS#lpt!2m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: [Mef02vS#lpt!2m
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "GC#BcG2]~O0^}";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("GC#BcG2]~O0^}");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("GC#BcG2]~O0^}");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("GC#BcG2]~O0^}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: GC#BcG2]~O0^}
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 0;
      String string0 = "85k':[Q%J";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "]";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("]");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("]");
      httpUrl_Builder1.encodedUsername = "";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("]");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setPathSegment(0, "]");
      int int0 = (-86);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.removePathSegment((-86));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("%20u1%5E%v*J1");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "~%Yo04`+";
      httpUrl_Builder0.setEncodedPathSegment(0, "~%Yo04`+");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters(")");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments(" u1^%v*J1/1h20xoS");
      String string0 = "z.R9/ik#^G/TST";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("z.R9/ik#^G/TST", ")");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.password("o");
      httpUrl_Builder5.encodedQuery("");
      int int0 = (-1135);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1135));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("`7%@");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("://");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: ://
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      httpUrl_Builder1.encodedQueryNamesAndValues = list0;
      httpUrl_Builder1.removeAllEncodedQueryParameters("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "encodedPath == null";
      HttpUrl.defaultPort("encodedPath == null");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("encodedPath == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("encodedPath == null");
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("");
      httpUrl_Builder0.addQueryParameter("", "encodedPath == null");
      httpUrl_Builder4.removeAllEncodedQueryParameters("t']N5e$");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("/bL/;_|t?", "size < ");
      String string0 = "1)S9P";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("1)S9P");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("1)S9P");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedFragment("size < ");
      httpUrl_Builder4.query("encodedPassword == null");
      String string1 = "endIndex > length(";
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("encodedPassword == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("\r");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: \r
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(LhljC\u0004_cI$8v$l");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues(")jQ+=");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "b#\"";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("b#\"");
      httpUrl_Builder0.addQueryParameter("b#\"", "b#\"");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("b#\"");
      String string1 = "";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("b#\"", "");
      httpUrl_Builder3.username("dM(CC``\tGQ@:k]");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(45, "b#\"");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "yE%+=e`bi\\}y";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("yE%+=e`bi}y");
      int int0 = 98;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(98, "yE%+=e`bi}y");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("a_~=nD<i*JQ)[Qmb~");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("+");
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("8L648|7z");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-2031));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -2031
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "GC#BcG2]~O0^}";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("GC#BcG2]~O0^}");
      httpUrl_Builder1.encodedFragment = "GC#BcG2]~O0^}";
      httpUrl_Builder0.port(70);
      httpUrl_Builder1.encodedUsername("GC#BcG2]~O0^}");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("GC#BcG2]~O0^}", "GC#BcG2]~O0^}");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("GC#BcG2]~O0^}");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("GC#BcG2]~O0^}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: GC#BcG2]~O0^}
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(65536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 65536
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0000ffff";
      httpUrl_Builder0.addEncodedQueryParameter("0000ffff", "0000ffff");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("0000ffff");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("a::");
      httpUrl_Builder0.reencodeForUri();
      HttpUrl httpUrl0 = HttpUrl.parse("[size=");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "https:ww.somSekebutwelforeZurl.r/://://";
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("S");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment((-3066), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.parse("deadl$ne rgached");
      HttpUrl.parse("http:/");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("J|oyQCJ^V'#T6ZEndAL");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedUsername("deadl$ne rgached");
      String string0 = ",l7swCsV7y2Q9D";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(10, ",l7swCsV7y2Q9D");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.decodeHexDigit('u');
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "'";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("'");
      String string2 = "%20u1%5E%v*J1";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("%20u1%5E%v*J1");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.host("'");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.encodedPath("1)S9P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 1)S9P
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.parse("deadline reached");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      httpUrl_Builder1.setEncodedQueryParameter("%3E,ha%25.vzg@*]i", "host == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("J|oyQCJ^V'#T6ZEndAL");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("deadline reached");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: deadline reached
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ";";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password(";");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery(";");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder3.removeAllQueryParameters("Dy+]fNwUM+,");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("+fVcm", ",o#;N]]C(GE33|I?", true, true, true, true);
      assertEquals("+fVcm", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("encodedpassword == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("encodedpassword == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("encodedpassword == null");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "n^gC";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("n^gC");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("HmacSHA1");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("n^gC");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegment("HmacSHA1");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.host("n^gC");
      httpUrl_Builder5.removeAllEncodedQueryParameters("encodedPathSegments == null");
      httpUrl_Builder5.addQueryParameter("", ";s*FCG");
      String string1 = "QBC";
      httpUrl_Builder0.addPathSegments("/[");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.setQueryParameter(";s*FCG", "QBC");
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.removeAllQueryParameters("YW;5SnEip<O");
      // Undeclared exception!
      try { 
        httpUrl_Builder7.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("endIndex > string.length: ");
      String string0 = "O,]@zUy%7D'&%7BZpK%3C%60iG";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "encodedpassword == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("l6Qdz[4:lp7>%MKBJ", "O,]@zUy%7D'&%7BZpK%3C%60iG");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("l6Qdz[4:lp7>%MKBJ");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("l6Qdz[4:lp7>%MKBJ");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("encodedpassword == null");
      String string1 = " text=";
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.setEncodedQueryParameter(" text=", "Of<105zjwV<moEU{m");
      // Undeclared exception!
      try { 
        httpUrl_Builder6.scheme("cEKSBzXWb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: cEKSBzXWb
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "2");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ">,ha%.vzg@*]i";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(">,ha%.vzg@*]i");
      httpUrl_Builder1.setQueryParameter("hFYo>RY@\"d8c", "hFYo>RY@\"d8c");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "c0xN-#4i`S(F+0-$ o";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("c0xN-#4i`S(F+0-$ o", "kA?qB9h9#$:GKq");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(9, "c0xN-#4i`S(F+0-$ o");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "0000ffff";
      String string1 = "uq's6max%25-qnr4%60";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("W");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("0000ffff", "QjRO=A1(-");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("QjRO=A1(-", "W");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("o8ZAsE.3~Y+#$>MA$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: o8ZAsE.3~Y+#$>MA$
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -203
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("GMT");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("p7:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("%2e.", "kfS/+\"SU-k`?>|C@M,");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("encodedpassword%20%3D%3D%20null");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%3F";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%3F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %3F
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("8gVxU");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("8gVxU");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("8gVxU");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(5);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("WF");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string0 = "okhttp3.internal.Util";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addQueryParameter((String) null, "okhttp3.internal.Util");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("z@kn[$)Ex", 2, 58);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("\u2026");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("\u2026");
      String string0 = "charset == null";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("\u2026", "charset == null");
      int int0 = 626;
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setEncodedPathSegment(626, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0%22'i.9vP%7C");
      MockFile mockFile1 = new MockFile(mockFile0, "0%22'i.9vP%7C");
      mockFile1.toPath();
      mockFile1.setReadOnly();
      URL uRL0 = mockFile1.toURL();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("o^Ixv&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(8);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("name == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("_T|V14vAd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: _T|V14vAd
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = null;
      String string0 = "0000ffff";
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("0000ffff", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("R1waNJ0I:pv^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: R1waNJ0I:pv^
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("urj%mbIp&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      int int0 = (-3218);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.port((-3218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -3218
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("urj%mbIp&");
      httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("urj%mbIp&", 968, (-2259), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "{\\.";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("{.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("{.");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("{.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: {.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("I/{Zr5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername(")obU>yI");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment((String) null);
      httpUrl_Builder3.fragment("..");
      httpUrl_Builder1.encodedFragment("Expected leading [0-9] or '-' character but was %#x");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("P<wr~PUxnm_<s.(+");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string0 = ";i|_ZG(W";
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.decodeHexDigit('u');
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("'");
      String string1 = "%20u1%5E%v*J1";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("%20u1%5E%v*J1");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.encodedQuery("1)S9P");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder2.password("'&G");
      httpUrl_Builder4.username("%20u1%5E%v*J1");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder3.encodedUsername("'");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedFragment((String) null);
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder6.addPathSegments(":@");
      httpUrl_Builder7.query("https");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("endIndex > length(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: endIndex > length(
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("G3h,(+f}fr{Ua.W:g;", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("G3h,(+f}fr{Ua.W:g;");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("G3h,(+f}fr{Ua.W:g;");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "..";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("8L648|7z");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("..");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("R", "..");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("R", (String) null);
      httpUrl_Builder5.addPathSegments("8L648|7z");
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.fragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder6.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("a%");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("mIc7%3E");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username(".%2e");
      String string0 = "e8%2520%60j@%7bwtc%257fj";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("e8%2520%60j@%7bwtc%257fj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: e8%2520%60j@%7bwtc%257fj
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter(") and stream length (", " (to read code point prefixed 0x");
      httpUrl_Builder1.username("[]");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("Expected leading [0-9] or '-' character but was %#x");
      int int0 = 28;
      httpUrl_Builder2.port(28);
      httpUrl_Builder0.addEncodedPathSegments("&|b@");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "dGO*8/Kr");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter(" (to read code point prefixed 0x", "9[|:#o(Y,{L61@");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder1.addEncodedPathSegments("UCJ4G7M");
      httpUrl_Builder0.port(192);
      httpUrl_Builder2.addEncodedPathSegments("'IJpq(");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("/)", "/)");
      httpUrl_Builder1.encodedPath("/)");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment("fU=");
      httpUrl_Builder0.setQueryParameter("interrupted", "interrupted");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("AHiE^d9W*;!P");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("AHiE^d9W*;!P", "fU=");
      httpUrl_Builder2.setQueryParameter("AHiE^d9W*;!P", "fU=");
      try { 
        HttpUrl.getChecked("AHiE^d9W*;!P");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for AHiE^d9W*;!P
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("FUc-9+WZ[", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.username("FUc-9+WZ[");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("beginIndex < 0", "\n not found: size=");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("https:", " \"'<>#");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.username("https:");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setPathSegment((-108), "\r");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter(" > ", ">nuqs\u0007");
      httpUrl_Builder0.addEncodedPathSegments("PH\"?r|%[UVt4%fl");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.URL("http:=");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://=/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "G3h,(+f}fr{Ua.W:g;";
      String string1 = "eQ+;e`.Xnu^p;X\"59";
      HttpUrl.parse("eQ+;e`.Xnu^p;X\"59");
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("G3h,(+f}fr{Ua.W:g;", 51, 51, "https:/www.somefakebutwellformedurl.org/e6/v-/e6/v-/`g,4]fr6evtu", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "R1waNJ0I:pv^";
      try { 
        HttpUrl.getChecked("R1waNJ0I:pv^");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for R1waNJ0I:pv^
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:i@i");
      httpUrl0.newBuilder("https:i@i");
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.password();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertNotNull(httpUrl_Builder0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl httpUrl1 = httpUrl0.resolve("a::");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
      assertNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.addPathSegment("http:");
      Buffer buffer0 = new Buffer();
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample/http:", httpUrl1.toString());
      
      httpUrl0.host();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      httpUrl_Builder0.setEncodedQueryParameter("kt0G$9wGn?IEX", (String) null);
      Buffer buffer0 = new Buffer();
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      int int0 = httpUrl1.port();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample?kt0G$9wGn?IEX", httpUrl1.toString());
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.uri();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder0.addEncodedQueryParameter("\r", "!@$_znN]::37kY");
      httpUrl_Builder1.addEncodedPathSegments("\r");
      httpUrl_Builder1.encodedPassword(";");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment(":");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("");
      httpUrl_Builder3.encodedPassword(";");
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "e$7}ndrniJL-5V]m%y";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("e$7}ndrniJL-5V]m%y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: e$7}ndrniJL-5V]m%y
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:u@I");
      httpUrl0.query();
      httpUrl0.queryParameterValues("*IvD/:T[B-J^a+");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl0.resolve("");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegment("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addEncodedPathSegment("source is- closed");
      httpUrl_Builder0.fragment("source is- closed");
      httpUrl_Builder3.addEncodedPathSegment("!@$_znN]::37kY");
      httpUrl_Builder4.encodedPassword("source is- closed");
      try { 
        HttpUrl.getChecked("source%20is-%20closed");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for source%20is-%20closed
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl0.resolve("s");
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegment("s");
      httpUrl_Builder2.reencodeForUri();
      httpUrl_Builder1.addEncodedPathSegment("source is- closed");
      httpUrl0.encodedPathSegments();
      httpUrl0.encodedPath();
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("*4\"\"lJ");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("!@$_znN]::37kY", "*4\"\"lJ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("!@$_znN]::37kY");
      httpUrl_Builder0.removeAllEncodedQueryParameters("5I_M^c9");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("P3PIZwo-5");
      httpUrl_Builder3.addPathSegment("5I_M^c9");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("!@$_znN]::37kY");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedUsername("oN\"shnMM");
      httpUrl_Builder5.query("source is- closed");
      HttpUrl.Builder.ParseResult.values();
      httpUrl0.redact();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:y");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllQueryParameters("deadline reached");
      httpUrl_Builder0.query("UTF-8");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("].-H%6P+ASB?~Axf-2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ].-H%6P+ASB?~Axf-2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HttpUrl.queryStringToNamesAndValues("e6/v-/`G,4]FR6evTU");
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "e6/v-/`G,4]FR6evTU");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.url();
      httpUrl0.queryParameterNames();
      List<String> list0 = httpUrl0.pathSegments();
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.parse("https:0i:pv^");
      try { 
        HttpUrl.getChecked("https:0i:pv^");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:0i:pv^
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl0.encodedPath();
      httpUrl0.querySize();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("p%608J");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(47);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment(2503, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      httpUrl0.queryParameterNames();
      List<String> list0 = httpUrl0.queryParameterValues("[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      httpUrl1.encodedPath();
      httpUrl1.pathSize();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "http:ui@I";
      HttpUrl httpUrl0 = HttpUrl.parse("http:ui@I");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-2374));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl0.uri();
      httpUrl0.query();
      httpUrl0.isHttps();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.parse("https:/www.somefakebutwellformedurl.org/://://");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "_+uFc";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("_+uFc");
      httpUrl_Builder1.encodedFragment("\n");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https:/www.somefakebutwellformedurl.org/://://");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%2e.";
      httpUrl_Builder0.addEncodedPathSegments("%2e.");
      httpUrl_Builder0.removeAllQueryParameters("S");
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "https:/www.somefakebutwellformedurl.org/://://";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("%2e.");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("https:/www.somefakebutwellformedurl.org/://://");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("%2e.");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("https:/www.somefakebutwellformedurl.org/://://", "7.Y'(aHC[C~!e");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      httpUrl_Builder5.addEncodedPathSegment(" \"");
      httpUrl_Builder5.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:i@i");
      httpUrl0.equals("https:i@i");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl0.query();
      httpUrl0.encodedPathSegments();
      httpUrl0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl0.query();
      httpUrl0.encodedPathSegments();
      HttpUrl httpUrl1 = httpUrl0.resolve("6o:");
      httpUrl1.equals(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl0.username();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/://://");
      HttpUrl httpUrl1 = httpUrl0.resolve("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl1.query();
      httpUrl1.fragment();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("i/A8~%aE");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("", "i/A8~%aE");
      httpUrl_Builder3.fragment("encodedPathSegment == null");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ":";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password(":");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername(":");
      httpUrl_Builder2.encodedFragment(":");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.password(":");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("M:^");
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:u#:");
      httpUrl0.query();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl0.url();
      HttpUrl httpUrl1 = httpUrl0.resolve("MX?09jN;5[+Xk@;$wI");
      StringBuilder stringBuilder0 = new StringBuilder("db>Wq*H+5u!");
      List<String> list0 = httpUrl1.queryParameterValues("db>Wq*H+5u!");
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/://://");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl_Builder0.encodedFragment("\n");
      httpUrl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/://://");
      httpUrl0.query();
      httpUrl0.password();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebutwellformedurl.org/://://");
      HttpUrl httpUrl1 = httpUrl0.resolve("MX?0jN;5[+XkD@;$wI");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue((-557));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.queryParameterNames();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("", "");
      httpUrl_Builder2.password("");
      httpUrl0.scheme();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/ww.somSeakebutwellformeZurl.rg/://://");
      httpUrl0.encodedPathSegments();
      httpUrl0.resolve("^`{|}");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:musr://bx.:[musr/...?&ok%23s![n8s%3csp#xxb%20!~=4uwzee%25c@");
      httpUrl0.queryParameterNames();
      httpUrl0.uri();
      HttpUrl.percentDecode("http:musr://bx.:[musr/...?&ok%23s![n8s%3csp#xxb%20!~=4uwzee%25c@", 0, 0, true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "a:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("a:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: a:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f37:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f37:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("okio.GzipSource");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("byteCount > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: byteCount > Integer.MAX_VALUE: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("a':");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: a':
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "b::eCount > Integer.MAX_VALUE: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b::eCount > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b::eCount > Integer.MAX_VALUE: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:ui@");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:ui@
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.getChecked("http:ui:@I");
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("http:ui:@I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=http:ui:@i
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:ui:@I");
      HttpUrl httpUrl1 = httpUrl0.resolve("http:ui:@I");
      httpUrl1.resolve("Y");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "f.v:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f.v:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f.v:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f.3vo:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f.3vo:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("https:ww.somSekebutwelforeZurl.r/://://");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("https:ww.somSekebutwelforeZurl.r/://://");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("https:ww.somSekebutwelforeZurl.r/://://", "");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("https:ww.somSekebutwelforeZurl.r/://://");
      httpUrl_Builder4.removePathSegment(0);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.parse("http:ui@I");
      HttpUrl httpUrl1 = httpUrl0.resolve("K0r?I}<Tx<,");
      httpUrl1.queryParameter("m3st%22@l%3f=@");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "=19QQvUb?9");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.equals("=19QQvUb?9");
      httpUrl0.queryParameter("=19QQvUb?9");
      httpUrl0.query();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      String string0 = "^[{R)Q)";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("^[{R)Q)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ^[{R)Q)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:u-i@I");
      httpUrl0.resolve("http:u-i@I");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "http:u?#:I";
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:u?#:I");
      httpUrl0.encodedUsername();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-26587893));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:ui@i");
      URI uRI0 = MockURI.URI("http:ui@i", "http:ui@i", "http:ui@i");
      HttpUrl httpUrl1 = HttpUrl.get(uRI0);
      httpUrl1.redact();
      httpUrl0.scheme();
  }
}
