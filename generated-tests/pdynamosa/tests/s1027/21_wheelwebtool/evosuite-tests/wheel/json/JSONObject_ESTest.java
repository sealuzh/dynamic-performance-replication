/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 05:36:56 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONObject0.toString(269, 269);
      assertEquals("{}", string0);
      
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "'";
      stringArray0[6] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      Object object1 = new Object();
      JSONObject.valueToString(object1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(18, (-3131));
      try { 
        jSONObject0.getString("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("VGYiD`l0.Dt$}i^", false);
      jSONObject1.toString((-757));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(2351.92453);
      Double.max(2351.92453, 2351.92453);
      JSONObject.valueToString(double0);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      long long0 = (-1028L);
      try { 
        jSONObject0.put((String) null, (-1028L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("08", (-1320.53554));
      jSONObject0.optInt("08");
      JSONObject jSONObject1 = jSONObject0.put("&7A{\"ybW\"", 1988L);
      jSONObject1.toString((-1476));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getLong("=!!hn?/E1bj89");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=!!hn?/E1bj89\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("getcopyValueOf");
      try { 
        jSONObject0.getLong("oFQd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oFQd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (-166.38570061));
      double double0 = jSONObject1.optDouble("' and instead saw '");
      assertEquals((-166.38570061), double0, 0.01);
      
      String string0 = jSONObject0.optString("true", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("toS", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("toS");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Null key.", (-2718L));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("nKp+9J!ne5?PQ';C", (Collection) linkedList0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", object0);
      String string0 = jSONObject1.toString(970);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1758.08175701481));
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Bad value from toJSONString: ");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("[]", (Object) null);
      try { 
        jSONObject0.getDouble("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short)25);
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "t";
      JSONObject jSONObject1 = jSONObject0.put("t", (int) (short)25);
      jSONObject0.optInt("t");
      try { 
        jSONObject1.getJSONArray("isparseByte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseByte\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "V6lM";
      stringArray0[2] = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-637), (-637));
      assertEquals("{}", string0);
      
      jSONObject0.length();
      int int0 = jSONObject0.optInt("{}", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "X9_+y0u=lcwtaDP<[M9";
      int int0 = 111;
      jSONObject0.put("X9_+y0u=lcwtaDP<[M9", (long) 111);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("X9_+y0u=lcwtaDP<[M9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of X9_+y0u=lcwtaDP<[M9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isvalueOf", 0);
      try { 
        jSONObject0.getLong(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.put("", false);
      boolean boolean0 = jSONObject0.isNull("^]O, {%mys|");
      assertTrue(boolean0);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 101, 1058);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", 0.0);
      int int0 = jSONObject1.getInt("] is not a number.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList1);
      jSONObject1.optInt("");
      Long long0 = Long.getLong("", (long) 0);
      jSONObject1.putOpt("get", long0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      JSONObject jSONObject1 = jSONObject0.put("true", 0L);
      JSONObject.valueToString("");
      jSONObject0.toString(964, 26);
      try { 
        jSONObject1.getString("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("get");
      Long.compare(31L, (-1L));
      String string0 = "$~Q$3Z_Shu*6zSyjF_";
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_");
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      try { 
        jSONObject0.put((String) null, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.accumulate("RMBYb8VX ckPF]w|<=", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(156.0);
      Float.max((-1.0F), 1391.083F);
      Float.sum(0.0F, 0.0F);
      Float.sum(1391.083F, (-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "Jn=AcJU";
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject1 = jSONObject0.put("Jn=AcJU", (Map) hashMap0);
      jSONObject1.accumulate("Jn=AcJU", jSONObject0);
      try { 
        jSONObject1.getDouble("Jn=AcJU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jn=AcJU\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("java.lang.Long@00000000040", "gmGdNkqgqr}c#/X~8L");
      JSONObject.valueToString("gmGdNkqgqr}c#/X~8L", (-1301), (-1301));
      Float float0 = new Float((double) (-1301));
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yD]u)&CoH]vaI";
      stringArray0[1] = "H&*lf>G`{0";
      stringArray0[2] = ",\n";
      stringArray0[3] = ".";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", float0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-123.136131776156));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("isintern");
      jSONObject0.optLong("isintern", 0L);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 2347);
      assertEquals(2347, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("r-Y`Jv95*N(5'I&c", object0);
      jSONObject0.put("' and instevFd %jw '", (-166.38570061));
      String string0 = jSONObject0.optString("true", "");
      assertEquals("", string0);
      
      int int0 = jSONObject1.optInt("", 18);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      Object object0 = jSONObject0.remove("JSON does not allow non-finite numbers.");
      assertEquals("JSON does not allow non-finite numbers.", object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("1587.996260093074.", (Collection) linkedList0);
      double double0 = jSONObject1.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("put", (-24L));
      jSONObject0.getDouble("put");
      String string0 = jSONObject0.toString((-4457));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",", (Object) ",");
      try { 
        jSONObject1.append(",", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Short short0 = new Short((short)25);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("t", (int) (short)25);
      Short.toUnsignedLong((short)25);
      jSONObject1.accumulate("t", jSONObject0);
      jSONObject0.getJSONArray("t");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
      
      boolean boolean1 = jSONObject0.has("");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short short0 = new Short((short)53);
      JSONObject.valueToString(short0, (short)53, (short)53);
      Integer integer0 = new Integer(1273);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.opt("java.lang.Short@0000000001");
      Object object0 = JSONObject.NULL;
      jSONObject0.append("java.lang.Short@0000000001", object0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = jSONArray0.toString(125);
      jSONObject0.toJSONArray(jSONArray0);
      Short short0 = new Short((short) (-1148));
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1095.5599368937665));
      Boolean boolean0 = Boolean.valueOf("7CVz%\"(#rE");
      jSONObject0.putOpt("7CVz%\"(#rE", boolean0);
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("A JSONArray text must start with '['");
      assertEquals("", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "A JSONArray text must start with '['");
      double double0 = jSONObject1.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "java.lang.Long@0000000004.";
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Long@0000000004.");
      jSONObject0.toString();
      String string1 = "U+";
      String string2 = null;
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONTokener jSONTokener0 = new JSONTokener("\t");
      jSONTokener0.next(0);
      jSONObject0.optDouble("{");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString(0);
      try { 
        jSONTokener0.nextString('u');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 1 of \t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("istoLowerCase", "istoLowerCase");
      jSONObject0.toString();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('S');
      JSONObject.quote("A[RI/Cf96P&at-2");
      stringWriter1.append((CharSequence) "\"A[RI/Cf96P&at-2\"");
      String string0 = "{eA8";
      JSONTokener jSONTokener0 = new JSONTokener("{eA8");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {eA8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)111);
      jSONObject0.putOpt((String) null, byte0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      int int0 = 8;
      Integer integer0 = new Integer(8);
      Integer.min(8, 3868);
      hashMap0.put((Boolean) null, integer0);
      JSONObject.valueToString((Object) null);
      String string0 = "ismax";
      try { 
        jSONObject1.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1270L));
      Boolean.valueOf("gxBjhn'z60");
      String string0 = "\"\"";
      double double0 = 3110.36;
      jSONObject0.put("X|g&4<h)?d;^2Tas:", (Map) hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("oX=z=u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of oX=z=u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      Double double0 = new Double((-2052.299));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("m=,;", stringArray0);
      boolean boolean0 = jSONObject0.isNull("JSONArray initial value should be a string or collection or array.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("' and instead saw '", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("u_Bvk6\"tArG'oq5o\"", (Object) jSONArray0);
      Byte byte0 = new Byte((byte)6);
      jSONObject1.append("u_Bvk6\"tArG'oq5o\"", byte0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Boolean boolean0 = Boolean.valueOf("7CVz%\"(#9rE");
      jSONObject0.append("E$!)`]tASl,=.JV<Yy", boolean0);
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#9rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#9rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("x^pdU;>',snOla6y", (-1L));
      double double0 = jSONObject0.optDouble("x^pdU;>',snOla6y", (double) (-1L));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "'";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has((String) null);
      jSONObject0.optJSONArray("@pk>%eG");
      jSONObject0.names();
      jSONObject0.put(",:]}/\"[{;=#", 4373);
      Object object1 = jSONObject0.opt(",\n");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+:r^`>O97j%", (-2962));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("?#*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?#*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("u8gI0U {9:kI5%");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u8gI0U {9:kI5%";
      stringArray0[1] = "u8gI0U {9:kI5%";
      jSONTokener0.next(0);
      jSONObject0.optDouble("u8gI0U {9:kI5%");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString((-434));
      jSONTokener0.nextString('u');
      try { 
        jSONObject0.getJSONObject("u8gI0U {9:kI5%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u8gI0U {9:kI5%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("WjBLfuL^`5Zo\")'", true);
      boolean boolean0 = jSONObject0.optBoolean("WjBLfuL^`5Zo\")'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("java.lang.Float@00000000010", "^vLMNM!Vx");
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("J*", "J*");
      Object object0 = jSONObject1.get("J*");
      assertEquals("J*", object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(Double.NaN);
      Double double1 = Double.valueOf(561.14519316);
      hashMap0.put(double0, double1);
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      String string1 = JSONObject.valueToString(hashMap0, 44, 97);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("i", (-1L));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of i
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z9?DT_qiqolYH)g}q";
      stringArray0[1] = "Unterminated string";
      stringArray0[2] = "CW0wK=G11|GO?tT9";
      stringArray0[3] = "java.lang.Long@00000000040";
      stringArray0[4] = "Vm99f";
      stringArray0[5] = "Q*hqbf";
      stringArray0[6] = "^;}:IF&1s6";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Collection<Object> collection0 = hashMap0.values();
      jSONObject0.put("^;}:IF&1s6", collection0);
      JSONObject jSONObject1 = jSONObject0.put(">#&w2Sh>Qr7Ia{S.`w", false);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("Ze {+3@ipbW*-", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JJRg", (Object) "JJRg");
      try { 
        jSONObject0.getBoolean("JJRg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JJRg\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("08", (-1320.53554));
      jSONObject0.optInt("08");
      JSONObject jSONObject1 = jSONObject0.put("08", 1988L);
      int int0 = jSONObject1.getInt("08");
      assertEquals(2, jSONObject0.length());
      assertEquals(1988, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float((-2181.8F));
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)14);
      Byte.toUnsignedLong((byte)14);
      JSONObject jSONObject1 = jSONObject0.putOpt("isreverseBytes", byte0);
      JSONObject jSONObject2 = jSONObject1.put("isreverseBytes", (-1L));
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optLong((String) null);
      try { 
        jSONObject0.getBoolean("9F\u0006!f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9F\\u0006!f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", false);
      String string0 = jSONObject0.getString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a number.", (Map) null);
      String string0 = JSONObject.valueToString((Object) null, 180, 74);
      assertEquals("null", string0);
      
      boolean boolean0 = jSONObject0.isNull("] is not a number.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, (-1.0));
      String string0 = "&o7~-\"ybW\"\\";
      long long0 = 1973L;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1709);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optLong("bCwEC5oF`fI|}N9E");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.accumulate("bCwEC5oF`fI|}N9E", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("getcompare", false);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Float.isFinite(1.0F);
      String[] stringArray0 = new String[1];
      jSONObject0.toString(20, 49);
      JSONObject jSONObject1 = new JSONObject("{}");
      try { 
        jSONObject1.get("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("S!", (-1320.53554));
      JSONObject jSONObject1 = jSONObject0.put("S!", 1973L);
      String string0 = "tr.Z,za\"P";
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject2 = jSONObject1.put("tr.Z,za\"P", (Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject0.put("S!", (Collection) linkedList0);
      jSONObject3.optBoolean("S!", false);
      jSONObject0.optString("S!");
      jSONObject3.isNull("2Y<1Z_8GLxwSzamr,");
      jSONObject0.optInt("<C0T%(");
      JSONObject jSONObject4 = jSONObject0.put("6iMPkV!a 2", (Map) hashMap0);
      jSONObject4.optJSONArray("S!");
      Integer integer0 = new Integer(105);
      jSONObject1.accumulate("6iMPkV!a 2", integer0);
      try { 
        jSONObject2.getBoolean("tr.Z,za\"P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tr.Z,za\\\"P\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 1275, 1275);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", 0);
      jSONObject0.getLong("isvalueOf");
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 47);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("false", 0.706);
      assertEquals(0.706, double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.put("X?tSY@8x", (-1335L));
      long long0 = jSONObject1.optLong("X?tSY@8x");
      assertEquals((-1335L), long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.keys();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("getintValue");
      assertEquals(0, int0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 0, 34);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(",:]}/\"[{;=#", false);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("", object0);
      jSONObject0.optInt("|?XXSgE6W");
      String string0 = jSONObject0.toString(128);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add((Object) jSONArray0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray("");
      JSONObject jSONObject1 = jSONObject0.accumulate("", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short)25);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("t", (int) (short)25);
      jSONObject0.get("t");
      try { 
        jSONObject0.getJSONArray("t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("08", 1848.82063342857);
      jSONObject0.optInt("08");
      JSONObject jSONObject1 = new JSONObject(object0);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      jSONObject1.put("08", (Map) hashMap0);
      jSONObject1.toString(0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
      
      long long0 = jSONObject0.optLong("", (-1733L));
      assertEquals((-1733L), long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Uzo</B?", Double.NaN);
      JSONObject jSONObject1 = jSONObject0.put("Uzo</B?", 1973L);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject2 = jSONObject0.put("a9h+2aw--", (Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject2.put("Uzo</B?", (Collection) linkedList0);
      jSONObject1.optBoolean("a9h+2aw--", false);
      jSONObject2.optString("Uzo</B?");
      String string0 = "Expected a ',' or '}'";
      jSONObject1.isNull("Expected a ',' or '}'");
      jSONObject3.optInt("tr.Z,za\"P");
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      jSONObject3.put("tr.Z,za\"P", (Map) hashMap1);
      jSONObject3.optJSONArray("tr.Z,za\"P");
      Integer integer0 = new Integer(160);
      Boolean boolean0 = new Boolean("2Y<1Z_8GLxwSzamr,");
      jSONObject3.accumulate("Uzo</B?", boolean0);
      try { 
        jSONObject0.getBoolean("6iMPkV!a 2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6iMPkV!a 2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\t", true);
      JSONObject.quote("\t");
      try { 
        jSONObject0.getInt("8RPpV'LN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8RPpV'LN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.put(":<q${&R", (-2300));
      int int0 = jSONObject0.optInt(":<q${&R");
      assertEquals((-2300), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.isFinite(1.0F);
      String[] stringArray0 = new String[0];
      jSONObject0.toString(20, 49);
      JSONObject jSONObject1 = new JSONObject("{\n                                                                     \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                     \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                     \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                 }");
      try { 
        jSONObject1.get("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      stringArray0[2] = "m=,;";
      stringArray0[3] = "S,On{uD'i [T]1`.";
      stringArray0[4] = "M8$D2|VIYy";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("VGYiD`l0.Dt$}i^", true);
      jSONObject1.toString((-757));
      jSONObject1.isNull("VGYiD`l0.Dt$}i^");
      try { 
        jSONObject1.getLong("VGYiD`l0.Dt$}i^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VGYiD`l0.Dt$}i^\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject.getNames((Object) "O,xu");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "-edo;{2#` ]7bm";
      try { 
        jSONObject0.put("-edo;{2#` ]7bm", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")+0*jF{Cs&";
      stringArray0[1] = "";
      stringArray0[2] = "wheel.json.JSONObject$Null";
      stringArray0[3] = "'";
      stringArray0[4] = "_B?$b'4^U_Cy.";
      stringArray0[5] = "dZM4^e835d0+'e_";
      JSONObject jSONObject0 = new JSONObject("T", stringArray0);
      jSONObject0.has("GSN4C}/11K0:&F}cbu3");
      jSONObject0.optJSONArray((String) null);
      jSONObject0.names();
      jSONObject0.put("^d$", 4373);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject0.optBoolean("");
      jSONObject1.put("", (Object) null);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("=GzRAD2\"x +");
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      try { 
        jSONObject0.getString("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, 633, (-953));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("wheel.json.JSONObject", (Object) "wheel.json.JSONObject");
      Object object0 = jSONObject0.opt("wheel.json.JSONObject");
      assertEquals("wheel.json.JSONObject", object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gwP8", 5131);
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject0.toString(60, 23);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("tUZ^*#");
      assertEquals("\"tUZ^*#\"", string0);
      
      JSONObject.getNames((Object) null);
      String string1 = JSONObject.doubleToString(1587.996260093074);
      assertEquals("1587.996260093074", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("pa", object0);
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getString("\"@BaM@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"@BaM@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("");
      jSONObject0.put("Y%USM", 492L);
      try { 
        jSONObject0.getLong("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("S!", (-1320.53554));
      JSONObject jSONObject1 = jSONObject0.append("S!", "HWWf");
      jSONObject1.toString();
      JSONObject.getNames(jSONObject1);
      JSONTokener jSONTokener0 = new JSONTokener("e_OD( @]k32&tGWm");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of e_OD( @]k32&tGWm
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("!x@Fh");
      JSONObject.testValidity(boolean0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("!x@Fh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of !x@Fh
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[]", 0.0);
      jSONObject1.optDouble("[]");
      jSONObject1.keys();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gwP8", 5131);
      jSONObject1.getLong("gwP8");
      JSONObject.getNames(jSONObject0);
      String string0 = jSONObject0.toString(60, 23);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("7CVz%\"(#rE", false);
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Float@00000000010", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("7CVz%\"(#rE");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 7CVz%\"(#rE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("G\":G;-i~@", (Object) "G\":G;-i~@");
      jSONObject1.append("Unterminated string", "Unterminated string");
      try { 
        jSONObject1.getBoolean("G\":G;-i~@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G\\\":G;-i~@\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("VGYiD`l0.Dt$}i^", true);
      jSONObject1.put("VGYiD`l0.Dt$}i^", (-1L));
      String string0 = JSONObject.quote("VGYiD`l0.Dt$}i^");
      assertEquals("\"VGYiD`l0.Dt$}i^\"", string0);
      
      boolean boolean0 = jSONObject1.isNull("VGYiD`l0.Dt$}i^");
      assertFalse(boolean0);
      
      long long0 = jSONObject1.getLong("VGYiD`l0.Dt$}i^");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0.00", (Object) null);
      jSONObject0.optString("0.00", "0.00");
      long long0 = jSONObject0.optLong("0.00");
      assertEquals(0, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("getgetChars", object0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      String string0 = "true";
      stringArray0[1] = "true";
      Byte.toUnsignedInt((byte)94);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.keys();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      try { 
        jSONObject0.getInt("E~2:vWy4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E~2:vWy4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.accumulate("IqHCg'12Q_*3(", boolean0);
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      
      JSONObject.quote(")c\"O+`:Mm>UUP-kz[M");
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1, 1);
      JSONObject jSONObject1 = jSONObject0.put("{}", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(87);
      String string0 = jSONObject0.toString((-30803738), (-30803738));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float((-2188.8948F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(0.0F, (-2188.8948F));
      jSONObject0.append("has", float0);
      String string0 = JSONObject.valueToString(float0, 8448, 8448);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("08", 1848.82063342857);
      jSONObject0.optInt("08");
      JSONObject jSONObject1 = jSONObject0.put("08", 1988L);
      jSONObject1.toString(0);
      jSONObject0.getString("08");
      jSONObject0.put("o", (-1675.6234273033429));
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject0.put("Expected a ',' or ']'", (Map) hashMap0);
      jSONObject0.getJSONObject("Expected a ',' or ']'");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("z/Xq_)>8<MKMaR", 0.0);
      jSONObject1.getDouble("z/Xq_)>8<MKMaR");
      JSONObject.getNames((Object) "z/Xq_)>8<MKMaR");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(3141.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.max((-1898.0F), (-1.0F));
      jSONObject0.put(")aXhK>G{RxI`q{Jx", 0L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("false", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
      
      JSONObject.doubleToString(13);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Short short0 = new Short((short)25);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("t", (int) (short)25);
      try { 
        jSONObject0.getJSONArray("t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      String string0 = "$~Q$3Z_Shu*6zSyjF_";
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      try { 
        jSONObject0.put((String) null, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Z-X%2$Q@:w}$VFa\"0 ";
      stringArray0[4] = "JSON does not allow non-finite numbers.";
      stringArray0[5] = "000";
      stringArray0[6] = "";
      stringArray0[7] = " o`y6;2]oPQHp#z'+k)";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getJSONObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "{EMDn&^";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{EMDn&^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {EMDn&^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.optBoolean("{}");
      JSONObject jSONObject1 = jSONObject0.put("{}", 1242.26504082);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("l", (Object) "l");
      jSONObject1.keys();
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      jSONObject1.put("l", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("l");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      Float float0 = new Float((-2220.26556));
      hashMap0.put(jSONObject1, float0);
      JSONObject jSONObject2 = jSONObject0.put("~nk7}|[F6", (Map) hashMap0);
      jSONObject0.put("~nk7}|[F6", false);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject0.accumulate("wheel.json.JSONException", object0);
      jSONObject3.optDouble("wheel.json.JSONException");
      jSONObject2.has("~nk7}|[F6");
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("z^P^ee:\"c", "z^P^ee:\"c");
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)210);
      Short.compare((short)0, (short)210);
      JSONObject.numberToString(short0);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 44, 0);
      JSONTokener jSONTokener0 = new JSONTokener("\"java.lang.Object@0000000002\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"java.lang.Object@0000000002\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "80(\\uwq0s*`s9Y}";
      JSONObject jSONObject1 = jSONObject0.put(string0, true);
      try { 
        jSONObject1.getInt(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"80(\\\\uwq0s*`s9Y}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-12));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Long long0 = Long.valueOf((long) (byte) (-12));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = "";
      String string1 = "JSONArray[";
      try { 
        Long.parseUnsignedLong("JSONArray[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JSONArray[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject1.put("isparseByte", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.putOpt("isparseByte", jSONObject1);
      try { 
        jSONObject2.getInt("isparseByte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseByte\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{2;ma]u_|/@,r>9{9-E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {2;ma]u_|/@,r>9{9-E
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("' and instead saw '", 3153.3099565822004);
      long long0 = jSONObject0.optLong("' and instead saw '");
      assertEquals(3153L, long0);
      
      double double0 = jSONObject0.optDouble("' and instead saw '");
      assertEquals(3153.3099565822004, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "{Y}";
      stringArray0[2] = "";
      Byte.toUnsignedInt((byte)3);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String string0 = jSONObject0.toString(8448);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.keys();
      jSONObject0.optJSONArray("{Y}");
      jSONObject0.opt("getremainderUnsigned");
      jSONObject1.length();
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-3955.026333));
      hashMap0.put(double0, double0);
      String string0 = JSONObject.valueToString(hashMap0);
      String string1 = JSONObject.valueToString(hashMap0, 44, 44);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      int int0 = 8;
      Integer integer0 = new Integer(8);
      int int1 = 3868;
      Integer.max(0, (-1032));
      Integer.min(8, 3868);
      hashMap0.put((Boolean) null, integer0);
      JSONObject.valueToString(hashMap0);
      String string0 = "ismax";
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 641L);
      assertEquals(641L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("wheel.json.JSONObject$Null");
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      jSONObject0.put("getintValue", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("wheel.json.JSONObject$Null");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",\n");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = JSONObject.quote(">P7Z</rH5Zy[+a");
      assertEquals("\">P7Z<\\/rH5Zy[+a\"", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = new String[20];
      stringArray0[0] = "java.lang.Long@00000000030";
      stringArray0[19] = "java.lang.Long@00000000030";
      JSONObject jSONObject0 = new JSONObject("java.lang.Long@00000000030", stringArray0);
      Boolean boolean0 = Boolean.valueOf("java.lang.Long@00000000030");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null, 633, 633);
      try { 
        jSONObject0.put((String) null, (Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("7CVz%\"(#rE");
      jSONObject0.optDouble("NKLS", 78.3);
      jSONObject0.remove("NKLS");
      JSONObject.testValidity((Object) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      double double0 = jSONObject0.optDouble("NKLS", (-2284.1762359269));
      assertEquals((-2284.1762359269), double0, 0.01);
      
      jSONObject0.keys();
      String string0 = jSONObject0.optString("ncq+SHS4k;]", "7CVz%\"(#rE");
      assertEquals("7CVz%\"(#rE", string0);
      
      jSONObject0.keys();
      int int0 = jSONObject0.optInt("ncq+SHS4k;]", 27);
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString((-2760), 15);
      jSONObject0.putOpt("%Xqjehc%wrX7usA", "%Xqjehc%wrX7usA");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer(2012);
      hashMap0.put(boolean0, integer0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("[}#[7_ph$Pc>:&`v.l");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("qs+Ai)?", (Collection) linkedList0);
      jSONObject1.toString((-570));
      double double0 = jSONObject0.optDouble("{}");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[0];
      jSONObject0.toString(20, 49);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.get("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("~07OQ|4g8,1C,\"");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~07OQ|4g8,1C,\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("");
      JSONObject jSONObject1 = jSONObject0.put("", 91L);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("", "");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(3);
      jSONObject0.optJSONObject("cv#KPLBQ");
      jSONObject0.putOpt("wheel.json.JSONException", "cv#KPLBQ");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rVpzJ+6tRsx", false);
      String string0 = jSONObject1.getString("rVpzJ+6tRsx");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("S!", (-1320.53554));
      JSONObject jSONObject1 = jSONObject0.put("&o7~-\"ybW\"", 1973L);
      String string0 = "tr.Z,za\"P";
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject2 = jSONObject1.put("tr.Z,za\"P", (Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject0.put("S!", (Collection) linkedList0);
      jSONObject3.optBoolean("S!", false);
      jSONObject0.optString("S!");
      jSONObject3.isNull("2Y<1Z_8GLxwSza#r,");
      jSONObject0.optInt("<C0T%(");
      jSONObject0.optInt("<C0T%(", 55);
      JSONObject jSONObject4 = jSONObject0.put("6iMPkV!a 2", (Map) hashMap0);
      jSONObject4.optJSONArray("&o7~-\"ybW\"");
      Integer integer0 = new Integer(105);
      jSONObject1.accumulate("6iMPkV!a 2", integer0);
      jSONObject4.toString(55);
      try { 
        jSONObject2.getBoolean("tr.Z,za\"P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tr.Z,za\\\"P\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1095.5599368937665));
      jSONObject0.putOpt("7CVz%\"(#rE", double0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(44);
      JSONObject jSONObject1 = jSONObject0.putOpt("Rtnwx@1'/\"g}z9", integer0);
      jSONObject0.optInt(" of ", (-4003));
      try { 
        jSONObject1.getBoolean("Rtnwx@1'/\"g}z9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Rtnwx@1'/\\\"g}z9\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject1.length());
      
      String string0 = JSONObject.valueToString(linkedList0, 42, 42);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(13, 0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 76;
      JSONObject.valueToString(jSONObject0, 76, 76);
      try { 
        jSONObject0.getJSONObject("4-`f9lZv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4-`f9lZv\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(0, 6);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EBfs9w:rOc&&,!%q";
      stringArray0[1] = "{Y}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("getfloatValue", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", true);
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      
      int int0 = jSONObject1.optInt("EeYBYI\b~SY#v{7|N", (-91));
      assertEquals((-91), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("");
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      hashMap0.keySet();
      jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 91L);
      jSONObject1.putOpt("A'xjNR0sE", "");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("xV2/Af9J-TLT{]");
      assertEquals("\"xV2/Af9J-TLT{]\"", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[]", 0.0);
      StringWriter stringWriter0 = new StringWriter(1306);
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject0.getBoolean("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      double double0 = (-1573.33217806032);
      jSONObject0.optDouble("isreverseBytes", (-1573.33217806032));
      jSONObject0.optDouble("", 0.0);
      jSONObject0.remove("*N");
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONTokener jSONTokener0 = new JSONTokener("{lSZ6}#FL3ed");
      jSONArray0.put((Map) hashMap0);
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {lSZ6}#FL3ed
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("^-WfR*R.HWD@:$\"", true);
      jSONObject0.isNull("^-WfR*R.HWD@:$\"");
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.getBoolean("^-WfR*R.HWD@:$\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-86.4821));
      jSONObject1.optBoolean("92Yh,]wA4&OU{D5lj", true);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.names();
      jSONObject0.toString(2482);
      jSONObject0.names();
      jSONObject0.remove("true");
      jSONObject0.optDouble("] not found.", (double) 2482);
      jSONObject0.remove("K\"@");
      JSONObject.testValidity(jSONObject0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.keys();
      jSONObject0.optString("K\"@", "K\"@");
      jSONObject0.keys();
      jSONObject0.optInt("Null pointer", (-1632));
      JSONObject jSONObject2 = jSONObject1.put("sp", false);
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Iterator iterator0 = jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.putOpt("uJXSG_Sfg4DP-ZVb", iterator0);
      JSONObject jSONObject2 = jSONObject1.put("uJXSG_Sfg4DP-ZVb", 2025L);
      JSONObject jSONObject3 = jSONObject2.put(",", (Object) jSONObject1);
      jSONObject3.put("4[P>-/iUEHE,uq<p", 1110);
      jSONObject2.getDouble("uJXSG_Sfg4DP-ZVb");
      jSONObject0.optLong("\n");
      jSONObject0.optBoolean("uJXSG_Sfg4DP-ZVb");
      jSONObject0.length();
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONArray0.optLong(3);
      JSONObject.doubleToString(0.0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject4 = jSONObject1.append("\n", "\n");
      jSONObject4.put("-2909.93186679910", true);
      JSONObject.valueToString("uJXSG_Sfg4DP-ZVb");
      jSONObject0.put("3}!K4e0_4tU7X", 0L);
      // Undeclared exception!
      jSONObject0.toString(3);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("7", 0.0);
      jSONObject0.optString("7", "Expected '");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) ",:]}/\"[{;=#");
      Byte byte0 = new Byte((byte) (-110));
      Byte.toUnsignedInt((byte) (-107));
      String string0 = JSONObject.valueToString(byte0, (byte) (-110), 32);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      String string1 = "";
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = "VGYiD`l0.Dt$}i^";
      Integer integer0 = new Integer(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VGYiD`l0.Dt$}i^";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("VGYiD`l0.Dt$}i^", true);
      jSONObject0.toString(429);
      try { 
        jSONObject0.accumulate((String) null, "{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = JSONObject.quote("3rjwgR>p(>/");
      assertEquals("\"3rjwgR>p(>/\"", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.quote("h/K5px-66:0b;\"29!'|");
      assertEquals("\"h/K5px-66:0b;\\\"29!'|\"", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("su", (-86.4821));
      byte byte0 = (byte)12;
      Byte byte1 = new Byte((byte)12);
      JSONObject.valueToString(byte1);
      jSONObject1.names();
      jSONObject0.toString(2482);
      jSONObject1.names();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      stringArray0[1] = "c";
      stringArray0[2] = "{x$}WA";
      stringArray0[3] = "JdT2qgRm";
      stringArray0[4] = "";
      stringArray0[5] = "Expected '";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("\"\"", 1L);
      assertEquals(1L, long0);
  }
}
