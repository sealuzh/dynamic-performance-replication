/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 13:44:05 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-641));
      classWriter0.index = (-641);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-641), "Deprecated", "m", "m", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2027), "org.apache.commons.io.filefilter.CanWriteFileFilter", "wheel.asm.FieldWriter", (String) null, "org.apache.commons.io.filefilter.CanWriteFileFilter");
      classWriter0.visit((-2027), (-2027), "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", "ConstantValue", (String[]) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      classWriter0.index = (-2027);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", (String) null, "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      classWriter0.version = (-1398);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2027), "ebJrRBBhiA,)", "ebJrRBBhiA,)", "ebJrRBBhiA,)", "ebJrRBBhiA,)");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1121);
      classWriter0.index = (-1400);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeVisblAnnoations", "", "&8nD9)", "RuntimeVisblAnnoations");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2027), "{brRBhiA )", "{brRBhiA )", "{brRBhiA )", "{brRBhiA )");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "@4/uf0F;6", "@4/uf0F;6", (String) null, "@4/uf0F;6");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1121);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "wheel.asm.FieldWriter", "", "", (Object) null);
      Attribute attribute0 = new Attribute("RuntimeInvisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-641));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-641), "Deprecated", "m", "m", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put12(265, (-641));
      byteVector1.length = (int) (byte)102;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-641));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-641), "Deprecated", "m", "m", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      byte[] byteArray0 = new byte[9];
      byteVector0.data = byteArray0;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 653, "", "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-641));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "=_M7s", "", "", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1670);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "r7'yqL=4G/$T*b; 2f", "r7'yqL=4G/$T*b; 2f", "r7'yqL=4G/$T*b; 2f", "r7'yqL=4G/$T*b; 2f");
      Attribute attribute0 = new Attribute("wheel.asm.ByteVector");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "xnu/2U", "xnu/2U", "xnu/2U", "xnu/2U");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.visit(49, 4096, ".F7/nq7&cs3#Pmfe", "-9", "RuntimeInvisibleAnnotations", (String[]) null);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2027), "ebJrRBBhiA,)", "ebJrRBBhiA,)", "ebJrRBBhiA,)", "ebJrRBBhiA,)");
      Attribute attribute0 = new Attribute("ebJrRBBhiA,)");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "xnu/2U", "xnu/2U", "xnu/2U", "xnu/2U");
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "{brRBhA )", "{brRBhA )", "{brRBhA )", "{brRBhA )");
      fieldWriter0.visitAnnotation("{brRBhA )", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", (String) null, "");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4067));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4067), "", "", "", "");
      classWriter0.visit(49, 4096, ".F7/nq7&cs3#Pmfe", "-9", "RuntimeInvisibleAnnotations", (String[]) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2027), "ebJrRBBhiA,)", "ebJrRBBhiA,)", "ebJrRBBhiA,)", "ebJrRBBhiA,)");
      fieldWriter0.visitAnnotation("ebJrRBBhiA,)", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1979));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1979), "", "", "", "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2027));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2027), "org.apache.commons.io.filefilter.CanWriteFileFilter", "wheel.asm.FieldWriter", (String) null, "org.apache.commons.io.filefilter.CanWriteFileFilter");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2244, "-Ub?}MTpM052", "", "wheel.asm.FieldWriter", "%h6e<6#m");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-641));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-641), "Deprecated", "m", "m", (Object) null);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-641));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-641), "Deprecated", "m", "m", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
