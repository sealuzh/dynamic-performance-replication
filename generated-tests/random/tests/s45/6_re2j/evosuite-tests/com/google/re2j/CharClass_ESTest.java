/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:25:56 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 1389;
      CharClass charClass2 = charClass0.negateClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass1.appendFoldedRange(1389, 497);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      
      CharClass charClass6 = charClass5.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      
      CharClass charClass7 = charClass5.cleanClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      
      CharClass charClass8 = charClass6.negateClass();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      
      CharClass charClass9 = charClass8.appendClassWithSign(intArray0, 1389);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass9);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      
      int[] intArray1 = charClass8.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass9);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass10 = charClass6.appendClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass10);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass8);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass9);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass5);
      
      int[][] intArray2 = new int[9][3];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      intArray2[5] = intArray1;
      intArray2[6] = intArray1;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray2[7] = intArray3;
      intArray2[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass8.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 66640;
      intArray0[1] = 32;
      intArray0[2] = 1;
      intArray0[3] = 1389;
      intArray0[4] = 1114111;
      intArray0[5] = 2088;
      intArray0[6] = (-2196);
      intArray0[7] = 1251;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {66640, 32, 1, 1389, 1114111, 2088, (-2196), 1251}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {66640, 32, 1, 1389, 1114111, 2088, (-2196), 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(66640, (-2196));
      assertArrayEquals(new int[] {66640, 32, 1, 1389, 1114111, 2088, (-2196), 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      String string0 = charClass0.toString();
      assertEquals("[0x10450-0x20 0x1-0x56d 0x10ffff-0x828 0xfffff76c-0x10ffff]", string0);
      assertArrayEquals(new int[] {66640, 32, 1, 1389, 1114111, 2088, (-2196), 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      
      String string1 = charClass2.toString();
      assertEquals("[0x10450-0x20 0x1-0x56d 0x10ffff-0x828 0xfffff76c-0x10ffff]", string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new int[] {66640, 32, 1, 1389, 1114111, 2088, (-2196), 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 32);
      assertArrayEquals(new int[] {66640, 32, 1, 1389, 1114111, 2088, (-2196), 1114111}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-1549);
      CharClass charClass1 = charClass0.appendLiteral((-1549), (-1549));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray1 = new int[4];
      intArray1[0] = (-1549);
      intArray1[1] = (-1549);
      intArray1[2] = (-1549);
      // Undeclared exception!
      charClass2.appendFoldedRange(1201, 66640);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 91;
      intArray0[1] = 4360;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 4360}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-1937));
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendLiteral(1114111, 1114111);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      
      int int0 = 550;
      int int1 = 550;
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-7168323);
      intArray0[1] = 2;
      intArray0[2] = (-7168322);
      intArray0[3] = 5413;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-7168323), 2, (-7168322), 5413}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-7168323), 5413, (-7168322), 5413}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[8][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {(-2143328278), 1114111, (-7168322), 5413}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {(-2143328278), 1114111, (-7168322), 5413}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      
      // Undeclared exception!
      charClass3.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[4];
      intArray1[0] = 43311;
      intArray1[1] = 66639;
      intArray1[2] = 1454;
      intArray1[3] = (-1295110);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 43311;
      intArray2[1] = 66639;
      intArray2[2] = 1454;
      intArray2[3] = 1454;
      intArray2[4] = 66639;
      intArray2[5] = 1454;
      intArray2[6] = 43311;
      intArray2[7] = 66639;
      intArray2[8] = (-2136);
      intArray0[1] = intArray2;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendTableWithSign(intArray0, (-1295110));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedRange((-2136), 66639);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      
      CharClass charClass5 = charClass4.appendNegatedTable(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2170;
      intArray0[1] = 983;
      intArray0[2] = 0;
      intArray0[3] = 410;
      intArray0[4] = 7294;
      intArray0[5] = 4156;
      intArray0[6] = 0;
      intArray0[7] = 1423;
      intArray0[8] = (-1029);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 976;
      intArray0[2] = 1315;
      intArray0[3] = (-1821);
      intArray0[4] = (-2);
      intArray0[5] = 768;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1315);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-2);
      intArray0[2] = 128336;
      int int0 = (-2004);
      intArray0[3] = (-2004);
      int int1 = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 120655;
      intArray0[3] = 1503;
      intArray0[4] = 0;
      intArray0[5] = (-268);
      intArray0[6] = 0;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1, 0, 120655, 1503, 0, (-268), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(3852, 0);
      assertArrayEquals(new int[] {1, 0, 120655, 1503, 0, (-268), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(120655, 69811);
      assertArrayEquals(new int[] {1, 0, 120655, 1503, 0, (-268), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 0);
      assertArrayEquals(new int[] {1, 0, 120655, 1503, 0, (-268), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-2054));
      assertArrayEquals(new int[] {1, 0, 120655, 1503, 0, (-268), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertArrayEquals(new int[] {1, 0, 120655, 1503, 0, (-268), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertArrayEquals(new int[] {1, 0, 120655, 1503, 0, (-268), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 1860;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1860);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = 43013;
      intArray0[2] = 91;
      intArray0[3] = (-48579);
      intArray0[4] = 826;
      intArray0[5] = 5549;
      intArray0[6] = (-1413);
      intArray0[7] = (-188);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      charClass1.appendFoldedRange(826, 3643);
      CharClass charClass2 = charClass1.appendRange(93, (-1027));
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-1027));
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 5549);
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      charClass5.appendTable(intArray1);
      int[] intArray2 = new int[3];
      intArray2[0] = (-48579);
      intArray2[1] = (-1027);
      intArray2[2] = 43013;
      // Undeclared exception!
      try { 
        charClass5.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray1, 8255);
      int[][] intArray2 = new int[5][6];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      int[] intArray3 = new int[4];
      intArray3[0] = 8255;
      intArray3[1] = 8255;
      intArray3[2] = 8255;
      intArray3[3] = 8255;
      intArray2[2] = intArray3;
      intArray2[3] = intArray0;
      intArray2[4] = intArray1;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray2, 8255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 42041;
      intArray0[1] = (-1093);
      intArray0[2] = 42678;
      intArray0[3] = 5798;
      intArray0[4] = (-2930);
      intArray0[5] = (-540);
      intArray0[6] = 41404;
      intArray0[7] = 149;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 5798);
      CharClass charClass3 = charClass2.cleanClass();
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[1];
      intArray2[0] = (-1093);
      intArray1[5] = intArray2;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 42041);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(1, 1);
      CharClass charClass2 = charClass1.negateClass();
      int[][] intArray0 = new int[7][9];
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 2398;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 2398;
      intArray3[1] = 2398;
      intArray3[2] = 2398;
      intArray3[3] = 1;
      intArray3[4] = 2398;
      intArray3[5] = 1;
      intArray3[6] = 1;
      intArray3[7] = 2398;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 2398;
      intArray4[1] = 1;
      intArray4[2] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 2398;
      intArray5[1] = 1;
      intArray5[2] = 1;
      intArray5[3] = 2398;
      intArray5[4] = 1;
      intArray5[5] = 1;
      intArray5[6] = 2398;
      intArray5[7] = (-221695);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      intArray6[0] = (-221695);
      intArray6[1] = (-221695);
      intArray6[2] = (-221695);
      intArray6[3] = (-221695);
      intArray6[4] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = 248;
      intArray7[1] = 1;
      intArray6[2] = (-221695);
      intArray7[3] = (-165);
      intArray7[4] = 2398;
      intArray7[5] = 2398;
      intArray7[6] = (-221695);
      intArray7[7] = 1;
      intArray0[6] = intArray7;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray3);
      int[] intArray8 = charClass4.toArray();
      assertArrayEquals(new int[] {0, 0, (-2147337769), 1114111}, intArray8);
      assertEquals(4, intArray8.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][5];
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendLiteral((-2460), (-2460));
      charClass1.toString();
      int int0 = (-2798);
      CharClass charClass3 = charClass0.appendTableWithSign(intArray0, (-2798));
      CharClass charClass4 = charClass3.appendLiteral((-850), 2);
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = (-850);
      intArray1[2] = (-2798);
      intArray1[3] = (-850);
      charClass2.cleanClass();
      CharClass charClass5 = charClass4.appendFoldedClass(intArray1);
      int[] intArray2 = new int[5];
      intArray2[0] = 43064;
      intArray2[1] = (-850);
      intArray2[2] = (-850);
      intArray2[3] = (-850);
      intArray2[4] = (-850);
      // Undeclared exception!
      try { 
        charClass5.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(42860, 889);
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[8];
      intArray1[0] = 42860;
      intArray1[1] = 42860;
      intArray1[2] = 42860;
      intArray1[3] = (-1041);
      intArray1[4] = 42860;
      intArray1[5] = 889;
      intArray1[6] = 42860;
      intArray1[7] = 889;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 42860;
      intArray2[1] = 42860;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 889;
      intArray3[1] = (-1041);
      intArray3[2] = 42860;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 889;
      intArray4[1] = 42860;
      intArray4[2] = 889;
      intArray4[3] = (-1041);
      intArray4[4] = 42860;
      intArray4[5] = 889;
      intArray4[6] = 42860;
      intArray4[7] = (-2259);
      intArray4[8] = (-1041);
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 1742;
      intArray1[1] = (-268);
      intArray1[2] = (-1713);
      intArray1[3] = (-1794);
      intArray1[4] = (-762);
      intArray1[5] = 65;
      intArray1[6] = 7294;
      intArray1[7] = 927;
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendFoldedRange(1742, 1742);
      CharClass charClass4 = charClass3.cleanClass();
      CharClass charClass5 = charClass4.appendFoldedClass(intArray1);
      int[] intArray2 = new int[5];
      intArray2[0] = (-268);
      intArray2[1] = 65;
      intArray2[2] = (-1794);
      intArray2[3] = 4;
      intArray2[4] = (-1713);
      // Undeclared exception!
      try { 
        charClass5.appendNegatedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendLiteral(93, 41676);
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 43041);
      charClass3.cleanClass();
      CharClass charClass4 = charClass2.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[1][5];
      charClass4.appendClass(intArray0);
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendTableWithSign(intArray1, 41676);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
