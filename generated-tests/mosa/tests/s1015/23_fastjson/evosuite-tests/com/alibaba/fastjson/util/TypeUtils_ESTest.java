/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:09:11 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.Byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.unwrapOptional(class0);
      InternalError internalError0 = new InternalError();
      TypeUtils.isProxy(class0);
      Random.setNextRandom(95);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("n:WHDi:8 %");
      assertEquals("n:whdi:8 %", locale0.getLanguage());
      
      TypeUtils.clearClassMapping();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.decapitalize(" Z");
      Class<BitSet> class0 = BitSet.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      BitSet bitSet0 = new BitSet();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) " Z", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.isProxy(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      TypeUtils.isProxy(class1);
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.isTransient((Method) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getSuppressed();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      Class<Double> class0 = Double.class;
      TypeUtils.computeGetters(class0, map0, true);
      InternalError internalError0 = new InternalError();
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("iX68_HQl1dQNa", "iX68_HQl1dQNa", 60, batchUpdateException0);
      InterruptedException interruptedException0 = new InterruptedException();
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLSyntaxErrorException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      TypeUtils.loadClass("L|~?b,j)HfE");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setAutoTypeSupport(true);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[2]);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig1 = new ParserConfig(false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ljava.util.concurrent.ConcurrentSkipListSet", "fastjson.parser.autoTypeSupport", 1, batchUpdateException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@67e12cdf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.isGenericParamType(class0);
      PageAttributes pageAttributes0 = new PageAttributes();
      TypeUtils.isHibernateInitialized(pageAttributes0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      TypeUtils.getClassFromMapping("float");
      TypeUtils.isGenericParamType(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      Class<FieldInfo> class0 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) map0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public com.alibaba.fastjson.util.FieldInfo(java.lang.String,java.lang.reflect.Method,java.lang.reflect.Field,java.lang.Class<?>,java.lang.reflect.Type,int,int,int,com.alibaba.fastjson.annotation.JSONField,com.alibaba.fastjson.annotation.JSONField,java.lang.String)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<Byte> class1 = Byte.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Double> class2 = Double.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class2, "writeNoneASM", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("can not cast to char, value : ");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("can not cast to char, value : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"can not cast to char value : \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNotNull(internalError0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@60c6a9e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("wc.8-,5[a\"[z");
      assertFalse(boolean0);
      
      Class<Time> class0 = Time.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<Float> class1 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(imageCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.ImageCapabilities@5c80e114
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Class<FieldInfo> class0 = FieldInfo.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      
      String string0 = File.pathSeparator;
      assertEquals(":", string0);
      assertNotNull(string0);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      assertNull(illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError", illegalAccessError0.toString());
      assertNotNull(illegalAccessError0);
      
      long long0 = TypeUtils.fnv1a_64_lower("getMetaClass");
      assertEquals(8249252618501230954L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<?> class1 = TypeUtils.loadClass("bpr>3S~");
      assertNull(class1);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      MessageFormat messageFormat0 = new MessageFormat("bpr>3S~");
      assertNotNull(messageFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.MessageFormat@5a4e4e4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Long> class0 = Long.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("]sxz*y|", classLoader0, true);
      assertNull(class1);
      
      Class<Method> class2 = Method.class;
      Method method0 = TypeUtils.castToJavaBean((Object) null, class2);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Random.setNextRandom(0);
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader2);
      
      ClassLoader classLoader3 = classLoader1.getParent();
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertSame(classLoader1, classLoader0);
      assertSame(classLoader3, classLoader2);
      assertNotNull(classLoader3);
      
      ClassLoader classLoader4 = classLoader1.getParent();
      assertFalse(classLoader1.equals((Object)classLoader3));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader4.equals((Object)classLoader1));
      assertFalse(classLoader4.equals((Object)classLoader0));
      assertSame(classLoader1, classLoader0);
      assertSame(classLoader4, classLoader3);
      assertSame(classLoader4, classLoader2);
      assertNotNull(classLoader4);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      boolean boolean2 = TypeUtils.isProxy(class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower("java.lang.Class@0000000001");
      assertEquals(8325111056366923490L, long0);
      
      boolean boolean3 = TypeUtils.isTransient((Method) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = TypeUtils.isNumber(")Y/Nol");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Class<FieldInfo> class1 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) propertyNamingStrategy0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      Integer integer0 = Integer.getInteger("]");
      assertNull(integer0);
      
      Locale locale0 = TypeUtils.toLocale("]");
      assertEquals("]", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("]", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      Rectangle rectangle0 = new Rectangle(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(rectangle0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Y+i");
      assertEquals(",`<Y+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("unsupported set operation.", "org.springframework.cglib.proxy.Factory");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Class<Timestamp> class0 = Timestamp.class;
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(linkedHashMap1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap1, propertyNamingStrategy0, true);
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("short", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(boolean0);
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(pageAttributes0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNull(negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      Class<?> class1 = TypeUtils.loadClass((String) null);
      assertNull(class1);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters((Class) null);
      assertNull(stringArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, renderingHints_Key0);
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      int int0 = TypeUtils.getParserFeatures(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constructor<DataTruncation>[] constructorArray0 = (Constructor<DataTruncation>[]) Array.newInstance(Constructor.class, 5);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(decimalFormat0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("fi", classLoader0, true);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(throwableArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@{II2", "@{II2", batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("@{II2", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: @{II2", sQLTransactionRollbackException0.toString());
      assertEquals("@{II2", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      Long long0 = new Long(1484L);
      assertEquals(1484L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("?DLXyDd7wG({{S@L8", long0);
      assertEquals(1484L, (long)long1);
      assertNotNull(long1);
      
      Time time0 = TypeUtils.castToSqlTime(long1);
      assertEquals("00:00:01", time0.toString());
      assertNotNull(time0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Y+i");
      assertEquals(",`<Y+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      threadGroup0.interrupt();
      assertEquals(",`<Y+i", threadGroup0.getName());
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      long long0 = TypeUtils.fnv1a_64(",`<Y+i");
      assertEquals(2891646313974290542L, long0);
      
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) identityHashMap0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      Class<?> class0 = TypeUtils.loadClass("L|~?b,j)HfE");
      assertNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Map<String, String> map0 = ZoneId.SHORT_IDS;
          assertFalse(map0.isEmpty());
          assertEquals(28, map0.size());
          assertNotNull(map0);
          
          Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
          List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
          assertFalse(map0.isEmpty());
          assertEquals(28, map0.size());
          assertEquals(0, list0.size());
          assertTrue(list0.isEmpty());
          assertNotNull(list0);
          
          InternalError internalError0 = new InternalError();
          assertEquals("java.lang.InternalError", internalError0.toString());
          assertNull(internalError0.getMessage());
          assertNotNull(internalError0);
          
          MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
          assertNotNull(mockJapaneseDate0);
          
          Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
          int int0 = TypeUtils.getSerializeFeatures(class1);
          assertEquals(0, int0);
          
          // Undeclared exception!
          try { 
            TypeUtils.castToLong(class1);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // can not cast to long, value : class org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
             //
             verifyException("com.alibaba.fastjson.util.TypeUtils", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertNotNull(atomicLong0);
      
      long long0 = atomicLong0.getAndDecrement();
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1L), atomicLong0.get());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1), atomicLong0.intValue());
      assertEquals(0L, long0);
      
      long long1 = atomicLong0.decrementAndGet();
      assertEquals("-2", atomicLong0.toString());
      assertEquals((-2.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((-2L), atomicLong0.longValue());
      assertEquals((byte) (-2), atomicLong0.byteValue());
      assertEquals((-2.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-2L), atomicLong0.get());
      assertEquals((short) (-2), atomicLong0.shortValue());
      assertEquals((-2), atomicLong0.intValue());
      assertFalse(long1 == long0);
      assertEquals((-2L), long1);
      
      long long2 = atomicLong0.getAndIncrement();
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1L), atomicLong0.get());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1), atomicLong0.intValue());
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-2L), long2);
      
      Long long3 = TypeUtils.castToLong(atomicLong0);
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1L), atomicLong0.get());
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((-1), atomicLong0.intValue());
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-1L), (long)long3);
      assertNotNull(long3);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      int int1 = TypeUtils.getSerializeFeatures(class1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Class<?> class2 = TypeUtils.loadClass("Ljava.awt.Point");
      assertNull(class2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-73), (byte) (-38), (byte)45, (byte)102, (byte) (-105), (byte)111}, byteArray0);
      assertEquals((byte)111, bigInteger0.byteValue());
      assertEquals((short) (-26769), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Float float0 = TypeUtils.castToFloat(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-73), (byte) (-38), (byte)45, (byte)102, (byte) (-105), (byte)111}, byteArray0);
      assertEquals((byte)111, bigInteger0.byteValue());
      assertEquals((short) (-26769), bigInteger0.shortValue());
      assertEquals(2.02147686E14F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "syntax error : ");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, false);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : Thread[syntax error : ,5,Lorg.springframework.util.LinkedMultiValueMap]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = TypeUtils.toLocale("kotlin.ranges.ClosedDoubleRange");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kotlin.ranges.closeddoublerange", locale0.toString());
      assertEquals("kotlin.ranges.closeddoublerange", locale0.getLanguage());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Class<AtomicInteger> class3 = AtomicInteger.class;
      boolean boolean0 = TypeUtils.isProxy(class3);
      assertFalse(boolean0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.putIfAbsent("[)!]hYod&R!AEh#+", "_");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {[)!]hYod&R!AEh#+=_}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("G-[&M!Dk!tv`");
      assertEquals("G-[&M!Dk!tv`", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        Date.valueOf("G-[&M!Dk!tv`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constructor<DataTruncation>[] constructorArray0 = (Constructor<DataTruncation>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Class<FieldInfo> class0 = FieldInfo.class;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) decimalFormat0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("9Z)N6U|wa");
      assertFalse(boolean0);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Class<FieldInfo> class0 = FieldInfo.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotNull(jSONArray0);
      
      Type type0 = jSONArray0.getComponentType();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNull(type0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type1);
      
      Type type2 = TypeUtils.getGenericParamType(type1);
      assertSame(type1, type2);
      assertSame(type2, type1);
      assertNotNull(type2);
      
      Class<?> class0 = TypeUtils.getClass(type2);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertSame(type1, type2);
      assertSame(type2, type1);
      assertNotNull(class0);
      
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<FieldInfo> class2 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(object0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("fastjson.parser.autoTypeAccept");
      assertEquals("java.lang.OutOfMemoryError: fastjson.parser.autoTypeAccept", outOfMemoryError0.toString());
      assertEquals("fastjson.parser.autoTypeAccept", outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.OutOfMemoryError: fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      Point point0 = new Point((-1490), (-1490));
      assertEquals((-1490.0), point0.getY(), 0.01);
      assertEquals((-1490.0), point0.getX(), 0.01);
      assertEquals((-1490), point0.x);
      assertEquals((-1490), point0.y);
      assertNotNull(point0);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(jSONPDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("qI\t0}~K~folh");
      assertEquals("qI\t0}~K~folh", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      String string1 = File.pathSeparator;
      assertFalse(string1.equals((Object)string0));
      assertEquals(":", string1);
      assertNotNull(string1);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      long long0 = TypeUtils.fnv1a_64_lower(":");
      assertEquals((-5808597555084153427L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      String string0 = "geDclaringClass";
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string1 = "javassist.util.proxy.ProxyObject";
      String string2 = identityHashMap0.put("geDclaringClass", "javassist.util.proxy.ProxyObject");
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(string2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MapDeserializer> class0 = MapDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("java.util.Optional", classLoader0, true);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.util.Optional", class1.toString());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping(" not found");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mapDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      Class<Locale> class0 = Locale.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kotlin.ranges.LongRange");
      assertFalse(boolean0);
      
      MockDate mockDate0 = new MockDate(246L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(date0);
      
      Date date1 = TypeUtils.castToSqlDate(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
      assertNotNull(date1);
      
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Class<InternalError> class1 = InternalError.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) bitSet0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("J2oq#Z3(F");
      assertNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertNotNull(type1);
      
      Class<?> class0 = TypeUtils.getClass(type1);
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Object", class0.toString());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertNotNull(class0);
      
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ljava.awt.Color", "|lW45k)'_zr(~x");
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("xRi~756=q[Kti}hslW", "|lW45k)'_zr(~x", (-750), sQLTransientException0);
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      InternalError internalError0 = new InternalError("Ljava.awt.Color", sQLNonTransientConnectionException0);
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.lang.InternalError: Ljava.awt.Color", internalError0.toString());
      assertEquals("Ljava.awt.Color", internalError0.getMessage());
      assertNotNull(internalError0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.awt.Color", internalError0);
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.lang.InternalError: Ljava.awt.Color", internalError0.toString());
      assertEquals("Ljava.awt.Color", internalError0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljava.awt.Color", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Ljava.awt.Color", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean1 = concurrentHashMap0.replace("xRi~756=q[Kti}hslW", (Object) sQLFeatureNotSupportedException0, (Object) "|lW45k)'_zr(~x");
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.lang.InternalError: Ljava.awt.Color", internalError0.toString());
      assertEquals("Ljava.awt.Color", internalError0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljava.awt.Color", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Ljava.awt.Color", sQLFeatureNotSupportedException0.getMessage());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Object", class2.toString());
      assertNotNull(class2);
      
      Type type2 = TypeUtils.unwrapOptional(type1);
      assertSame(type0, type2);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertSame(type1, type2);
      assertSame(type2, type1);
      assertSame(type2, type0);
      assertNotNull(type2);
      
      boolean boolean2 = TypeUtils.isGenericParamType(type0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(type0, type2);
      assertSame(type0, type1);
      assertFalse(boolean2);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("Lorg.springframework.util.LinkedMultiValueMap");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException: Lorg.springframework.util.LinkedMultiValueMap", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1754, 13, 13, (-1091), (-750));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1754,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1091,HOUR_OF_DAY=-1091,MINUTE=-750,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1754,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1091,HOUR_OF_DAY=-1091,MINUTE=-750,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("1970-01-01 00:00:00.0", timestamp0.toString());
      assertEquals(0, timestamp0.getNanos());
      assertNotNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      Integer integer0 = Integer.getInteger("]");
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : ]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      assertEquals("fastjson.parser.autoTypeAccept", string0);
      assertNotNull(string0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Yg+i");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "x[<Tiv=oSk");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(stackTraceElementArray0);
      
      MockThread.reset();
      threadGroup0.interrupt();
      assertEquals(",`<Yg+i", threadGroup0.getName());
      
      byte[] byteArray0 = TypeUtils.castToBytes(",`<Yg+i");
      assertArrayEquals(new byte[] {(byte)98, (byte)15, (byte) (-94)}, byteArray0);
      assertNotNull(byteArray0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("Ljava.awt.Rectangle");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap0, false);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      Locale locale0 = TypeUtils.toLocale("Qk^bmtoYY/YiD'");
      assertEquals("", locale0.getISO3Country());
      assertEquals("qk^bmtoyy/yid'", locale0.getLanguage());
      assertEquals("qk^bmtoyy/yid'", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("9Z)N6U|wa");
      assertFalse(boolean0);
      
      String string0 = File.pathSeparator;
      assertEquals(":", string0);
      assertNotNull(string0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min(0, Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      Integer integer0 = TypeUtils.castToInt(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<h+i");
      assertEquals(",`<h+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("notify");
      assertNull(class0);
      
      Class<Double> class1 = Double.class;
      Class<DateFormatSymbols> class2 = DateFormatSymbols.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap0, true);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<?> class4 = TypeUtils.loadClass("notify", classLoader0);
      assertNull(class4);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("]#i)qru&SzUVQce");
      assertTrue(boolean0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      VerifyError verifyError0 = new VerifyError();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNotNull(verifyError0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig1);
      
      PageAttributes pageAttributes0 = TypeUtils.cast((Object) null, (Type) class2, parserConfig1);
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(pageAttributes0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader3, classLoader0);
      assertSame(classLoader3, classLoader1);
      assertSame(classLoader3, classLoader2);
      assertNotNull(classLoader3);
      
      ClassLoader classLoader4 = classLoader3.getParent();
      assertFalse(classLoader4.equals((Object)classLoader3));
      assertFalse(classLoader4.equals((Object)classLoader0));
      assertFalse(classLoader4.equals((Object)classLoader2));
      assertFalse(classLoader4.equals((Object)classLoader1));
      assertSame(classLoader3, classLoader0);
      assertSame(classLoader3, classLoader1);
      assertSame(classLoader3, classLoader2);
      assertNotNull(classLoader4);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader3);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(classLoader3.equals((Object)classLoader4));
      assertNotNull(aSMDeserializerFactory1);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      assertFalse(aSMClassLoader1.equals((Object)aSMClassLoader0));
      assertNotSame(aSMClassLoader1, aSMClassLoader0);
      assertNotNull(aSMClassLoader1);
      
      Class<?> class3 = TypeUtils.loadClass("fastjson.parser.autoTypeAccept", (ClassLoader) null, true);
      assertNull(class3);
      
      Class<?> class4 = TypeUtils.getClassFromMapping("]#i)qru&SzUVQce");
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(throwableArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Rl6", (String) null, batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("Rl6", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: Rl6", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Map<String, String> map0 = new HashMap<String, String>();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<FieldInfo> class0 = FieldInfo.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) ",`<Yg+i", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<UUID> class1 = UUID.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNotNull(internalError0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Integer integer0 = new Integer(1307);
      assertEquals(1307, (int)integer0);
      assertNotNull(integer0);
      
      Date date0 = TypeUtils.castToSqlDate(integer0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, "fastjson.parser.deny");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      Map<Thread, StackTraceElement[]> map0 = new TreeMap<Thread, StackTraceElement[]>();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeAccept", false);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Class<?> class1 = TypeUtils.loadClass("R#s'Qj jD&7LA}|ir2", classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNull(class1);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(string0);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotNull(hashtable1);
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertSame(map1, map0);
      assertNotNull(map1);
      
      Class<Double> class0 = Double.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map1, false);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(map1, map0);
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.loadClass("toJSON error", classLoader0);
      assertNull(class2);
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "clo");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Class<?> class0 = TypeUtils.loadClass("TyAirRdJfF($LW}5MW#");
      assertNull(class0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      Type type1 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type1);
      
      Locale locale0 = TypeUtils.toLocale("TyAirRdJfF($LW}5MW#");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("tyairrdjff($lw}5mw#", locale0.getLanguage());
      assertEquals("tyairrdjff($lw}5mw#", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertNull(type0);
      
      JSONObject jSONObject0 = new JSONObject(1101, true);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.lang.AutoCloseable");
      assertEquals("Ljava.lang.AutoCloseable", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~9Pa", "long", 3089);
      assertEquals("~9Pa", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ~9Pa", sQLTimeoutException0.toString());
      assertEquals("long", sQLTimeoutException0.getSQLState());
      assertEquals(3089, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("?dg-<cev-cR[0$Uj", "can not cast to double, value : ", (-1140271073));
      assertEquals((-1140271073), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ?dg-<cev-cR[0$Uj", sQLTransactionRollbackException0.toString());
      assertEquals("can not cast to double, value : ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("?dg-<cev-cR[0$Uj", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTimeoutException0.setNextException(sQLTransactionRollbackException0);
      assertEquals("~9Pa", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ~9Pa", sQLTimeoutException0.toString());
      assertEquals("long", sQLTimeoutException0.getSQLState());
      assertEquals(3089, sQLTimeoutException0.getErrorCode());
      assertEquals((-1140271073), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ?dg-<cev-cR[0$Uj", sQLTransactionRollbackException0.toString());
      assertEquals("can not cast to double, value : ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("?dg-<cev-cR[0$Uj", sQLTransactionRollbackException0.getMessage());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, sQLTimeoutException0);
      assertEquals("~9Pa", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: ~9Pa", sQLTimeoutException0.toString());
      assertEquals("long", sQLTimeoutException0.getSQLState());
      assertEquals(3089, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(jdk8DateCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = new BigDecimal(2278L);
      assertEquals((short)2278, bigDecimal0.shortValue());
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.valueOf((long) 0, 0);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      Time time0 = TypeUtils.castToSqlTime(bigDecimal0);
      assertEquals((short)2278, bigDecimal0.shortValue());
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      assertEquals("00:00:02", time0.toString());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(time0);
      
      Class<?> class1 = TypeUtils.loadClass("Yu", (ClassLoader) null, false);
      assertNull(class1);
      
      VerifyError verifyError0 = new VerifyError();
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(verifyError0.getMessage());
      assertNotNull(verifyError0);
      
      VerifyError verifyError1 = new VerifyError();
      assertEquals("java.lang.VerifyError", verifyError1.toString());
      assertNull(verifyError1.getMessage());
      assertFalse(verifyError1.equals((Object)verifyError0));
      assertNotNull(verifyError1);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) verifyError1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.put("java.time.OffsetTime", "java.time.OffsetTime");
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<Object> class0 = Object.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      SQLWarning sQLWarning0 = new SQLWarning("java.time.OffsetTime", internalError0);
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.time.OffsetTime", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: java.time.OffsetTime", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLWarning: java.time.OffsetTime
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Long> class0 = Long.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("]sxz*y|", classLoader0, true);
      assertNull(class1);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#.##0,00 \u00A4", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(" \u20AC", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(" \u20AC", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.00 \u00A4", decimalFormat0.toPattern());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertNotNull(decimalFormat0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      Integer integer0 = Integer.getInteger("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory$Context");
      assertNull(integer0);
      
      AtomicLong atomicLong0 = new AtomicLong((-953L));
      assertEquals((-953.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-953.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals("-953", atomicLong0.toString());
      assertEquals((short) (-953), atomicLong0.shortValue());
      assertEquals((byte)71, atomicLong0.byteValue());
      assertEquals((-953), atomicLong0.intValue());
      assertEquals((-953L), atomicLong0.longValue());
      assertEquals((-953L), atomicLong0.get());
      assertNotNull(atomicLong0);
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertEquals((-953.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-953.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals("-953", atomicLong0.toString());
      assertEquals((short) (-953), atomicLong0.shortValue());
      assertEquals((byte)71, atomicLong0.byteValue());
      assertEquals((-953), atomicLong0.intValue());
      assertEquals((-953L), atomicLong0.longValue());
      assertEquals((-953L), atomicLong0.get());
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>(154, 1.0F);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<?> class2 = TypeUtils.loadClass("]#i)qru&SzUVQce");
      assertNull(class2);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      typeArray0[1] = (Type) class0;
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      Class<?> class3 = TypeUtils.loadClass((String) null);
      assertNull(class3);
      
      String[] stringArray2 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray2);
      
      TypeUtils.clearClassMapping();
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.ceilingKey((String) null);
      assertEquals(0, treeMap0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, treeMap0, true, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class class4 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertNotNull(class4);
      
      Collection collection0 = TypeUtils.createCollection(class4);
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException();
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotNull(batchUpdateException1);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotNull(throwableArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      Class<Method> class0 = Method.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertNotNull(linkedHashMap1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("unsupported array put operation. ");
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread(threadGroup1, "unsupported array put operation. ");
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(mockThread0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("", "-\"/i");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotNull(stackTraceElementArray0);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("");
      assertNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("getfillInStackTrace", "false");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNull(type0);
      
      String string1 = TypeUtils.castToString((Object) null);
      assertNull(string1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("getfillInStackTrace", (Throwable) null);
      assertEquals("getfillInStackTrace", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: getfillInStackTrace", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLFeatureNotSupportedException: getfillInStackTrace
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      Class<?> class0 = TypeUtils.loadClass("'U%,eJ+47__-9&8+", classLoader0, true);
      assertNull(class0);
      
      java.util.IdentityHashMap<ClassLoader, Timestamp> identityHashMap1 = new java.util.IdentityHashMap<ClassLoader, Timestamp>();
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertNotNull(identityHashMap1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isNumber("java.sql.SQLNonTransientConnectionException");
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("Xj+,VhxrAmT6U8%i8Bh");
      assertEquals("Xj+,VhxrAmT6U8%i8Bh", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = threadGroup0.getParent();
      assertEquals("Xj+,VhxrAmT6U8%i8Bh", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotNull(threadGroup1);
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup0, "<NV");
      assertEquals("Xj+,VhxrAmT6U8%i8Bh", threadGroup0.getName());
      assertEquals("<NV", threadGroup2.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertNotNull(threadGroup2);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup2, mockThread0);
      assertEquals("Xj+,VhxrAmT6U8%i8Bh", threadGroup0.getName());
      assertEquals("<NV", threadGroup2.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Dimension> class1 = Dimension.class;
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class1, class0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(objectDeserializer0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Class<TypeNotPresentException> class2 = TypeNotPresentException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(serializeBeanInfo0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertNotNull(stringIndexOutOfBoundsException0);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      assertNotNull(stackTraceElementDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Yg+i");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "x[<Tiv=oSk");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(stackTraceElementArray0);
      
      boolean boolean0 = TypeUtils.isNumber(",`<Yg+i");
      assertFalse(boolean0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("2");
      assertEquals((-5808606351177179115L), long0);
      
      Short short0 = TypeUtils.castToShort("2");
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("Rp5f4Ogm");
      assertEquals("rp5f4Ogm", string0);
      assertNotNull(string0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("Could not obtain an instance of DatatypeFactory.");
      assertNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "clo";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "clo");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string1 = "java.util.Optional";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("java.util.Optional", classLoader0, false);
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.util.Optional", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("kotlin.reflect.KFunction");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.kotlin.reflect.KFunction
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Class<AtomicInteger> class3 = AtomicInteger.class;
      long long0 = TypeUtils.fnv1a_64_lower("%.IPJPfH>ux:E");
      assertEquals(2118996891715919371L, long0);
      
      boolean boolean0 = TypeUtils.isProxy(class3);
      assertFalse(boolean0);
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      assertNotNull(jdk8DateCodec0);
      
      Point point0 = new Point((-2048195210), 54);
      assertEquals(54.0, point0.getY(), 0.01);
      assertEquals((-2.04819521E9), point0.getX(), 0.01);
      assertEquals((-2048195210), point0.x);
      assertEquals(54, point0.y);
      assertNotNull(point0);
      
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Y+i");
      assertEquals(",`<Y+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("unsupported set operation.", "org.springframework.cglib.proxy.Factory");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      String string1 = ParserConfig.AUTOTYPE_ACCEPT;
      assertEquals("fastjson.parser.autoTypeAccept", string1);
      assertNotNull(string1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException(",`<Y+i", (Throwable) null);
      assertEquals(",`<Y+i", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type ,`<Y+i not present", typeNotPresentException0.toString());
      assertEquals("Type ,`<Y+i not present", typeNotPresentException0.getMessage());
      assertNotNull(typeNotPresentException0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Yg+i");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "x[<Tiv=oSk");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      String string0 = "list_item_value";
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string1 = identityHashMap0.put(",`<Yg+i", "Ljava.lang.AutoCloseable");
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(string1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(stackTraceElementArray0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Thread[x[<Tiv=oSk,5,,`<Yg+i]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      HashMap<MockMinguoDate, Timestamp> hashMap0 = new HashMap<MockMinguoDate, Timestamp>(8, 8);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      Timestamp timestamp0 = new Timestamp(2147483647L);
      assertEquals(647000000, timestamp0.getNanos());
      assertEquals("1970-01-25 20:31:23.647", timestamp0.toString());
      assertNotNull(timestamp0);
      
      Timestamp timestamp1 = hashMap0.put(mockMinguoDate0, timestamp0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(647000000, timestamp0.getNanos());
      assertEquals("1970-01-25 20:31:23.647", timestamp0.toString());
      assertNull(timestamp1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      java.util.IdentityHashMap<SQLFeatureNotSupportedException, JobAttributes> identityHashMap0 = new java.util.IdentityHashMap<SQLFeatureNotSupportedException, JobAttributes>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNull(bigDecimal0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      Point point0 = new Point(1124075009, 44);
      assertEquals(44.0, point0.getY(), 0.01);
      assertEquals(1.124075009E9, point0.getX(), 0.01);
      assertEquals(1124075009, point0.x);
      assertEquals(44, point0.y);
      assertNotNull(point0);
      
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      LinkedHashMap<TimeUnit, LinkageError> linkedHashMap0 = new LinkedHashMap<TimeUnit, LinkageError>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "[double";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[double", "[double");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [double", sQLFeatureNotSupportedException0.toString());
      assertEquals("[double", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("[double", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("WWi62[TRk9:7X6d  q");
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("WWi62[TRk9:7X6d  q", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: WWi62[TRk9:7X6d  q", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("WWi62[TRk9:7X6d  q", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: WWi62[TRk9:7X6d  q", sQLTransientConnectionException0.toString());
      
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLTransientConnectionException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransientConnectionException: WWi62[TRk9:7X6d  q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Yg+i");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "x[<Tiv=oSk");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(stackTraceElementArray0);
      
      threadGroup0.interrupt();
      assertEquals(",`<Yg+i", threadGroup0.getName());
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      long long0 = TypeUtils.fnv1a_64("org.springframework.security.web.csrf.DefaultCsrfToken");
      assertEquals(1233162291719202522L, long0);
      
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "/`Xi'n9{l^M]<-JF", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : /`Xi'n9{l^M]<-JF
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("r");
      assertEquals("r", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",`<Y+i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",`<Y+i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      String string0 = "syntax error : ";
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "syntax error : ");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("syntax error : ");
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("syntax error : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      assertNotNull(linkedHashMap1);
      
      ThreadGroup threadGroup0 = new ThreadGroup("unsupported array put operation. ");
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertEquals("", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
      
      ThreadGroup threadGroup2 = new ThreadGroup((String) null);
      assertNull(threadGroup2.getName());
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertNotNull(threadGroup2);
      
      ThreadGroup threadGroup3 = threadGroup0.getParent();
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup3.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup3.equals((Object)threadGroup0));
      assertFalse(threadGroup3.equals((Object)threadGroup2));
      assertFalse(threadGroup3.equals((Object)threadGroup1));
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup3);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup3, threadGroup0);
      assertNotSame(threadGroup3, threadGroup2);
      assertNotSame(threadGroup3, threadGroup1);
      assertNotNull(threadGroup3);
      
      String string0 = "e?P!g@uf1?iKF}?K";
      ThreadGroup threadGroup4 = new ThreadGroup(threadGroup0, "e?P!g@uf1?iKF}?K");
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertEquals("e?P!g@uf1?iKF}?K", threadGroup4.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup3));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup4.equals((Object)threadGroup3));
      assertFalse(threadGroup4.equals((Object)threadGroup0));
      assertFalse(threadGroup4.equals((Object)threadGroup2));
      assertFalse(threadGroup4.equals((Object)threadGroup1));
      assertNotNull(threadGroup4);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      threadGroup2.list();
      assertNull(threadGroup2.getName());
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup4));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup3));
      assertNotSame(threadGroup2, threadGroup0);
      assertNotSame(threadGroup2, threadGroup4);
      assertNotSame(threadGroup2, threadGroup1);
      assertNotSame(threadGroup2, threadGroup3);
      
      MockThread mockThread1 = new MockThread(threadGroup3, mockThread0);
      assertEquals("unsupported array put operation. ", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup3.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup3));
      assertFalse(threadGroup0.equals((Object)threadGroup4));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup3.equals((Object)threadGroup0));
      assertFalse(threadGroup3.equals((Object)threadGroup2));
      assertFalse(threadGroup3.equals((Object)threadGroup1));
      assertFalse(threadGroup3.equals((Object)threadGroup4));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<Time> class0 = Time.class;
      // Undeclared exception!
      try { 
        parserConfig0.createJavaBeanDeserializer(class0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("2");
      assertEquals((-5808606351177179115L), long0);
      
      Short short0 = TypeUtils.castToShort("2");
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("Rp5f4Ogm");
      assertEquals("rp5f4Ogm", string0);
      assertNotNull(string0);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("Could not obtain an instance of DatatypeFactory.");
      assertNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Byte byte0 = TypeUtils.castToByte("2");
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Long> class0 = Long.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, false);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.time.", "can not cast to short, value : ", 334, internalError0);
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.time.", sQLTimeoutException0.toString());
      assertEquals("java.time.", sQLTimeoutException0.getMessage());
      assertEquals(334, sQLTimeoutException0.getErrorCode());
      assertEquals("can not cast to short, value : ", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("3F>(QWFMnP-MH#8Zt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 3F>(QWFMnP-MH#8Zt
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      parserConfig0.addAccept("}");
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      Class<AtomicInteger> class0 = AtomicInteger.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      parserConfig0.compatibleWithJavaBean = true;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("f", "can not cast to long, value : ");
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(string0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      assertNotNull(imageCapabilities0);
      
      Random.setNextRandom(70);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {f=can not cast to long, value : }
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(string0);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotNull(parserConfig1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[I", "fastjson.parser.deny", 8, batchUpdateException0);
      assertEquals("fastjson.parser.deny", sQLSyntaxErrorException0.getSQLState());
      assertEquals("[I", sQLSyntaxErrorException0.getMessage());
      assertEquals(8, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: [I", sQLSyntaxErrorException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dateFormatSymbols0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertNotNull(identityHashMap1);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("oracle.sql.TIMESTAMP");
      assertEquals("java.lang.IllegalThreadStateException: oracle.sql.TIMESTAMP", illegalThreadStateException0.toString());
      assertEquals("oracle.sql.TIMESTAMP", illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.IllegalThreadStateException\",\"localizedMessage\":\"oracle.sql.TIMESTAMP\",\"message\":\"oracle.sql.TIMESTAMP\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor111\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "java.java.lang.Object";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SecurityException securityException0 = new SecurityException("java.java.lang.Object", batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.SecurityException: java.java.lang.Object", securityException0.toString());
      assertEquals("java.java.lang.Object", securityException0.getMessage());
      assertNotNull(securityException0);
      
      Type[] typeArray0 = new Type[7];
      Class<Short> class0 = Short.TYPE;
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNull(type0);
      
      typeArray0[0] = null;
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertSame(class1, class0);
      assertNotNull(class1);
      
      typeArray0[1] = (Type) class1;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.java.lang.Object";
      stringArray0[1] = "java.java.lang.Object";
      stringArray0[2] = "java.java.lang.Object";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      Class<?> class2 = simplePropertyPreFilter0.getClazz();
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNull(class2);
      
      typeArray0[2] = (Type) null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class3 = TypeUtils.loadClass("java.java.lang.Object", classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class3);
      
      typeArray0[3] = (Type) null;
      Class<Double> class4 = Double.TYPE;
      assertEquals("double", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertTrue(class4.isPrimitive());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertNotNull(class4);
      
      typeArray0[4] = (Type) class4;
      Class<?> class5 = TypeUtils.loadClass("istoString", classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class5);
      
      typeArray0[5] = (Type) null;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      assertEquals(0, simplePropertyPreFilter1.getMaxLevel());
      assertFalse(simplePropertyPreFilter1.equals((Object)simplePropertyPreFilter0));
      assertNotNull(simplePropertyPreFilter1);
      
      Class<?> class6 = simplePropertyPreFilter1.getClazz();
      assertEquals(0, simplePropertyPreFilter1.getMaxLevel());
      assertFalse(simplePropertyPreFilter1.equals((Object)simplePropertyPreFilter0));
      assertNotSame(simplePropertyPreFilter1, simplePropertyPreFilter0);
      assertNull(class6);
      
      typeArray0[6] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      assertFalse(class1.isAnnotation());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(parameterizedTypeImpl0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) securityException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      JSON.setDefaultTypeKey("");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(throwableArray0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<Double> class0 = Double.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Date> class1 = Date.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(946);
      assertEquals(946.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("946", atomicInteger0.toString());
      assertEquals(946, atomicInteger0.get());
      assertEquals((short)946, atomicInteger0.shortValue());
      assertEquals(946.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(946, atomicInteger0.intValue());
      assertEquals((byte) (-78), atomicInteger0.byteValue());
      assertEquals(946L, atomicInteger0.longValue());
      assertNotNull(atomicInteger0);
      
      Double double0 = TypeUtils.castToDouble(atomicInteger0);
      assertEquals(946.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("946", atomicInteger0.toString());
      assertEquals(946, atomicInteger0.get());
      assertEquals((short)946, atomicInteger0.shortValue());
      assertEquals(946.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(946, atomicInteger0.intValue());
      assertEquals((byte) (-78), atomicInteger0.byteValue());
      assertEquals(946L, atomicInteger0.longValue());
      assertEquals(946.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<IllegalArgumentException> class2 = IllegalArgumentException.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower("getClass");
      assertEquals(6106381025543047193L, long0);
      
      boolean boolean1 = new Boolean("getClass");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class3 = TypeUtils.loadClass("([C)D");
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.sql.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("J2oq#Z3(F");
      assertNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "J2oq#Z3(F", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<FieldInfo> class0 = FieldInfo.class;
      FieldInfo fieldInfo0 = TypeUtils.castToJavaBean((Object) "null", class0);
      assertNull(fieldInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.util.FieldInfo
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<FieldInfo> class0 = FieldInfo.class;
      FieldInfo fieldInfo0 = TypeUtils.castToJavaBean((Object) "null", class0);
      assertNull(fieldInfo0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;", "null");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      String string1 = ParserConfig.AUTOTYPE_ACCEPT;
      assertEquals("fastjson.parser.autoTypeAccept", string1);
      assertNotNull(string1);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Integer integer0 = TypeUtils.castToInt("null");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<BitSet> class2 = BitSet.class;
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class3);
      assertNull(annotation0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(stackTraceElementArray0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("E7$O#==9d/V");
      assertEquals("E7$O#==9d/V", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "bB/$)<Q_");
      assertEquals("E7$O#==9d/V", threadGroup0.getName());
      assertEquals("bB/$)<Q_", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotNull(threadGroup1);
      
      threadGroup1.interrupt();
      assertEquals("E7$O#==9d/V", threadGroup0.getName());
      assertEquals("bB/$)<Q_", threadGroup1.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      Class<?> class4 = TypeUtils.loadClass("getTime", classLoader0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNull(class4);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) genericArrayType0;
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(class3).when(genericArrayType1).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotNull(type0);
      
      typeArray0[1] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class2);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.BitSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class [F", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertNotNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class [F", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertNull(type0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          TypeUtils typeUtils0 = new TypeUtils();
          assertTrue(TypeUtils.compatibleWithJavaBean);
          assertTrue(TypeUtils.compatibleWithFieldName);
          assertNotNull(typeUtils0);
          
          BatchUpdateException batchUpdateException0 = new BatchUpdateException();
          assertNull(batchUpdateException0.getSQLState());
          assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
          assertEquals(0, batchUpdateException0.getErrorCode());
          assertNull(batchUpdateException0.getMessage());
          assertNotNull(batchUpdateException0);
          
          Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
          assertNull(batchUpdateException0.getSQLState());
          assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
          assertEquals(0, batchUpdateException0.getErrorCode());
          assertNull(batchUpdateException0.getMessage());
          assertNotNull(throwableArray0);
          
          Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
          assertEquals(0, hashtable0.size());
          assertTrue(hashtable0.isEmpty());
          assertNotNull(hashtable0);
          
          Map<String, String> map0 = ZoneId.SHORT_IDS;
          assertFalse(map0.isEmpty());
          assertEquals(28, map0.size());
          assertNotNull(map0);
          
          DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
          assertNotNull(dateFormatSymbols0);
          
          String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
          assertNotNull(stringArray0);
          
          String[] stringArray1 = Locale.getISOCountries();
          assertNotNull(stringArray1);
          
          Type[] typeArray0 = new Type[1];
          Class<Boolean> class0 = Boolean.TYPE;
          assertFalse(class0.isAnnotation());
          assertEquals("boolean", class0.toString());
          assertTrue(class0.isPrimitive());
          assertEquals(1041, class0.getModifiers());
          assertFalse(class0.isEnum());
          assertFalse(class0.isSynthetic());
          assertFalse(class0.isInterface());
          assertFalse(class0.isArray());
          assertNotNull(class0);
          
          Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
          assertFalse(class0.isAnnotation());
          assertEquals("boolean", class0.toString());
          assertTrue(class0.isPrimitive());
          assertEquals(1041, class0.getModifiers());
          assertFalse(class0.isEnum());
          assertFalse(class0.isSynthetic());
          assertFalse(class0.isInterface());
          assertFalse(class0.isArray());
          assertFalse(class1.isInterface());
          assertFalse(class1.isArray());
          assertEquals(1, class1.getModifiers());
          assertFalse(class1.isEnum());
          assertFalse(class1.isSynthetic());
          assertFalse(class1.isAnnotation());
          assertFalse(class1.isPrimitive());
          assertEquals("class java.lang.Object", class1.toString());
          assertNotNull(class1);
          
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
          assertFalse(class0.isAnnotation());
          assertEquals("boolean", class0.toString());
          assertTrue(class0.isPrimitive());
          assertEquals(1041, class0.getModifiers());
          assertFalse(class0.isEnum());
          assertFalse(class0.isSynthetic());
          assertFalse(class0.isInterface());
          assertFalse(class0.isArray());
          assertNotNull(parameterizedTypeImpl0);
          
          ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
          assertTrue(parserConfig0.isAsmEnable());
          assertFalse(parserConfig0.isAutoTypeSupport());
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(parserConfig0.fieldBased);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertNotNull(parserConfig0);
          
          parserConfig0.setAutoTypeSupport(false);
          assertTrue(parserConfig0.isAsmEnable());
          assertFalse(parserConfig0.isAutoTypeSupport());
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(parserConfig0.fieldBased);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // create asm serializer error, class class java.lang.Class
             //
             verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Yg+i");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "x[<Tiv=oSk");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("list_item_value");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"list_item_value\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<h+i");
      assertEquals(",`<h+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = "notify";
      Class<?> class0 = TypeUtils.getClassFromMapping("notify");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(",`<h+i", "Ljava.util.concurrent.ConcurrentSkipListMap", 7);
      assertEquals(7, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ,`<h+i", sQLTransactionRollbackException0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", sQLTransactionRollbackException0.getSQLState());
      assertEquals(",`<h+i", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      String string1 = sQLTransactionRollbackException0.getLocalizedMessage();
      assertEquals(7, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ,`<h+i", sQLTransactionRollbackException0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", sQLTransactionRollbackException0.getSQLState());
      assertEquals(",`<h+i", sQLTransactionRollbackException0.getMessage());
      assertFalse(string1.equals((Object)string0));
      assertEquals(",`<h+i", string1);
      assertNotNull(string1);
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLTransactionRollbackException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      parserConfig0.addDeny("can not cast to long, value : ");
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      parserConfig0.setAutoTypeSupport(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      TypeUtils.clearClassMapping();
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = TypeUtils.castToBoolean(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      assertNotNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(throwableArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(false);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[I", "fastjson.parser.deny", 8, batchUpdateException0);
      assertEquals(8, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("fastjson.parser.deny", sQLSyntaxErrorException0.getSQLState());
      assertEquals("[I", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: [I", sQLSyntaxErrorException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNotNull(interruptedException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.InterruptedException -> boolean
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("]#i)qru&SzUVQce");
      assertNull(class0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      boolean boolean0 = TypeUtils.isNumber("Tml}");
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("fastMatchToken");
      assertEquals("fastMatchToken", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = threadGroup0.getParent();
      assertEquals("fastMatchToken", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotNull(threadGroup1);
      
      ThreadGroup threadGroup2 = new ThreadGroup("]#i)qru&SzUVQce");
      assertEquals("]#i)qru&SzUVQce", threadGroup2.getName());
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertNotNull(threadGroup2);
      
      ThreadGroup threadGroup3 = new ThreadGroup(threadGroup2, "\"e_?iV");
      assertEquals("]#i)qru&SzUVQce", threadGroup2.getName());
      assertEquals("\"e_?iV", threadGroup3.getName());
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup3.equals((Object)threadGroup0));
      assertFalse(threadGroup3.equals((Object)threadGroup1));
      assertFalse(threadGroup3.equals((Object)threadGroup2));
      assertNotNull(threadGroup3);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(threadGroup2, thread0);
      assertEquals("]#i)qru&SzUVQce", threadGroup2.getName());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup3));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertNotNull(mockThread0);
      
      Thread thread1 = MockThread.currentThread();
      assertFalse(thread1.isInterrupted());
      assertFalse(thread1.isDaemon());
      assertSame(thread1, thread0);
      assertNotNull(thread1);
      
      int int0 = MockThread.NORM_PRIORITY;
      assertEquals(5, int0);
      
      MockThread mockThread1 = new MockThread();
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      threadGroup1.list();
      assertEquals("fastMatchToken", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup3));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup3));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup3);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup3);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(threadGroup1, threadGroup0);
      
      ThreadGroup threadGroup4 = new ThreadGroup("s}!N$Pm5f!2");
      assertEquals("s}!N$Pm5f!2", threadGroup4.getName());
      assertFalse(threadGroup4.equals((Object)threadGroup1));
      assertFalse(threadGroup4.equals((Object)threadGroup0));
      assertFalse(threadGroup4.equals((Object)threadGroup3));
      assertFalse(threadGroup4.equals((Object)threadGroup2));
      assertNotNull(threadGroup4);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setDefaultAssertionStatus(false);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class1 = TypeUtils.getClassFromMapping("fastMatchToken");
      assertNull(class1);
      
      Byte byte0 = TypeUtils.castToByte("");
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "syntax error : ");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      MockDate mockDate0 = new MockDate(20, (-729), 20);
      assertEquals("Wed Apr 20 00:00:00 GMT 1859", mockDate0.toString());
      assertNotNull(mockDate0);
      
      java.util.Date date0 = TypeUtils.castToDate(mockDate0);
      assertEquals("Wed Apr 20 00:00:00 GMT 1859", mockDate0.toString());
      assertEquals("Wed Apr 20 00:00:00 GMT 1859", date0.toString());
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotNull(date0);
      
      Class<NumberFormat> class0 = NumberFormat.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, treeMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "[int";
      Class<?> class0 = TypeUtils.loadClass("[int");
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("class [I", class0.toString());
      assertFalse(class0.isPrimitive());
      assertTrue(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Yg+i");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "x[<Tiv=oSk");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("x[<Tiv=oSk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : x[<Tiv=oSk
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(throwableArray0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      InternalError internalError0 = new InternalError();
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertNull(internalError0.getMessage());
      assertNotNull(internalError0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("parseLong error, field : ");
      assertNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
      
      Constructor<MockMinguoDate>[] constructorArray0 = (Constructor<MockMinguoDate>[]) Array.newInstance(Constructor.class, 2);
      constructorArray0[0] = (Constructor<MockMinguoDate>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(throwableArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      Type[] typeArray0 = new Type[4];
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      NoSuchFieldException noSuchFieldException0 = TypeUtils.cast((Object) arrayList0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNull(noSuchFieldException0);
      
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.deny");
      assertNull(class1);
      
      Class<Date> class2 = Date.class;
      String[] stringArray2 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class2);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.lang.Object", class3.toString());
      assertNotNull(class3);
      
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, classLoader0);
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class $java.awt.RenderingHints$Key$$EnhancerByMockitoWithCGLIB$$8d410c06, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.creation.cglib.MethodInterceptorFilter, fieldName : 0, write javaBean error, fastjson version 1.2.46, class org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler, fieldName : handler, create asm serializer error, class class org.evosuite.shaded.org.mockito.internal.creation.settings.CreationSettings
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(throwableArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      Class<Double> class0 = Double.class;
      LocalTime localTime0 = MockLocalTime.now();
      assertNotNull(localTime0);
      
      Time time0 = Time.valueOf(localTime0);
      assertEquals("20:21:21", time0.toString());
      assertNotNull(time0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) time0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : 20:21:21
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "syntax error : ");
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(false);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      ArrayList<Method> arrayList0 = new ArrayList<Method>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("fastjson.parser.autoTypeSupport", "kotlin.reflect.jvm.internal.KClassImpl", 25);
      assertEquals(25, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: fastjson.parser.autoTypeSupport", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("kotlin.reflect.jvm.internal.KClassImpl", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("fastjson.parser.autoTypeSupport", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Lorg.springframework.util.LinkedMultiValueMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(throwableArray0);
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = TimeZone.getAvailableIDs();
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-81);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)22, (byte) (-81)}, byteArray0);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      parserConfig0.addDeny("toS");
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      assertNotNull(jSONPDeserializer0);
      
      TypeUtils.clearClassMapping();
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean1 = TypeUtils.castToBoolean(integer0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) integer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(",`<Yg+i");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, "x[<Tiv=oSk");
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("Ljava.lang.AutoCloseable", "toLanguageTag");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertEquals(",`<Yg+i", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(stackTraceElementArray0);
      
      Class<Rectangle> class0 = Rectangle.class;
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(linkedHashMap1);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap1, true);
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertNotNull(imageCapabilities0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(stringArray0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      Type[] typeArray0 = new Type[1];
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      String string0 = parameterizedTypeImpl1.getTypeName();
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(string0);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.fieldBased);
      assertNotNull(parserConfig1);
      
      Class<?> class2 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
      assertNull(class2);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertTrue(boolean0);
  }
}
