/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:32:56 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSink_ESTest extends RealBufferedSink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.emit();
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1154));
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      pipe0.sinkClosed = true;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      pipe0.sourceClosed = false;
      realBufferedSink0.writeLongLe(10000000L);
      pipe_PipeSink0.close();
      realBufferedSink0.writeDecimalLong(10000000L);
      pipe0.sinkClosed = false;
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      pipe0.sourceClosed = true;
      HashingSource.sha1(realBufferedSink0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeAll(hashingSource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.flush();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readFully(realBufferedSink0.buffer, 0L);
      realBufferedSink0.writeDecimalLong((-2454L));
      realBufferedSink0.emit();
      realBufferedSink0.flush();
      realBufferedSink0.writeUtf8CodePoint((-331));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      buffer0.writeByte((-331));
      ByteString byteString0 = realBufferedSource0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)55;
      realBufferedSource0.read(byteArray0);
      byteString0.string(charset0);
      realBufferedSink0.write(byteString0);
      realBufferedSink0.toString();
      realBufferedSink0.writeUtf8("lNH*0f*W2Ep-#ysk}`");
      realBufferedSink0.buffer();
      realBufferedSink0.writeByte(70);
      realBufferedSink0.writeShortLe(56320);
      assertEquals(6L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("");
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      String string0 = "|cyx\\fSxZ[";
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(8L);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer0, 886L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=886
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null, 4005, 4005);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write((Source) buffer0, (-816L));
      pipe0.sourceClosed = false;
      realBufferedSink0.writeIntLe(0);
      pipe0.sinkClosed = false;
      realBufferedSink0.timeout();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        realBufferedSink0.write(byteArray0, 0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(1L);
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      gzipSink0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      realBufferedSink0.outputStream();
      try { 
        realBufferedSink0.write((Source) buffer0, 20L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(2400);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.write((Source) buffer0, (-816L));
      pipe0.sourceClosed = false;
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(0);
      pipe0.sinkClosed = false;
      realBufferedSink0.timeout();
      byte[] byteArray0 = new byte[0];
      BufferedSink bufferedSink1 = bufferedSink0.write(byteArray0);
      assertSame(realBufferedSink0, bufferedSink1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Buffer buffer1 = (Buffer)buffer0.write((Source) hashingSource0, 0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeShort(1789569706);
      realBufferedSink0.emit();
      assertEquals(2L, buffer1.size());
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      pipe0.sinkClosed = true;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      pipe0.sourceClosed = false;
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(10000000L);
      pipe_PipeSink0.close();
      realBufferedSink0.writeDecimalLong(10000000L);
      bufferedSink0.writeLongLe(10000000L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink1.outputStream();
      realBufferedSink0.writeInt((-3950));
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink1.buffer.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      gzipSink0.flush();
      gzipSink0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      realBufferedSink0.outputStream();
      realBufferedSink0.writeLongLe((-816L));
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer0, (-336L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=24 offset=0 byteCount=-336
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      boolean boolean0 = true;
      pipe0.sinkClosed = true;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      pipe0.sourceClosed = false;
      realBufferedSink0.writeLongLe(10000000L);
      pipe_PipeSink0.close();
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10000000L);
      String string0 = "source == null";
      // Undeclared exception!
      try { 
        bufferedSink0.writeUtf8("source == null", (-64), (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -64
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1841L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      pipe_PipeSink0.close();
      realBufferedSink1.writeDecimalLong(1841L);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      HashingSource.sha1(realBufferedSink0.buffer);
      realBufferedSink1.writeAll(hashingSource0);
      realBufferedSink0.emit();
      int int0 = 50;
      realBufferedSink1.writeShortLe(50);
      realBufferedSink0.writeDecimalLong((-1381));
      // Undeclared exception!
      try { 
        realBufferedSink0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3514L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.writeLongLe(3514L);
      pipe_PipeSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      buffer0.readByteString();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeAll(hashingSource0);
      realBufferedSink0.emit();
      realBufferedSink0.timeout();
      realBufferedSink0.writeLongLe(0L);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString(")/", (-92), 2013265920, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -92
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeInt(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeDecimalLong(858L);
      buffer0.inputStream();
      realBufferedSink0.writeByte(1952257861);
      realBufferedSink0.writeIntLe(1840700269);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString(")", charset0);
      realBufferedSink0.outputStream();
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(1840700269);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      Deflater deflater0 = gzipSink0.deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink(gzipSink0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("hex == null", 1, 1, charset0);
      // Undeclared exception!
      try { 
        realBufferedSink0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }
}
