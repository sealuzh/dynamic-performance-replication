/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:52:23 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "!62H+p;R`";
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("./@]x");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(".", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.not();
      assertEquals("[", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.and();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<gd");
      xPathLexer0.nextToken();
      xPathLexer0.and();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("]", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      Token token0 = xPathLexer0.plus();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("\"g");
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer("*2.YUU$BO!E%a");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer2.doubleColon();
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oK:RS6-DLKe+ztan");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals(":", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (15) (oK)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U+'");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*4d]");
      Token token0 = xPathLexer0.plus();
      assertEquals("*", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      String string0 = token1.toString();
      assertEquals("[ (20) (4)", string0);
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("d", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.minus();
      assertEquals("]", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      assertEquals("", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qh[&E^Al{u0");
      Token token0 = xPathLexer0.comma();
      String string0 = token0.toString();
      assertEquals("[ (32) (q)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('S');
      assertTrue(boolean0);
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.isIdentifierStartChar('_');
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.setXPath("K4");
      xPathLexer0.number();
      xPathLexer0.plus();
      xPathLexer1.hasMoreChars();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E1#");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("E", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#+.>:lT)NDvL#+]@d");
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pTM,85ag");
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer0.or();
      xPathLexer1.currentPosition();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CN4H`0>|L[5dMK|W'=@w");
      Token token0 = xPathLexer0.plus();
      assertEquals("C", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.minus();
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (6) (N)", string0);
      
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals("4", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("1v*F");
      Token token0 = xPathLexer2.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer2.nextToken();
      assertEquals("v", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CN4H`0>|O[5dMK|W'y@w");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.pipe();
      Token token2 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.rightBracket();
      token2.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      Token token3 = xPathLexer1.nextToken();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a<6)>e");
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      token0.toString();
      xPathLexer2.and();
      xPathLexer1.notEquals();
      xPathLexer2.rightParen();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("b1y:_lGcS");
      xPathLexer0.setXPath("b1y:_lGcS");
      xPathLexer2.whitespace();
      xPathLexer3.relationalOperator();
      xPathLexer3.nextToken();
      xPathLexer1.equals();
      xPathLexer3.div();
      xPathLexer3.nextToken();
      xPathLexer1.slashes();
      Token token1 = xPathLexer2.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.and();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer("VpW#q{xICBu0N");
      Token token0 = xPathLexer1.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("pW", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.and();
      xPathLexer0.hasMoreChars();
      xPathLexer0.getPreviousToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("VpW", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      xPathLexer0.number();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8t");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xU501K!ZWV 6<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("xU501K", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      char char0 = xPathLexer0.LA(5);
      assertEquals(' ', char0);
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("V", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer0.setXPath("@e)oK-/G\"phRAl]");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar(' ');
      xPathLexer0.minus();
      xPathLexer0.isIdentifierChar(' ');
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U+'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("U", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("'", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.at();
      assertEquals("[", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`mMv9M@5']F-_g");
      XPathLexer xPathLexer1 = new XPathLexer("UGpWj%\"QFbg^QDO@");
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("UGpWj%\"QFbg^QDO@");
      xPathLexer1.div();
      xPathLexer1.mod();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer1.relationalOperator();
      Token token2 = xPathLexer2.leftParen();
      assertEquals("U", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer1.getPreviousToken();
      assertEquals("GpWj", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("%\"", token6.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (15) ()", string0);
      
      Token token7 = xPathLexer0.not();
      assertEquals("`", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      int int0 = xPathLexer1.currentPosition();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?2.YUU$BOOE%*");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(".", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("?", token0.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("Y", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("U", token4.getTokenText());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.notEquals();
      token5.toString();
      token5.toString();
      String string0 = token5.toString();
      assertEquals("[ (22) (U$)", string0);
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("BO", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token5);
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("O", token7.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer0.leftParen();
      assertEquals("E", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer1.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer0.consume(1307);
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer1.consume(1307);
      Token token14 = xPathLexer1.star();
      assertEquals(20, token14.getTokenType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      XPathLexer xPathLexer1 = new XPathLexer("x75P");
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("75", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("V", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("P", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("p", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@e)oK-G\"phRAl");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("1S");
      Token token0 = xPathLexer2.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer2.nextToken();
      assertEquals("S", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*2YU$LO!Ea");
      xPathLexer0.star();
      Token token0 = xPathLexer0.colon();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.mod();
      xPathLexer1.consume();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*2.YUB!E%a");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setXPath("pTM,85ag");
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      token0.toString();
      Token token2 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?2.YUU$BOOE%*");
      xPathLexer0.slashes();
      xPathLexer0.not();
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.at();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.isIdentifierStartChar('$');
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-395));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SvWamz^");
      xPathLexer0.minus();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      int int0 = xPathLexer0.endPosition();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%8L'(6Q-:z0R=kMk4f");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      assertEquals("%", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("?Z:$=!");
      xPathLexer2.relationalOperator();
      xPathLexer1.getPreviousToken();
      Token token2 = xPathLexer3.nextToken();
      assertEquals("?Z:$=!", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('8');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Uk9N4,jV9N(5?IhK");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("Uk9N4,jV9N(5?IhK");
      xPathLexer0.rightBracket();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.setXPath("9wg/?vGe0");
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("+W8xI<E?d[4mBh#O,");
      xPathLexer0.or();
      xPathLexer1.nextToken();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.setXPath("{ja5xb2f7|qZ&:[g2V");
      Token token4 = xPathLexer0.nextToken();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("{j", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token4);
      assertEquals("{ja5xb2f7|qZ&:[g2V", token4.getTokenText());
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v.>zSC}|A=zj7?D9{:");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("v", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(".>", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("v.>zSC}|A=zj7?D9{:");
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("v", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer1.hasMoreChars();
      xPathLexer0.div();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer2.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("zS", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(".", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("C", token7.getTokenText());
      
      Token token8 = xPathLexer2.identifier();
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J\"xI");
      Token token0 = xPathLexer0.star();
      assertEquals("J", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (18) (\")", string0);
      
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.comma();
      assertEquals("x", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("I", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.or();
      xPathLexer1.mod();
      xPathLexer0.operatorName();
      int int0 = xPathLexer0.endPosition();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h$O#efPx:n$");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierChar('V');
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-611));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'X\"CM@U");
      Token token0 = xPathLexer0.equals();
      assertEquals("'", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("X", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jrgo<:*4Q[@j~WR");
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer("jrgo<:*4Q[@j~WR");
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.colon();
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-714));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "0T'&L7Ul<\"S";
      XPathLexer xPathLexer0 = new XPathLexer("0T'&L7Ul<\"S");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer1.at();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".0Ts&L7wUl0<\"S*");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer1.at();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CN4H`0>|L[5dMK|W'=@w");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer("CN4H`0>|L[5dMK|W'=@w");
      Token token1 = xPathLexer1.colon();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.pipe();
      Token token2 = xPathLexer1.nextToken();
      token2.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer(",`UHu");
      assertEquals(",`UHu", xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.div();
      xPathLexer0.setXPath("VPs'*wqUqY,5[");
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.star();
      assertEquals("'", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("*", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?2.YUU$BOOE%*");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token2 = xPathLexer0.at();
      assertEquals(".", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (2)", string0);
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      token4.toString();
      String string1 = token4.toString();
      assertEquals("[ (26) (U)", string1);
      
      xPathLexer0.setPreviousToken(token4);
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("U$", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals("B", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("O", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("O", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer0.colon();
      assertEquals("%", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("HWI$wJ");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("H", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("W", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("wJ", token4.getTokenText());
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`mMv9M@5']F-_g");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "=6";
      XPathLexer xPathLexer0 = new XPathLexer("=6");
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#_.>:vT)NDvL#+]@d");
      XPathLexer xPathLexer1 = new XPathLexer("#_.>:vT)NDvL#+]@d");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("#_.>:vT)NDvL#+]@d", token0.getTokenText());
      
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals(14, token3.getTokenType());
      assertEquals("_.", token3.getTokenText());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*2.YUB!E%a");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.number();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(&");
      xPathLexer0.colon();
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*2.YUB!E%a");
      Token token0 = xPathLexer0.not();
      token0.toString();
      Token token1 = xPathLexer0.plus();
      token1.toString();
      token0.toString();
      xPathLexer0.setXPath("].=gDi0>@ ~S43Ht:");
      token1.toString();
      token0.toString();
      token1.toString();
      Token token2 = xPathLexer0.leftParen();
      token2.toString();
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.dollar();
      Token token4 = xPathLexer0.comma();
      xPathLexer0.minus();
      token2.toString();
      xPathLexer0.setPreviousToken(token0);
      token4.toString();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token5 = xPathLexer0.mod();
      assertNull(token5);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!62H+p;R`");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (!)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("!62H+p;R`");
      Token token1 = xPathLexer1.colon();
      assertEquals("!", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (23) (!)");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("ZQ]#S7S8");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer("[ (23) (!)");
      xPathLexer4.dollar();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token2 = xPathLexer8.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer8.nextToken();
      xPathLexer4.nextToken();
      Token token3 = xPathLexer5.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("ZQ", token3.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token4 = xPathLexer9.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer("ZQ]#S7S8");
      xPathLexer10.mod();
      XPathLexer xPathLexer11 = new XPathLexer("ZQ]#S7S8");
      XPathLexer xPathLexer12 = new XPathLexer();
      xPathLexer12.consume();
      XPathLexer xPathLexer13 = new XPathLexer();
      Token token5 = xPathLexer2.minus();
      assertEquals("[", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer10.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("Z", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U\"p5x");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.div();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer1.consume();
      xPathLexer1.at();
      xPathLexer1.getPreviousToken();
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      xPathLexer1.consume(46);
      assertEquals("VpW#q{xICBu0N", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/(4Rc$x.WuF.fTX");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      xPathLexer0.setXPath("/(4Rc$x.WuF.fTX");
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("/", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oK:RS6-DLKe+ztan");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":?a6");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.comma();
      token1.toString();
      xPathLexer0.star();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      token0.toString();
      Token token3 = xPathLexer0.leftParen();
      token2.toString();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer(":?a6");
      Token token4 = xPathLexer1.number();
      token4.toString();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#_.>:vT)NDvL#+]@d");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",>/AUW*#E}%QK8Hr\"i");
      Token token0 = xPathLexer0.notEquals();
      String string0 = token0.toString();
      assertEquals("[ (22) (,>)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      String string1 = token2.toString();
      assertEquals("[ (15) (UW)", string1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`mMv9?@5']F-_g");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      xPathLexer0.hasMoreChars();
      xPathLexer0.comma();
      xPathLexer0.getPreviousToken();
      xPathLexer0.setXPath("^7yq.7BY-gV");
      token1.toString();
      token1.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.slashes();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/(4c$x.cuF.fTX");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.at();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("(", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar('t');
      xPathLexer0.equals();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("cu", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals(14, token3.getTokenType());
      assertEquals("x.", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.equals();
      assertEquals("F", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("f", token7.getTokenText());
      
      xPathLexer1.or();
      Token token8 = xPathLexer0.pipe();
      assertEquals("T", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftParen();
      assertEquals(1, token10.getTokenType());
      
      xPathLexer1.or();
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertNull(token11);
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.hasMoreChars();
      xPathLexer1.getPreviousToken();
      Token token13 = xPathLexer1.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer0.colon();
      assertEquals(18, token14.getTokenType());
      assertEquals("X", token14.getTokenText());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9D2<tIw.i");
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("@e)oK-/G\"phRAl]");
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.rightParen();
      token1.toString();
      xPathLexer0.operatorName();
      String string0 = token1.toString();
      assertEquals("[ (2) (@)", string0);
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.setXPath("N)d!]z0H(9fC<|M");
      xPathLexer0.setPreviousToken((Token) null);
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("N", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("d!]z0H(9fC<|M", token6.getTokenText());
      
      xPathLexer0.setXPath("N)d!]z0H(9fC<|M");
      String string1 = token5.toString();
      assertEquals("[ (15) ()", string1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".0Ts&L7wUl0<\"S*");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer1.getPreviousToken();
      xPathLexer0.comma();
      xPathLexer1.mod();
      token0.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`mMv9M@5']F-_g");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      Token token1 = xPathLexer0.colon();
      String string0 = token0.toString();
      assertEquals("[ (5) (`)", string0);
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      xPathLexer0.setXPath("^7;q.7.Y-gL");
      Token token3 = xPathLexer0.leftParen();
      assertEquals("^", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("7", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      token2.toString();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals(";", token5.getTokenText());
      
      String string1 = token1.toString();
      assertEquals("[ (18) (m)", string1);
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.number();
      Token token7 = xPathLexer0.number();
      String string2 = token7.toString();
      assertEquals("[ (31) (.)", string2);
      
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U.9c4jV9N(5?IhK");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      XPathLexer xPathLexer1 = new XPathLexer("U.9c4jV9N(5?IhK");
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("U.9c4jV9N(5?IhK");
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer2.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer1.leftParen();
      Token token2 = xPathLexer2.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      token1.toString();
      token1.toString();
      Token token3 = xPathLexer4.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (1) (U)", string0);
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("[ (1) (U)");
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token5 = xPathLexer2.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(".9", token6.getTokenText());
      assertEquals(31, token6.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer6.or();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer8.star();
      XPathLexer xPathLexer12 = new XPathLexer();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer8.star();
      Token token9 = xPathLexer8.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer11.star();
      assertEquals(20, token10.getTokenType());
  }
}
