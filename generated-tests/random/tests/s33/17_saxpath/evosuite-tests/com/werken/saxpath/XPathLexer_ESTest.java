/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:38:08 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JN7<<2");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("JN7", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")Mv28=2`I");
      xPathLexer0.minus();
      xPathLexer0.at();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("-YW'k>Bza");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$Mh!,02FA_.x");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m0mt%Bwxo4E7");
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("<o");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".e|ETI)E{?|/nR>V");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/<Us0(<");
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%qG((Y");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("%", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&YgKi<k,5Lg");
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#N1_\"%PW&|sX-mW86sG");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%wE1?[uvF;@^R");
      Token token0 = xPathLexer0.not();
      assertEquals("%", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('w', char0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")Mv28=2`I");
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?CvP&`UFN``.-qZay");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6-");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('+');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('1');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Zo>M@]pgr");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&YgKi<k,5Lg");
      boolean boolean0 = xPathLexer0.isIdentifierChar('&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y}dc+3C`");
      boolean boolean0 = xPathLexer0.isIdentifierChar('2');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bO W8DVb'XY D<>Pu");
      xPathLexer0.consume(0);
      assertEquals("bO W8DVb'XY D<>Pu", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%wE1?[uvF;@^R");
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      char char0 = xPathLexer0.LA(1212);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".RpYc|=2j?g");
      xPathLexer0.consume((-561));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" G|G+'OI[cO1.u_");
      xPathLexer0.consume((-417));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-939));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o'aOc.2ga97KRd");
      String string0 = xPathLexer0.getXPath();
      assertEquals("o'aOc.2ga97KRd", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6-");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("6-", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O/5.fT*k<yX");
      Token token0 = xPathLexer0.slashes();
      assertEquals("O/", token0.getTokenText());
      assertEquals(12, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o'aOc.2ga97KRd");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w");
      xPathLexer0.setXPath("i9Y vD G80J:ga");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("9", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p1ofR");
      Token token0 = xPathLexer0.plus();
      assertEquals("p", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("1", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("ofR", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/<Us0(<");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("o qFPg_tr,[Z^VzeZ");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o'aOc.2ga97KRd");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o'aOc.2ga97KRd");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/dieI\"M59O8iV5bvm{b");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o'aOc.2ga97KRd");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("%MSd;KzCJ[dd:d\"0,w");
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_*Za~M+/j_mYT");
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bO W8DVb'XY D<>Pu");
      Token token0 = xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vP[JrzLzmbvKJaIGV");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%qG((Y");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("%", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("qG", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m0mt%Bwxo4E7");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(18, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("0mt", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_=^q7bz-1C)H");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("_", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = new Token(8, "#-=\"@", 909, 0);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JN7<<2");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals("N7", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dk?.72v{Zwp+$z'`");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("k", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("?", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(31, token3.getTokenType());
      assertEquals(".72", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o'aOc.2ga97KRd");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("o'", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("a", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("O", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("c", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(31, token4.getTokenType());
      assertEquals(".2", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6957Z*+R7c?hb/");
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      assertEquals("6", token0.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("*", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("+", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("R", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals("7", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("c?", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("hb", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals("/", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|Dt${E9hS1(8eC");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("|", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.setXPath("{*\"$r@N A*u");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("{*\"$r@N A*u", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("%MSd;KzCJ[dd:d\"0,w");
      Token token0 = xPathLexer0.not();
      assertEquals("%", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.pipe();
      assertEquals("S", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(";", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("K", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("zCJ", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ykku$ W");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("ykku", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%wE1?[uvF;@^R");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("wE1", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?U'#>'EKYjs1%");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("u", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("%sGGA>/Y-@J");
      Token token0 = xPathLexer0.plus();
      assertEquals("%", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("sGGA", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("w", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("rken.saxpath.Token", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("o qFPg_tr,[Z^VzeZ");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("o", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("qFPg_tr", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@pXg");
      Token token0 = xPathLexer0.dots();
      assertEquals("@", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("pXg", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Vc6a&orh,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Vc6a", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("orh,", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zUy)l~U$FZNd:J");
      Token token0 = xPathLexer0.star();
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Uy", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("l", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R,UKJ;^2O w3k}-(Wl}");
      xPathLexer0.not();
      Token token0 = xPathLexer0.dollar();
      assertEquals(",", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.consume(3);
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("w", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("3", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("k", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(":jl@?tRH%dqhj~q3");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("jl", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("IC7ukQ-Lj");
      xPathLexer0.setXPath("?i");
      Token token0 = xPathLexer0.star();
      assertEquals("?", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("i", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6957Z*+R7c?hb/");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("6957", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("R", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("7", token5.getTokenText());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("c?", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("hb/", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zeM2b\"ifYE]cgJ5!");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
      
      xPathLexer0.consume(1);
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("ifYE", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("]", token5.getTokenText());
      
      xPathLexer0.consume((-1));
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("]", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("gJ5!", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p1ofR");
      Token token0 = xPathLexer0.plus();
      assertEquals("p", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("1", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("fR", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w$,cMeu#");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("M", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("eu", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Y}dc+3C`");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Y}", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("dc", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("a*iRJn=,g.S,aAo");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("a", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?CvP&`UFN``.-qZay");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("?C", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("vP", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("`UFN``.-qZay", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[#5KV|8_u");
      Token token0 = xPathLexer0.dots();
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.dots();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("K", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("V", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("8", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("_u", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B^'5_,.F");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("B", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("^'5_,.F", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(3, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Zo>M@]pgr");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Zo", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("<XL&-#9uoWN");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("<", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("XL", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("-YW'k>Bza");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("Y", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("W", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/<Us0(<");
      Token token0 = xPathLexer0.pipe();
      assertEquals("/", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Us0", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|gCTj'uAzW5.gc");
      Token token0 = xPathLexer0.colon();
      assertEquals("|", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("gC", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Tj", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[gS?$");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("[g", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("S", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("L(|R");
      Token token0 = xPathLexer0.dots();
      assertEquals("L", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("(", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("R", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pb5QlLEMQHO d");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("pb", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("QlLEMQHO", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-nP@-hM`qnl3'");
      Token token0 = xPathLexer0.not();
      assertEquals("-", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("n", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z`HtO$T~C$");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("`", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("H", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("t", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rHCuh6}1nNKB(");
      Token token0 = xPathLexer0.at();
      assertEquals("r", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("C", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("h", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("6", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("n", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("NKB", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_*Za~M+/j_mYT");
      Token token0 = xPathLexer0.pipe();
      assertEquals("_", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("Z", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("a", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("~", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("M", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L5M# /L//RP+)d=(P");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("L5M", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&YgKi<k,5Lg");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("Y", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Ki", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~I/wq2");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("~", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("I", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hA|53d%.H.ab");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.dollar();
      assertEquals("|", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("d", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("%.", token4.getTokenText());
      assertEquals(14, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("H.ab", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("%sGGA>/Y-@J");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("GGA", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OCwDObUOAU. V_&{");
      Token token0 = xPathLexer0.dots();
      assertEquals("O", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("CwDObUOAU.", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^B#4Ea1wK");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("B", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("kx^\"1u^40J8},NA@D");
      Token token0 = xPathLexer0.star();
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("x", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertEquals("\"1u", token2.getTokenText());
      assertEquals(27, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("40", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("J", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(",", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("A", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cq{f|@2Zw1ek");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("q", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.consume(3);
      Token token2 = xPathLexer0.nextToken();
      assertEquals(16, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dk?.72v{Zwp+$z'`");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      assertEquals("?.72v{Zwp+$z'`", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6-");
      xPathLexer0.setXPath(">G\"bLFET5zxjC{");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("G", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("{&=ctwkFHl");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("{", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(21, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<m$o+ry%=U'fp(E");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";O#*}@");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";O#*}@", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",:BN4bL@YY1r13u5~t");
      Token token0 = xPathLexer0.colon();
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jm%48");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("jm", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("%", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("8", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("JN7<<2");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("JN", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("7", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">6*BJmumX");
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals(">", token0.getTokenText());
      assertNotNull(token0);
      assertEquals(9, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&YgKi<k,5Lg");
      Token token0 = xPathLexer0.at();
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("YgKi", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("5", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m0mt%Bwxo4E7");
      Token token0 = xPathLexer0.colon();
      assertEquals("m", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("mt", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("w", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("x", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("o", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("4", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R,UKJ;^2O w3k}-(Wl}");
      xPathLexer0.not();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("UKJ", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(";", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
      
      xPathLexer0.consume(2);
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(" ", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("w", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("3", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")Mv28=2`I");
      Token token0 = xPathLexer0.minus();
      assertEquals(")", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("M", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("v2", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("8", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("=", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[]xF1.EuU-G}/3bdOI");
      Token token0 = xPathLexer0.equals();
      assertEquals("[", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(4, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("x", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("F", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("1.", token4.getTokenText());
      assertEquals(31, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("E", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("uU", token6.getTokenText());
      
      Token token7 = xPathLexer0.minus();
      assertEquals("-", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("G", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals("}", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals("/", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals("3", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m0mt%Bwxo4E7");
      Token token0 = xPathLexer0.colon();
      assertEquals("m", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("m", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("%", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("B", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals("w", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("xo4E7", token7.getTokenText());
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N=/DrYovC^Su^V}e");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".3n");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".3", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-t1bMKvK'h\"a/P_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("-", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("t1bMKvK", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("kx^\"1u^40J8},NA@D");
      xPathLexer0.star();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("x", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertEquals("\"1u", token1.getTokenText());
      assertEquals(27, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("40", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("}", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(32, token5.getTokenType());
      assertEquals(",", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("NA", token6.getTokenText());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("@", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("D", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{(5+:S3");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";O#*}@");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals(";O", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("#", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(20, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".e|ETI)E{?|/nR>V");
      Token token0 = xPathLexer0.dollar();
      assertEquals(".", token0.getTokenText());
      
      xPathLexer0.dots();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("|E", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("I", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(")", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals("E{?|/nR>V", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nli#&[");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("n", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("i#", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("&[", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#N1_\"%PW&|sX-mW86sG");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("N1", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%PW&|sX-mW86sG", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$Mh!,02FA_.x");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("$", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Mh", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^B#4Ea1wK");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("B", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("#4Ea1wK", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#N1_\"%PW&|sX-mW86sG");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("#", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("N1", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("_", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qP!RN");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("q", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("!", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z**{<");
      xPathLexer0.consume((-946));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-nP@-hM`qnl3'");
      Token token0 = xPathLexer0.not();
      assertEquals("-", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("nP", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("@", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("-", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals("h", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("M", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("n", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals("l", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals("3", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B^'5_,.F");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("B", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("^'", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.star();
      assertEquals("_", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(",", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(".", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".e|ETI)E{?|/nR>V");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      assertEquals(".e", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }
}
