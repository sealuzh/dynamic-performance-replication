/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:30:52 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.event.ContainerListener;
import java.awt.event.InputMethodListener;
import java.awt.image.ImageObserver;
import java.beans.EventSetDescriptor;
import java.beans.VetoableChangeListener;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.classifiers.functions.SMO;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.CheckGOE;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.NormalizableDistance;
import weka.core.SelectedTag;
import weka.core.TestInstances;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.StripChart;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Logger logger0 = flowByExpression0.m_log;
      filter0.setLog((Logger) null);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("ERROR (See log for details.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ERROR (See log for details. not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(scatterPlotMatrix0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.removeInstanceListener(substringReplacer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      sorter0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      attributeSummarizer0.setOffscreenWidth("$Y~rJ.C*");
      filter0.removeTestSetListener(attributeSummarizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSummarizer attributeSummarizer1 = new AttributeSummarizer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      scatterPlotMatrix0.getPerspectiveIcon();
      filter0.stop();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      DataSetEvent dataSetEvent0 = new DataSetEvent(stratifiedRemoveFolds0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.isOutputFormatDefined());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      Locale locale0 = Locale.CHINESE;
      filter0.removeTestSetListener((TestSetListener) null);
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      filter0.connectionNotification("instance", "instance");
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addTrainingSetListener(scatterPlotMatrix0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(scatterPlotMatrix0, instances0, (-1), (-1), (-1), 2);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.addInstanceListener(substringReplacer0);
      filter0.getInputVerifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanVisual beanVisual0 = filter0.getVisual();
      beanVisual0.getMinimumSize();
      filter0.removeDataSourceListener((DataSourceListener) null);
      filter0.connectionAllowed("weka/gui/beans/icons/");
      filter0.getVisual();
      filter0.enumerateRequests();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      Filter filter1 = new Filter();
      assertEquals("AllFilter", filter1.getCustomName());
      
      filter1.setCustomName("");
      filter1.addTrainingSetListener(sorter0);
      filter0.addTestSetListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("qRCq8IY>4&3?XxNW");
      filter0.setCustomName("qRCq8IY>4&3?XxNW");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance((Instances) null);
      filter0.connectionNotification("qRCq8IY>4&3?XxNW", euclideanDistance0);
      GraphViewer graphViewer0 = new GraphViewer();
      InstanceEvent instanceEvent0 = new InstanceEvent(graphViewer0, (Instance) null, 2);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("qRCq8IY>4&3?XxNW", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      filter0.getMouseMotionListeners();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getAlignmentX();
      FileSystemHandling.shouldAllThrowIOExceptions();
      trainTestSplitMaker0.removeTrainingSetListener(trainTestSplitMaker0);
      trainTestSplitMaker0.addVetoableChangeListener((VetoableChangeListener) null);
      trainTestSplitMaker0.getComponentPopupMenu();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Filter filter0 = new Filter();
      filter0.setLog(logPanel0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Classifier classifier0 = new Classifier();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      GraphViewer graphViewer0 = new GraphViewer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.addDataSourceListener(attributeSummarizer0);
      SMO sMO0 = new SMO();
      SelectedTag selectedTag0 = new SelectedTag(2, sMO0.TAGS_FILTER);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Add add0 = new Add();
      add0.setAttributeType(selectedTag0);
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("Stop", "Stop");
      boolean boolean0 = filter0.eventGeneratable("Stop");
      assertFalse(boolean0);
      
      filter0.getX();
      Saver saver0 = new Saver();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      BeanVisual beanVisual0 = filter0.getVisual();
      TestSetEvent testSetEvent0 = new TestSetEvent(beanVisual0, (Instances) null, 2, 969);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      filter0.performRequest("Stop");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setWrappedAlgorithm(attributeSelection0);
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addNotify();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter1.getRevision();
      weka.filters.Filter.makeCopies(filter1, 3180);
      filter0.setFilter(filter1);
      boolean boolean0 = filter0.connectionAllowed("8034");
      assertEquals("MultiFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      attributeSummarizer0.setOffscreenWidth("$Y~rJ.C*");
      filter0.removeTestSetListener(attributeSummarizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      filter0.addDataSourceListener(attributeSummarizer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      scatterPlotMatrix0.getPerspectiveIcon();
      filter0.stop();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      DataSetEvent dataSetEvent0 = new DataSetEvent(stratifiedRemoveFolds0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      Random.setNextRandom((-774));
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.isFirstBatchDone());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      ImageSaver imageSaver0 = new ImageSaver();
      String string0 = BorderLayout.SOUTH;
      filter0.connectionNotification("jCm", imageSaver0);
      filter0.eventGeneratable("jCm");
      StripChart stripChart0 = null;
      try {
        stripChart0 = new StripChart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.StripChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      filter0.createVolatileImage(8, 8, imageCapabilities0);
      classifier0.imageUpdate((Image) null, 8, 8, 8, (-2657), 8);
      filter0.unregisterKeyboardAction((KeyStroke) null);
      filter0.setVerifyInputWhenFocusTarget(false);
      classifier0.checkImage((Image) null, (ImageObserver) filter0);
      filter0.addInstanceListener(classifier0);
      filter0.enumerateRequests();
      filter0.setCustomName("model");
      ImageSaver imageSaver0 = new ImageSaver();
      BeanVisual beanVisual0 = imageSaver0.getVisual();
      filter0.setVisual(beanVisual0);
      Sorter sorter0 = new Sorter();
      Logger logger0 = sorter0.m_log;
      filter0.setLog((Logger) null);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(substringReplacer0, (Instances) null, (-2657), 32, (-2657), (-116));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("ImageSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      assertEquals("Evaluate the performance of batch trained clusterers.", clustererPerformanceEvaluator0.globalInfo());
      assertFalse(clustererPerformanceEvaluator0.isFocusTraversalPolicyProvider());
      assertEquals("ClustererPerformanceEvaluator", clustererPerformanceEvaluator0.getCustomName());
      assertFalse(clustererPerformanceEvaluator0.isFocusTraversalPolicySet());
      assertFalse(clustererPerformanceEvaluator0.getIgnoreRepaint());
      assertTrue(clustererPerformanceEvaluator0.getFocusTraversalKeysEnabled());
      assertFalse(clustererPerformanceEvaluator0.isBusy());
      assertFalse(clustererPerformanceEvaluator0.isFocusCycleRoot());
      assertNotNull(clustererPerformanceEvaluator0);
      
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(clustererPerformanceEvaluator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.ClustererPerformanceEvaluator : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertNotNull(filter0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      filter0.removeTestSetListener((TestSetListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      filter0.connectionNotification("instance", "instance");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertNotNull(scatterPlotMatrix0);
      
      filter0.addTestSetListener(scatterPlotMatrix0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      boolean boolean0 = filter0.eventGeneratable("qRCq8IY>4&3?XxNW");
      assertFalse(boolean0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      
      filter0.setCustomName("qRCq8IY>4&3?XxNW");
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("qRCq8IY>4&3?XxNW", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertNotNull(flowByExpression0);
      
      EuclideanDistance euclideanDistance0 = new EuclideanDistance((Instances) null);
      assertFalse(euclideanDistance0.rangesSet());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", euclideanDistance0.invertSelectionTipText());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", euclideanDistance0.dontNormalizeTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", euclideanDistance0.attributeIndicesTipText());
      assertEquals("", euclideanDistance0.toString());
      assertFalse(euclideanDistance0.getDontNormalize());
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(0, NormalizableDistance.R_MIN);
      assertNotNull(euclideanDistance0);
      
      filter0.connectionNotification("qRCq8IY>4&3?XxNW", euclideanDistance0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("qRCq8IY>4&3?XxNW", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(euclideanDistance0.rangesSet());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", euclideanDistance0.invertSelectionTipText());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", euclideanDistance0.dontNormalizeTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", euclideanDistance0.attributeIndicesTipText());
      assertEquals("", euclideanDistance0.toString());
      assertFalse(euclideanDistance0.getDontNormalize());
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(0, NormalizableDistance.R_MIN);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertNotNull(graphViewer0);
      
      InstanceEvent instanceEvent0 = new InstanceEvent(graphViewer0, (Instance) null, 2);
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertEquals(2, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      filter0.useDefaultVisual();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("qRCq8IY>4&3?XxNW", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      
      boolean boolean1 = filter0.connectionAllowed("qRCq8IY>4&3?XxNW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("qRCq8IY>4&3?XxNW", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.isBusy());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertNotNull(imageSaver0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertNotNull(attributeSummarizer0);
      
      TextViewer textViewer0 = new TextViewer();
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isBusy());
      assertNotNull(textViewer0);
      
      filter0.addTrainingSetListener(textViewer0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isBusy());
      
      AttributeSummarizer attributeSummarizer1 = new AttributeSummarizer();
      assertFalse(attributeSummarizer1.equals((Object)attributeSummarizer0));
      assertTrue(attributeSummarizer1.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer1.getOffscreenXAxis());
      assertEquals("500", attributeSummarizer1.getOffscreenWidth());
      assertFalse(attributeSummarizer1.getIgnoreRepaint());
      assertFalse(attributeSummarizer1.isBusy());
      assertEquals("AttributeSummarizer", attributeSummarizer1.getCustomName());
      assertEquals((-1), attributeSummarizer1.getColoringIndex());
      assertEquals(4, attributeSummarizer1.getGridWidth());
      assertEquals("400", attributeSummarizer1.getOffscreenHeight());
      assertEquals("", attributeSummarizer1.getOffscreenYAxis());
      assertEquals("Weka Chart Renderer", attributeSummarizer1.getOffscreenRendererName());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer1.getPerspectiveTipText());
      assertEquals(100, attributeSummarizer1.getMaxPlots());
      assertFalse(attributeSummarizer1.isFocusTraversalPolicySet());
      assertEquals("Attribute summary", attributeSummarizer1.getPerspectiveTitle());
      assertFalse(attributeSummarizer1.isFocusTraversalPolicyProvider());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer1.globalInfo());
      assertFalse(attributeSummarizer1.isFocusCycleRoot());
      assertEquals("", attributeSummarizer1.getOffscreenAdditionalOpts());
      assertTrue(attributeSummarizer1.acceptsInstances());
      assertNotNull(attributeSummarizer1);
      
      BeanVisual beanVisual0 = attributeSummarizer0.m_visual;
      assertEquals("weka/gui/beans/icons/AttributeSummarizer_animated.gif", beanVisual0.getAnimatedIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("AttributeSummarizer", beanVisual0.getText());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/AttributeSummarizer.gif", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertNotNull(beanVisual0);
      
      filter0.setVisual(beanVisual0);
      assertFalse(attributeSummarizer0.equals((Object)attributeSummarizer1));
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("AttributeSummarizer", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals("weka/gui/beans/icons/AttributeSummarizer_animated.gif", beanVisual0.getAnimatedIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertEquals("AttributeSummarizer", beanVisual0.getText());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/AttributeSummarizer.gif", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertNotSame(attributeSummarizer0, attributeSummarizer1);
      
      attributeSummarizer1.removeNotify();
      assertFalse(attributeSummarizer1.equals((Object)attributeSummarizer0));
      assertTrue(attributeSummarizer1.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer1.getOffscreenXAxis());
      assertEquals("500", attributeSummarizer1.getOffscreenWidth());
      assertFalse(attributeSummarizer1.getIgnoreRepaint());
      assertFalse(attributeSummarizer1.isBusy());
      assertEquals("AttributeSummarizer", attributeSummarizer1.getCustomName());
      assertEquals((-1), attributeSummarizer1.getColoringIndex());
      assertEquals(4, attributeSummarizer1.getGridWidth());
      assertEquals("400", attributeSummarizer1.getOffscreenHeight());
      assertEquals("", attributeSummarizer1.getOffscreenYAxis());
      assertEquals("Weka Chart Renderer", attributeSummarizer1.getOffscreenRendererName());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer1.getPerspectiveTipText());
      assertEquals(100, attributeSummarizer1.getMaxPlots());
      assertFalse(attributeSummarizer1.isFocusTraversalPolicySet());
      assertEquals("Attribute summary", attributeSummarizer1.getPerspectiveTitle());
      assertFalse(attributeSummarizer1.isFocusTraversalPolicyProvider());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer1.globalInfo());
      assertFalse(attributeSummarizer1.isFocusCycleRoot());
      assertEquals("", attributeSummarizer1.getOffscreenAdditionalOpts());
      assertTrue(attributeSummarizer1.acceptsInstances());
      assertNotSame(attributeSummarizer1, attributeSummarizer0);
      
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("AttributeSummarizer", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.removeTrainingSetListener(attributeSummarizer0);
      assertFalse(attributeSummarizer0.equals((Object)attributeSummarizer1));
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("AttributeSummarizer", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertNotSame(attributeSummarizer0, attributeSummarizer1);
      
      filter0.stop();
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("AttributeSummarizer", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.acceptDataSet((DataSetEvent) null);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("AttributeSummarizer", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      Character character0 = Character.valueOf('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 34);
      assertEquals(0, keyStroke0.getKeyCode());
      assertEquals(8354, keyStroke0.getModifiers());
      assertEquals('[', keyStroke0.getKeyChar());
      assertEquals(400, keyStroke0.getKeyEventType());
      assertFalse(keyStroke0.isOnKeyRelease());
      assertNotNull(keyStroke0);
      
      filter0.unregisterKeyboardAction((KeyStroke) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.isBusy());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertNotNull(imageSaver0);
      
      filter0.connectionNotification("jCj", imageSaver0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.isBusy());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertNotNull(graphViewer0);
      
      boolean boolean0 = filter0.eventGeneratable("jCj");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      SystemInUtil.addInputLine("jCj");
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      assertEquals(".libsvm", libSVMLoader0.getFileExtension());
      assertEquals("Reads a source that is in libsvm format.\n\nFor more information about libsvm see:\n\nhttp://www.csie.ntu.edu.tw/~cjlin/libsvm/", libSVMLoader0.globalInfo());
      assertEquals("http://", libSVMLoader0.retrieveURL());
      assertEquals("libsvm data files", libSVMLoader0.getFileDescription());
      assertEquals("Use relative rather than absolute paths", libSVMLoader0.useRelativePathTipText());
      assertFalse(libSVMLoader0.getUseRelativePath());
      assertNotNull(libSVMLoader0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertNotNull(substringReplacer0);
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(enumeration0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertNotNull(trainingSetMaker0);
      
      filter0.addDataSourceListener(trainingSetMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertNotNull(attributeSummarizer0);
      
      attributeSummarizer0.setAlignmentX(0.0F);
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      
      filter0.removeTestSetListener(attributeSummarizer0);
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertNotNull(instances0);
      
      Clusterer clusterer0 = new Clusterer();
      assertFalse(clusterer0.isFocusCycleRoot());
      assertEquals("EM", clusterer0.getCustomName());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertNotNull(clusterer0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertNotNull(graphViewer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      filter0.disconnectionNotification("4JPcnlWMqbK3", "4JPcnlWMqbK3");
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      assertEquals("If set to true, classifier may output additional info to the console.", serializedClassifier0.debugTipText());
      assertEquals("A wrapper around a serialized classifier model. This classifier loads a serialized models and uses it to make predictions.\n\nWarning: since the serialized model doesn't get changed, cross-validation cannot bet used with this classifier.", serializedClassifier0.globalInfo());
      assertEquals("The serialized classifier model to use for predictions.", serializedClassifier0.modelFileTipText());
      assertFalse(serializedClassifier0.getDebug());
      assertNotNull(serializedClassifier0);
      
      Sorter sorter0 = new Sorter();
      assertEquals("10000", sorter0.getBufferSize());
      assertNull(sorter0.getSortDetails());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isBusy());
      assertEquals("", sorter0.getTempDirectory());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.getIgnoreRepaint());
      assertNotNull(sorter0);
      
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      assertFalse(crossValidationFoldMaker0.getIgnoreRepaint());
      assertEquals("CrossValidationFoldMaker", crossValidationFoldMaker0.getCustomName());
      assertEquals("The number of train and test splits to produce", crossValidationFoldMaker0.foldsTipText());
      assertEquals(1, crossValidationFoldMaker0.getSeed());
      assertFalse(crossValidationFoldMaker0.isFocusCycleRoot());
      assertEquals("The randomization seed", crossValidationFoldMaker0.seedTipText());
      assertTrue(crossValidationFoldMaker0.getFocusTraversalKeysEnabled());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into cross validation folds. Separate train and test sets are produced for each of the k folds.", crossValidationFoldMaker0.globalInfo());
      assertFalse(crossValidationFoldMaker0.isBusy());
      assertFalse(crossValidationFoldMaker0.getPreserveOrder());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicySet());
      assertEquals(10, crossValidationFoldMaker0.getFolds());
      assertNotNull(crossValidationFoldMaker0);
      
      MetaBean metaBean0 = new MetaBean();
      assertFalse(metaBean0.isFocusCycleRoot());
      assertFalse(metaBean0.isFocusTraversalPolicyProvider());
      assertTrue(metaBean0.getFocusTraversalKeysEnabled());
      assertFalse(metaBean0.getIgnoreRepaint());
      assertEquals("Group", metaBean0.getCustomName());
      assertFalse(metaBean0.isFocusTraversalPolicySet());
      assertNotNull(metaBean0);
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseKononenko());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Use Kononenko's MDL criterion. If set to false uses the Fayyad & Irani criterion.", discretize0.useKononenkoTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBetterEncoding());
      assertEquals("Uses a more efficient split point encoding.", discretize0.useBetterEncodingTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertNotNull(discretize0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(discretize0, instances0);
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertFalse(discretize0.getUseKononenko());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Use Kononenko's MDL criterion. If set to false uses the Fayyad & Irani criterion.", discretize0.useKononenkoTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBetterEncoding());
      assertEquals("Uses a more efficient split point encoding.", discretize0.useBetterEncodingTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertFalse(discretize0.getUseKononenko());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Use Kononenko's MDL criterion. If set to false uses the Fayyad & Irani criterion.", discretize0.useKononenkoTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBetterEncoding());
      assertEquals("Uses a more efficient split point encoding.", discretize0.useBetterEncodingTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      assertEquals("500", dataVisualizer0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", dataVisualizer0.getOffscreenRendererName());
      assertEquals("", dataVisualizer0.getOffscreenXAxis());
      assertFalse(dataVisualizer0.isFocusCycleRoot());
      assertTrue(dataVisualizer0.getFocusTraversalKeysEnabled());
      assertEquals("DataVisualizer", dataVisualizer0.getCustomName());
      assertFalse(dataVisualizer0.isFocusTraversalPolicyProvider());
      assertEquals("400", dataVisualizer0.getOffscreenHeight());
      assertEquals("", dataVisualizer0.getOffscreenAdditionalOpts());
      assertEquals("Visualize incoming data/training/test sets in a 2D scatter plot.", dataVisualizer0.globalInfo());
      assertEquals("", dataVisualizer0.getOffscreenYAxis());
      assertFalse(dataVisualizer0.isBusy());
      assertFalse(dataVisualizer0.getIgnoreRepaint());
      assertFalse(dataVisualizer0.isFocusTraversalPolicySet());
      assertNotNull(dataVisualizer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertNotNull(attributeSummarizer0);
      
      attributeSummarizer0.setAlignmentX(0.0F);
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      
      filter0.removeTestSetListener(attributeSummarizer0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      assertFalse(dataVisualizer0.isFocusTraversalPolicySet());
      assertFalse(dataVisualizer0.isFocusCycleRoot());
      assertFalse(dataVisualizer0.isBusy());
      assertFalse(dataVisualizer0.getIgnoreRepaint());
      assertEquals("DataVisualizer", dataVisualizer0.getCustomName());
      assertEquals("500", dataVisualizer0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", dataVisualizer0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a 2D scatter plot.", dataVisualizer0.globalInfo());
      assertEquals("", dataVisualizer0.getOffscreenYAxis());
      assertEquals("400", dataVisualizer0.getOffscreenHeight());
      assertTrue(dataVisualizer0.getFocusTraversalKeysEnabled());
      assertEquals("", dataVisualizer0.getOffscreenXAxis());
      assertEquals("", dataVisualizer0.getOffscreenAdditionalOpts());
      assertFalse(dataVisualizer0.isFocusTraversalPolicyProvider());
      assertNotNull(dataVisualizer0);
      
      filter0.connectionNotification("MbS}W~", dataVisualizer0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(dataVisualizer0.isFocusTraversalPolicySet());
      assertFalse(dataVisualizer0.isFocusCycleRoot());
      assertFalse(dataVisualizer0.isBusy());
      assertFalse(dataVisualizer0.getIgnoreRepaint());
      assertEquals("DataVisualizer", dataVisualizer0.getCustomName());
      assertEquals("500", dataVisualizer0.getOffscreenWidth());
      assertEquals("Weka Chart Renderer", dataVisualizer0.getOffscreenRendererName());
      assertEquals("Visualize incoming data/training/test sets in a 2D scatter plot.", dataVisualizer0.globalInfo());
      assertEquals("", dataVisualizer0.getOffscreenYAxis());
      assertEquals("400", dataVisualizer0.getOffscreenHeight());
      assertTrue(dataVisualizer0.getFocusTraversalKeysEnabled());
      assertEquals("", dataVisualizer0.getOffscreenXAxis());
      assertEquals("", dataVisualizer0.getOffscreenAdditionalOpts());
      assertFalse(dataVisualizer0.isFocusTraversalPolicyProvider());
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertNotNull(graphViewer0);
      
      TextViewer textViewer0 = new TextViewer();
      assertFalse(textViewer0.isFocusCycleRoot());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertFalse(textViewer0.isBusy());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertNotNull(textViewer0);
      
      boolean boolean0 = filter0.eventGeneratable("MbS}W~");
      assertFalse(boolean0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("weka.core.tokenizers.Tokenizer", "weka.core.tokenizers.Tokenizer");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // weka.core.tokenizers.Tokenizer
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertNull(classValuePicker0.getClassValue());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNotNull(classValuePicker0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertNotNull(graphViewer0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertNotNull(appender0);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertNotNull(predictionAppender0);
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      filter0.acceptInstance(instanceEvent0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertNotNull(enumeration0);
      
      filter0.addTestSetListener(appender0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      
      filter0.setCustomName((String) null);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNull(filter0.getCustomName());
      assertFalse(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertNotNull(attributeSummarizer0);
      
      boolean boolean0 = attributeSummarizer0.getVerifyInputWhenFocusTarget();
      assertTrue(boolean0);
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      attributeSummarizer0.setAlignmentX(0.0F);
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      
      filter0.removeTestSetListener(attributeSummarizer0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNotNull(classValuePicker0);
      
      Clusterer clusterer0 = new Clusterer();
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertEquals("EM", clusterer0.getCustomName());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isFocusCycleRoot());
      assertNotNull(clusterer0);
      
      Instances instances1 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances1.numClasses());
      assertEquals(1, instances1.classIndex());
      assertEquals(0, instances1.size());
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances1.relationName());
      assertNotNull(instances1);
      assertSame(instances1, instances0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      instances0.compactify();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertSame(instances0, instances1);
      
      Sorter sorter0 = new Sorter();
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isBusy());
      assertEquals("10000", sorter0.getBufferSize());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNotNull(sorter0);
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender0.isBusy());
      assertNotNull(predictionAppender0);
      
      CheckGOE checkGOE0 = new CheckGOE();
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getSilent());
      assertNotNull(checkGOE0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(checkGOE0, instances0);
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getSilent());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(checkGOE0.getDebug());
      assertFalse(checkGOE0.getSuccess());
      assertFalse(checkGOE0.getSilent());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertSame(instances0, instances1);
      
      Object object0 = Image.UndefinedProperty;
      assertNotNull(object0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(instances0, instances0);
      assertTrue(dataSetEvent0.isStructureOnly());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertSame(instances0, instances1);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertTrue(filteredAssociator0.canProduceRules());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertNotNull(filteredAssociator0);
      
      PredictionAppender predictionAppender1 = new PredictionAppender();
      assertFalse(predictionAppender1.equals((Object)predictionAppender0));
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender1.globalInfo());
      assertFalse(predictionAppender1.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender1.isBusy());
      assertFalse(predictionAppender1.isFocusTraversalPolicySet());
      assertFalse(predictionAppender1.getIgnoreRepaint());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender1.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender1.getAppendPredictedProbabilities());
      assertTrue(predictionAppender1.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender1.isFocusCycleRoot());
      assertEquals("PredictionAppender", predictionAppender1.getCustomName());
      assertNotNull(predictionAppender1);
      
      InstanceEvent instanceEvent0 = predictionAppender1.m_instanceEvent;
      assertNull(instanceEvent0);
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertNotNull(beanVisual0);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertNotNull(allFilter0);
      
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      assertEquals("weka.core.Javadoc", globalInfoJavadoc0.getClassname());
      assertFalse(globalInfoJavadoc0.getSilent());
      assertEquals("", globalInfoJavadoc0.getDir());
      assertTrue(globalInfoJavadoc0.getUseStars());
      assertNotNull(globalInfoJavadoc0);
      
      Instances instances2 = sorter0.getConnectedFormat();
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertFalse(sorter0.isBusy());
      assertEquals("10000", sorter0.getBufferSize());
      assertNull(sorter0.getSortDetails());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("Sorter", sorter0.getCustomName());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertNull(instances2);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(globalInfoJavadoc0, (Instances) null);
      assertEquals("weka.core.Javadoc", globalInfoJavadoc0.getClassname());
      assertFalse(globalInfoJavadoc0.getSilent());
      assertEquals("", globalInfoJavadoc0.getDir());
      assertTrue(globalInfoJavadoc0.getUseStars());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("weka.core.Javadoc", globalInfoJavadoc0.getClassname());
      assertFalse(globalInfoJavadoc0.getSilent());
      assertEquals("", globalInfoJavadoc0.getDir());
      assertTrue(globalInfoJavadoc0.getUseStars());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      
      // Undeclared exception!
      try { 
        filter0.performRequest(".~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .~ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusCycleRoot());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertNotNull(appender0);
      
      filter0.removeTestSetListener(appender0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusCycleRoot());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      
      filter0.repaint();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isBusy());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertNotNull(attributeSummarizer0);
      
      boolean boolean0 = attributeSummarizer0.isDoubleBuffered();
      assertTrue(boolean0);
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isBusy());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      
      boolean boolean1 = attributeSummarizer0.m_showClassCombo;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      assertFalse(checkOptionHandler0.getSuccess());
      assertFalse(checkOptionHandler0.getDebug());
      assertFalse(checkOptionHandler0.getSilent());
      assertNotNull(checkOptionHandler0);
      
      String string0 = checkOptionHandler0.getRevision();
      assertEquals("8034", string0);
      assertFalse(checkOptionHandler0.getSuccess());
      assertFalse(checkOptionHandler0.getDebug());
      assertFalse(checkOptionHandler0.getSilent());
      assertNotNull(string0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertNotNull(graphViewer0);
      
      TextViewer textViewer0 = new TextViewer();
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertFalse(textViewer0.isBusy());
      assertNotNull(textViewer0);
      
      boolean boolean2 = filter0.eventGeneratable("configuration");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Appender appender1 = new Appender();
      assertFalse(appender1.equals((Object)appender0));
      assertFalse(appender1.isFocusCycleRoot());
      assertFalse(appender1.isFocusTraversalPolicySet());
      assertFalse(appender1.isFocusTraversalPolicyProvider());
      assertFalse(appender1.getIgnoreRepaint());
      assertFalse(appender1.isBusy());
      assertTrue(appender1.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender1.getCustomName());
      assertNotNull(appender1);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("last", add0.getAttributeIndex());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.isOutputFormatDefined());
      assertFalse(add0.isFirstBatchDone());
      assertNotNull(add0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      Character character0 = Character.valueOf('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 34);
      assertEquals(0, keyStroke0.getKeyCode());
      assertFalse(keyStroke0.isOnKeyRelease());
      assertEquals('[', keyStroke0.getKeyChar());
      assertEquals(400, keyStroke0.getKeyEventType());
      assertEquals(8354, keyStroke0.getModifiers());
      assertNotNull(keyStroke0);
      
      filter0.unregisterKeyboardAction((KeyStroke) null);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      Add add0 = new Add();
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("last", add0.getAttributeIndex());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(add0);
      
      SystemInUtil.addInputLine("phWhF8fdz=A('Fh>");
      filter0.setFilter(add0);
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("last", add0.getAttributeIndex());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertNotNull(predictionAppender0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertNotNull(flowByExpression0);
      
      DenseInstance denseInstance0 = new DenseInstance(34);
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(34, denseInstance0.numValues());
      assertEquals(34, denseInstance0.numAttributes());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(denseInstance0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertNotNull(substringReplacer0);
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      instanceEvent0.setStatus(6);
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertEquals(6, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertEquals(6, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertEquals(6, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertNotNull(attributeSummarizer0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertNull(classValuePicker0.getClassValue());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNotNull(classValuePicker0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertNotNull(graphViewer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      String string0 = graphViewer0.getName();
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertNull(string0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertNotNull(trainingSetMaker0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertNotNull(appender0);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("last", add0.getAttributeIndex());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertTrue(add0.isNewBatch());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("last", add0.getAttributeIndex());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertTrue(add0.isNewBatch());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertNotNull(predictionAppender0);
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      DenseInstance denseInstance0 = new DenseInstance((-2064), (double[]) null);
      assertEquals((-2064.0), denseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(denseInstance0);
      
      instanceEvent0.setInstance(denseInstance0);
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals((-2064.0), denseInstance0.weight(), 0.01);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      instanceEvent0.setStatus((-414));
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals((-414), instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      filter0.acceptInstance(instanceEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals((-414), instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(enumeration0);
      
      boolean boolean1 = filter0.isBusy();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      
      filter0.addDataSourceListener(attributeSummarizer0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isBusy());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertNotNull(textDirectoryLoader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertNotNull(graphViewer0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      String string0 = graphViewer0.getName();
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertNull(string0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertFalse(trainingSetMaker0.isBusy());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertNotNull(trainingSetMaker0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertNotNull(appender0);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(add0.isFirstBatchDone());
      assertTrue(add0.isNewBatch());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertNotNull(predictionAppender0);
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      DenseInstance denseInstance0 = new DenseInstance(0, (double[]) null);
      assertEquals(0.0, denseInstance0.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertNotNull(denseInstance0);
      
      instanceEvent0.setInstance(denseInstance0);
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(0.0, denseInstance0.weight(), 0.01);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      instanceEvent0.setStatus(2);
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals(2, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      filter0.acceptInstance(instanceEvent0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals(2, instanceEvent0.getStatus());
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertNotNull(enumeration0);
      
      filter0.addTestSetListener(appender0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      assertFalse(logPanel0.isFocusTraversalPolicyProvider());
      assertFalse(logPanel0.isFocusTraversalPolicySet());
      assertFalse(logPanel0.getIgnoreRepaint());
      assertTrue(logPanel0.getFocusTraversalKeysEnabled());
      assertFalse(logPanel0.isFocusCycleRoot());
      assertNotNull(logPanel0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      assertFalse(boolean0);
      
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      KeyStroke[] keyStrokeArray0 = filter0.getRegisteredKeyStrokes();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(keyStrokeArray0);
      
      Cursor cursor0 = filter0.getCursor();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("Default Cursor", cursor0.getName());
      assertEquals(0, cursor0.getType());
      assertNotNull(cursor0);
      
      filter0.setLog(logPanel0);
      assertFalse(logPanel0.isFocusTraversalPolicyProvider());
      assertFalse(logPanel0.isFocusTraversalPolicySet());
      assertFalse(logPanel0.getIgnoreRepaint());
      assertTrue(logPanel0.getFocusTraversalKeysEnabled());
      assertFalse(logPanel0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Add add0 = new Add();
      assertEquals("unnamed", add0.getAttributeName());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("unnamed", add0.getAttributeName());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertNotNull(predictionAppender0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertNotNull(substringReplacer0);
      
      filter0.enableInputMethods(false);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      instanceEvent0.setStatus(1);
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals(1, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      filter0.acceptInstance(instanceEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals(1, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      
      boolean boolean1 = filter0.isBusy();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addInstanceListener(substringReplacer0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      
      ImageSaver imageSaver0 = new ImageSaver();
      assertFalse(imageSaver0.isFocusTraversalPolicyProvider());
      assertFalse(imageSaver0.isFocusCycleRoot());
      assertFalse(imageSaver0.isBusy());
      assertNull(imageSaver0.getFilename());
      assertTrue(imageSaver0.getFocusTraversalKeysEnabled());
      assertEquals("Save static images (such as those produced by ModelPerformanceChart) to a file.", imageSaver0.globalInfo());
      assertFalse(imageSaver0.isFocusTraversalPolicySet());
      assertFalse(imageSaver0.getIgnoreRepaint());
      assertEquals("ImageSaver", imageSaver0.getCustomName());
      assertNotNull(imageSaver0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instanceEvent0, (Instances) null, 0, (-1016), 1, (-1016));
      assertEquals(0, trainingSetEvent0.getRunNumber());
      assertEquals((-1016), trainingSetEvent0.getMaxRunNumber());
      assertEquals(1, trainingSetEvent0.getSetNumber());
      assertEquals((-1016), trainingSetEvent0.getMaxSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals(1, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(0, trainingSetEvent0.getRunNumber());
      assertEquals((-1016), trainingSetEvent0.getMaxRunNumber());
      assertEquals(1, trainingSetEvent0.getSetNumber());
      assertEquals((-1016), trainingSetEvent0.getMaxSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals(1, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isBusy());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertNotNull(classValuePicker0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      instances0.compactify();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertTrue(add0.isNewBatch());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.isFirstBatchDone());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(add0.isNewBatch());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertFalse(add0.isFirstBatchDone());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertNotNull(graphViewer0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(graphViewer0, instances0);
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertTrue(dataSetEvent0.isStructureOnly());
      
      String string0 = SVMLightLoader.FILE_EXTENSION;
      assertEquals(".dat", string0);
      assertNotNull(string0);
      
      Sorter sorter0 = new Sorter();
      assertFalse(sorter0.isFocusTraversalPolicySet());
      assertNull(sorter0.getSortDetails());
      assertTrue(sorter0.getFocusTraversalKeysEnabled());
      assertFalse(sorter0.isBusy());
      assertEquals("Sorter", sorter0.getCustomName());
      assertFalse(sorter0.getIgnoreRepaint());
      assertEquals("", sorter0.getTempDirectory());
      assertFalse(sorter0.isFocusCycleRoot());
      assertFalse(sorter0.isFocusTraversalPolicyProvider());
      assertEquals("Sorts incoming instances in ascending or descending order according to the values of user specified attributes. Instances can be sorted according to multiple attributes (defined in order). Handles data sets larger than can be fit into main memory via instance connections and specifying the in-memory buffer size. Implements a merge-sort by writing the sorted in-memory buffer to a file when full and then interleaving instances from the disk based file(s) when the incoming stream has finished.", sorter0.globalInfo());
      assertEquals("10000", sorter0.getBufferSize());
      assertNotNull(sorter0);
      
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      assertFalse(logPanel0.isFocusTraversalPolicyProvider());
      assertFalse(logPanel0.isFocusCycleRoot());
      assertFalse(logPanel0.getIgnoreRepaint());
      assertTrue(logPanel0.getFocusTraversalKeysEnabled());
      assertFalse(logPanel0.isFocusTraversalPolicySet());
      assertNotNull(logPanel0);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertNotNull(filter1);
      
      filter1.setVerifyInputWhenFocusTarget(false);
      assertFalse(filter1.equals((Object)filter0));
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertNotSame(filter1, filter0);
      
      Enumeration enumeration0 = filter1.enumerateRequests();
      assertFalse(filter1.equals((Object)filter0));
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertNotNull(enumeration0);
      assertNotSame(filter1, filter0);
      
      File file0 = textDirectoryLoader0.getDirectory();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka", file0.toString());
      assertEquals("9_weka", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseKononenko());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBetterEncoding());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Uses a more efficient split point encoding.", discretize0.useBetterEncodingTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Use Kononenko's MDL criterion. If set to false uses the Fayyad & Irani criterion.", discretize0.useKononenkoTipText());
      assertNotNull(discretize0);
      
      String string1 = KnowledgeFlowApp.PROPERTY_FILE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("weka/gui/beans/Beans.props", string1);
      assertNotNull(string1);
      
      ListOptions listOptions1 = new ListOptions();
      assertFalse(listOptions1.equals((Object)listOptions0));
      assertEquals("weka.core.ListOptions", listOptions1.getClassname());
      assertNotNull(listOptions1);
      
      Add add1 = new Add();
      assertFalse(add1.equals((Object)add0));
      assertFalse(add1.isFirstBatchDone());
      assertEquals("The format of the date values (see ISO-8601).", add1.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add1.attributeIndexTipText());
      assertFalse(add1.isOutputFormatDefined());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add1.getDateFormat());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add1.globalInfo());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add1.nominalLabelsTipText());
      assertEquals("unnamed", add1.getAttributeName());
      assertEquals("last", add1.getAttributeIndex());
      assertEquals("Set the new attribute's name.", add1.attributeNameTipText());
      assertEquals("Defines the type of the attribute to generate.", add1.attributeTypeTipText());
      assertTrue(add1.isNewBatch());
      assertFalse(add1.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(add1);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(listOptions0, instances0, 1, 1);
      assertFalse(listOptions0.equals((Object)listOptions1));
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertEquals(1, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(1, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(listOptions0.equals((Object)listOptions1));
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertEquals(1, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(1, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertNotSame(filter0, filter1);
      assertNotSame(listOptions0, listOptions1);
      
      Insets insets0 = filter1.getInsets();
      assertFalse(filter1.equals((Object)filter0));
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.right);
      assertNotNull(insets0);
      assertNotSame(filter1, filter0);
      
      Insets insets1 = filter0.getInsets(insets0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter1.equals((Object)filter0));
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.right);
      assertEquals(0, insets1.left);
      assertEquals(0, insets1.top);
      assertEquals(0, insets1.bottom);
      assertEquals(0, insets1.right);
      assertNotNull(insets1);
      assertNotSame(filter0, filter1);
      assertNotSame(filter1, filter0);
      assertSame(insets0, insets1);
      assertSame(insets1, insets0);
      
      filter0.stop();
      assertFalse(filter0.equals((Object)filter1));
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertNotSame(filter0, filter1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNotNull(classValuePicker0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      String string0 = "@data";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      instances0.compactify();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      
      Appender appender0 = new Appender();
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertNotNull(appender0);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertEquals("last", add0.getAttributeIndex());
      assertTrue(add0.isNewBatch());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("last", add0.getAttributeIndex());
      assertTrue(add0.isNewBatch());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertNotNull(instanceEvent0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      instanceEvent0.setStructure(instances0);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertNotNull(graphViewer0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(graphViewer0, instances0);
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      
      Loader loader0 = new Loader();
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(loader0.isFocusCycleRoot());
      assertNotNull(loader0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertNotNull(substringLabeler0);
      
      Instances instances1 = substringLabeler0.m_outputStructure;
      assertNull(instances1);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(evoSuiteFile0, (Instances) null, 124, 1);
      assertFalse(testSetEvent0.isStructureOnly());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(1, testSetEvent0.getMaxSetNumber());
      assertEquals(124, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertNotNull(testSetEvent0);
      
      // Undeclared exception!
      try { 
        filter0.acceptTestSet(testSetEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertNull(classValuePicker0.getClassValue());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertNotNull(classValuePicker0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertNotNull(graphViewer0);
      
      instances0.compactify();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertNotNull(trainingSetMaker0);
      
      Appender appender0 = new Appender();
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertNotNull(appender0);
      
      appender0.setBackground((Color) null);
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("last", add0.getAttributeIndex());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("last", add0.getAttributeIndex());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertNotNull(predictionAppender0);
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertNotNull(instanceEvent0);
      
      instanceEvent0.setStructure(instances0);
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals(0, instanceEvent0.getStatus());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertNotNull(enumeration0);
      
      filter0.addTestSetListener(appender0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(testInstances0.getNoClass());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(1, testInstances0.getNumRelationalString());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(1, testInstances0.getNumString());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(testInstances0);
      
      instanceEvent0.setStatus((-2));
      assertEquals((-2), instanceEvent0.getStatus());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals((-2), instanceEvent0.getStatus());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      assertEquals("http://", xRFFLoader0.retrieveURL());
      assertEquals("XRFF data files", xRFFLoader0.getFileDescription());
      assertEquals(".xrff", xRFFLoader0.getFileExtension());
      assertFalse(xRFFLoader0.getUseRelativePath());
      assertEquals("Use relative rather than absolute paths", xRFFLoader0.useRelativePathTipText());
      assertNotNull(xRFFLoader0);
      
      try { 
        JOptionPane.getFrameForComponent(predictionAppender0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertNull(classValuePicker0.getClassValue());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertNotNull(classValuePicker0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertNotNull(graphViewer0);
      
      instances0.compactify();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertNotNull(trainingSetMaker0);
      
      Appender appender0 = new Appender();
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertNotNull(appender0);
      
      appender0.setBackground((Color) null);
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertFalse(add0.isFirstBatchDone());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertNotNull(add0);
      
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertTrue(filteredAssociator0.canProduceRules());
      assertNotNull(filteredAssociator0);
      
      MultiFilter multiFilter0 = (MultiFilter)filteredAssociator0.getFilter();
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertTrue(filteredAssociator0.canProduceRules());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.getDebug());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertNotNull(multiFilter0);
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("Index of the class attribute. If set to -1, the last attribute is taken as class attribute.", filteredAssociator0.classIndexTipText());
      assertEquals("The filter to be used.", filteredAssociator0.filterTipText());
      assertEquals("The base associator to be used.", filteredAssociator0.associatorTipText());
      assertEquals("Class for running an arbitrary associator on data that has been passed through an arbitrary filter. Like the associator, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", filteredAssociator0.globalInfo());
      assertEquals((-1), filteredAssociator0.getClassIndex());
      assertTrue(filteredAssociator0.canProduceRules());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertFalse(multiFilter0.getDebug());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertTrue(multiFilter0.isNewBatch());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertNotNull(instanceEvent0);
      
      instanceEvent0.setStructure(instances0);
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(2, instances0.numAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      filter0.acceptInstance(instanceEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertNotNull(enumeration0);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertNotNull(filter1);
      
      filter1.addTestSetListener(filter0);
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter1.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertNotSame(filter0, filter1);
      assertNotSame(filter1, filter0);
      
      TestSetMaker testSetMaker0 = new TestSetMaker();
      assertTrue(testSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(testSetMaker0.isFocusTraversalPolicySet());
      assertFalse(testSetMaker0.isFocusCycleRoot());
      assertFalse(testSetMaker0.isBusy());
      assertFalse(testSetMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Designate an incoming data set as a test set.", testSetMaker0.globalInfo());
      assertFalse(testSetMaker0.getIgnoreRepaint());
      assertEquals("TestSetMaker", testSetMaker0.getCustomName());
      assertNotNull(testSetMaker0);
      
      Instances instances1 = testSetMaker0.getStructure("@data");
      assertTrue(testSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(testSetMaker0.isFocusTraversalPolicySet());
      assertFalse(testSetMaker0.isFocusCycleRoot());
      assertFalse(testSetMaker0.isBusy());
      assertFalse(testSetMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Designate an incoming data set as a test set.", testSetMaker0.globalInfo());
      assertFalse(testSetMaker0.getIgnoreRepaint());
      assertEquals("TestSetMaker", testSetMaker0.getCustomName());
      assertNull(instances1);
      
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNull(classValuePicker0.getClassValue());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertNotNull(classValuePicker0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertNotNull(graphViewer0);
      
      instances0.compactify();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertNotNull(trainingSetMaker0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertNotNull(appender0);
      
      appender0.setBackground((Color) null);
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertTrue(add0.isNewBatch());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("unnamed", add0.getAttributeName());
      assertNotNull(add0);
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertNotNull(predictionAppender0);
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertNotNull(instanceEvent0);
      
      instanceEvent0.setStructure(instances0);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(enumeration0);
      
      filter0.addTestSetListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertNotNull(capabilities0);
      
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, capabilities0.getMinimumNumberInstances());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(1, testInstances0.getNumString());
      assertEquals(4, testInstances0.getNumClasses());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(0, testInstances0.getNumRelationalNominal());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getClassType());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals((-1), testInstances0.getClassIndex());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertEquals(20, testInstances0.getNumInstances());
      assertFalse(testInstances0.getNoClass());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(1, testInstances0.getNumRelationalString());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumNominal());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(1, testInstances0.getSeed());
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertNotNull(testInstances0);
      
      instanceEvent0.setStatus((-2));
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertEquals((-2), instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isBusy());
      assertEquals((-2), instanceEvent0.getStatus());
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      Clusterer clusterer0 = new Clusterer();
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.isFocusCycleRoot());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertEquals("EM", clusterer0.getCustomName());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertNotNull(clusterer0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(clusterer0, instances0, 2, (-2), 0, (-2));
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.isFocusCycleRoot());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertEquals("EM", clusterer0.getCustomName());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertEquals(2, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals((-2), testSetEvent0.getMaxSetNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals((-2), testSetEvent0.getMaxRunNumber());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertFalse(clusterer0.getIgnoreRepaint());
      assertFalse(clusterer0.isBusy());
      assertFalse(clusterer0.isFocusCycleRoot());
      assertFalse(clusterer0.isFocusTraversalPolicyProvider());
      assertFalse(clusterer0.hasIncomingBatchInstances());
      assertEquals("<html><font color=blue>Simple EM (expectation maximisation) class.\n\nEM assigns a probability distribution to each instance which indicates the probability of it belonging to each of the clusters</font><br><br> EM can decide how many clusters to create by cross validation, or you may specify apriori how many clusters to generate.<br><br>The cross validation performed to determine the number of clusters is done in the following steps:<br>1. the number of clusters is set to 1<br>2. the training set is split randomly into 10 folds.<br>3. EM is performed 10 times using the 10 folds the usual CV way.<br>4. the loglikelihood is averaged over all 10 results.<br>5.<br>if loglikelihood has increased the number of clusters is increased by 1 and the program continues at step 2.<br><br><br>The number of folds is fixed to 10, as long as the number of instances in the training set is not smaller 10.<br>If this is the case the number of folds is set equal to the number of instances.<br></html>", clusterer0.globalInfo());
      assertEquals("EM", clusterer0.getCustomName());
      assertTrue(clusterer0.getFocusTraversalKeysEnabled());
      assertFalse(clusterer0.isFocusTraversalPolicySet());
      assertEquals(2, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals((-2), testSetEvent0.getMaxSetNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals((-2), testSetEvent0.getMaxRunNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isBusy());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertNotNull(classValuePicker0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instances0.compactify();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertNotNull(appender0);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("last", add0.getAttributeIndex());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      
      InstanceEvent instanceEvent0 = appender0.m_ie;
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertNotNull(instanceEvent0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      instanceEvent0.setStructure(instances0);
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertEquals(0, instanceEvent0.getStatus());
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertNotNull(graphViewer0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      assertEquals("", globalInfoJavadoc0.getDir());
      assertEquals("weka.core.Javadoc", globalInfoJavadoc0.getClassname());
      assertTrue(globalInfoJavadoc0.getUseStars());
      assertFalse(globalInfoJavadoc0.getSilent());
      assertNotNull(globalInfoJavadoc0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(globalInfoJavadoc0, instances0);
      assertEquals("", globalInfoJavadoc0.getDir());
      assertEquals("weka.core.Javadoc", globalInfoJavadoc0.getClassname());
      assertTrue(globalInfoJavadoc0.getUseStars());
      assertFalse(globalInfoJavadoc0.getSilent());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("", globalInfoJavadoc0.getDir());
      assertEquals("weka.core.Javadoc", globalInfoJavadoc0.getClassname());
      assertTrue(globalInfoJavadoc0.getUseStars());
      assertFalse(globalInfoJavadoc0.getSilent());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals(2, instances0.numAttributes());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      
      Loader loader0 = new Loader();
      assertFalse(loader0.getIgnoreRepaint());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertFalse(loader0.isFocusCycleRoot());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(loader0.isBusy());
      assertNotNull(loader0);
      
      Loader loader1 = new Loader();
      assertFalse(loader1.equals((Object)loader0));
      assertFalse(loader1.getIgnoreRepaint());
      assertFalse(loader1.isFocusTraversalPolicyProvider());
      assertEquals("ArffLoader", loader1.getCustomName());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader1.globalInfo());
      assertFalse(loader1.isFocusTraversalPolicySet());
      assertFalse(loader1.isBusy());
      assertFalse(loader1.isFocusCycleRoot());
      assertTrue(loader1.getFocusTraversalKeysEnabled());
      assertNotNull(loader1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".arff";
      stringArray0[1] = "Zn,zG-#Dv";
      stringArray0[2] = ".arff";
      stringArray0[4] = ".arff";
      stringArray0[5] = "<!-- globalinfo-start -->";
      stringArray0[6] = "@relation";
      stringArray0[7] = "ZGL/TXPp-=W2'2H";
      stringArray0[8] = "globalInfo";
      Loader.main(stringArray0);
      Instances instances1 = loader1.getStructure("follows");
      assertFalse(loader1.equals((Object)loader0));
      assertFalse(loader1.getIgnoreRepaint());
      assertFalse(loader1.isFocusTraversalPolicyProvider());
      assertEquals("ArffLoader", loader1.getCustomName());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader1.globalInfo());
      assertFalse(loader1.isFocusTraversalPolicySet());
      assertFalse(loader1.isBusy());
      assertFalse(loader1.isFocusCycleRoot());
      assertTrue(loader1.getFocusTraversalKeysEnabled());
      assertNull(instances1);
      assertNotSame(loader1, loader0);
      
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      assertTrue(trainingSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicySet());
      assertEquals("Designate an incoming data set as a training set.", trainingSetMaker0.globalInfo());
      assertFalse(trainingSetMaker0.getIgnoreRepaint());
      assertFalse(trainingSetMaker0.isBusy());
      assertFalse(trainingSetMaker0.isFocusCycleRoot());
      assertFalse(trainingSetMaker0.isFocusTraversalPolicyProvider());
      assertEquals("TrainingSetMaker", trainingSetMaker0.getCustomName());
      assertNotNull(trainingSetMaker0);
      
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances2 = new Instances(".arff", arrayList0, 1);
      assertTrue(instances2.equals((Object)instances0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances2.checkForStringAttributes());
      assertEquals(".arff", instances2.relationName());
      assertEquals((-1), instances2.classIndex());
      assertEquals(0, instances2.size());
      assertEquals(0.0, instances2.sumOfWeights(), 0.01);
      assertEquals(0, instances2.numAttributes());
      assertEquals(0, instances2.numInstances());
      assertNotNull(instances2);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(allFilter0, instances2, (-2851), 0);
      assertTrue(instances2.equals((Object)instances0));
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances2.checkForStringAttributes());
      assertEquals(".arff", instances2.relationName());
      assertEquals((-1), instances2.classIndex());
      assertEquals(0, instances2.size());
      assertEquals(0.0, instances2.sumOfWeights(), 0.01);
      assertEquals(0, instances2.numAttributes());
      assertEquals(0, instances2.numInstances());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals((-2851), testSetEvent0.getSetNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertTrue(instances2.equals((Object)instances0));
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances2.checkForStringAttributes());
      assertEquals(".arff", instances2.relationName());
      assertEquals((-1), instances2.classIndex());
      assertEquals(0, instances2.size());
      assertEquals(0.0, instances2.sumOfWeights(), 0.01);
      assertEquals(0, instances2.numAttributes());
      assertEquals(0, instances2.numInstances());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals((-2851), testSetEvent0.getSetNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertNotSame(instances2, instances0);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertNotNull(filter1);
      
      Filter filter2 = new Filter();
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter2.getCustomName());
      assertFalse(filter2.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.getIgnoreRepaint());
      assertNotNull(filter2);
      
      Filter filter3 = new Filter();
      assertFalse(filter3.equals((Object)filter0));
      assertFalse(filter3.equals((Object)filter2));
      assertFalse(filter3.equals((Object)filter1));
      assertFalse(filter3.getIgnoreRepaint());
      assertFalse(filter3.isFocusCycleRoot());
      assertFalse(filter3.isBusy());
      assertFalse(filter3.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter3.globalInfo());
      assertEquals("AllFilter", filter3.getCustomName());
      assertFalse(filter3.isFocusTraversalPolicySet());
      assertTrue(filter3.getFocusTraversalKeysEnabled());
      assertNotNull(filter3);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(filter0.equals((Object)filter3));
      assertFalse(filter0.equals((Object)filter1));
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotSame(filter0, filter2);
      assertNotSame(filter0, filter3);
      assertNotSame(filter0, filter1);
      
      filter1.removeTrainingSetListener(filter2);
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter3));
      assertFalse(filter1.equals((Object)filter2));
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter3));
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter2.getCustomName());
      assertFalse(filter2.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.getIgnoreRepaint());
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter3);
      assertNotSame(filter1, filter2);
      assertNotSame(filter2, filter1);
      assertNotSame(filter2, filter3);
      assertNotSame(filter2, filter0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertNotNull(instances0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertNull(classValuePicker0.getClassValue());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertFalse(classValuePicker0.isBusy());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertNotNull(classValuePicker0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      instances0.compactify();
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numClasses());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertNotNull(appender0);
      
      ListOptions listOptions0 = new ListOptions();
      assertEquals("weka.core.ListOptions", listOptions0.getClassname());
      assertNotNull(listOptions0);
      
      Add add0 = new Add();
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
      assertNotNull(add0);
      
      filter0.setFilter(add0);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("The position (starting from 1) where the attribute will be inserted (first and last are valid indices).", add0.attributeIndexTipText());
      assertFalse(add0.isOutputFormatDefined());
      assertEquals("The format of the date values (see ISO-8601).", add0.dateFormatTipText());
      assertEquals("The list of value labels (nominal attribute creation only).  The list must be comma-separated, eg: \"red,green,blue\". If this is empty, the created attribute will be numeric.", add0.nominalLabelsTipText());
      assertEquals("An instance filter that adds a new attribute to the dataset. The new attribute will contain all missing values.", add0.globalInfo());
      assertEquals("unnamed", add0.getAttributeName());
      assertEquals("Defines the type of the attribute to generate.", add0.attributeTypeTipText());
      assertTrue(add0.isNewBatch());
      assertFalse(add0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set the new attribute's name.", add0.attributeNameTipText());
      assertFalse(add0.isFirstBatchDone());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss", add0.getDateFormat());
      assertEquals("last", add0.getAttributeIndex());
      
      String string0 = BorderLayout.SOUTH;
      assertEquals("South", string0);
      assertNotNull(string0);
      
      GraphViewer graphViewer0 = new GraphViewer();
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      assertNotNull(graphViewer0);
      
      filter0.connectionNotification("instance", graphViewer0);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(graphViewer0.isFocusTraversalPolicySet());
      assertFalse(graphViewer0.isFocusTraversalPolicyProvider());
      assertEquals("Graphically visualize trees or graphs produced by classifiers/clusterers.", graphViewer0.globalInfo());
      assertFalse(graphViewer0.isFocusCycleRoot());
      assertFalse(graphViewer0.getIgnoreRepaint());
      assertTrue(graphViewer0.getFocusTraversalKeysEnabled());
      
      ContainerListener containerListener0 = AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      assertNull(containerListener0);
      
      filter0.addTrainingSetListener(appender0);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertEquals("Appender", appender0.getCustomName());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      
      ContainerListener containerListener1 = AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      assertNull(containerListener1);
      
      filter0.addContainerListener((ContainerListener) null);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that adds a new attribute to the dataset</font><br><br> The new attribute will contain all missing values.<br></html>", filter0.globalInfo());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("Add", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        filter0.eventGeneratable((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
