/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:54:36 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      ByteString byteString0 = buffer0.md5();
      buffer0.rangeEquals((-2512L), byteString0);
      buffer0.readUtf8();
      Buffer buffer1 = buffer0.writeByte((-1443));
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((-31L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -31
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.hashCode();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(613L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      buffer1.clear();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      buffer0.hashCode();
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      boolean boolean0 = realBufferedSink0.closed;
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeShort(55296);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      String string0 = buffer0.readString(charset0);
      assertEquals("\uFFFD\u0000", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotNull(list0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      try { 
        buffer0.readUtf8LineStrict(8204L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      boolean boolean0 = buffer0.equals(byteString0);
      assertFalse(boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeShortLe(2141468287);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(127, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-16), (long) (-1), (-3528L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=1 fromIndex=-1 toIndex=-3528
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = buffer0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      Buffer buffer1 = buffer0.writeUtf8("timeout");
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      
      short short0 = buffer0.readShort();
      assertEquals((short)29801, short0);
      assertSame(buffer0, buffer1);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer2 = buffer0.writeDecimalLong(10000L);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(10L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte(234);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      boolean boolean0 = buffer0.exhausted();
      assertFalse(boolean0);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(70);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      byte byte0 = buffer_UnsafeCursor0.buffer.readByte();
      assertEquals((byte) (-22), byte0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(4672L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=4671 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-4213L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) pipedOutputStream0, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(4294967295L);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = buffer1.sha256();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer_UnsafeCursor0.buffer.readLong();
      assertEquals(7378697629483820646L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.buffer();
      assertNotNull(buffer3);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.seek(0L);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = 456L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8(456L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=456
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      List<Integer> list0 = buffer_UnsafeCursor0.buffer.segmentSizes();
      assertNotNull(list0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha256();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer0.writeLongLe(3L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Charset charset0 = null;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      SegmentPool.next = segment0;
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("Expected leading [0-9a-fA-F] character but was 0x", (-2147483646), (-1073741823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2147483646
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byteString0.write(buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(0, int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      String string0 = byteString0.base64Url();
      assertEquals("2jmj7l5rSw0yVb_vlWAYkK_YBwk=", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      ByteString byteString1 = buffer0.hmacSha512(byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals(64, byteString1.size());
      
      buffer0.flush();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals((-1), int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      try { 
        buffer0.require(4278190080L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeIntLe((-1073741823));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = buffer1.sha512();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      int int0 = buffer1.readIntLe();
      assertEquals((-1073741823), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      ByteString byteString1 = buffer0.md5();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString1.size());
      
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long0 = 5L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(5L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.clone();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte(1114111);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      try { 
        buffer1.readFully(buffer_UnsafeCursor0.data);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray1 = buffer0.readByteArray();
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) (byte)61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=60 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe((-1853L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read(buffer1, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(520L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer1.snapshot((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)103;
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      buffer0.require((byte) (-64));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      long long0 = buffer0.indexOf((byte)31, 100L);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      long long1 = buffer0.size();
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)31);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, 75L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("4%9U_*kFYtyB,");
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(14L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      String string0 = realBufferedSink0.buffer.readUtf8Line();
      assertEquals("4%9U_*kFYtyB,", string0);
      assertNotNull(string0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertNotNull(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-53);
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-22), (byte) (-53), (byte)0}, byteArray0);
      assertEquals(4, byteString0.size());
      
      Buffer buffer1 = buffer0.writeLongLe((byte) (-22));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(4294967295L);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = buffer1.sha256();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer_UnsafeCursor0.buffer.readLong();
      assertEquals(7378697629483820646L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1074));
      assertNotNull(buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString1 = buffer0.hmacSha512(byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[0];
      buffer0.readFully(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(0L, long0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      long long1 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeIntLe((-1073741823));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      int int0 = buffer1.readIntLe();
      assertEquals((-1073741823), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      try { 
        buffer1.skip(2468L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeLongLe((-1796L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int1 = buffer_UnsafeCursor0.buffer.readInt();
      assertEquals((-117440513), int1);
      assertFalse(int1 == int0);
      assertSame(buffer0, buffer1);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertEquals((-1), int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = 456L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8(456L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=456
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((byte)54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=54 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      buffer0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals((-1), int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.emitCompleteSegments();
      assertNotNull(buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte((-1));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer2 = buffer1.clone();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(1L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      int int0 = 234;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(234);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 3: 1 (to read code point prefixed 0xffffffea)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "|K^W];";
      Buffer buffer1 = buffer0.writeUtf8("|K^W];");
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      
      long long0 = 32L;
      // Undeclared exception!
      try { 
        buffer0.write((Source) hashingSource0, 32L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals((-1), int0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = buffer_UnsafeCursor0.buffer.equals(buffer1);
      assertTrue(boolean2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      try { 
        buffer1.write((Source) buffer0, 98L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[0];
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      int int0 = realBufferedSource1.buffer.read(byteArray0);
      assertEquals((-1), int0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      buffer0.size = (long) (-1);
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer0.size());
      
      realBufferedSource0.buffer.readFully(byteArray0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8CodePoint();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=-1 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = buffer0.readByteArray();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.md5();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      String string0 = byteString0.base64Url();
      assertEquals("1B2M2Y8AsgTpgAmY7PhCfg==", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      boolean boolean0 = buffer0.rangeEquals((-2512L), byteString0);
      assertFalse(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      ByteString byteString1 = buffer0.sha256();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      
      Buffer buffer1 = buffer0.writeByte((-3178));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = buffer2.writeLongLe((-3297L));
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8L, buffer3.size());
      
      int int0 = buffer2.readUtf8CodePoint();
      assertEquals(31, int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(7L, buffer2.size());
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Timeout timeout0 = realBufferedSource0.buffer.timeout();
      assertNotNull(timeout0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      int int1 = realBufferedSource0.buffer.readUtf8CodePoint();
      assertEquals(65533, int1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(int1 == int0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      String string1 = buffer2.readUtf8Line();
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((byte) (-8));
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer0);
      assertFalse(boolean0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-2213L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2213
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.buffer.read(byteArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byteString0.write(buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(1, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      int int0 = buffer0.select(options0);
      assertEquals(0, int0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(1, options0.size());
      
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeLong(0);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      int int1 = buffer0.readUtf8CodePoint();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(228L);
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(228L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer2 = buffer1.writeLongLe((-1302L));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(236L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(236L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(236L, buffer2.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(235L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      
      String string0 = buffer0.readString(charset0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'r(O<HCmq-E");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)89, (-586L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-586 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (-64L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -64
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-1));
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.write((byte[]) null, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      try { 
        buffer1.readFully(buffer0, 255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.writeUtf8CodePoint(13);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource1);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      int int1 = realBufferedSource0.readUtf8CodePoint();
      assertEquals(13, int1);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(int1 == int0);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(117, int0);
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = buffer1.request(117);
      assertFalse(boolean0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(7, byteString0.size());
      
      Buffer buffer2 = buffer1.write(byteString0);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeByte(115);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      try { 
        buffer1.readUtf8LineStrict(963L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=73\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, options0.size());
      
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      
      buffer1.close();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      int int0 = buffer_UnsafeCursor0.buffer.read(byteArray0);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)117, (byte)2}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      String string0 = buffer1.readUtf8Line((long) 2);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = 60;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'r(O<H|Cmq-E");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("'r(O<H|Cmq-E", 60, 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 21 < 60
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(1966L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      HashingSink hashingSink0 = HashingSink.sha512(pipe_PipeSink0);
      assertNotNull(hashingSink0);
      
      hashingSink0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(2410L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      assertNotNull(hashingSource0);
      
      hashingSource0.close();
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(32, byteString0.size());
      
      byteString0.write(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(40L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(40L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = buffer1.indexOf((byte) (-82), 60L, 2147483647L);
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(40L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(40L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      Segment segment0 = buffer0.writableSegment(659);
      assertNotNull(segment0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-68);
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)26, (byte) (-68)}, byteArray0);
      assertEquals(3, byteString0.size());
      
      byte[] byteArray1 = buffer0.readByteArray();
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, 1743, (int) (byte)26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "";
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = buffer0.request(1876L);
      assertFalse(boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      byte[] byteArray0 = buffer_UnsafeCursor0.buffer.readByteArray();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(117, int0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DYB46Z LdttK[1");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      buffer1.size = (long) 117;
      assertEquals(110L, buffer0.completeSegmentByteCount());
      assertEquals(117L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(117L, buffer1.size());
      assertEquals(110L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      try { 
        buffer0.readUtf8Line();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeLongLe(618L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      int int0 = buffer_UnsafeCursor0.buffer.read(byteArray0);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)106, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      try { 
        buffer0.readUtf8Line((long) 4);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeLongLe((-1796L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = (Buffer)buffer1.write((Source) buffer0, (-1796L));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      int int1 = buffer_UnsafeCursor0.buffer.readInt();
      assertEquals((-117440513), int1);
      assertFalse(int1 == int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      String string0 = buffer0.readUtf8();
      assertEquals("\uFFFD\uFFFD\uFFFD", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)0;
      byteArray0[7] = (byte)20;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)20}, byteArray0);
      
      Pipe pipe0 = new Pipe(1L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      pipe0.sourceClosed = false;
      Buffer buffer1 = buffer0.writeLongLe(431L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      boolean boolean1 = buffer1.request((-1443L));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      int int1 = buffer0.read(byteArray0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)20}, byteArray0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.indexOfElement(byteString0, (-404L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      int int0 = (-1443);
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer2 = buffer1.writeByte((-1443));
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        buffer2.writableSegment(65533);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(999999989L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(9L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      List<Integer> list0 = buffer_UnsafeCursor0.buffer.segmentSizes();
      assertNotNull(list0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(9L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      long long0 = buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      assertEquals(41231686025L, long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      try { 
        realBufferedSource0.readByteString(1000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      
      List<Integer> list0 = buffer_UnsafeCursor0.buffer.segmentSizes();
      assertNotNull(list0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-2690L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(126, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(7L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xfffffff5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer2 = buffer1.writeDecimalLong((-1216L));
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-127L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byte byte0 = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-117);
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4672L);
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertEquals(4672L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, 712L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-8);
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(117, int0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte) (-8);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long long0 = buffer1.indexOf((byte)0);
      assertEquals(1L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = 110;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer.writeShort((-1398));
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      InflaterSource inflaterSource0 = new InflaterSource(realBufferedSource0.buffer, inflater0);
      assertNotNull(inflaterSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      
      Timeout timeout0 = inflaterSource0.timeout();
      assertNotNull(timeout0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      
      Buffer buffer3 = buffer2.writeDecimalLong(110);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(5L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalIn());
      
      byte[] byteArray0 = realBufferedSource0.readByteArray();
      assertNotNull(byteArray0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-118), (byte)49, (byte)49, (byte)48, (byte)110}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      String string0 = realBufferedSource0.buffer.toString();
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = 234;
      Buffer buffer1 = buffer0.writeByte(234);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint(234);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeLongLe(234);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      
      byteString0.write(realBufferedSource0.buffer);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(40L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      
      long long0 = buffer1.indexOf(byteString0);
      assertEquals(8L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(40L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000000L);
      assertNotNull(pipe0);
      
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = buffer0.size();
      assertEquals(0L, long0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertNotNull(hashingSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      
      ByteString byteString2 = buffer0.hmacSha1(byteString1);
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertEquals(20, byteString1.size());
      assertEquals(20, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      boolean boolean1 = realBufferedSource0.buffer.rangeEquals(8L, byteString0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(48L);
      assertNotNull(pipe0);
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      HashingSink hashingSink2 = HashingSink.sha1(hashingSink1);
      assertNotNull(hashingSink2);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertNotNull(outputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      int int0 = buffer0.selectPrefix(options0);
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, options0.size());
      
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer1.readByteArray(806L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=0 byteCount=806
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeShort((-106));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.close();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer1.indexOfElement((ByteString) null, 16711680L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8("|K^W];");
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(20, byteString0.size());
      
      ByteString byteString1 = buffer1.hmacSha512(byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertEquals(64, byteString1.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      long long0 = buffer0.size();
      assertEquals(6L, long0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString2.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(20, byteString2.size());
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      ByteString byteString3 = hashingSink0.hash();
      assertNotNull(byteString3);
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16, byteString3.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      
      long long1 = buffer1.indexOf(byteString3, 32L);
      assertEquals((-1L), long1);
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(16, byteString3.size());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeString("|K^W];", charset1);
      assertNotNull(bufferedSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(charset1, charset0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      
      realBufferedSink0.buffer.skip((-1L));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      
      long long2 = buffer1.indexOf((byte)3, (long) (byte)3, 32L);
      assertEquals((-1L), long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      int int0 = 239;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeByte(239);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      Segment segment0 = buffer1.writableSegment(239);
      assertNotNull(segment0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      Pipe pipe0 = new Pipe(239);
      assertNotNull(pipe0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      realBufferedSource0.skip((-353L));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      try { 
        buffer2.write((Source) buffer0, 255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(1401L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLongLe(60L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.clear();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      buffer1.flush();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      // Undeclared exception!
      try { 
        buffer0.writeString("T$;gz/xg", (-5846), 2034458192, charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -5846
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-1L));
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals((-1L), long0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Buffer buffer2 = buffer0.writeString("SHA-512", charset0);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(9L, buffer2.size());
      
      Buffer buffer3 = buffer1.writeUtf8CodePoint((-3053));
      assertNotNull(buffer3);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(10L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8("}FUaJS|Xm]!=xA'oZ");
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString1 = byteString0.sha512();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.hmacSha512(byteString1);
      assertNotNull(byteString2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals(64, byteString2.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long0 = buffer0.size();
      assertEquals(17L, long0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      
      ByteString byteString3 = hashingSource0.hash();
      assertNotNull(byteString3);
      assertTrue(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertEquals(20, byteString3.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x7d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Pipe pipe0 = new Pipe(8L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Buffer buffer2 = buffer0.writeDecimalLong(15L);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      // Undeclared exception!
      try { 
        buffer2.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = buffer2.sha1();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(1225L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      Buffer buffer2 = buffer1.write(byteArray0);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-2176L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1952257861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 745d1745
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer0);
      assertTrue(boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = buffer0.writeIntLe(2);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(4, byteString0.size());
      
      long long0 = buffer1.indexOfElement(byteString0, 761L);
      assertEquals((-1L), long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(4, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      
      int int0 = buffer3.selectPrefix(options0);
      assertEquals(0, int0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, options0.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(629L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(8, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(8, buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(1401L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      Buffer buffer0 = realBufferedSink0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeLongLe(60L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      
      buffer0.clear();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      buffer0.flush();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals((-1), int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      // Undeclared exception!
      try { 
        buffer0.writeString("T$;gz/xg", 8230, (-71), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -71 < 8230
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(664L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.buffer.read(byteArray0);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)2}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      String string0 = buffer1.readUtf8Line((long) 2);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read(buffer1, 1000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater(false);
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(10000L);
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertEquals(10000L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeInt(51);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(10004L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(10004L, buffer2.size());
      assertEquals(8192L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(10004L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Buffer buffer4 = new Buffer();
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      // Undeclared exception!
      try { 
        buffer2.write((Source) buffer1, 10000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1114111);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      assertNotNull(sequenceInputStream0);
      
      int int0 = buffer0.readIntLe();
      assertEquals((-1077964812), int0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = buffer0.md5();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4679L);
      assertEquals(0L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4679L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4679L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = (Buffer)buffer0.write((Source) buffer0, 0L);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4679L, buffer0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4679L, buffer3.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("byteCount < 0: ");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      Buffer buffer4 = buffer0.writeTo((OutputStream) bufferedOutputStream0);
      assertNotNull(buffer4);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer2));
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      long long1 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        buffer3.readFrom((InputStream) null, (-87L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -87
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean0 = realBufferedSink0.buffer.equals("");
      assertFalse(boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer2 = realBufferedSink0.buffer.writeIntLe(81);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      
      Buffer buffer3 = buffer1.writeShortLe(2146796865);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(6L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = buffer1.readIntLe();
      assertEquals(81, int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer4 = buffer0.writeShort(2146796865);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(4L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer4);
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      List<Integer> list0 = buffer5.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(4L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer3.readHexadecimalUnsignedLong();
      assertEquals(10L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer4));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("4%9U_*kFYtyB,");
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(14L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      String string0 = realBufferedSink0.toString();
      assertEquals("buffer([size=0])", string0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(14L, buffer2.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      assertEquals((byte)16, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      long long0 = buffer2.readHexadecimalUnsignedLong();
      assertEquals(4L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(13L, buffer2.size());
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)0, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      assertEquals(7, byteString1.size());
      
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256(buffer2, byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(71776119061217280L);
      assertNotNull(pipe0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte) (-120);
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-64), (byte)51, (byte) (-23), (byte) (-72), (byte)121, (byte)107, (byte) (-120)}, byteArray0);
      assertEquals(8, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-64), (byte)51, (byte) (-23), (byte) (-72), (byte)121, (byte)107, (byte) (-120)}, byteArray0);
      assertEquals(8, byteString0.size());
      
      Inflater inflater0 = new Inflater(false);
      assertNotNull(inflater0);
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      assertNotNull(inflaterSource0);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-64), (byte)51, (byte) (-23), (byte) (-72), (byte)121, (byte)107, (byte) (-120)}, byteArray0);
      assertEquals(8, byteString0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-64), (byte)51, (byte) (-23), (byte) (-72), (byte)121, (byte)107, (byte) (-120)}, byteArray0);
      assertEquals(8, byteString0.size());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      
      Buffer buffer0 = realBufferedSource0.buffer;
      assertNotNull(buffer0);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-64), (byte)51, (byte) (-23), (byte) (-72), (byte)121, (byte)107, (byte) (-120)}, byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (long) (byte) (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeLongLe(4661L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteString0.size());
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-4512L));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertEquals(13L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Inflater inflater0 = new Inflater(false);
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(13L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      
      HashingSource hashingSource2 = HashingSource.sha1(inflaterSource0);
      assertNotNull(hashingSource2);
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(13L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalOut());
      
      Buffer buffer3 = buffer0.writeUtf8CodePoint((-1));
      assertNotNull(buffer3);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(14L, buffer3.size());
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer2, byteString0);
      assertNotNull(hashingSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(14L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertEquals(20, byteString1.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(14L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(1, options0.size());
      
      int int0 = buffer0.selectPrefix(options0);
      assertEquals((-1), int0);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, options0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeLongLe(664L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.buffer.read(byteArray0);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)2}, byteArray0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      String string0 = buffer1.readUtf8Line((long) 2);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      MockFile mockFile0 = new MockFile("\u0000\u0000", "\u0000\u0000");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("\u0000\u0000", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/\u0000\u0000/\u0000\u0000", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/\u0000\u0000", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      assertEquals("\u0000\u0000", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/\u0000\u0000/\u0000\u0000", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/\u0000\u0000", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.write((Source) buffer1, (long) (-1));
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer3 = buffer2.writeIntLe(2);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer3.exhausted());
      assertEquals(4L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0, 2L);
      assertEquals((-1L), long1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(long1 == long0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer1 = buffer0.writeLongLe(4661L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      String string0 = "xw%<tELrS$jLfn}\\u";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u/xw%<tELrS$jLfn}\\u", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("xw%<tELrS$jLfn}\\u", mockFile0.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u", mockFile0.getParent());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u/xw%<tELrS$jLfn}\\u", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("xw%<tELrS$jLfn}\\u", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u", mockFile0.getParent());
      
      PrintStream printStream0 = mockPrintStream0.append('e');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u/xw%<tELrS$jLfn}\\u", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("xw%<tELrS$jLfn}\\u", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u", mockFile0.getParent());
      
      Buffer buffer2 = buffer1.copyTo((OutputStream) mockPrintStream0);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u/xw%<tELrS$jLfn}\\u", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("xw%<tELrS$jLfn}\\u", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u", mockFile0.getParent());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u/xw%<tELrS$jLfn}\\u", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("xw%<tELrS$jLfn}\\u", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u", mockFile0.getParent());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      
      byte[] byteArray1 = realBufferedSource0.buffer.readByteArray();
      assertNotNull(byteArray1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u/xw%<tELrS$jLfn}\\u", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("xw%<tELrS$jLfn}\\u", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u", mockFile0.getParent());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      byte byte0 = buffer0.readByte();
      assertEquals((byte)53, byte0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      
      Buffer buffer4 = realBufferedSource0.buffer.writeIntLe((-628));
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(9L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u/xw%<tELrS$jLfn}\\u", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("xw%<tELrS$jLfn}\\u", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/xw%<tELrS$jLfn}\\u", mockFile0.getParent());
      assertFalse(buffer2.exhausted());
      assertEquals(7L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((byte) (-8));
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      
      short short0 = buffer1.readShortLe();
      assertEquals((short) (-1793), short0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer0);
      assertTrue(boolean0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      
      Buffer buffer2 = buffer1.writeInt((-1));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2463L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2463 > size=4
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      GzipSource gzipSource0 = new GzipSource(buffer0);
      assertNotNull(gzipSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-108);
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertEquals(3, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(gzipSource0, byteString0);
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      HashingSource hashingSource1 = HashingSource.md5(gzipSource0);
      assertNotNull(hashingSource1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = buffer1.writeLongLe((byte) (-36));
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(8L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SHA-256");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = buffer1.indexOf(byteString0);
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      long long1 = 3283L;
      byteString0.write(buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      
      long long2 = buffer0.read(realBufferedSource0.buffer, 3283L);
      assertEquals(3L, long2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-36), (byte) (-1)}, byteArray0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) (byte) (-36));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-36
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-48);
      byte byte0 = (byte)31;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)37, 255L, (-852L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=255 toIndex=-852
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals((-1), int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(0L);
      assertNotNull(buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      
      try { 
        MockURI.URI("\"DaNhF0Ee~Y", "", "\"DaNhF0Ee~Y", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: \"DaNhF0Ee~Y://%22DaNhF0Ee~Y#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(2158);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = realBufferedSource1.buffer.read(byteArray0);
      assertEquals((-1), int0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      realBufferedSource0.buffer.readFully(byteArray0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int1 = realBufferedSource1.readUtf8CodePoint();
      assertEquals(2158, int1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(int1 == int0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("aW]lZ*]{", 13, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 13 > 8
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Pipe pipe0 = new Pipe(1000000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte(11);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      buffer0.hashCode();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Segment segment0 = buffer_UnsafeCursor0.buffer.head;
      assertNull(segment0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(3559L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      buffer0.hashCode();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = buffer1.writeDecimalLong((-124L));
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      realBufferedSource0.buffer.write(buffer0, 4L);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong(72057594037L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-117);
      ByteString byteString0 = new ByteString(byteArray0);
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-80), (byte) (-117), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteString0.size());
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)6, (byte) (-80), (byte) (-117), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(6, byteString0.size());
      assertEquals(20, byteString1.size());
      
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-100);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeByte((-1));
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer2 = buffer0.writeDecimalLong(10000000000000L);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(inflater0.needsDictionary());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(48L);
      assertNotNull(pipe0);
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      HashingSink hashingSink2 = HashingSink.sha1(hashingSink1);
      assertNotNull(hashingSink2);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertNotNull(outputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer1.hmacSha1(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeByte(86);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(1002L);
      assertNotNull(bufferedSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(1002L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer2 = buffer0.writeDecimalLong(1002L);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      
      // Undeclared exception!
      try { 
        buffer0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong(1000000000L);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(10L, buffer2.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertEquals(10L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer3));
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      long long0 = buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      assertEquals(68719476736L, long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString[] byteStringArray0 = new ByteString[5];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-400L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -400
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor0.end);
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      
      InflaterSource inflaterSource0 = new InflaterSource(realBufferedSource0.buffer, inflater0);
      assertNotNull(inflaterSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      
      inflater0.setInput(buffer_UnsafeCursor1.data, 110, 1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsInput());
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      
      Timeout timeout0 = inflaterSource0.timeout();
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsInput());
      
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getRemaining());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertFalse(inflater0.needsInput());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      
      byte byte0 = buffer1.readByte();
      assertEquals((byte)110, byte0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString1 = new ByteString(buffer_UnsafeCursor1.data);
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8192, byteString1.size());
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1283));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1283
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(64, byteString0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha256(buffer1, byteString0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(64, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      int int1 = 1458;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString("size == 0", 1, 1458, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1458 > 9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte(234);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(70);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(3, byteString0.size());
      
      Buffer buffer3 = buffer0.writeByte(234);
      assertNotNull(buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Segment segment0 = buffer3.writableSegment(70);
      assertNotNull(segment0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(1000L);
      assertNotNull(pipe0);
      
      ByteString[] byteStringArray0 = new ByteString[6];
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(byteString1, byteString0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(64, byteString1.size());
      
      byteStringArray0[0] = byteString1;
      Buffer buffer4 = buffer3.writeIntLe(8192);
      assertNotNull(buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(5L, buffer4.size());
      
      long long0 = realBufferedSource0.buffer.indexOfElement(byteString0, 2451L);
      assertEquals((-1L), long0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      
      Buffer buffer5 = buffer0.clone();
      assertNotNull(buffer5);
      assertTrue(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.equals((Object)buffer3));
      assertTrue(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(5L, buffer5.completeSegmentByteCount());
      
      ByteString byteString2 = realBufferedSource0.buffer.readByteString();
      assertNotNull(byteString2);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(buffer0.equals((Object)buffer5));
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertEquals(0, byteString2.size());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer6 = buffer1.emitCompleteSegments();
      assertNotNull(buffer6);
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer5));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertSame(buffer6, buffer3);
      assertSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer2);
      assertSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer5);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      assertEquals(5L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer7 = (Buffer)buffer0.emit();
      assertNotNull(buffer7);
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer5));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertSame(buffer7, buffer3);
      assertSame(buffer7, buffer4);
      assertSame(buffer7, buffer6);
      assertSame(buffer7, buffer1);
      assertSame(buffer7, buffer0);
      assertSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer5);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(5L, buffer7.size());
      
      long long1 = buffer7.indexOf(byteString0);
      assertEquals((-1L), long1);
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer5));
      assertTrue(long1 == long0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertSame(buffer7, buffer3);
      assertSame(buffer7, buffer4);
      assertSame(buffer7, buffer6);
      assertSame(buffer7, buffer1);
      assertSame(buffer7, buffer0);
      assertSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer5);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(5L, buffer7.size());
      assertEquals(3, byteString0.size());
      
      long long2 = buffer2.indexOfElement(byteString1, (long) 70);
      assertEquals((-1L), long2);
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer5));
      assertTrue(buffer2.equals((Object)buffer5));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer6);
      assertSame(buffer1, buffer6);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer7);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer7);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer5);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer6);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(64, byteString1.size());
      
      Buffer buffer8 = realBufferedSource0.buffer;
      assertNotNull(buffer8);
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer8.equals((Object)buffer0));
      assertFalse(buffer8.equals((Object)buffer6));
      assertFalse(buffer8.equals((Object)buffer2));
      assertFalse(buffer8.equals((Object)buffer5));
      assertFalse(buffer8.equals((Object)buffer1));
      assertFalse(buffer8.equals((Object)buffer7));
      assertNotSame(buffer8, buffer3);
      assertNotSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer2);
      assertNotSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer1);
      assertNotSame(buffer8, buffer7);
      assertEquals(0L, buffer8.size());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertTrue(buffer8.exhausted());
      
      // Undeclared exception!
      try { 
        buffer8.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((byte) (-53));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      
      int int0 = buffer_UnsafeCursor1.next();
      assertEquals(1, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 1242L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o_vm znPr(q");
      assertFalse(boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4674L);
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4674L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt((-1));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4678L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4678L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeLongLe((-1L));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4686L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4686L, buffer2.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4686L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      Buffer buffer4 = buffer3.writeShortLe((-1));
      assertNotNull(buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4688L, buffer0.size());
      assertEquals(4688L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(4688L, buffer4.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer3.indexOf((byte) (-38), 4674L);
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4688L, buffer0.size());
      assertEquals(4688L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer buffer5 = new Buffer();
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer3));
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      Buffer buffer6 = new Buffer();
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer3));
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer6.indexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer2, inflater0);
      assertNotNull(inflaterSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      inflater0.setInput(buffer_UnsafeCursor1.data, 110, 1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsInput());
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(0, buffer_UnsafeCursor1.start);
      
      Timeout timeout0 = inflaterSource0.timeout();
      assertNotNull(timeout0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsInput());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsInput());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer4 = buffer_UnsafeCursor1.buffer.readFrom(inputStream0, 0L);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(1L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(0, buffer_UnsafeCursor1.start);
      
      try { 
        buffer2.readFully(buffer_UnsafeCursor1.data);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long0 = 8L;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo((OutputStream) null, 8L, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[0];
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1091, 1091);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1091), byteArrayInputStream0.available());
      
      try { 
        realBufferedSink0.buffer.readFrom((InputStream) byteArrayInputStream0, 10000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      assertNotNull(inflaterSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getTotalOut());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(48L);
      assertNotNull(pipe0);
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.writeIntLe(2146880422);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = pipe0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      ByteString byteString0 = hashingSink1.hash();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(23L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(23L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      long long0 = buffer3.indexOfElement(byteString0, 1L);
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(23L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(64, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(3, options0.size());
      
      Buffer buffer4 = (Buffer)buffer0.write((Source) buffer2, (-1L));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(23L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(23L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)16, 102);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-100), (byte)0, (byte)0, (byte)16}, byteArray0);
      assertEquals((-11), byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-100), (byte)0, (byte)0, (byte)16}, byteArray0);
      assertEquals((-11), byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-100), (byte)0, (byte)0, (byte)16}, byteArray0);
      assertEquals((-11), byteArrayInputStream0.available());
      
      Buffer buffer5 = buffer4.readFrom((InputStream) bufferedInputStream0);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertArrayEquals(new byte[] {(byte)119, (byte) (-100), (byte)0, (byte)0, (byte)16}, byteArray0);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer5);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(23L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals((-11), byteArrayInputStream0.available());
      assertEquals(23L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(23L, buffer5.size());
      
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Options options0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-69), (byte)78, (byte) (-47), (byte) (-11), (byte) (-91), (byte)10, (byte)95, (byte)87}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)95);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4674L);
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4674L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer2 = buffer1.writeInt((-1));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4678L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4678L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4678L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(4678L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4678L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4678L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(0L);
      assertNotNull(bufferedSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(4678L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4678L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4678L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer0.exhausted());
      assertEquals(4678L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha256(buffer1, byteString0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      
      String string0 = buffer1.readUtf8();
      assertEquals("n", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      
      boolean boolean1 = realBufferedSource0.closed;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(1275L);
      assertNotNull(buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = realBufferedSource0.buffer.readUnsafe();
      assertNotNull(buffer_UnsafeCursor2);
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor2));
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer.writeDecimalLong(0L);
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      
      Pipe pipe0 = new Pipe(3L);
      assertNotNull(pipe0);
      
      Buffer buffer5 = pipe0.buffer;
      assertNotNull(buffer5);
      assertTrue(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer1);
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      
      long long0 = buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      assertEquals(20400L, long0);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      ByteString byteString0 = hashingSink0.hash();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(64, byteString0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha256(buffer1, byteString0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      String string0 = buffer1.readUtf8();
      assertEquals("n", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(5, options0.size());
      
      long long0 = 255L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      int int0 = 234;
      Buffer buffer1 = buffer0.writeByte(234);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Segment segment0 = buffer1.writableSegment(234);
      assertNotNull(segment0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertNotNull(buffer3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(9223372036854775807L);
      assertNotNull(bufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer4 = new Buffer();
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer4));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(32, byteString1.size());
      
      HashingSource hashingSource1 = HashingSource.md5(buffer0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      long long0 = buffer1.completeSegmentByteCount();
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer4));
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        byteString1.substring((-1182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[3];
      Segment segment0 = buffer0.writableSegment(659);
      assertNotNull(segment0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byteArray0[0] = (byte) (-25);
      byte byte0 = (byte)26;
      byteArray0[2] = (byte) (-68);
      String string0 = "l|(4|";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(2100L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = buffer0.sha256();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      pipe0.sourceClosed = true;
      pipe0.sinkClosed = true;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeShortLe((-606));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer0.close();
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer2 = null;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, (-636L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      
      Buffer buffer1 = buffer0.writeByte(234);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Pipe pipe0 = new Pipe(1000L);
      assertNotNull(pipe0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      ByteString[] byteStringArray0 = new ByteString[6];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteString0.write(buffer2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Buffer buffer3 = buffer1.writeString("\n", charset0);
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(6, options0.size());
      
      realBufferedSource0.skip((-353L));
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      
      Integer integer0 = new Integer(234);
      assertEquals(234, (int)integer0);
      assertNotNull(integer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      
      ByteString[] byteStringArray1 = new ByteString[4];
      assertFalse(byteStringArray1.equals((Object)byteStringArray0));
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      byteStringArray1[0] = byteString0;
      byteStringArray1[2] = byteString0;
      byteStringArray1[3] = byteString0;
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertNotNull(outputStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      
      byte[] byteArray0 = realBufferedSource0.buffer.readByteArray();
      assertNotNull(byteArray0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      
      int int0 = buffer2.select(options0);
      assertEquals(0, int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(byteStringArray0.equals((Object)byteStringArray1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(byteStringArray0, byteStringArray1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(6, options0.size());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      String string0 = buffer1.readUtf8LineStrict(1000L);
      assertEquals("\uFFFD", string0);
      assertNotNull(string0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      int int1 = buffer1.select(options0);
      assertEquals(0, int1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(int1 == int0);
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(byteStringArray0.equals((Object)byteStringArray1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(byteStringArray0, byteStringArray1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(6, options0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer0.writeByte((-1));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Pipe pipe0 = new Pipe(1000L);
      assertNotNull(pipe0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = pipe0.sinkClosed;
      assertFalse(boolean0);
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString1.size());
      
      byteString1.write(buffer1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(65L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(64, byteString1.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Buffer buffer3 = buffer2.writeString("\n", charset0);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(1L, buffer3.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(2, options0.size());
      
      int int0 = realBufferedSource0.buffer.select(options0);
      assertEquals((-1), int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, options0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(65L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertNotNull(outputStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(65L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertEquals(1L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      byte[] byteArray0 = buffer4.readByteArray();
      assertNotNull(byteArray0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      String string0 = byteString1.hex();
      assertEquals("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", string0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString1.size());
      
      int int1 = buffer1.select(options0);
      assertEquals((-1), int1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer4));
      assertTrue(int1 == int0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(65L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, options0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(65L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeLongLe(618L);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.buffer.read(byteArray0);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)106, (byte)2}, byteArray0);
      assertSame(buffer0, buffer1);
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      String string0 = buffer0.readUtf8Line((long) 2);
      assertEquals("\u0000\u0000", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer_UnsafeCursor0.readWrite = false;
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte((-1));
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer_UnsafeCursor0.buffer.readAll(buffer2);
      assertEquals(3L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals(0L, long0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      assertNotNull(gzipSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(1000000001L);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8("g=2x.FW1~TfNnvF@");
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(26L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Pipe pipe0 = new Pipe(1000000001L);
      assertNotNull(pipe0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe((-1930));
      assertNotNull(bufferedSink0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      assertNotNull(realBufferedSink2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink3);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(30L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(1000000001L, long0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      BufferedSink bufferedSink1 = realBufferedSink1.writeIntLe(15);
      assertNotNull(bufferedSink1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink3));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink1.equals((Object)bufferedSink0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink1, bufferedSink1);
      assertNotSame(realBufferedSink1, bufferedSink0);
      assertNotSame(realBufferedSink1, realBufferedSink3);
      assertNotSame(realBufferedSink1, realBufferedSink2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink3);
      assertSame(bufferedSink1, realBufferedSink1);
      assertNotSame(bufferedSink1, realBufferedSink2);
      assertNotSame(bufferedSink1, realBufferedSink0);
      assertNotSame(bufferedSink1, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(realBufferedSink3);
      assertNotNull(realBufferedSink4);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink4.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink4.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSink realBufferedSink5 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink5);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink5.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink5.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink5.equals((Object)realBufferedSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink5));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink5));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink3.buffer);
      assertNotNull(realBufferedSource1);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink5));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink5));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer buffer5 = realBufferedSource1.buffer();
      assertNotNull(buffer5);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)bufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink5));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer3));
      assertTrue(buffer5.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink4));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink5));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)bufferedSink1));
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(realBufferedSink0, realBufferedSink4);
      assertNotSame(realBufferedSink0, realBufferedSink5);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(realBufferedSink3, realBufferedSink4);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(realBufferedSink3, bufferedSink0);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertNotSame(realBufferedSink3, realBufferedSink5);
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(realBufferedSink3, bufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(20L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4674L);
      assertEquals(0L, long0);
      assertEquals(4674L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer1 = buffer0.writeInt((-1));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4678L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4678L, buffer1.size());
      
      Buffer buffer2 = buffer0.writeLongLe((-1L));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(4686L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4686L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(4686L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      Buffer buffer4 = buffer3.writeShortLe(2145338309);
      assertNotNull(buffer4);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = buffer0.readUtf8CodePoint();
      assertEquals(0, int1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(int1 == int0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(4685L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer5);
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertEquals(4685L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      
      OutputStream outputStream0 = buffer5.outputStream();
      assertNotNull(outputStream0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertEquals(4685L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4685L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Segment segment0 = buffer5.writableSegment(2);
      assertNotNull(segment0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertEquals(4685L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4685L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer0);
      assertEquals(4685L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(4685L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertEquals(4685L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer6 = buffer2.writeTo(outputStream0);
      assertNotNull(buffer6);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer5);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer6);
      assertSame(buffer5, buffer6);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertEquals(4685L, buffer0.size());
      assertEquals(3506L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer6.exhausted());
      assertEquals(3506L, buffer6.completeSegmentByteCount());
      assertEquals(4685L, buffer6.size());
      assertFalse(buffer2.exhausted());
      assertEquals(4685L, buffer2.size());
      assertEquals(3506L, buffer2.completeSegmentByteCount());
      assertEquals(4685L, buffer5.size());
      assertEquals(3506L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer7 = new Buffer();
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer1));
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertTrue(buffer7.exhausted());
      assertEquals(0L, buffer7.size());
      
      Buffer buffer8 = buffer5.writeShort((-1));
      assertNotNull(buffer8);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer8.equals((Object)buffer3));
      assertFalse(buffer8.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer7));
      assertFalse(buffer5.equals((Object)buffer4));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer8, buffer2);
      assertSame(buffer8, buffer0);
      assertNotSame(buffer8, buffer3);
      assertSame(buffer8, buffer1);
      assertSame(buffer8, buffer5);
      assertNotSame(buffer8, buffer7);
      assertSame(buffer8, buffer6);
      assertNotSame(buffer8, buffer4);
      assertSame(buffer5, buffer6);
      assertSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer7);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer8);
      assertEquals(4687L, buffer0.size());
      assertEquals(3506L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3506L, buffer8.completeSegmentByteCount());
      assertEquals(4687L, buffer8.size());
      assertFalse(buffer8.exhausted());
      assertEquals(4687L, buffer5.size());
      assertEquals(3506L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      String string0 = buffer0.readString(9L, charset0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer4));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertEquals(3497L, buffer0.completeSegmentByteCount());
      assertEquals(4678L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer9 = new Buffer();
      assertNotNull(buffer9);
      assertFalse(buffer9.equals((Object)buffer1));
      assertFalse(buffer9.equals((Object)buffer3));
      assertFalse(buffer9.equals((Object)buffer5));
      assertFalse(buffer9.equals((Object)buffer0));
      assertTrue(buffer9.equals((Object)buffer7));
      assertFalse(buffer9.equals((Object)buffer6));
      assertFalse(buffer9.equals((Object)buffer2));
      assertFalse(buffer9.equals((Object)buffer4));
      assertFalse(buffer9.equals((Object)buffer8));
      assertTrue(buffer9.exhausted());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertEquals(0L, buffer9.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor2);
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      
      long long1 = buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      assertEquals(3497L, long1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer9);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertEquals(3497L, buffer0.completeSegmentByteCount());
      assertEquals(4678L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer9));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(3497L, buffer0.completeSegmentByteCount());
      assertEquals(4678L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      // Undeclared exception!
      try { 
        buffer9.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      assertNotNull(inflaterSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, inflater0.getRemaining());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(48L);
      assertNotNull(pipe0);
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      HashingSink hashingSink2 = HashingSink.sha1(hashingSink1);
      assertNotNull(hashingSink2);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertNotNull(outputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(19L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.writeIntLe(2146880422);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertEquals(23L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer buffer3 = pipe0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      
      ByteString byteString0 = hashingSink1.hash();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertEquals(23L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      long long0 = buffer3.indexOfElement(byteString0, 7L);
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertEquals(23L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(64, byteString0.size());
      
      byteString0.write(outputStream0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(87L, buffer0.size());
      assertEquals(87L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[13];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(13, options0.size());
      
      Buffer buffer4 = (Buffer)buffer0.write((Source) buffer2, (-1L));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(87L, buffer0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(87L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(87L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-100);
      // Undeclared exception!
      try { 
        buffer4.writableSegment((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer2 = realBufferedSource0.buffer.writeShort((-1));
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer3 = buffer0.writeDecimalLong(1000000L);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(7L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      
      Buffer buffer4 = realBufferedSink0.buffer.writeUtf8CodePoint((-1));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(1L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(100000000000L);
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeByte(234);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      boolean boolean0 = buffer1.exhausted();
      assertFalse(boolean0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      Buffer buffer2 = buffer0.writeByte(234);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      
      Buffer buffer3 = buffer2.writeInt((-2147025174));
      assertNotNull(buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(5L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      long long0 = 4L;
      long long1 = buffer1.indexOf(byteString0, 4L);
      assertEquals(4L, long1);
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, byteString0.size());
      
      Buffer buffer4 = realBufferedSource0.buffer();
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      
      Buffer buffer5 = buffer4.writeIntLe(50);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      assertFalse(buffer5.exhausted());
      assertEquals(4L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer4);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer5);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4L, buffer4.size());
      
      HashingSource hashingSource1 = HashingSource.hmacSha256(realBufferedSource0, byteString0);
      assertNotNull(hashingSource1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1, byteString0.size());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertEquals(5L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      short short0 = realBufferedSource1.readShort();
      assertEquals((short) (-5504), short0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer5.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(realBufferedSource0.buffer, byteString0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(32, byteString0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      HashingSource hashingSource1 = HashingSource.sha256(buffer0);
      assertNotNull(hashingSource1);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong((-1));
      assertNotNull(buffer1);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      
      HashingSource hashingSource2 = HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSource2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint(55296);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      
      Buffer buffer3 = buffer2.writeIntLe(55296);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertEquals(5L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(2L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      InputStream inputStream0 = buffer1.inputStream();
      assertNotNull(inputStream0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      
      try { 
        realBufferedSink0.buffer.readFrom(inputStream0, 1372L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      int int0 = 110;
      Buffer buffer1 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      int int1 = buffer_UnsafeCursor0.next();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertTrue(inflater0.needsInput());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(1, inflater0.getAdler());
      
      HashingSink hashingSink0 = HashingSink.md5(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
      
      Pipe pipe0 = new Pipe(1);
      assertNotNull(pipe0);
      
      Buffer buffer2 = pipe0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      int int2 = buffer0.readUtf8CodePoint();
      assertEquals(110, int2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(1000000000000000L);
      assertNotNull(bufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Segment segment0 = buffer_UnsafeCursor0.buffer.head;
      assertNull(segment0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer.writeByte((-1));
      assertNotNull(buffer1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertTrue(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeShort((-1));
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      buffer_UnsafeCursor2.readWrite = true;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer3 = buffer0.writeDecimalLong(10000000000000L);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(14L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor2.buffer);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertTrue(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      
      long long0 = buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      assertEquals(4503599627370496L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Buffer buffer4 = (Buffer)realBufferedSink0.buffer.write((Source) buffer2, (-133L));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer4);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer3);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      Buffer buffer5 = new Buffer();
      assertNotNull(buffer5);
      assertTrue(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer0));
      assertEquals(0L, buffer5.size());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      
      short short0 = buffer2.readShort();
      assertEquals((short) (-1), short0);
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer5));
      assertFalse(buffer2.equals((Object)buffer4));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer4);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      
      Buffer buffer6 = realBufferedSource0.buffer.writeDecimalLong(10000000L);
      assertNotNull(buffer6);
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer3));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer6, buffer0);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer3);
      assertSame(buffer6, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer6.exhausted());
      assertEquals(9L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeDecimalLong((-922337203685477580L));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      assertNotNull(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Pipe pipe0 = new Pipe(48L);
      assertNotNull(pipe0);
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertNotNull(hashingSink1);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      HashingSink hashingSink2 = HashingSink.sha1(hashingSink1);
      assertNotNull(hashingSink2);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink2, hashingSink0);
      assertNotSame(hashingSink2, hashingSink1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertNotNull(outputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(19L, buffer0.size());
      assertEquals(19L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer0.writeIntLe(2146880422);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(23L, buffer2.size());
      
      InputStream inputStream0 = buffer0.inputStream();
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer3 = pipe0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSink1.hash();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(23L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      long long0 = buffer3.indexOfElement(byteString0, 7L);
      assertEquals((-1L), long0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(23L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(64, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[13];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Buffer buffer4 = (Buffer)buffer0.write((Source) buffer2, (-1L));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer4);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(23L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(23L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(23L, buffer2.size());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-100);
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer2.head = segment0;
      assertEquals(23L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(23L, buffer2.size());
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)27, 102);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-100), (byte)0, (byte)0, (byte)27}, byteArray0);
      assertEquals((-22), byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-100), (byte)0, (byte)0, (byte)27}, byteArray0);
      assertEquals((-22), byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        buffer4.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(127);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(127);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(1, buffer_UnsafeCursor0.end);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals(1L, long0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesRead());
      assertTrue(inflater0.needsInput());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(0, inflater0.getTotalIn());
      assertEquals(1, inflater0.getAdler());
      assertFalse(inflater0.needsDictionary());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long0 = buffer_UnsafeCursor0.buffer.writeAll(buffer0);
      assertEquals(0L, long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(4672L);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4672L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt((-1));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4676L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4676L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer2 = buffer0.writeLongLe((-1L));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4684L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4684L, buffer2.size());
      
      int int0 = buffer2.readUtf8CodePoint();
      assertEquals(0, int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4683L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4683L, buffer2.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4683L, buffer0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer2.size = 4672L;
      assertEquals(4672L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-11L), buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals((-11L), buffer2.completeSegmentByteCount());
      assertEquals(4672L, buffer2.size());
      
      int int1 = buffer0.readUtf8CodePoint();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(4671L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-11L), buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString(101L);
      assertNotNull(byteString0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(101, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      buffer2.clear();
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer buffer4 = realBufferedSource0.buffer.writeShort((-1));
      assertNotNull(buffer4);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(4570L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(4572L, buffer4.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long2 = buffer2.completeSegmentByteCount();
      assertEquals(0L, long2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer4));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      
      Buffer buffer1 = realBufferedSource0.buffer.writeShortLe(3135);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean2 = realBufferedSource0.buffer.rangeEquals(1L, byteString0);
      assertTrue(boolean2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint(110);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      int int0 = buffer0.selectPrefix(options0);
      assertEquals((-1), int0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, options0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(127);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(127);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      buffer_UnsafeCursor0.offset = 997L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=997 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4674L);
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(4674L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = buffer1.writeInt((-1));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(4678L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4678L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4678L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer1.writeLongLe((-1L));
      assertNotNull(buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4686L, buffer0.size());
      assertEquals(4686L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(4686L, buffer3.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer4);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertFalse(buffer4.exhausted());
      assertEquals(4686L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      
      Buffer buffer5 = buffer4.writeShortLe(2145338309);
      assertNotNull(buffer5);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4688L, buffer0.size());
      assertEquals(4688L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(4688L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer6 = buffer5.writeLong((-1058L));
      assertNotNull(buffer6);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer6);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertSame(buffer5, buffer0);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer6);
      assertSame(buffer5, buffer2);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer5);
      assertSame(buffer6, buffer0);
      assertSame(buffer6, buffer3);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(4696L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(4696L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(4696L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertFalse(buffer6.exhausted());
      assertEquals(4696L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer7 = buffer1.clone();
      assertNotNull(buffer7);
      assertTrue(buffer7.equals((Object)buffer1));
      assertTrue(buffer7.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer3));
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(4696L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4696L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer7.exhausted());
      assertEquals(4696L, buffer7.completeSegmentByteCount());
      assertEquals(4696L, buffer7.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      assertNotNull(hashingSink0);
      assertTrue(buffer1.equals((Object)buffer7));
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer5);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer6);
      assertSame(buffer1, buffer5);
      assertNotSame(buffer1, buffer7);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(4696L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4696L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      hashingSink0.hash();
      buffer3.readByte();
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      buffer_UnsafeCursor0.end = 2145338309;
      ByteString byteString1 = new ByteString((byte[]) null);
      buffer3.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer6);
      buffer_UnsafeCursor0.buffer.clear();
      Buffer buffer8 = new Buffer();
      buffer3.writeShort(2145338309);
      Buffer buffer9 = new Buffer();
      buffer7.completeSegmentByteCount();
      buffer0.readByte();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte(86);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint((-1));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertNotNull(realBufferedSink0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = realBufferedSink0.buffer.writeDecimalLong((-1397L));
      assertNotNull(buffer3);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Deflater deflater0 = new Deflater();
      assertNotNull(deflater0);
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      
      DeflaterSink deflaterSink0 = new DeflaterSink(buffer0, deflater0);
      assertNotNull(deflaterSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, deflater0.getAdler());
      assertTrue(deflater0.needsInput());
      assertEquals(0, deflater0.getTotalOut());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(0L, deflater0.getBytesWritten());
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer4 = buffer2.writeDecimalLong(1000000000000L);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertEquals(14L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(14L, buffer4.size());
      assertFalse(buffer4.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Buffer buffer5 = buffer0.writeString("8%=", charset0);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertSame(buffer5, buffer0);
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(17L, buffer5.size());
      
      Buffer buffer6 = realBufferedSink2.buffer();
      assertNotNull(buffer6);
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer0));
      assertFalse(buffer6.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer5);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.size());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer7 = new Buffer();
      assertNotNull(buffer7);
      assertFalse(buffer7.equals((Object)buffer3));
      assertFalse(buffer7.equals((Object)buffer5));
      assertFalse(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer2));
      assertTrue(buffer7.equals((Object)buffer6));
      assertFalse(buffer7.equals((Object)buffer1));
      assertFalse(buffer7.equals((Object)buffer4));
      assertEquals(0L, buffer7.size());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertTrue(buffer7.exhausted());
      
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeByte(86);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      Segment segment0 = buffer1.writableSegment(244);
      assertNotNull(segment0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[text=V]", string0);
      assertNotNull(string0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      
      long long0 = hashingSource0.read(buffer2, 16711680L);
      assertEquals((-1L), long0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString2 = hashingSource0.hash();
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString2.size());
      
      ByteString byteString3 = byteString2.hmacSha512(byteString0);
      assertNotNull(byteString3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString2.size());
      assertEquals(64, byteString3.size());
      
      ByteString byteString4 = byteString2.md5();
      assertNotNull(byteString4);
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString1));
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString4);
      assertEquals(16, byteString4.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString2.size());
      
      byteString0.write(realBufferedSource0.buffer);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOf(byteString2);
      assertEquals((-1L), long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(long1 == long0);
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString4));
      assertTrue(byteString2.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString4);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString2.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      assertNotNull(realBufferedSink1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      long long2 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Pipe pipe0 = new Pipe(21L);
      assertNotNull(pipe0);
      
      Buffer buffer3 = pipe0.buffer;
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      assertNotNull(realBufferedSink2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer4 = realBufferedSink2.buffer();
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      
      InputStream inputStream0 = buffer_UnsafeCursor0.buffer.inputStream();
      assertNotNull(inputStream0);
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer3));
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer5 = realBufferedSink1.buffer;
      assertNotNull(buffer5);
      assertTrue(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer4));
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((Buffer) null, (long) 86);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeByte(86);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      assertNotNull(hashingSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = hashingSource0.read(buffer2, 16711680L);
      assertEquals((-1L), long0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotNull(byteString1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      
      ByteString byteString2 = byteString1.hmacSha512(byteString0);
      assertNotNull(byteString2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals(64, byteString2.size());
      
      ByteString byteString3 = byteString1.md5();
      assertNotNull(byteString3);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(32, byteString1.size());
      assertEquals(16, byteString3.size());
      
      buffer1.skip((-189L));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      byteString0.write(realBufferedSource0.buffer);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOf(byteString1);
      assertEquals((-1L), long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(32, byteString1.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long2 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Buffer buffer3 = new Buffer();
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      
      boolean boolean2 = buffer3.rangeEquals((long) 86, byteString2, (-1), 1073);
      assertFalse(boolean2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals(64, byteString2.size());
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertEquals(1L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      
      int int0 = byteString3.indexOf(byteString2);
      assertEquals((-1), int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals(64, byteString2.size());
      assertEquals(16, byteString3.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.indexOf((byte)107, (long) (-1), (long) 1073);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=1073
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(100000000000000L);
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(87);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeInt(1060);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8196L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8196L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertEquals(8196L, buffer3.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Buffer buffer4 = buffer3.writeLongLe((-2510L));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8204L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8204L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8204L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertEquals(8204L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(8192L, buffer4.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      int int0 = buffer3.readUtf8CodePoint();
      assertEquals(87, int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(8203L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertEquals(8203L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertEquals(8203L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(8191L, buffer3.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(8203L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertEquals(8203L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      ByteString byteString0 = realBufferedSource0.readByteString(10L);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer3.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = buffer0.writeByte(86);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      long long0 = buffer2.writeAll(buffer_UnsafeCursor0.buffer);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(0L, long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(long1 == long0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer3 = buffer0.writeLongLe((-2510L));
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8200L, buffer0.size());
      assertEquals(8200L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(0, int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8199L, buffer0.size());
      assertEquals(8199L, buffer1.size());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8199L, buffer0.size());
      assertEquals(8199L, buffer1.size());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int1 = buffer1.readUtf8CodePoint();
      assertEquals(0, int1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(int1 == int0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertEquals(8190L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8198L, buffer0.size());
      assertEquals(8198L, buffer1.size());
      assertEquals(8190L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      
      ByteString byteString0 = realBufferedSource0.readByteString(10L);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((-1968526676));
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertEquals(20, byteString1.size());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(4, options0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      String string0 = buffer1.readString((long) 0, charset0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      
      String string1 = buffer2.readString(charset1);
      assertNotNull(string1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(charset1, charset0);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      
      buffer1.flush();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(0L, long0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      short short0 = realBufferedSource0.readShortLe();
      assertEquals((short)0, short0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeInt(1066);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = buffer2.readUtf8CodePoint();
      assertEquals(0, int0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(3L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      try { 
        buffer0.readUtf8LineStrict((long) (short)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=00042a\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(87);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      assertNotNull(hashingSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      ByteString byteString0 = hashingSource0.hash();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(hashingSink0, byteString0);
      assertNotNull(hashingSink1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString1 = hashingSink1.hash();
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean2 = buffer2.rangeEquals(32L, byteString1);
      assertFalse(boolean2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      HashingSink hashingSink2 = HashingSink.md5(buffer0);
      assertNotNull(hashingSink2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer_UnsafeCursor1.buffer.writeHexadecimalUnsignedLong((-1));
      assertNotNull(buffer3);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer0.exhausted());
      assertEquals(8208L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8208L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8208L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString2 = buffer0.hmacSha1(byteString1);
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertFalse(buffer0.exhausted());
      assertEquals(8208L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString2.size());
      assertEquals(8208L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(0, options0.size());
      
      int int0 = buffer_UnsafeCursor1.buffer.selectPrefix(options0);
      assertEquals((-1), int0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer0.exhausted());
      assertEquals(8208L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8208L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0, options0.size());
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      byteString0.utf8 = "";
      assertFalse(buffer0.exhausted());
      assertEquals(8208L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      
      InputStream inputStream0 = buffer3.inputStream();
      assertNotNull(inputStream0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer0.exhausted());
      assertEquals(8208L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8208L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8208L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer3.close();
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer0.exhausted());
      assertEquals(8208L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8208L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8208L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      String string0 = byteString1.base64Url();
      assertEquals("lQcaAkSY7HjUn5mcLWnuA60nd8A=", string0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertFalse(buffer0.exhausted());
      assertEquals(8208L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8208L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals(20, byteString1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 57350;
      Buffer buffer2 = buffer0.writeUtf8CodePoint(57350);
      assertNotNull(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) 57350);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=57350
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!%Rd%lj|/*{~2hFQT#j");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString((String) null, (-16), (-2147483646), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = buffer0.writeByte(86);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      long long0 = buffer2.writeAll(buffer_UnsafeCursor0.buffer);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(0L, long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeInt(1066);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8196L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8196L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertEquals(8196L, buffer3.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer4 = buffer1.writeLong(8L);
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer2));
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer1);
      assertEquals(8204L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8204L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8204L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(8192L, buffer4.completeSegmentByteCount());
      
      Buffer buffer5 = buffer0.clone();
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer5.equals((Object)buffer2));
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertEquals(8204L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8204L, buffer5.completeSegmentByteCount());
      assertEquals(8204L, buffer5.size());
      assertFalse(buffer5.exhausted());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertEquals(8204L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      
      hashingSink0.flush();
      hashingSink0.hash();
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1066);
      ByteString byteString1 = new ByteString((byte[]) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe();
      GzipSink gzipSink0 = new GzipSink(buffer4);
      Deflater deflater0 = gzipSink0.deflater();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer_UnsafeCursor0.buffer, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      buffer3.clear();
      Buffer buffer6 = new Buffer();
      buffer_UnsafeCursor1.buffer.writeShort((-1));
      buffer6.sha1();
      buffer_UnsafeCursor1.buffer.completeSegmentByteCount();
      Buffer buffer7 = new Buffer();
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer8 = pipe0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x56
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(112);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(112);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      buffer_UnsafeCursor1.buffer.head = segment0;
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer0);
      assertTrue(boolean0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteString byteString0 = buffer0.snapshot();
      assertNotNull(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      byte byte0 = (byte)88;
      long long0 = buffer0.indexOf((byte)9);
      assertEquals((-1L), long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y6Ex-");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(100000L);
      assertNotNull(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      
      MockFile mockFile0 = new MockFile("", "Y6Ex-");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Y6Ex-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Y6Ex-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      MockFile mockFile1 = new MockFile(mockFile0, "Y6Ex-");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Y6Ex-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Y6Ex-", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.canWrite());
      assertEquals("/Y6Ex-", mockFile1.getParent());
      assertEquals("/Y6Ex-/Y6Ex-", mockFile1.toString());
      assertEquals(0L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("Y6Ex-", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(87);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.buffer();
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8192L, buffer3.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.sha1();
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 18, 53);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-18), byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-18), byteArrayInputStream0.available());
      
      Buffer buffer4 = realBufferedSource0.buffer.buffer();
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      
      ByteString byteString1 = realBufferedSource0.buffer.sha1();
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteString1, byteString0);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString1);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteString1, byteString0);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      
      ByteString byteString2 = hashingSink0.hash();
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString2.size());
      assertEquals(20, byteString1.size());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Buffer buffer5 = buffer2.writeLongLe(18);
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer3);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(8L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      boolean boolean3 = buffer0.rangeEquals(2894L, byteString0);
      assertFalse(boolean3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      long long1 = buffer5.indexOf((byte)56);
      assertEquals((-1L), long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(long1 == long0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer3);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer5.exhausted());
      assertEquals(8L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer5));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer4);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(127);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(127);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(1, int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor0.end);
      
      Inflater inflater0 = new Inflater();
      assertNotNull(inflater0);
      assertEquals(0L, inflater0.getBytesRead());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getRemaining());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = buffer0.indexOf((byte)88);
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      buffer_UnsafeCursor0.readWrite = true;
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHA-512");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      buffer_UnsafeCursor1.readWrite = false;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      
      Buffer buffer2 = buffer_UnsafeCursor1.buffer.readFrom((InputStream) pipedInputStream0, 0L);
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(1, buffer_UnsafeCursor1.end);
      assertEquals(0L, buffer_UnsafeCursor1.offset);
      assertEquals(0, buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      
      int int1 = buffer_UnsafeCursor0.seek(0);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0, buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(1, buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertNotNull(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o_vm znPr(q");
      assertFalse(boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(4676L);
      assertEquals(0L, long0);
      assertFalse(buffer0.exhausted());
      assertEquals(4676L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer0.writeInt((-1));
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(4680L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4680L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeLongLe((-1L));
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4688L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4688L, buffer2.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4688L, buffer3.size());
      assertFalse(buffer3.exhausted());
      
      Buffer buffer4 = buffer3.writeShortLe((-1));
      assertNotNull(buffer4);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4690L, buffer0.size());
      assertEquals(4690L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(4690L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer5 = buffer4.writeLong(2);
      assertNotNull(buffer5);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer3, buffer5);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertSame(buffer3, buffer0);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer5);
      assertSame(buffer4, buffer3);
      assertSame(buffer5, buffer2);
      assertSame(buffer5, buffer3);
      assertSame(buffer5, buffer1);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(4698L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4698L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(4698L, buffer4.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(4698L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer6 = buffer0.writeLongLe(2);
      assertNotNull(buffer6);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer6, buffer5);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer1);
      assertSame(buffer6, buffer3);
      assertSame(buffer6, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4706L, buffer0.size());
      assertEquals(4706L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertFalse(buffer6.exhausted());
      
      Buffer buffer7 = buffer0.clone();
      assertNotNull(buffer7);
      assertTrue(buffer7.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer3));
      assertTrue(buffer7.equals((Object)buffer1));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer0);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4706L, buffer0.size());
      assertEquals(4706L, buffer7.size());
      assertFalse(buffer7.exhausted());
      assertEquals(4706L, buffer7.completeSegmentByteCount());
      
      Buffer buffer8 = buffer6.writeShort(2);
      assertNotNull(buffer8);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer6.equals((Object)buffer7));
      assertFalse(buffer8.equals((Object)buffer7));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer6, buffer5);
      assertSame(buffer6, buffer4);
      assertSame(buffer6, buffer2);
      assertSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer7);
      assertSame(buffer6, buffer3);
      assertSame(buffer6, buffer8);
      assertSame(buffer6, buffer0);
      assertSame(buffer8, buffer5);
      assertSame(buffer8, buffer1);
      assertSame(buffer8, buffer2);
      assertSame(buffer8, buffer0);
      assertSame(buffer8, buffer4);
      assertNotSame(buffer8, buffer7);
      assertSame(buffer8, buffer3);
      assertSame(buffer8, buffer6);
      assertFalse(buffer0.exhausted());
      assertEquals(4708L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertEquals(4708L, buffer6.size());
      assertFalse(buffer6.exhausted());
      assertFalse(buffer8.exhausted());
      assertEquals(0L, buffer8.completeSegmentByteCount());
      assertEquals(4708L, buffer8.size());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer7));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertFalse(buffer0.exhausted());
      assertEquals(4708L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      assertEquals((byte)16, byte0);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      buffer_UnsafeCursor0.end = (int) (byte)16;
      assertFalse(buffer0.exhausted());
      assertEquals(4708L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      ByteString byteString2 = new ByteString((byte[]) null);
      assertNotNull(byteString2);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer0.exhausted());
      assertEquals(4708L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-420));
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer7));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertFalse(buffer0.exhausted());
      assertEquals(4708L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer9 = buffer2.writeShort(16);
      assertNotNull(buffer9);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer9.equals((Object)buffer7));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer9);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer2, buffer8);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer6);
      assertSame(buffer2, buffer9);
      assertSame(buffer9, buffer8);
      assertSame(buffer9, buffer1);
      assertSame(buffer9, buffer6);
      assertSame(buffer9, buffer2);
      assertSame(buffer9, buffer0);
      assertSame(buffer9, buffer4);
      assertSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer7);
      assertSame(buffer9, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(4710L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4710L, buffer2.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertEquals(4710L, buffer9.size());
      assertFalse(buffer9.exhausted());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      String string0 = buffer9.toString();
      assertEquals("[size=4710 hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\u2026]", string0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer2.equals((Object)buffer7));
      assertFalse(buffer9.equals((Object)buffer7));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer9);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(buffer2, buffer8);
      assertSame(buffer2, buffer5);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer7);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer6);
      assertSame(buffer2, buffer9);
      assertSame(buffer9, buffer8);
      assertSame(buffer9, buffer1);
      assertSame(buffer9, buffer6);
      assertSame(buffer9, buffer2);
      assertSame(buffer9, buffer0);
      assertSame(buffer9, buffer4);
      assertSame(buffer9, buffer5);
      assertNotSame(buffer9, buffer7);
      assertSame(buffer9, buffer3);
      assertFalse(buffer0.exhausted());
      assertEquals(4710L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4710L, buffer2.size());
      assertEquals(0L, buffer9.completeSegmentByteCount());
      assertEquals(4710L, buffer9.size());
      assertFalse(buffer9.exhausted());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long1 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long1);
      assertFalse(buffer0.equals((Object)buffer7));
      assertTrue(long1 == long0);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer9);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertFalse(buffer0.exhausted());
      assertEquals(4710L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long2 = buffer_UnsafeCursor0.resizeBuffer(16);
      assertEquals(4710L, long2);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer9);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long3 = realBufferedSink0.buffer.indexOf((byte)119);
      assertEquals((-1L), long3);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer9);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer7));
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer10 = realBufferedSource0.buffer();
      assertNotNull(buffer10);
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer2));
      assertFalse(buffer10.equals((Object)buffer5));
      assertFalse(buffer10.equals((Object)buffer8));
      assertFalse(buffer10.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer1));
      assertFalse(buffer10.equals((Object)buffer4));
      assertFalse(buffer10.equals((Object)buffer0));
      assertFalse(buffer10.equals((Object)buffer3));
      assertFalse(buffer10.equals((Object)buffer9));
      assertFalse(buffer10.equals((Object)buffer6));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer9);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer10);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer5);
      assertNotSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer1);
      assertNotSame(buffer10, buffer4);
      assertNotSame(buffer10, buffer0);
      assertNotSame(buffer10, buffer3);
      assertNotSame(buffer10, buffer9);
      assertNotSame(buffer10, buffer6);
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer10.size());
      assertTrue(buffer10.exhausted());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer11 = buffer10.copyTo((OutputStream) byteArrayOutputStream0);
      assertNotNull(buffer11);
      assertFalse(buffer0.equals((Object)buffer10));
      assertFalse(buffer0.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer2));
      assertFalse(buffer10.equals((Object)buffer5));
      assertFalse(buffer10.equals((Object)buffer8));
      assertFalse(buffer10.equals((Object)buffer7));
      assertFalse(buffer10.equals((Object)buffer1));
      assertFalse(buffer10.equals((Object)buffer4));
      assertFalse(buffer10.equals((Object)buffer0));
      assertFalse(buffer10.equals((Object)buffer3));
      assertFalse(buffer10.equals((Object)buffer9));
      assertFalse(buffer10.equals((Object)buffer6));
      assertFalse(buffer11.equals((Object)buffer3));
      assertFalse(buffer11.equals((Object)buffer8));
      assertFalse(buffer11.equals((Object)buffer0));
      assertFalse(buffer11.equals((Object)buffer1));
      assertFalse(buffer11.equals((Object)buffer4));
      assertFalse(buffer11.equals((Object)buffer7));
      assertFalse(buffer11.equals((Object)buffer5));
      assertFalse(buffer11.equals((Object)buffer9));
      assertFalse(buffer11.equals((Object)buffer2));
      assertFalse(buffer11.equals((Object)buffer6));
      assertSame(buffer0, buffer6);
      assertSame(buffer0, buffer9);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer8);
      assertNotSame(buffer0, buffer10);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer11);
      assertNotSame(buffer0, buffer7);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer5);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(buffer10, buffer11);
      assertNotSame(buffer10, buffer2);
      assertNotSame(buffer10, buffer5);
      assertNotSame(buffer10, buffer8);
      assertNotSame(buffer10, buffer7);
      assertNotSame(buffer10, buffer1);
      assertNotSame(buffer10, buffer4);
      assertNotSame(buffer10, buffer0);
      assertNotSame(buffer10, buffer3);
      assertNotSame(buffer10, buffer9);
      assertNotSame(buffer10, buffer6);
      assertNotSame(buffer11, buffer3);
      assertNotSame(buffer11, buffer8);
      assertNotSame(buffer11, buffer0);
      assertNotSame(buffer11, buffer1);
      assertNotSame(buffer11, buffer4);
      assertNotSame(buffer11, buffer7);
      assertSame(buffer11, buffer10);
      assertNotSame(buffer11, buffer5);
      assertNotSame(buffer11, buffer9);
      assertNotSame(buffer11, buffer2);
      assertNotSame(buffer11, buffer6);
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, buffer10.size());
      assertTrue(buffer10.exhausted());
      assertEquals(0L, buffer10.completeSegmentByteCount());
      assertTrue(buffer11.exhausted());
      assertEquals(0L, buffer11.completeSegmentByteCount());
      assertEquals(0L, buffer11.size());
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer7.readFully(realBufferedSink0.buffer, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4706 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8("}FUaJS|Xm]!=xA'oZ");
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer_UnsafeCursor0.buffer);
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer_UnsafeCursor0.buffer.readUnsafe();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      ByteString byteString0 = buffer0.sha256();
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(32, byteString0.size());
      
      long long0 = buffer1.readLong();
      assertEquals(9026996379457911896L, long0);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer1, buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.snapshot();
      assertNotNull(byteString1);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals(9, byteString1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      ByteString byteString2 = buffer_UnsafeCursor0.buffer.sha1();
      assertNotNull(byteString2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(byteString2, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals(20, byteString2.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer3.exhausted());
      assertEquals(9L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer3.readUnsafe();
      assertNotNull(buffer_UnsafeCursor2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(9L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor2.readWrite);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      assertNotNull(options0);
      assertEquals(3, options0.size());
      
      int int0 = buffer_UnsafeCursor1.buffer.selectPrefix(options0);
      assertEquals(0, int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor2));
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor2);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals(3, options0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertNotNull(buffer4);
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      
      buffer4.skip((-1L));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      buffer_UnsafeCursor0.buffer.close();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      byte[] byteArray0 = buffer0.readByteArray((long) 0);
      assertNotNull(byteArray0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer4));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(86);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer2.writeAll(buffer_UnsafeCursor0.buffer);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(0L, long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      short short0 = realBufferedSource0.readShortLe();
      assertEquals((short)86, short0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertNotNull(buffer3);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertEquals(8191L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(8191L, buffer3.completeSegmentByteCount());
      
      Buffer buffer4 = buffer3.writeLongLe((-1));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(8199L, buffer3.size());
      assertEquals(8191L, buffer3.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(8199L, buffer4.size());
      assertEquals(8191L, buffer4.completeSegmentByteCount());
      
      int int0 = buffer4.readUtf8CodePoint();
      assertEquals(0, int0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(8198L, buffer3.size());
      assertEquals(8190L, buffer3.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(8198L, buffer4.size());
      assertEquals(8190L, buffer4.completeSegmentByteCount());
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer4);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(8198L, buffer3.size());
      assertEquals(8190L, buffer3.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(8198L, buffer4.size());
      assertEquals(8190L, buffer4.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)14, (-1L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=8198 fromIndex=-1 toIndex=1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(87);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeInt(1060);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8196L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8196L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertEquals(8196L, buffer3.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Buffer buffer4 = buffer3.writeLongLe((-2510L));
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertSame(buffer4, buffer1);
      assertEquals(8204L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8204L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8204L, buffer3.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertEquals(8204L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(8192L, buffer4.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      int int0 = buffer3.readUtf8CodePoint();
      assertEquals(87, int0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(8203L, buffer0.size());
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertEquals(8203L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(8203L, buffer3.size());
      assertEquals(8191L, buffer3.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(8203L, buffer0.size());
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertEquals(8203L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      ByteString byteString0 = realBufferedSource0.readByteString(10L);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(11L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((-1968526676));
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(11L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(11L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer4);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertEquals(20, byteString1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(11L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString1;
      long long1 = realBufferedSource0.buffer.completeSegmentByteCount();
      assertEquals(8181L, long1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(long1 == long0);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long2 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      assertNotNull(realBufferedSource2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(buffer0.exhausted());
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(11L, buffer1.size());
      assertFalse(buffer3.exhausted());
      assertEquals(11L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int2 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      try { 
        realBufferedSource1.buffer.readUtf8LineStrict(945L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(87);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeInt(1060);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8196L, buffer0.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8196L, buffer1.size());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertEquals(8196L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertNotNull(list0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8196L, buffer0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x57
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeByte(87);
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer2 = realBufferedSource0.buffer;
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      
      boolean boolean1 = buffer_UnsafeCursor0.readWrite;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(8192L);
      assertEquals(1L, long0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals(8192L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.size());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeInt(1060);
      assertNotNull(buffer3);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8196L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(8192L, buffer1.completeSegmentByteCount());
      assertEquals(8196L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8192L, buffer3.completeSegmentByteCount());
      assertEquals(8196L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Buffer buffer4 = realBufferedSource0.buffer();
      assertNotNull(buffer4);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8196L, buffer0.size());
      assertEquals(8192L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      int int0 = buffer3.readUtf8CodePoint();
      assertEquals(87, int0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(8195L, buffer0.size());
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertEquals(8195L, buffer1.size());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8195L, buffer3.size());
      assertEquals(8191L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(8195L, buffer0.size());
      assertEquals(8191L, buffer0.completeSegmentByteCount());
      assertEquals(8195L, buffer1.size());
      assertEquals(8191L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int1 = buffer_UnsafeCursor0.end;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ByteString byteString0 = realBufferedSource0.readByteString(10L);
      assertNotNull(byteString0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer3);
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((-1968526676));
      assertNotNull(bufferedSink0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      HashingSink hashingSink0 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      assertNotNull(hashingSink0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(10, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString1 = hashingSink0.hash();
      assertNotNull(byteString1);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer2));
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(20, byteString1.size());
      assertEquals(3L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(10, byteString0.size());
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      Buffer buffer5 = buffer2.writeLongLe((-1));
      assertNotNull(buffer5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8181L, buffer2.completeSegmentByteCount());
      assertEquals(8190L, buffer2.size());
      assertEquals(8181L, buffer5.completeSegmentByteCount());
      assertEquals(8190L, buffer5.size());
      assertFalse(buffer5.exhausted());
      
      boolean boolean5 = realBufferedSource0.buffer.rangeEquals(1L, byteString0);
      assertTrue(boolean5);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(byteString0.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
      
      String string0 = byteString0.utf8();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      assertFalse(buffer0.equals((Object)buffer4));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer5));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10, byteString0.size());
  }
}
