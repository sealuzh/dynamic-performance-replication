/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:51:23 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777218);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@58f51dd6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(201);
      String string0 = null;
      Item item0 = classWriter0.newLong(201);
      // Undeclared exception!
      try { 
        classWriter0.newConst(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@6
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1958));
      Item item0 = classWriter0.newLong(3132L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classWriter0.getCommonSuperClass("java/lang/String", "java/lang/String");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(5034, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(557);
      classWriter0.newUTF8("vq,lY0q\"XOt6,P0#");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "/^";
      stringArray0[2] = "vq,lY0q\"XOt6,P0#";
      stringArray0[3] = "vq,lY0q\"XOt6,P0#";
      stringArray0[4] = "vq,lY0q\"XOt6,P0#";
      stringArray0[5] = "/^";
      classWriter0.visit(1, 557, "vq,lY0q\"XOt6,P0#", "vq,lY0q\"XOt6,P0#", "/^", stringArray0);
      classWriter0.newUTF8("Z");
      Item item0 = classWriter0.newLong(108L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      classWriter0.visitSource("j.iO(bL+e#/@01", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newInteger(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "RuntimeInvisibleAnnotations";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "+m;giYwj";
      stringArray0[5] = null;
      stringArray0[6] = "RuntimeInvisibleAnnotations";
      stringArray0[7] = "E$=mCjnx?3NLQgEV";
      // Undeclared exception!
      try { 
        classWriter0.visit((-2945), 2047, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2261));
      String string0 = "";
      boolean boolean0 = false;
      classWriter0.visitAnnotation("", false);
      Boolean.valueOf(false);
      Item[] itemArray0 = new Item[8];
      Item item0 = classWriter0.newLong((-2261));
      itemArray0[0] = item0;
      Item item1 = new Item(1);
      itemArray0[1] = item1;
      Item item2 = classWriter0.key3;
      itemArray0[2] = item2;
      Item item3 = classWriter0.key2;
      itemArray0[3] = item3;
      Item item4 = classWriter0.newMethodItem("Tx", "", "/hX4DIHBdd.?+D", true);
      itemArray0[4] = item4;
      Item item5 = new Item();
      itemArray0[5] = item5;
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, "The prefix must not be null", "/hX4DIHBdd.?+D", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(21);
      classWriter0.toByteArray();
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.newMethod("`sbl", "`sbl", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1465));
      int int0 = classWriter0.newMethod("System", "System", "System", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1305);
      classWriter0.newNameType("", "");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(mockHijrahDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@511b1a56
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("+>?Nv1pi", "+>?Nv1pi", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", 0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "+>?Nv1pi";
      stringArray0[1] = "+>?Nv1pi";
      stringArray0[2] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
      stringArray0[3] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
      stringArray0[4] = "+>?Nv1pi";
      stringArray0[5] = "+>?Nv1pi";
      stringArray0[6] = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
      classWriter0.visitMethod(1116, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "+>?Nv1pi", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", stringArray0);
      classWriter0.newLong(0L);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "+>?Nv1pi";
      stringArray1[1] = "";
      stringArray1[2] = "+>?Nv1pi";
      classWriter0.visitMethod((-2293), "+>?Nv1pi", "", "6Sm{_[?E;", stringArray1);
      int int0 = classWriter0.newUTF8("St5):z0f(");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      classWriter0.newDouble(Integer.MAX_VALUE);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 285212674);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1824);
      String string0 = "RuntimeVisibleAnnotations";
      Integer integer0 = new Integer(2);
      classWriter0.visitField(38, ">|", "", "RuntimeVisibleAnnotations", integer0);
      classWriter0.visitField(1824, "X+zt\">-Xw", "[W9xe!", "[W9xe!", "X+zt\">-Xw");
      classWriter0.addType("");
      classWriter0.visitSource("", "RuntimeVisibleAnnotations");
      classWriter0.addType("");
      String string1 = "m6~vbOQHf)x5 h%";
      String[] stringArray0 = null;
      classWriter0.visitMethod(1824, "m6~vbOQHf)x5 h%", "", "RuntimeVisibleAnnotations", (String[]) null);
      String string2 = "wheel.asm.ClassWriter";
      classWriter0.newUTF8("wheel.asm.ClassWriter");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "wheel.asm.ClassWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3967));
      Item item0 = new Item();
      Item item1 = classWriter0.newConstItem("[`dA.c?o<@gG{!4r");
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      byte[] byteArray0 = classWriter0.toByteArray();
      classWriter0.visitAnnotation("org.apache.commons.io.filefilter.EmptyFileFilter", true);
      String string0 = "\"/{K7K:A$6y6]]8";
      classWriter0.newUTF8("\"/{K7K:A$6y6]]8");
      String string1 = "";
      ClassReader classReader0 = new ClassReader(byteArray0, 2, 0);
      ClassWriter classWriter1 = null;
      try {
        classWriter1 = new ClassWriter(classReader0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3967));
      classWriter0.visitOuterClass("", (String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      classWriter0.visitOuterClass("!l\"-", "!l\"-", (String) null);
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(196);
      classWriter0.newDouble((-1286.84295));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0RK=KvoMWH";
      stringArray0[1] = "0RK=KvoMWH";
      stringArray0[2] = "0RK=KvoMWH";
      classWriter0.visitMethod(32, "0RK=KvoMWH", "0RK=KvoMWH", (String) null, stringArray0);
      int int0 = classWriter0.newMethod("0RK=KvoMWH", "!&Dk[[eV2+juG'B%\"", "!&Dk[[eV2+juG'B%\"", true);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter(39);
      int int0 = classWriter0.newField("I1qILSCil:", "I1qILSCil:", "I1qILSCil:");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(187);
      classWriter0.newField("", "", "");
      Item item0 = classWriter0.newClassItem("w^z#5.fA2!jOnw]wd@");
      // Undeclared exception!
      try { 
        classWriter0.visitField(4, "", "\f)\"|9vL4g", "Deprecated", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@b
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1776));
      classWriter0.toByteArray();
      int int0 = classWriter0.addUninitializedType("/P", 1087);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1312);
      classWriter0.addUninitializedType("JSR/RET are not supported with computeFrames option", 1312);
      classWriter0.addUninitializedType("JSR/RET are not supported with computeFrames option", 0);
      classWriter0.addType(",9H?oXvj0=/y#D0");
      Item item0 = classWriter0.newDouble(3);
      // Undeclared exception!
      try { 
        classWriter0.newConst(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@9
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("3KqybN72:%I}DO", "3KqybN72:%I}DO", "A%Lzx1W", 0);
      classWriter0.newClass("");
      Boolean boolean0 = Boolean.valueOf(":{F}rDf)bVH\"Lp");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "", "3KqybN72:%I}DO", "", boolean0);
      Character character0 = new Character('x');
      Character.isSurrogate('x');
      Character.isIdeographic(5);
      Character.isIdeographic(0);
      Character.isBmpCodePoint(5);
      classWriter0.newConst(character0);
      classWriter0.visitAnnotation(".-RqV[s&3aPi", false);
      classWriter0.visitInnerClass("java/lang/Object", (String) null, "3KqybN72:%I}DO", 0);
      classWriter0.newDouble(5);
      classWriter0.newConst(":{F}rDf)bVH\"Lp");
      classWriter0.newNameType("", "qP");
      FieldVisitor fieldVisitor1 = classWriter0.visitField((-729), "", "Deprecated", (String) null, (Object) null);
      assertFalse(fieldVisitor1.equals((Object)fieldVisitor0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(37);
      Boolean boolean0 = new Boolean(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(196);
      classWriter0.newDouble((-1286.84295));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0RK=KvoMWH";
      stringArray0[1] = "0RK=KvoMWH";
      stringArray0[2] = "0RK=KvoMWH";
      Label label0 = new Label();
      label0.getFirst();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 2;
      intArray0[7] = 1;
      intArray0[8] = 32;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      classWriter0.visitSource("", (String) null);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "{rrnB!0~FfULquAu";
      stringArray1[1] = "0RK=KvoMWH";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(2, "0RK=KvoMWH", (String) null, "", stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      Item item0 = classWriter0.newFloat(561.51F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addUninitializedType("JSR/RET are not supported with computeFrames option", 0);
      classWriter0.addUninitializedType("JSR/RET are not supported with computeFrames option", 0);
      classWriter0.addType("JSR/RET are not supported with computeFrames option");
      classWriter0.newDouble(1.0);
      classWriter0.newConst(",9H?oXvj0=/y#D0");
      String string0 = "\\UtE6m";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass(",9H?oXvj0=/y#D0", "UtE6m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class ',9H?oXvj0=/y#D0.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Attribute attribute0 = new Attribute("");
      classWriter0.visitAttribute(attribute0);
      classWriter0.newMethodItem("", "", "Deprecated", false);
      String[] stringArray0 = new String[0];
      classWriter0.visit(0, 0, "Synthetic", "", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1824;
      ClassWriter classWriter0 = new ClassWriter(1824);
      classWriter0.newLong(1824);
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.newConst(boolean0);
      classWriter0.visitOuterClass("", "", (String) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, "", "java/lang/Throwable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addUninitializedType("The wildcard must not be null", 0);
      classWriter0.visitOuterClass("", (String) null, ",9H?oXvj0=/y#D0");
      classWriter0.visitInnerClass("JSR/RET are not supported with computeFrames option", ",9H?oXvj0=/y#D0", "JSR/RET are not supported with computeFrames option", 69);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newLong(2266L);
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.toByteArray();
      classWriter0.visit(0, 15, "", "<<#$", "", (String[]) null);
      int int0 = classWriter0.newClass("int");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 13);
      int int0 = classWriter0.addUninitializedType("org.apache.commons.io.filefilter.EmptyFileFilter", 1082);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Byte byte0 = new Byte((byte) (-60));
      classWriter0.visitField(0, "JO_qS[(_A8iXQ", "##&", "The wildcard must not be null", "##&");
      classWriter0.visitField((byte) (-60), "JO_qS[(_A8iXQ", "##&", "##&", "##&");
      classWriter0.visitInnerClass("JO_qS[(_A8iXQ", "WM$@R?3^vv.", "", 340);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newDouble(0.0);
      Item item0 = classWriter0.newLong(0);
      classWriter0.toByteArray();
      classWriter0.newLong(0);
      Item item1 = classWriter0.newClassItem("");
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(0);
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1375));
      classWriter0.newInteger((-1375));
      classWriter0.newInteger((-1375));
      classWriter0.newDouble((-1375));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)20;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (-29), 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2362));
      classWriter0.visitSource("!P .", "!P .");
      Item item0 = classWriter0.newDouble((-2362));
      Item item1 = classWriter0.newFieldItem("!P .", "!P .", "!P .");
      Item item2 = classWriter0.newDouble((-2362));
      assertNotNull(item2);
      assertNotSame(item2, item1);
      assertSame(item2, item0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2362));
      classWriter0.visitSource("!P .", "!P .");
      classWriter0.newDouble((-2362));
      Item item0 = classWriter0.newFieldItem("!P .", "!P .", "!P .");
      int int0 = classWriter0.newNameType("!P .", "!P .");
      assertEquals(5, int0);
      
      Item item1 = classWriter0.newClassItem(")q");
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-13));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "Synthetic";
      stringArray0[3] = null;
      stringArray0[4] = "EnclosingMethod";
      // Undeclared exception!
      try { 
        classWriter0.visit(623, 623, "Synthetic", (String) null, "EnclosingMethod", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Type type0 = Type.getType(class0);
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      classWriter0.newNameType("@,O?/ZzGi5P", "@,O?/ZzGi5P");
      Item item0 = classWriter0.newDouble(5);
      classWriter0.index = 166;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classWriter0.threshold = 5;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l8JR<");
      Type type0 = Type.FLOAT_TYPE;
      classWriter0.newConstItem(type0);
      type0.getDescriptor();
      classWriter0.newUTF8("@,O?/ZzGi5P");
      Item item1 = classWriter0.newFloat(1029.95F);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(2);
      classWriter1.newFloat(0);
      Item item0 = classWriter1.newFloat(0);
      Item item1 = classWriter0.newInteger(5);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3967));
      classWriter0.visit((-3967), (-1520), "SourceFile", "'j:tEbU=}", (String) null, (String[]) null);
      classWriter0.toByteArray();
      classWriter0.newClassItem("lwh[cJ[(");
      // Undeclared exception!
      try { 
        classWriter0.visitField((-3967), (String) null, (String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-3967);
      ClassWriter classWriter0 = new ClassWriter((-3967));
      String string0 = "_\"0=";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_\"0=";
      stringArray0[1] = "_\"0=";
      classWriter0.visit((-3967), 1048575, "_\"0=", "_\"0=", "_\"0=", stringArray0);
      classWriter0.toByteArray();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(mockMinguoDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@634a319
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3967));
      classWriter0.invalidFrames = false;
      int int0 = classWriter0.newMethod("Sensitive", "Sensitive", "Sensitive", true);
      assertEquals(4, int0);
      
      int int1 = classWriter0.newMethod("Sensitive", "Sensitive", "Sensitive", true);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2422));
      classWriter0.getCommonSuperClass("java/lang/Object", "java/lang/Object");
      classWriter0.newFieldItem("java/lang/Object", "java/lang/Object", "java/lang/Object");
      classWriter0.newField("java/lang/Object", "java/lang/Object", "java/lang/Object");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "nkx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-106));
      classWriter0.getCommonSuperClass("java/lang/String", "java/lang/Object");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-106), (-106));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-106));
      classWriter0.getCommonSuperClass("java/lang/String", "java/lang/Object");
      Short short0 = new Short((short)8);
      classWriter0.newConstItem(short0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("E", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-106));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "java/lang/String");
      ClassWriter classWriter1 = new ClassWriter(15);
      // Undeclared exception!
      try { 
        classWriter1.getMergedType((-106), 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
