/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:17:18 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("update");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "is", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("X0Y58.S");
      DBSchema dBSchema0 = new DBSchema("X0Y58.S", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexupdate", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputText rowOutputText0 = new RowOutputText("create unique indexupdate", "j!YUlDm+aLL*og|", "j!YUlDm+aLL*og|", false, "j!YUlDm+aLL*og|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(23001, "###RowLocationToUpdate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("###ROWLOCATIONTOUPDATE", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("7Ca6T7r7.tRls", stringArray0, "l&]\"1Ix>Xe6Z8UoeHg", (String) null, stringArray0);
      assertEquals("left join l&]\"1Ix>Xe6Z8UoeHg as null on 7Ca6T7r7.tRls.null = null.null and 7Ca6T7r7.tRls.null = null.null and 7Ca6T7r7.tRls.null = null.null and 7Ca6T7r7.tRls.null = null.null and 7Ca6T7r7.tRls.null = null.null and 7Ca6T7r7.tRls.null = null.null and 7Ca6T7r7.tRls.null = null.null and 7Ca6T7r7.tRls.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.leftJoin("constraint", stringArray0, "getGroupedAggregateResultSet", " NULL", stringArray0);
      assertEquals("left join getGroupedAggregateResultSet as  NULL on constraint.null =  NULL.null and constraint.null =  NULL.null and constraint.null =  NULL.null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("R/SfB_/f", stringArray0, "rename", "S?-]>)[", stringArray0);
      assertEquals("rename as S?-]>)[ on R/SfB_/f.null = S?-]>)[.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>(630);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("execalter table!p^ur", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("alter indexcreate unique indexselect intoblob", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u+-F1?b27{s=");
      String[] stringArray0 = new String[6];
      stringArray0[5] = "u+-F1?b27{s=";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "u+-F1?b27{s=", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      assertEquals("CONSTRAINT u+-F1?b27{s= ", stringBuilder0.toString());
      
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("u+-F1?b27{s=", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create materialized view");
      boolean boolean1 = SQLUtil.isDDL("drop materialized viewselect intoblob");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("7T8 (K.M5q { aq1 [ v6");
      SQLUtil.isDDL("dwbC^0.Chv@X");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isQuery("|)G 'K3*zAcf.I~%c");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|)G 'K3*zAcf.I~%c", true, stringArray0);
      Locale locale0 = Locale.CANADA_FRENCH;
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"|)G 'K3*zAcf.I~%c\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("", true);
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("*,R]J&JCZp3Ob67");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      int int0 = (-358136900);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop materialized view;^fa'5b}8\"", false);
      assertEquals("drop materialized view ; ^ fa '5b}8\"'", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "hw+RUZg.[0\"uO+WA[`";
      SQLUtil.normalize("hw+RUZg.[0\"uO+WA[`", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
      
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.normalize("drop materialized view--", false);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.normalize(",%-YsBHSE", false);
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "/*";
      SQLUtil.normalize("/*", false);
      StringBuilder stringBuilder0 = null;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.normalize("//", false);
      VersionNumber versionNumber0 = VersionNumber.valueOf("/ /");
      assertNotNull(versionNumber0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("%jj0#0,C6Y*|", false);
      String string0 = "*g";
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("7T8(K.M5q{aq1[v6", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7T8(K.M5q{aq1[v6", (DBSchema) null);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "NEXTVAL", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("NEXTVAL", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("getGroupedAggregateResultSet", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "getGroupedAggregateResultSet";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBObject dBObject0 = null;
      SQLUtil.typeAndName((DBObject) null);
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("7Ca6T7r7.tRls");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select|)g 'k3*zacf.i~%c");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table select|)g 'k3*zacf.i~%c", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[5] = "k_";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "k_", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT k_ ", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "call");
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K%@Fk)aXv", (DBSchema) null);
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("execog;99wi]-_s7", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("updaterenameog;99wi]-_s7", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer("byuN#$$GWa");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 8);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      DBDataType dBDataType0 = DBDataType.getInstance(154, "updaterenameog;99wi]-_s7");
      assertEquals(154, dBDataType0.getJdbcType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT");
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECTIVITY(", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT SELECTIVITY( ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[4] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "$";
      DBSchema dBSchema0 = new DBSchema("$");
      DBPackage dBPackage0 = new DBPackage("$", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      String string1 = "n=b4MB!z|*ZHh";
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u+-F1?b27{s=");
      defaultDBTable0.getReferrers();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y)@NSPWa)]R2'p4+)R", defaultDBTable0, (-1160), "43Y23.U");
      assertFalse(defaultDBColumn0.isVersionColumn());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.normalize("", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append("., .) ===========, .PS,N}${7!WF, .");
      SQLUtil.addOptionalCondition("PS,N}${7!WF", stringBuilder1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(335544407);
      SQLUtil.addOptionalCondition(" WITH ADMIN OPTION", stringBuilder0);
      ErrorMessages errorMessages0 = new ErrorMessages();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create unique index");
      StringBuilder stringBuilder0 = new StringBuilder("create unique index");
      SQLUtil.addRequiredCondition("create unique index", stringBuilder0);
      assertEquals("create unique index and create unique index", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("S'q '~;'", stringBuilder0);
      int int0 = 1988;
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, "renamecannot instantiate class", (String) null, stringArray0);
      DBSchema dBSchema0 = new DBSchema(stringArray0[3]);
      assertNull(dBSchema0.getDoc());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertdele");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[5] = "k_";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "k_", true, stringArray0);
      dBUniqueConstraint0.addColumnName("k_");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , k_)", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("/*");
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.mutatesStructure("execalter table!p^ur");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("update");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.mutatesDataOrStructure("select intocreate materialized view");
      DBSchema dBSchema0 = new DBSchema("select intocreate materialized view");
      assertNull(dBSchema0.getDoc());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLUtil.mutatesDataOrStructure("drop index'");
      String string0 = "3l?JA";
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Character character0 = new Character('w');
      String string0 = SQLUtil.substituteMarkers("@{?~L:r2y(/Zr", "@{?~L:r2y(/Zr", character0);
      assertEquals("'w'", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBDataType dBDataType0 = DBDataType.getInstance(3686, "CLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K%@Fk)aXv", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(154, "updaterenameog;99wi]-_s7");
      Integer integer0 = new Integer(154);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updaterenameog;99wi]-_s7", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("updaterenameog;99wi]-_s7 UPDATERENAMEOG;99WI]-_S7(154,2) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)41, "select into5i{kic:7t;j");
      Integer integer0 = new Integer((byte)41);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBSchema dBSchema0 = new DBSchema("ZY0;u@f\t kclWwbR");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">!bPLB3eB}Yb1{gG&", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(630, "-)fWgo zY");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ZbQ*p3p. d", defaultDBTable0, dBDataType0);
      defaultDBColumn0.addUkConstraint((DBUniqueConstraint) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderColumnNames(dBColumnArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLUtil.substituteMarkers(">3)Z)3", ">3)Z)3", ">3)Z)3");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-1438074770);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("55p;rd", defaultDBTable0, (-1438074770), ">3)Z)3");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("55p;rd >3)Z)3 NULL", false, defaultDBTable0, "alter materialized viewo)xit@eb];ld");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error at the beginning 
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "VARCHAR () FOR BIT DATA";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      int int0 = 988;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("SCHEMA_NAME", defaultDBTable0, 988, "VARCHAR () FOR BIT DATA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "t\"(t-hhItAg-o6y~Dt6";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("t\"(t-hhItAg-o6y~Dt6", (DBTable) null, 77, "t\"(t-hhItAg-o6y~Dt6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: t\"(t-hhItAg-o6y~Dt6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Random.setNextRandom((-518107121));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setClob(int, Reader, long)");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("CVstAe~Q:QC1)", defaultDBTable0, (-518107121), "setClob(int, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Yb4LaDTjt+M", (DBSchema) null);
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop tablem3k~|:dwl?", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5I{kIC:7T;J", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("5I{kIC:7T;J", true, dBTable0, "Yb4LaDTjt+M");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.databene.jdbacl.model.DBCatalog");
      String[] stringArray0 = new String[6];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.innerJoin("create unique index", stringArray0, (String) null, "SELECT * FROM ", stringArray0);
      assertEquals("null as SELECT * FROM  on create unique index.null = SELECT * FROM .null and create unique index.null = SELECT * FROM .null and create unique index.null = SELECT * FROM .null and create unique index.null = SELECT * FROM .null and create unique index.null = SELECT * FROM .null and create unique index.null = SELECT * FROM .null", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u+-F1?b27{s=");
      defaultDBTable0.getReferrers();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y)@NSPWa)]R2'p4+)R", defaultDBTable0, (-1160), "43Y23.U");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "_g:hQ5aVkO1ce60;C", defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "SELECT * FROM ", "~bGBIy", stringArray0);
      assertEquals("left join SELECT * FROM  as ~bGBIy on ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("WMxarcn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "is", true, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("deleteblob", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , ) REFERENCES null(, , , )", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("wmxa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertdele");
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%yT lo,W2S3'5", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("insertdele", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(309, "insertdele");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insertdele", dBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("insertdele NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u+-F1?b27{s=");
      String[] stringArray0 = new String[6];
      stringArray0[5] = "u+-F1?b27{s=";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "u+-F1?b27{s=", false, stringArray0);
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y)@NSPWa)]R2'p4+)R", defaultDBTable0, (-1160), "43Y23.U");
      assertFalse(defaultDBColumn0.isVersionColumn());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesStructure("create unique indexselect intoblob");
      String string0 = "q2mG";
  }
}
