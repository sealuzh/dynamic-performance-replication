/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:05:43 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1842), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1842
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(651, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(651, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(Integer.MAX_VALUE, timeUnit1);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noTransform();
      cacheControl_Builder5.onlyIfCached();
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder4.minFresh(Integer.MAX_VALUE, timeUnit2);
      CacheControl.Builder cacheControl_Builder7 = cacheControl_Builder2.noTransform();
      assertSame(cacheControl_Builder7, cacheControl_Builder6);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.isPublic();
      cacheControl0.toString();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(43, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.minFresh(2863, timeUnit0);
      assertSame(cacheControl_Builder2, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("");
      headers_Builder0.removeAll("");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      CacheControl.parse(headers0);
      cacheControl0.noTransform();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder2.minFresh((-858), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -858
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_NETWORK.toString();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_CACHE.toString();
      int int0 = cacheControl0.maxStaleSeconds();
      int int1 = cacheControl0.maxAgeSeconds();
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.FORCE_NETWORK.headerValue = "name is empty";
      cacheControl0.isPublic();
      cacheControl0.toString();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(34, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxAge(0, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder4.build();
      cacheControl0.noTransform();
      assertTrue(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(0, cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      cacheControl_Builder1.noCache();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      cacheControl_Builder1.minFresh(0, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(0, timeUnit1);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder3);
      cacheControl0.headerValue = "";
      cacheControl0.FORCE_CACHE.toString();
      cacheControl_Builder3.noCache();
      cacheControl0.mustRevalidate();
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(boolean0);
      
      cacheControl_Builder1.maxStale(0, timeUnit1);
      cacheControl0.isPublic();
      CacheControl cacheControl1 = cacheControl_Builder1.build();
      assertEquals(0, cacheControl1.maxStaleSeconds());
      
      cacheControl0.isPublic();
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertTrue(cacheControl0.noTransform());
      assertEquals(0, int0);
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals(0, cacheControl0.minFreshSeconds());
      assertTrue(cacheControl0.noStore());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.headerValue = "7/3s2p&@2";
      boolean boolean0 = cacheControl0.isPrivate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      cacheControl0.minFreshSeconds();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String string0 = "Be;jexC'+{{/@e%_*";
      // Undeclared exception!
      try { 
        headers_Builder0.add("Be;jexC'+{{/@e%_*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: Be;jexC'+{{/@e%_*
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(991, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.maxStale(991, timeUnit1);
      CacheControl cacheControl0 = cacheControl_Builder4.build();
      cacheControl0.maxAgeSeconds();
      cacheControl0.toString();
      cacheControl0.minFreshSeconds();
      cacheControl0.FORCE_CACHE.headerValue = "public";
      cacheControl_Builder4.noTransform();
      cacheControl0.isPrivate();
      cacheControl_Builder4.build();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "public";
      stringArray0[1] = "no-store, max-age=991, max-stale=3567600, only-if-cached";
      stringArray0[2] = "public";
      stringArray0[3] = "public";
      stringArray0[4] = "public";
      stringArray0[5] = "public";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.minFresh(127, timeUnit0);
      assertSame(cacheControl_Builder6, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl0.headerValue = "3JS";
      cacheControl0.toString();
      cacheControl0.isPrivate();
      cacheControl0.FORCE_NETWORK.toString();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      cacheControl_Builder0.minFresh(336, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3JS";
      stringArray0[1] = "3JS";
      stringArray0[2] = "3JS";
      stringArray0[3] = "3JS";
      stringArray0[4] = "3JS";
      stringArray0[5] = "name is empty";
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(34, timeUnit2);
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl_Builder0.maxStale(336, timeUnit1);
      cacheControl0.noCache();
      int int0 = cacheControl1.maxAgeSeconds();
      assertEquals((-1), int0);
      
      cacheControl1.noCache();
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      
      cacheControl0.onlyIfCached();
      cacheControl_Builder1.noCache();
      cacheControl0.noCache();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.maxStaleSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(415, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(415, timeUnit1);
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.onlyIfCached();
      CacheControl cacheControl1 = cacheControl_Builder5.build();
      cacheControl1.toString();
      cacheControl_Builder4.noStore();
      cacheControl0.maxStaleSeconds();
      cacheControl_Builder0.noTransform();
      cacheControl1.noTransform();
      cacheControl1.noStore();
      cacheControl1.noStore();
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("Unexpected char %#04x at %d in header name: %s");
      Headers.Builder headers_Builder2 = headers_Builder1.removeAll("Unexpected char %#04x at %d in header name: %s");
      headers_Builder2.addLenient("Unexpected char %#04x at %d in header name: %s", "Unexpected char %#04x at %d in header name: %s");
      Headers headers0 = headers_Builder2.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl1.mustRevalidate();
      cacheControl1.sMaxAgeSeconds();
      cacheControl_Builder0.noCache();
      cacheControl1.toString();
      cacheControl1.noCache();
      cacheControl2.noTransform();
      cacheControl2.noCache();
      cacheControl1.maxAgeSeconds();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-4923), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -4923
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("pragma", "QX`");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("Unexpected char %#04x at %d in header name: %s");
      headers_Builder1.removeAll("only-if-cached");
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("only-if-cached", "#u<CR-3wX6n8(/fM6uG");
      Headers.Builder headers_Builder3 = headers_Builder2.addLenient("t\u00059l<oEmqLI|", "only-if-cached");
      headers_Builder1.addLenient("RpFPH+=6=HjmZW-", "3e|$GWs8>*D{b1b");
      Headers.Builder headers_Builder4 = headers_Builder3.addLenient("pragma", " |@c.c4`5zfIAss");
      Headers headers0 = headers_Builder4.build();
      CacheControl.parse(headers0);
      // Undeclared exception!
      try { 
        CacheControl.parse((Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.CacheControl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("Unexpected char %#04x at %d in header name: %s");
      headers_Builder1.removeAll("only-if-cached");
      Headers.Builder headers_Builder2 = new Headers.Builder();
      Headers.Builder headers_Builder3 = headers_Builder2.addLenient("Cache-Control", "Unexpected char %#04x at %d in header name: %s");
      headers_Builder2.addLenient("only-if-cached", "pragma");
      Headers headers0 = headers_Builder3.build();
      headers_Builder2.add("no-store", "public");
      CacheControl.parse(headers0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("pragma", "=hvMD2n$CcAoK");
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("only-if-cached");
      Headers.Builder headers_Builder2 = new Headers.Builder();
      Headers.Builder headers_Builder3 = headers_Builder1.addLenient("only-if-cached", "; charset=utf-8");
      headers_Builder3.addLenient("pragma", "; charset=utf-8");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.removeAll("\",1;6,=pYwb6Q(()Ha");
      headers_Builder0.addLenient("pragma", "\",1;6,=pYwb6Q(()Ha");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.isPublic();
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("pragma", "s-maxage=");
      Headers headers0 = headers_Builder1.build();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
  }
}
