/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:12:58 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2314;
      CompressedVector compressedVector0 = new CompressedVector(2314);
      int int1 = 2305;
      Vector.zero(2305);
      compressedVector0.setAll(2314);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector.fromBinary(byteArray0);
      String string0 = "Kn;19u}9X2YnaUj7D";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Kn;19u}9X2YnaUj7D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3774);
      compressedVector0.setAll(3774);
      Vector vector0 = compressedVector0.blankOfLength(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3774;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3774;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3774;
      doubleArray0[5] = (double) 3774;
      doubleArray0[6] = (double) 0;
      doubleArray0[3] = (double) 0;
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      doubleArray0[8] = (double) 3774;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      CompressedVector.zero(2807, 0);
      vector0.iterator();
      compressedVector1.set(0, 0.0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector1).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '9' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3774);
      compressedVector0.setAll(3774);
      compressedVector0.blankOfLength(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3774;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3774;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3774;
      doubleArray0[5] = (double) 3774;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 3774;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      CompressedVector.zero(2807, 0);
      compressedVector1.nonZeroIterator();
      compressedVector1.set(0, 0.0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2825);
      compressedVector0.shuffle();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.setAll((-1.0));
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2825).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(2825, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2840);
      compressedVector0.shuffle();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.setAll((-1.0));
      compressedVector0.get(10);
      compressedVector0.iterator();
      int int0 = 289;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(289, vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.zero(1, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 32.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1023.068297);
      doubleArray0[2] = 213.56851745;
      doubleArray0[3] = (-1464.61077206081);
      doubleArray0[4] = 835.9786939285628;
      doubleArray0[5] = (-1337.464);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1129.5946466134137);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = 1990;
      compressedVector0.infinityNorm();
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(1990);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '8' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 1.0;
      MockRandom mockRandom0 = new MockRandom(4577);
      mockRandom0.doubles((long) 4577);
      CompressedVector compressedVector0 = CompressedVector.random(4577, 1.0, (Random) mockRandom0);
      compressedVector0.toDenseVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 4577);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2433.07);
      doubleArray0[1] = (-6.538651350281);
      doubleArray0[2] = (-844.59086);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-29.90329);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      Vector vector0 = ooPlaceVectorsAddition0.apply((SparseVector) compressedVector1, (SparseVector) compressedVector0);
      compressedVector1.equals(vector0, (-2433.07));
      CompressedVector compressedVector2 = CompressedVector.zero(2486, 2486);
      assertFalse(compressedVector2.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-1442);
      org.evosuite.runtime.Random.setNextRandom((-1442));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1442);
      doubleArray0[1] = (double) (-1442);
      doubleArray0[2] = (double) (-1442);
      doubleArray0[3] = (double) (-1442);
      doubleArray0[4] = (double) (-1442);
      doubleArray0[5] = (double) (-1442);
      doubleArray0[6] = (double) (-1442);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-5469.61), (-1442.0), Double.NEGATIVE_INFINITY, (-1944.6022), 2573.02).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Vector.constant((-1442), 100.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(4);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(4);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(4, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-330), (-390));
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-4687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -4687
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      linkedList0.add((Double) null);
      Vector.zero(1612);
      compressedVector0.setAll(0.0);
      assertEquals(0, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((-2146223966), 3648);
      CompressedVector compressedVector1 = CompressedVector.random(16, 0.0, (Random) mockRandom0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.zero(16);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 768.6;
      doubleArray0[1] = 2365.6604910792353;
      doubleArray0[2] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      int int0 = (-259);
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      int int1 = 430;
      compressedVector0.equals((Vector) denseVector0, (double) (-259));
      // Undeclared exception!
      try { 
        compressedVector0.slice((-259), 430);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-259' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1442);
      org.evosuite.runtime.Random.setNextRandom((-1442));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1442);
      doubleArray0[1] = (double) (-1442);
      doubleArray0[2] = (double) (-1442);
      doubleArray0[3] = (double) (-1442);
      doubleArray0[4] = (double) (-1442);
      doubleArray0[5] = (double) (-1442);
      doubleArray0[6] = (double) (-1442);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Vector.constant((-1442), 100.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 964.3643747630197;
      doubleArray0[1] = (-5469.61);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2687.0;
      doubleArray0[4] = 4906.57681392;
      doubleArray0[5] = (-1969.4106901);
      doubleArray0[6] = 3518.5002779026;
      doubleArray0[7] = 601.3468857834;
      doubleArray0[8] = 532.851437;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-2143967946), 1);
      assertEquals(8, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-555.857505);
      doubleArray0[3] = (-2.146083723E9);
      doubleArray0[4] = (-2686.51405262);
      doubleArray0[5] = (-418.603);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      SparseVector.fromMap(hashMap0, 8);
      compressedVector0.nonZeroAt(3);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(8, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 4);
      int int0 = 3;
      compressedVector0.isZeroAt(3);
      compressedVector0.toSparseVector();
      int int1 = 1000;
      compressedVector0.equals((Object) "^k%UBxV`N|@-");
      SparseVector.zero(1000);
      compressedVector0.blankOfLength(4);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("^k%UBxV`N|@-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1338.613393253749;
      doubleArray0[1] = (-1097.37044);
      doubleArray0[2] = 2.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.sum();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(2816);
      Byte byte0 = new Byte((byte)6);
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2343;
      doubleArray0[1] = (double) 2343;
      doubleArray0[2] = (double) 2343;
      doubleArray0[3] = (double) 2343;
      doubleArray0[4] = (double) 2343;
      doubleArray0[5] = (double) 2343;
      doubleArray0[6] = (double) 2343;
      doubleArray0[7] = (double) 2343;
      int[] intArray0 = new int[3];
      intArray0[0] = 2343;
      intArray0[1] = 2343;
      intArray0[2] = 2343;
      CompressedVector compressedVector0 = new CompressedVector(2343, 2343, doubleArray0, intArray0);
      compressedVector0.toString();
      compressedVector0.product();
      org.evosuite.runtime.Random.setNextRandom(2343);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom((-1L));
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        compressedVector0.select(intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll((-1857.043059));
      compressedVector0.nonZeroAt(895);
      compressedVector0.toBinary();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 892);
      compressedVector1.set(2, 892);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer((-3471));
      int int0 = 1000;
      Integer.min((-2146393226), 1000);
      Double double0 = new Double((-3471));
      hashMap0.put(integer0, double0);
      int int1 = 160;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 160);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1204);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1204;
      doubleArray0[1] = (double) 1470;
      doubleArray0[2] = (double) 1204;
      doubleArray0[3] = (double) 1204;
      doubleArray0[4] = (double) 1204;
      CompressedVector.fromArray(doubleArray0);
      compressedVector0.copyOfLength(1470);
      compressedVector0.multiply((double) 1204);
      compressedVector0.toColumnMatrix();
      compressedVector0.copyOfLength(30);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-463);
      MockRandom mockRandom0 = new MockRandom();
      long long0 = 0L;
      mockRandom0.longs(0L, 2048L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-463), (double) (-463), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(0);
      Integer.compareUnsigned(1780, (-1761));
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      hashMap0.put(integer0, byte1);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 470);
      compressedVector1.subtract((-5257.06409));
      // Undeclared exception!
      try { 
        compressedVector0.set((byte)2, (-1478.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      SparseVector.zero(0, (-2665));
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(16, (-3992));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -3992.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-96);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 163.0;
      doubleArray0[2] = 2086.1191;
      doubleArray0[3] = 163.0;
      doubleArray0[4] = (-236.1756883203);
      doubleArray0[5] = 6292.387623;
      doubleArray0[6] = 1931.2;
      doubleArray0[7] = 221.939172;
      doubleArray0[8] = 1916.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(9, sparseVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-816));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 48;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 1436;
      doubleArray0[3] = (double) 48;
      int[] intArray0 = new int[1];
      intArray0[0] = 48;
      CompressedVector compressedVector0 = new CompressedVector(48, 1436, doubleArray0, intArray0);
      compressedVector0.blankOfLength(1916);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte) (-31);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-2772), (-2772));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2772
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-1822);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-1822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1822
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1926;
      CompressedVector compressedVector0 = new CompressedVector(1926);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      short short0 = (short)2;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32, 32);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 32;
      SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<CompressedVector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2269.74);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-236.1756883203);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 532.851437;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector.zero(4850);
      double double0 = compressedVector0.norm();
      assertEquals(2343.3805233607563, double0, 0.01);
      
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      String string0 = compressedVector0.toCSV(numberFormat0);
      assertEquals("-2,270, 0, 1, 0, -236, -1, -1, 533", string0);
      
      compressedVector0.mkString(numberFormat0, "");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0.75, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("&o&fVLO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2502);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2502;
      compressedVector0.product();
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(1, sparseVector0.cardinality());
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(2502, 2502);
      CompressedVector compressedVector1 = (CompressedVector)Vector.fromMap(hashMap0, 2502);
      assertEquals(2502, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      
      compressedVector0.blankOfLength(2502);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)9, (byte) (-58), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector.fromCSV("");
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CompressedVector.random(5, 163.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 107;
      doubleArray0[1] = (double) 107;
      doubleArray0[2] = (double) 107;
      doubleArray0[3] = (double) 107;
      doubleArray0[4] = (double) 107;
      doubleArray0[5] = (double) 107;
      int[] intArray0 = new int[3];
      intArray0[0] = 107;
      intArray0[1] = 107;
      intArray0[2] = 107;
      CompressedVector compressedVector0 = new CompressedVector(107, 107, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 11.920204436850021;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setPositiveSuffix("");
      compressedVector0.mkString((NumberFormat) decimalFormat0, "");
      compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      compressedVector0.mkString((NumberFormat) decimalFormat0, "");
      compressedVector0.nonZeroAt((-3626));
      compressedVector0.setAll((-657.945325993));
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("org.la4j.matrix.DenseMatrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 419.2615;
      doubleArray0[1] = (-1494.55);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1351.0732842;
      doubleArray0[4] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      assertEquals(0.8, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2024, 2024);
      Vector.zero(2024);
      compressedVector0.toCSV();
      SparseVector.zero(2024, 13);
      compressedVector0.getOrElse(13, 807.485080328);
      CompressedVector compressedVector1 = CompressedVector.fromCSV("");
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(2146359899, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 419.2615;
      doubleArray0[1] = 1351.0732842;
      doubleArray0[2] = (-1087.0);
      doubleArray0[3] = (-4537.0083);
      doubleArray0[4] = 2999.0;
      doubleArray0[5] = (-1584.9913238578697);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.subtract((-1.0));
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      int int0 = 2415;
      compressedVector1.isZeroAt((-450));
      org.evosuite.runtime.Random.setNextRandom(2415);
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse((-1056), (-949.7231913));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1056' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 905;
      CompressedVector compressedVector0 = new CompressedVector(905, 9);
      compressedVector0.swapElements(2003, 9);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)9).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.euclideanNorm();
      Vector vector0 = compressedVector0.copy();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      compressedVector0.updateAt(905, vectorFunction0);
      int int1 = 8;
      double double0 = (-1466.0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1466.0)).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction1);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '905' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 48;
      intArray0[2] = 16;
      intArray0[3] = 2;
      intArray0[4] = 856;
      // Undeclared exception!
      try { 
        compressedVector1.select(intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '5' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector((-2146684588));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2146684588
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2840);
      compressedVector0.shuffle();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.setAll((-1.0));
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(289, vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.zero(1, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 32.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 870;
      MockRandom mockRandom0 = new MockRandom();
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1657L), (-968L), 738L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.norm();
      compressedVector0.iterator();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      int int0 = 1;
      SparseVector.fromMap(hashMap0, 1);
      int int1 = 2735;
      SparseVector.zero(2735);
      compressedVector0.each(vectorProcedure0);
      compressedVector0.nonZeroIterator();
      CompressedVector.zero(2735);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      CompressedVector.fromArray(doubleArray0);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = Integer.valueOf(2735);
      Long long0 = new Long(1);
      hashMap1.put(integer0, long0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }
}
