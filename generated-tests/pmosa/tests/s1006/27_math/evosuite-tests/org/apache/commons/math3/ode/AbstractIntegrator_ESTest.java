/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:55:08 GMT 2018
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.LutherIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2139.35914325313;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2139.35914325313, (-1978.74649), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations((-785));
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.setSafety(2139.35914325313);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-785));
      highamHall54Integrator0.addEventHandler((EventHandler) eventFilter0, 2139.35914325313, Double.NaN, (-785), (UnivariateSolver) pegasusSolver0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getStepHandlers();
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(600.49, 2899.083602674007, 600.49, (-8.87285693353063));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-8.87285693353063);
      doubleArray0[1] = 5271.0;
      doubleArray0[2] = 5.746280211439194;
      doubleArray0[3] = 2899.083602674007;
      eventFilter0.init(600.49, doubleArray0, 0.0);
      int int0 = 5;
      dormandPrince853Integrator0.addEventHandler((EventHandler) eventFilter0, 5.746280211439194, 0.0, 5);
      int int1 = (-2778);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(5271.0, (-2778));
      dormandPrince853Integrator0.addEventHandler((EventHandler) eventFilter0, 5.746280211439194, 1439.763267919, (-2778), (UnivariateSolver) mullerSolver2_0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 5271.0, 2899.083602674007, 600.49);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) eventFilter0, 2.2404374302607883, 5.746280211439194, 5, (UnivariateSolver) mullerSolver2_0);
      double double0 = (-231.5293791760455);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(2.2404374302607883, 1755.1125283777892, 1755.1125283777892, (-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,053 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator((-1388.3293299));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1388.3293299), (-1388.3293299), (-4296.588241), (-1388.3293299));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-2646));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 52);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-2646));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-2646));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 0.0, (-4296.588241));
      graggBulirschStoerIntegrator0.setMaxEvaluations(774);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setControlFactors((-4296.588241), 2600.388179515854, 0.0, (-439.1174219));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 52;
      doubleArray0[1] = 2600.388179515854;
      doubleArray0[2] = (-2560.0719079);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-2723.7376133), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 52, 1376, (-2723.7376133));
      assertEquals(774, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1067.555);
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1067.555;
      doubleArray0[1] = (-2284.0);
      doubleArray0[2] = (-2284.0);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1000.0;
      doubleArray0[6] = (-2284.0);
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2284.0), doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3055.147, (-1.0), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(409.51858654196);
      threeEighthesIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 409.51858654196;
      doubleArray0[1] = 3917.298676319;
      doubleArray0[2] = 409.51858654196;
      doubleArray0[3] = 409.51858654196;
      doubleArray0[4] = 409.51858654196;
      threeEighthesIntegrator0.singleStep(firstOrderConverter0, 409.51858654196, doubleArray0, 0.0);
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.getEvaluations();
      int int0 = threeEighthesIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1712.906544881541);
      doubleArray0[1] = (-419.100205);
      doubleArray0[2] = (-419.100205);
      doubleArray0[3] = (-1712.906544881541);
      doubleArray0[4] = (-1712.906544881541);
      doubleArray0[5] = (-1712.906544881541);
      doubleArray0[6] = (-1712.906544881541);
      doubleArray0[7] = (-419.100205);
      doubleArray0[8] = (-1712.906544881541);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-419.100205), (-1712.906544881541), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      SecantSolver secantSolver0 = new SecantSolver(507.5154);
      dormandPrince54Integrator0.addEventHandler((EventHandler) eventFilter0, (-1233.91308579991), (-1233.91308579991), 277, (UnivariateSolver) secantSolver0);
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.getName();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2981.1157282489803, (-1233.91308579991), (-1712.906544881541), 0.0);
      highamHall54Integrator0.getOrder();
      assertEquals(Integer.MAX_VALUE, highamHall54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 368.1, (-11.573902539959631));
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1942));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-11.573902539959631);
      doubleArray0[1] = (double) (-1942);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 368.1;
      doubleArray1[2] = 4107.8860979;
      doubleArray1[3] = (-11.573902539959631);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, (-2106), doubleArray0, 4107.8860979, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-32.4), 0.0, (-32.4), 0.0);
      highamHall54Integrator0.setMaxGrowth(0.0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setInitialStepSize(0.0);
      highamHall54Integrator0.setSafety(Double.NaN);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      highamHall54Integrator0.addStepHandler(dummyStepHandler0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, (-32.4));
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 5, 5, 2334.90462);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, (double[]) null, 208.3507597530064, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      firstOrderConverter0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      firstOrderConverter0.computeDerivatives((-1550.4794), doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1555.4071677);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-540.0);
      doubleArray1[4] = (-1555.4071677);
      doubleArray1[5] = (-540.0);
      doubleArray1[6] = (-1555.4071677);
      doubleArray1[7] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-540.0), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getEventHandlers();
      double[] doubleArray2 = null;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-540.0), doubleArray0, 82.970342, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      firstOrderConverter0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2410.395595087535), (-540.0), (-808.3961679639));
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-1703.6667);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1703.6667);
      doubleArray0[1] = (-1703.6667);
      doubleArray0[4] = (-1703.6667);
      doubleArray0[3] = (-1703.6667);
      doubleArray0[4] = (-1703.6667);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1703.6667), (-1703.6667), doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setStepSizeControl((-1703.6667), (-1703.6667), Double.NaN, Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1703.6667), (-1703.6667), (-4585.282726560124), (-4585.282726560124));
      Collection<EventHandler> collection0 = new LinkedList<EventHandler>();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      dormandPrince54Integrator0.addEventHandler((EventHandler) eventFilter0, 0.0, 0.0, 0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-4585.282726560124));
  }
}
