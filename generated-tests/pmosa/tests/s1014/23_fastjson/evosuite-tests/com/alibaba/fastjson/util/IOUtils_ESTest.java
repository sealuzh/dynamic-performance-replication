/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:00:06 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("encodeUTF8 error", 7, 0);
      IOUtils.stringSize((long) 7);
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8((char[]) null, 7, 7, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.DIGITS, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars(0L, 2912, iOUtils0.ASCII_CHARS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2911
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize((-126));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOUtils.firstIdentifier('0');
      IOUtils.stringSize(1L);
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-75L), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = IOUtils.stringSize(4);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'P';
      charArray0[2] = '5';
      IOUtils.getChars((long) 1, 4, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'P', '5', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[1];
      int int0 = IOUtils.decodeUTF8((byte[]) null, 240, (-1141), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'v';
      charArray0[2] = '0';
      charArray0[3] = 'r';
      charArray0[4] = '5';
      charArray0[5] = 'R';
      charArray0[6] = 'B';
      int int0 = IOUtils.decodeUTF8(byteArray0, 4108, (byte) (-21), charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64("+X$g*");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils.decodeBase64("=RIHuGM?=Y/`IefSU");
      int int0 = (-2330);
      char[] charArray0 = new char[2];
      char char0 = '7';
      charArray0[0] = '7';
      char char1 = 'a';
      charArray0[1] = 'a';
      // Undeclared exception!
      try { 
        IOUtils.getChars(1479, (-2330), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2331
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.getChars(3696, 3696, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3695
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[1];
      byte[] byteArray0 = IOUtils.decodeBase64("R#Cehw");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-16), (byte) (-98), (byte) (-121)}, byteArray0);
      
      boolean boolean0 = IOUtils.isIdent('h');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.stringSize(4205);
      IOUtils.stringSize(0);
      IOUtils.stringSize((long) 0);
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'b';
      charArray0[2] = '[';
      charArray0[3] = 'y';
      IOUtils.decodeBase64(charArray0, 2228, 0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", 0, 834);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.stringSize(50L);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.firstIdentifier(']');
      IOUtils.isValidJsonpQueryParam("");
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = '2';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ' ';
      charArray0[6] = ']';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 3779, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("");
      StringReader stringReader0 = new StringReader("");
      IOUtils.readAll(stringReader0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("");
      char[] charArray0 = new char[7];
      charArray0[2] = '2';
      charArray0[5] = ' ';
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 0, 3779, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.DIGITS, 244, 108, iOUtils0.specicalFlags_doubleQuotes);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 244
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("]g%D5nu=");
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 3206, 412, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3206
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.decodeBase64("2_io`J.tJ=(*");
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = '4';
      charArray0[2] = 'w';
      charArray0[3] = '[';
      int int0 = 0;
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 0, (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      boolean boolean0 = IOUtils.isValidJsonpQueryParam(";q}Fx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils.decodeBase64("read string from reader error");
      IOUtils.loadPropertiesFromFile();
      IOUtils.isValidJsonpQueryParam("read string from reader error");
      IOUtils.isValidJsonpQueryParam("fastjson.compatibleWithJavaBean");
      IOUtils.loadPropertiesFromFile();
      PipedReader pipedReader0 = new PipedReader(18);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      // Undeclared exception!
      try { 
        IOUtils.readAll(lineNumberReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      boolean boolean0 = IOUtils.isIdent('7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(1L);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '4';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte)12;
      int int1 = IOUtils.encodeUTF8(charArray0, 0, 0, byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.getStringProperty("encdeUTF8 errr");
      String string0 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      String string1 = IOUtils.FASTJSON_COMPATIBLEWITHFIELDNAME;
      assertEquals("fastjson.compatibleWithFieldName", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 617;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("5W,j>j,rJonRRFrf", 617, (-1766));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      IOUtils.decodeUTF8(byteArray0, 0, (byte)116, charArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 999);
      IOUtils.close(bufferedInputStream0);
      IOUtils iOUtils0 = new IOUtils();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("fastjson.compatibleWithJavaBean", "fastjson.compatibleWithJavaBean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"fastjson.compatibleWithJavaBean\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      char[] charArray0 = new char[1];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, 240, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)0, 240, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_doubleQuotes;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 11, 11, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOUtils.close(sequenceInputStream0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'e';
      charArray0[2] = 'C';
      charArray0[3] = 'L';
      charArray0[4] = '?';
      charArray0[5] = 'u';
      charArray0[6] = '.';
      int int0 = 0;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 864);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 863
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOUtils.close((Closeable) null);
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.close((Closeable) null);
      IOUtils.close((Closeable) null);
      IOUtils.decodeBase64("fastjson.properties");
      IOUtils.close((Closeable) null);
      IOUtils.firstIdentifier('L');
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 91, 105);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("");
      StringReader stringReader0 = new StringReader("");
      IOUtils.readAll(stringReader0);
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.firstIdentifier('p');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 6, 6);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = IOUtils.firstIdentifier('l');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.decodeBase64(iOUtils0.CA, 5, 5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = 144;
      IOUtils.stringSize(144);
      // Undeclared exception!
      try { 
        IOUtils.getChars(10000L, 3, iOUtils0.replaceChars);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = 'Y';
      charArray0[2] = '&';
      charArray0[3] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtils.readAll(charArrayReader0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 30, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IOUtils.stringSize(100L);
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '8';
      charArray0[2] = 'T';
      charArray0[3] = '\"';
      charArray0[4] = '9';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)3, (-982), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -983
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars(30, 30, iOUtils0.replaceChars);
      IOUtils iOUtils1 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.properties", 30, 30);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((-1), 61, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils.firstIdentifier('9');
      IOUtils.isValidJsonpQueryParam((String) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = '9';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = ' ';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils.decodeBase64("r~adostYing from reader error");
      StringReader stringReader0 = new StringReader("r~adostYing from reader error");
      String string0 = IOUtils.readAll(stringReader0);
      assertEquals("r~adostYing from reader error", string0);
      
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.firstIdentifier('p');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("r~adostYing from reader error");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.replaceChars, 6, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65501
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IOUtils.firstIdentifier(']');
      IOUtils.isValidJsonpQueryParam(":");
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      byte[] byteArray0 = IOUtils.decodeBase64(":");
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 83, 83, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("");
      StringReader stringReader0 = new StringReader("");
      IOUtils.readAll(stringReader0);
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte) (-36), (int) (byte)48, iOUtils0.CA);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getChars((byte)115, 38, iOUtils0.replaceChars);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("fastjson.compatibleWithJavaBean", (int) (byte)115, (int) (byte)115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("4!j27g", 2, 2);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      
      boolean boolean0 = IOUtils.isIdent('v');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u008A');
      byte[] byteArray0 = IOUtils.decodeBase64("V;vr&@nAY9`ll%nC.{g", 4, 4);
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
      
      boolean boolean1 = IOUtils.isValidJsonpQueryParam("HNO@A 3Y");
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = IOUtils.decodeBase64("HNO@A 3Y", 4, 4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-3), (byte) (-40)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '\u009C';
      charArray0[2] = ' ';
      charArray0[3] = '\u009C';
      charArray0[4] = ' ';
      charArray0[5] = '\u009C';
      charArray0[6] = ' ';
      charArray0[7] = '\'';
      charArray0[8] = '\u009C';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)5;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 7, (byte)5, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[6] = '\u0018';
      charArray0[7] = '\'';
      charArray0[8] = '\u009C';
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 7, (byte)5, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      char[] charArray0 = new char[5];
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 138, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[1];
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)64, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      char[] charArray0 = new char[9];
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 138, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("com.alibaba.fastjson.util.UTF8Decoder", 5, 5);
      IOUtils.stringSize((-1964L));
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = 'g';
      charArray0[2] = 'q';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 1, 5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u0107');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      char[] charArray0 = new char[3];
      charArray0[1] = '.';
      charArray0[2] = '5';
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.decodeUTF8(byteArray0, 1, '5', charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u010F');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)1;
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)26, iOUtils0.replaceChars);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, 2, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      char[] charArray0 = new char[10];
      int int0 = IOUtils.decodeUTF8(byteArray0, 0, (byte)2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("fastjson.compatibleWithFieldName", 5, 19);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '%';
      charArray0[2] = '_';
      charArray0[3] = ',';
      charArray0[4] = '4';
      charArray0[5] = 'A';
      charArray0[6] = '|';
      charArray0[7] = '7';
      IOUtils.decodeUTF8(byteArray0, 6, 75, charArray0);
      IOUtils.isValidJsonpQueryParam("UTF-8");
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        IOUtils.readAll(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
