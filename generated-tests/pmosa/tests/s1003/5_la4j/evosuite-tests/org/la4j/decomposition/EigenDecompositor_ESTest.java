/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:36:34 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1472.4251251);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(0, 10, doubleArray0);
      rowMajorSparseMatrix0.getColumn(10);
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(10, 10);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(12, 12, 12);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 12;
      doubleArray1[1] = (double) 12;
      doubleArray1[2] = (double) 12;
      doubleArray1[3] = (double) 12;
      doubleArray1[4] = (double) 12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 12;
      doubleArray2[1] = (double) 12;
      doubleArray2[2] = (double) 12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 579.956;
      doubleArray3[1] = (double) 12;
      doubleArray3[2] = 12.540000000000003;
      doubleArray3[3] = (double) 12;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 579.956;
      doubleArray4[1] = 579.956;
      doubleArray4[2] = (double) 12;
      doubleArray4[3] = (double) 12;
      doubleArray4[4] = (double) 12;
      doubleArray4[5] = (double) 12;
      doubleArray4[6] = 12.540000000000003;
      doubleArray4[7] = 579.956;
      doubleArray4[8] = 579.956;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 12.540000000000003;
      doubleArray5[1] = (double) 12;
      doubleArray5[2] = 12.540000000000003;
      doubleArray5[3] = (double) 12;
      doubleArray5[4] = (double) 12;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 12.540000000000003;
      doubleArray6[1] = 579.956;
      doubleArray6[2] = 579.956;
      doubleArray6[3] = 579.956;
      doubleArray6[4] = 12.540000000000003;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 579.956;
      doubleArray7[1] = (double) 12;
      doubleArray7[2] = 12.540000000000003;
      doubleArray7[3] = 579.956;
      doubleArray7[4] = 12.540000000000003;
      doubleArray7[5] = (double) 12;
      doubleArray7[6] = 953.440382561;
      doubleArray7[7] = 12.540000000000003;
      doubleArray7[8] = 12.540000000000003;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 12.540000000000003;
      doubleArray8[1] = 953.440382561;
      doubleArray8[2] = 953.440382561;
      doubleArray8[3] = (double) 12;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(12, 12, 12);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 12;
      doubleArray1[1] = (double) 12;
      doubleArray1[2] = (double) 12;
      doubleArray1[3] = (double) 12;
      doubleArray1[4] = (double) 12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 12;
      doubleArray2[1] = (double) 12;
      doubleArray2[2] = (double) 12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 579.956;
      doubleArray3[1] = (double) 12;
      doubleArray3[2] = 12.540000000000003;
      doubleArray3[3] = (double) 12;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 579.956;
      doubleArray4[1] = 579.956;
      doubleArray4[2] = (double) 12;
      doubleArray4[3] = (double) 12;
      doubleArray4[4] = (double) 12;
      doubleArray4[5] = (double) 12;
      doubleArray4[6] = 12.540000000000003;
      doubleArray4[7] = 579.956;
      doubleArray4[8] = 579.956;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 12.540000000000003;
      doubleArray5[1] = (double) 12;
      doubleArray5[2] = 12.540000000000003;
      doubleArray5[3] = (double) 12;
      doubleArray5[4] = (double) 12;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[1] = 579.956;
      doubleArray6[2] = 579.956;
      doubleArray6[3] = 579.956;
      doubleArray6[4] = 12.540000000000003;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 579.956;
      doubleArray7[1] = (double) 12;
      doubleArray7[2] = 12.540000000000003;
      doubleArray7[3] = 579.956;
      doubleArray7[4] = 12.540000000000003;
      doubleArray7[5] = (double) 12;
      doubleArray7[6] = 953.440382561;
      doubleArray7[7] = 12.540000000000003;
      doubleArray7[8] = 12.540000000000003;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 12.540000000000003;
      doubleArray8[1] = 953.440382561;
      doubleArray8[2] = 953.440382561;
      doubleArray8[3] = (double) 12;
      doubleArray0[7] = doubleArray8;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(3, 3, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(2, 2, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(6);
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(2, 2, mockRandom0);
      mockRandom0.ints((long) 2);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.decompose();
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix0);
      EigenDecompositor eigenDecompositor2 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor2.decompose();
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 16;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(16, 16, mockRandom0);
      mockRandom0.ints((long) 16);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 7, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(7, 7, mockRandom0);
      mockRandom0.ints((long) 7);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      mockRandom0.doubles();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      boolean boolean0 = eigenDecompositor0.applicableTo(denseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
      
      Matrix[] matrixArray1 = eigenDecompositor0.decompose();
      assertFalse(matrixArray1.equals((Object)matrixArray0));
  }
}
