/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 12:25:35 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("+M", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("|?k-:#)", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "(?P<";
      int int0 = 41;
      try { 
        Parser.parse("(?P<", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("9(?P<(?P<(?(P<", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?P<(?(P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse("A(", 4528);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `A(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("(#", 1353);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "k#Z&9#+FDLX&o2";
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      regexp0.min = 8;
      regexp2.toString();
      regexp0.toString();
      regexp0.toString();
      int int0 = 45;
      Parser.subarray(regexpArray0, 45, 45);
      String string0 = "com.google.re2j.Parser";
      Parser.parse("com.google.re2j.Parser", 45);
      regexp2.equals("E");
      int int1 = 2797;
      Parser parser0 = new Parser("com.google.re2j.Parser", 2797);
      Parser.parse("\b", 45);
      Parser.parse(string0, int0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".p", 52);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("[", 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".", 21);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^", 3052);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("s!R<^q\"6>=}h", (-2488));
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("s!R<^q\"6>=}h", (-1597));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("Bamum", (-3209));
      regexpArray0[5] = regexp5;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-3209), (-3209));
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("fYoNWA?", 3860);
      Parser parser0 = new Parser("fYoNWA?", 0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      int int0 = 2563;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 2563);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "+\\$i7gl0^Z77L'XfPh`";
      int int0 = 2147483645;
      try { 
        Parser.parse("+$i7gl0^Z77L'XfPh`", 2147483645);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "[";
      int int0 = (-6104);
      Parser parser0 = new Parser("[", (-6104));
      Parser.parse("[", 298);
      int int1 = 0;
      Parser.parse("", 0);
      try { 
        Parser.parse("[", (-6104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w", 105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 45, 45);
      Parser parser0 = new Parser("[:^lower:]", (-510));
      Parser.parse("J{+.t$", (-510));
      Parser.parse("[:^lower:]", 45);
      Parser.parse("[:^lower:]", 0);
      String string0 = "pDA3:[F~RQ.h<`P8";
      try { 
        Parser.parse("pDA3:[F~RQ.h<`P8", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[F~RQ.h<`P8`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", (-2147483639));
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1735, 43);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:H0-x{^0FFFF}]", 56);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Parser.parse(")FEmgDA3FZ", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "d4.jJIT{ {cTc=@CPZ";
      int int0 = 8400;
      Regexp regexp0 = Parser.parse("d4.jJIT{ {cTc=@CPZ", 8400);
      Regexp[] regexpArray0 = new Regexp[9];
      regexp0.subs = null;
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int1 = 115;
      regexp0.min = 115;
      regexpArray0[6] = regexp0;
      regexp0.cap = 1701;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      int int2 = 2065;
      regexp0.reinit();
      regexp0.flags = 2065;
      regexp0.reinit();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 8400, (-462));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{", 81);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pC?#B#", 119156);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      String string0 = "8\\uGSpZ!euLPkGOT";
      int int0 = 1868;
      try { 
        Parser.parse(string0, 1868);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\u`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Parser.parse("3sz,`WPzL`F(wAua-", 3905);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `3sz,`WPzL`F(wAua-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Parser.parse("(?P<", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Parser.parse("(", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("IS2_j{", 37);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 37, 1623);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "`v%wOi.X]\"]*C,({A";
      int int0 = (-380);
      try { 
        Parser.parse("`v%wOi.X]\"]*C,({A", (-380));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): ``v%wOi.X]\"]*C,({A`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = "}*i[";
      int int0 = (-543);
      try { 
        Parser.parse("}*i[", (-543));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "[";
      int int0 = 4292;
      try { 
        Parser.parse("[", 4292);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Parser.parse("pR?2va(", 1005);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `pR?2va(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 401);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = new Parser("'HvC|", 0);
      Regexp regexp0 = Parser.parse("'HvC|", 0);
      Regexp regexp1 = Parser.parse("'HvC|", (-439));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{|", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|}", (-664));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$", (-3096));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("iOQ C_SMp", 1868);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      int[] intArray0 = new int[6];
      intArray0[0] = 1868;
      intArray0[1] = 1868;
      intArray0[2] = 1868;
      intArray0[3] = 1868;
      intArray0[4] = 1868;
      intArray0[5] = 1868;
      regexp0.runes = intArray0;
      Parser.parse("", 1868);
      Parser.parse("Ethiopic", 1721);
      Parser parser0 = new Parser("cxJP+F CD39|W.C", 53);
      Parser.parse("cxJP+F CD39|W.C", 1868);
      Parser.parse("<`", 53);
      Parser.parse("invalid character class range", 53);
      Parser.parse("NA+aeJ!jXa.$yO^6", 1852);
      Regexp regexp1 = Parser.parse("cXrHA [`X}BJ]4", 1282);
      Regexp regexp2 = Parser.parse("cXrHA [`X}BJ]4", 1868);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8$s|B", 2676);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp regexp0 = Parser.parse("o&|~", (-3720));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = Parser.parse("z", 108);
      Parser.parse("Shavian", 64);
      Regexp regexp4 = Parser.parse(":X", (-2048));
      assertFalse(regexp4.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser.parse("AE1F;^$uJ6Qffrhh", (-2527));
      Parser parser0 = new Parser("AE1F;^$uJ6Qffrhh", 0);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-2527), 2990);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 45, 45);
      Parser parser0 = new Parser("[:^lower:]", (-510));
      Parser parser1 = new Parser("[:^lower:]", (-1546));
      int int0 = 8276;
      Regexp regexp0 = Parser.parse("p:C?#B#", 8276);
      String string0 = "";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 45, 45);
      Regexp regexp0 = Parser.parse("|l.S", (-1140));
      Parser parser0 = new Parser("P#B#", (-18));
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("[cntrl]", 82);
      Parser.subarray(regexpArray0, 45, 45);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 82, 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "z*S3x&2L";
      Parser parser0 = new Parser("z*S3x&2L", 2396);
      try { 
        Parser.parse("(?", 2396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Parser.parse("(?", 856);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("do{2G}Q7lY8sqEW", (-1703));
      Parser.parse("do{2G}Q7lY8sqEW", (-1703));
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("do{2G}Q7lY8sqEW", (-1703));
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1703), (-4766));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{0", 4292);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{7%B", 85);
      int[] intArray0 = new int[9];
      intArray0[0] = 85;
      intArray0[1] = 85;
      intArray0[2] = 85;
      intArray0[3] = 85;
      intArray0[4] = 85;
      intArray0[5] = 85;
      intArray0[6] = 85;
      intArray0[7] = 85;
      intArray0[8] = 85;
      regexp0.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int0 = 2112;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 85, 2112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{1>FFNFF}]", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = new Parser("t1(>v4c`z_,", 124);
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        Parser.parse("xME)F]Um8", 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = new Parser("\u0000", 1104);
      try { 
        Parser.parse("[Z-1", 1104);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `Z-1`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{\bFFFF}]", 8280);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 8293);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 66640);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(#S'B)X*=`Wh", 1517);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("a^,MxeC3H#oCk|d9QcT", 120250);
      Parser parser0 = new Parser("Z", 120250);
      Regexp regexp1 = Parser.parse("w", 124);
      Regexp regexp2 = Parser.parse("oMOBW@qyfTo]<2BZ", 124);
      Regexp regexp3 = Parser.parse("w", 124);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp4;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 113, 113);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0003", 401);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("aVak\u0006c", 48);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Parser.parse("\u0003Z'[K U}M", 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[K U}M`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 48);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 1652);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "do{2G\\}Q7lY8sqEW";
      Parser.parse("do{2G}Q7lY8sqEW", (-1703));
      Parser.parse("do{2G}Q7lY8sqEW", (-1703));
      Regexp[] regexpArray0 = new Regexp[3];
      try { 
        Parser.parse("(?(?", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 105;
      try { 
        Parser.parse("(?-:.)", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("-{%+=,A1", 2954);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("-{%+=,A1", 128552);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("-{%+=,A1", (-301));
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("F|_d/*.r{<k\",OARYz", 2624);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("F|_d/*.r{<k\",OARYz", 16);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[6] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 128552, 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("w\u0003L'Wn}M", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("iOQ C_SMp", 1868);
      Regexp regexp1 = Parser.parse("\u0003", 1868);
      int int0 = 16;
      String string0 = "er";
      Regexp regexp2 = Parser.parse(string0, int0);
      Regexp regexp3 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp1;
      int int1 = (-3824);
      int int2 = 5763;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p", 11);
      Regexp regexp1 = Parser.parse("P\u0003", (-36));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Parser.parse("5pQ>sDfKL{Po8- )e", 3545);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse("6", (-3752));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("]%X;}[jKnUJ<] ", 1438);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      int[] intArray0 = new int[1];
      intArray0[0] = 1438;
      regexp0.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.name = "pp";
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("Y<c,%|]", 124);
      regexpArray0[2] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-459), 1438);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "\\d\\zR2va(";
      int int0 = (-3104);
      try { 
        Parser.parse("dzR2va(", (-3104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `dzR2va(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4Fq`0|zCh`Ycfk6|", 2960);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Parser.parse("(l?", 856);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(l?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 124;
      String string0 = "(?s<";
      try { 
        Parser.parse("(?s<", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?s<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "\\xM\\pR2a(";
      int int0 = (-2195);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, (-2195), (-2195));
      Parser parser0 = new Parser("P", 97);
      Regexp[] regexpArray1 = new Regexp[7];
      int int1 = 4;
      Regexp regexp0 = Parser.parse("Old_South_Arabian", 4);
      regexpArray1[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray1[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray1[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray1[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray1[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp1);
      regexpArray1[5] = regexp6;
      try { 
        Parser.parse("xMpR2a(", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `xMpR2a(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      int int0 = 5;
      Regexp regexp2 = Parser.parse("9ns}1Xo'LwGLR|U", 5);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      int int1 = 64;
      try { 
        Parser.parse("]5[-NX", 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-NX`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Parser.parse("I5[-N", 204);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-N`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8\buGSw6!.M`PkGy0OT", 860);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      regexp0.cap = (-2287);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      int int0 = 5;
      Regexp regexp2 = Parser.parse("9ns}1Xo'LwGLR|U", 5);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      try { 
        Parser.parse("]5[-NX", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-NX`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "]5[-X";
      int int0 = 256;
      try { 
        Parser.parse("]5[-X", 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-X`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\u0000-x{10FFF}]", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser.parse("v?Y%fP9U#%L", (-647));
      Parser parser0 = new Parser("v?Y%fP9U#%L", (-647));
      Regexp regexp0 = Parser.parse("[:m:]", 100);
      Regexp regexp1 = Parser.parse("69&t%RicKI9GJ", 256);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:F]", 2676);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp regexp0 = Parser.parse("VO!2<zk^", 110);
      Parser.parse("VO!2<zk^", 110);
      Regexp regexp1 = Parser.parse("\r", 5);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      String string0 = "dY\\Q";
      int int0 = 716;
      Regexp regexp2 = Parser.parse("dYQ", 716);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("dYQ", (-1483));
      regexpArray0[3] = regexp3;
      int int1 = 60;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\Q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Parser.parse("/9`ZxQ2[wBnrOPNR", 461);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[wBnrOPNR`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("7kkEkxs.Z&6j3|7", 36);
      Regexp regexp1 = Parser.parse("7kkEkxs.Z&6j3|7", 114);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 114, 51);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp regexp0 = Parser.parse("jF37+|j", 9116);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("LK>TX;7m\u0004Ru", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Parser.parse("(?-s:.)", 124);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.reinit();
      Parser parser0 = new Parser("(?-s:.)", 137);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v&vnS\"}Jir", (-791));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", 1114116);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser.parse("8\u0000bU^kSzS]-m+Ea2_", (-3720));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-3720));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:\u0000-d1BFFFF}]", 3029);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", (-3535));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "w\\3'UM";
      Regexp regexp0 = Parser.parse("w\u0003'UM", 43625);
      int int0 = (-3887);
      Parser parser0 = new Parser(string0, int0);
      String string1 = "\\P";
      int int1 = 55238;
      Regexp regexp1 = Parser.parse(string1, int1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:Sa\u0000-x{10FFFF}]", 32);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp regexp2 = Parser.parse("\u0000", 6157);
      Regexp regexp3 = new Regexp(regexp2);
      Parser.parse("p", 342);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 17, 6157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "(?i:";
      int int0 = 3780;
      try { 
        Parser.parse("(?i:", 3780);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "]y`iB$G-3`e_\\7UX";
      Regexp regexp0 = Parser.parse("]y`iB$G-3`e_\u0007UX", (-1331));
      int int0 = 4;
      Parser parser0 = new Parser(string0, int0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      int int1 = 98;
      int int2 = (-361);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Parser.parse("zxMa/R2Va(", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `zxMa/R2Va(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp[] regexpArray0 = null;
      int int0 = (-1011);
      Parser.subarray((Regexp[]) null, (-1011), (-1011));
      String string0 = ".\\ u_\\1vE^y)J";
      try { 
        Parser.parse(". u_\u0001vE^y)J", (-1011));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexp1.equals(regexp0);
      int int0 = 1969;
      Regexp regexp2 = Parser.parse("\n", 1969);
      regexpArray0[2] = regexp2;
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1969);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:Sa\u0000J0-x{10FFFF}]", 673);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 673, 673);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser.parse("\t", (-932));
      Parser parser0 = new Parser((String) null, 9);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 12, (-932));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("N8M{73s]!~Lioaso", 65500);
      Regexp regexp1 = Parser.parse("x", (-2985));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^BC", 2025);
      Parser parser0 = new Parser("^BC", (-4441));
      Regexp regexp1 = Parser.parse("{23`.Wh4xR", 2025);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pPp\u0000", 1729);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp1 = Parser.parse("pPp\u0000", (-1077));
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1729, (-17));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP", 972);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "\\PC";
      int int0 = 1013;
      Regexp regexp0 = Parser.parse("PC", 1013);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 395, 98);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 3779);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("pPJ0-x{10FFFF}]", 2273);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("pPJ0-x{10FFFF}]", (-1340));
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("C", 4200);
      regexpArray0[5] = regexp5;
      String string0 = "missing closing )";
      int int0 = (-1650);
      Regexp regexp6 = Parser.parse(string0, int0);
      Regexp regexp7 = new Regexp(regexp6);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse(string0, int0);
      regexpArray0[7] = regexp8;
      int int1 = 1390;
      int int2 = 70;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:F]|Z", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]|Z", 1240);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser parser0 = new Parser("[:]|Z", 119966);
      Regexp regexp1 = Parser.parse("[:]|Z", (-1490));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      String string0 = "U:4*H@nk8mw(C|A";
      int int0 = (-1440);
      try { 
        Parser.parse("U:4*H@nk8mw(C|A", (-1440));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `U:4*H@nk8mw(C|A`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Parser parser0 = new Parser("!", 3317);
      Parser.parse("!", 123);
      Regexp regexp0 = Parser.parse("PLD", 3317);
      Regexp regexp1 = Parser.parse("T_SuH|\u00058U", 3317);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser.parse("]B,i`m#OWh", 3021);
      String string0 = "w(\\Phic#vV5J$(+";
      try { 
        Parser.parse("w(Phic#vV5J$(+", 3021);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Parser.parse("y^$VZOeFl[2)o366[:y", (-1715));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[2)o366[:y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 57;
      Regexp[] regexpArray0 = new Regexp[9];
      try { 
        Parser.parse("[:[:y", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:[:y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Parser.parse("p{Gt#:T^|+v", 1256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Regexp regexp0 = Parser.parse("AOgPN-=jq}YTRMn_}", 1261);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 108;
      try { 
        Parser.parse("(?U<(?", 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?U<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(c5$+z^T!)Rla_nES", 1232);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@pKENOh<mT~n?[43]mF", 81);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@pENOh<mT~n?[43]moF", 44);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 848);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        Parser.parse("xh@U(ZOKs!{\u0002JXKW|", 49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `xh@U(ZOKs!{\u0002JXKW|`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[tT~1}BDaDF]|Z", 125);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[10];
      Regexp regexp0 = Parser.parse("Z.|Z@", (-364));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("Z.|Z@", (-69));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("Z.|Z@", (-605));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("A(", 10);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = null;
      try {
        regexp5 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("[F]-ksgjvl", 3);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("[F]-ksgjvl", (-421));
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("[F]-ksgjvl", 1);
      assertFalse(regexp4.equals((Object)regexp2));
      
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_LINE;
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp5 = new Regexp(regexp_Op2);
      regexpArray0[5] = regexp5;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 1, 3);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp6 = Parser.parse("[F]-ksgjvl", 3);
      assertFalse(regexp6.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("[F]-ksgjvl", 3);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("[F]-ksgjvl", (-421));
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Parser.parse("[F]-ksgjvl", 1);
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp4;
      Parser.subarray(regexpArray0, 1, 3);
      Regexp regexp5 = Parser.parse("[F]-ksgjvl", 3);
      assertNotSame(regexp5, regexp1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = "4j3[Y3zNk uD-";
      int int0 = (-2576);
      try { 
        Parser.parse("4j3[Y3zNk uD-", (-2576));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Y3zNk uD-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Regexp regexp0 = Parser.parse("G|`{3}Lj", (-5392));
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-5392), (-5392));
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Regexp regexp0 = Parser.parse("G|`{3}Lj", (-5392));
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }
}
