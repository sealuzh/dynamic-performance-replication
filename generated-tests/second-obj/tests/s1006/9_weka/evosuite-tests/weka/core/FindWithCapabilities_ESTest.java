/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:37:18 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.OptionHandlerJavadoc;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.getMatches();
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "Yf{u";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.getRevision();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/mtALi(";
      stringArray0[1] = "/mtALi(";
      stringArray0[2] = "+V*j=p~~8Gh;";
      stringArray0[3] = "8";
      stringArray0[4] = "-nominal-class";
      stringArray0[5] = "weka/core/Capabilities.props";
      capabilities0.m_AttributeTest = true;
      stringArray0[6] = "}C!";
      stringArray0[7] = "v7r6kjKK`{";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      boolean boolean0 = capabilities0.m_MissingClassValuesTest;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\n");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "only-multiinstance";
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability1);
      vector0.add("");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<ListOptions> unaryOperator1 = UnaryOperator.identity();
      Function<Object, ListOptions> function0 = (Function<Object, ListOptions>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ? extends ListOptions>) function0);
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      vector0.replaceAll(unaryOperator0);
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename(" Options:\n\n");
      assertEquals(" Options:\n\n", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      String[] stringArray0 = new String[5];
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "f:(9B";
      stringArray0[2] = "3(\"$AAl4FsFZD^]Z'";
      stringArray0[3] = "-nominal-atts";
      stringArray0[4] = "FI_kbh|ST[au2EG`d";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5";
      stringArray0[1] = "E;zO}";
      stringArray0[2] = "-not-no-class";
      stringArray0[3] = "m%bu,p!qJ";
      stringArray0[4] = "\"H";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.m_MinimumNumberInstancesTest = true;
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertTrue(boolean0);
      
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      capabilities1.getClassCapabilities();
      capabilities1.getOtherCapabilities();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities0.and(capabilities1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities1.createMessage("-num-instances <num>");
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean1 = ClassCache.VERBOSE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.setFilename("no");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "r h7";
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.toString();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setClassIndex("8'");
      capabilities0.and(capabilities0);
      findWithCapabilities0.setClassIndex("8'");
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean1 = ClassCache.VERBOSE;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities3 = capabilities2.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities3);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities0.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities0.and(capabilities1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean1 = ClassCache.VERBOSE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities3 = findWithCapabilities0.m_Capabilities;
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities2.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-1181));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      findWithCapabilities0.setFilename(";9..O08-r7t,");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-only-multiinstance";
      stringArray0[1] = "Cu@ZP)m<[";
      stringArray0[2] = "[DefaultPackageManager] Can't remove ";
      stringArray0[3] = "@me%,E6 _VEgP";
      stringArray0[4] = "UE$g0WM7(";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-missing-class-values";
      stringArray0[1] = "s6IsEa`uDq";
      stringArray0[2] = "jULJ";
      stringArray0[3] = "\tMust handle relational attributes.";
      stringArray0[4] = "*dZeb?";
      stringArray0[5] = "p\"#XYGwOsv?E=#z";
      stringArray0[6] = "relational-class";
      stringArray0[7] = "w0H5O[_t&H\"KH|Un";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean0 = ClassCache.VERBOSE;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean1 = capabilities1.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("nominal-atts");
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.and(capabilities0);
      findWithCapabilities0.setClassIndex("oNX%{`TOzL}T{Iw:,\"|");
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability1);
      boolean boolean1 = ClassCache.VERBOSE;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities3 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities4 = capabilities1.getOtherCapabilities();
      capabilities4.enableAllAttributes();
      findWithCapabilities0.setNotCapabilities(capabilities4);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities3.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("8'");
      findWithCapabilities0.setClassIndex("8'");
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      capabilities0.disable(capabilities_Capability0);
      capabilities2.getAttributeCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.m_GenericPropertiesCreator = false;
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nominal";
      stringArray0[1] = "F](w+J4~!H";
      stringArray0[2] = "-numeric-atts";
      stringArray0[3] = "Ky,c#asiv+'[a8";
      stringArray0[4] = "\tMust handle date classes.";
      stringArray0[5] = "9Q&N0}C@";
      stringArray0[6] = "LhwVv 9h60i!<\"pp{(6";
      stringArray0[7] = "8W'";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("not-numeric-atts");
      findWithCapabilities0.setFilename("D+usaf");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities1;
      capabilities1.enable(capabilities_Capability0);
      capabilities1.dependencies();
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.setClassIndex("8034");
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.enable(capabilities_Capability1);
      boolean boolean1 = ClassCache.VERBOSE;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.isEnabled(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities2 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities2.m_MinimumNumberInstancesTest;
      findWithCapabilities2.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      findWithCapabilities0.setHandler(findWithCapabilities2);
      assertFalse(findWithCapabilities2.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("*c>..9E5G)Q>jaLaI");
      findWithCapabilities1.setFilename("*c>..9E5G)Q>jaLaI");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      Capabilities capabilities1 = findWithCapabilities1.getCapabilities();
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      capabilities0.enable(capabilities_Capability0);
      capabilities2.dependencies();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities1.m_NotCapabilities = capabilities0;
      findWithCapabilities1.listOptions();
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String string0 = findWithCapabilities0.m_Superclass;
      findWithCapabilities0.m_Superclass = "";
      findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.disableNot(capabilities_Capability1);
      findWithCapabilities1.find();
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      capabilities1.disable(capabilities_Capability2);
      findWithCapabilities1.setNotCapabilities(capabilities2);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      StringTokenizer stringTokenizer0 = new StringTokenizer("weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("8'");
      capabilities0.and(capabilities0);
      findWithCapabilities0.setClassIndex("8'");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      capabilities0.getClassCapabilities();
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities0.and(capabilities1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities1.disableAllClasses();
      capabilities1.enableAll();
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities3 = findWithCapabilities0.m_Capabilities;
      capabilities0.getOtherCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean1 = capabilities2.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean0 = capabilities1.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_WordSeparators = null;
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("dKi9r!,U?l%=;JaU]");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities0.and(capabilities1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean1 = ClassCache.VERBOSE;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      Capabilities capabilities3 = findWithCapabilities0.m_Capabilities;
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities2.m_MinimumNumberInstancesTest;
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.disableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      Random.setNextRandom(5);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities4.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      findWithCapabilities0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities1.find();
      Random.setNextRandom((-809));
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-string-class";
      stringArray0[1] = "CMk7";
      stringArray0[2] = "' or '";
      stringArray0[3] = ",&e:K'MQ&4{=Red2";
      stringArray0[4] = "' or '";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("8'");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getCapabilities();
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities0.and(capabilities1);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      boolean boolean0 = capabilities0.m_MissingValuesTest;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean1 = ClassCache.VERBOSE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities1.disableAllClasses();
      capabilities1.enableAll();
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities3 = findWithCapabilities0.m_Capabilities;
      capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities2.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("8'");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Checking for remaining options... ";
      stringArray0[1] = "0V";
      stringArray0[2] = "0:@t";
      stringArray0[3] = "nominal-atts";
      stringArray0[4] = "\tAlso prints the classname that didn't match the criteria.";
      stringArray0[5] = "&a4";
      stringArray0[6] = "-not-unary-atts";
      stringArray0[7] = "FINER";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      boolean boolean0 = ClassCache.VERBOSE;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities4.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("8'");
      String string0 = OptionHandlerJavadoc.OPTIONS_ENDTAG;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      boolean boolean0 = capabilities0.m_MissingClassValuesTest;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8'");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      boolean boolean1 = ClassCache.VERBOSE;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      capabilities1.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities1.m_MinimumNumberInstancesTest;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "AVAC.tQsGU%!gd";
      stringArray0[2] = "\tSuppresses printing in the console.";
      stringArray0[3] = "-missing-att-values";
      stringArray0[4] = "2J6Y3pj>jpE%>p_";
      stringArray0[5] = "lZnk$nrFy`";
      findWithCapabilities0.listOptions();
      stringArray0[6] = "H5";
      stringArray0[7] = "not-relational-class";
      stringArray0[8] = ",&e:K'MQ&4{=Red2";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AVAC.tQsGU%!gd");
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      String string0 = "-not-missing-att-values";
      stringArray0[2] = "-not-missing-att-values";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("8'");
      String string0 = OptionHandlerJavadoc.OPTIONS_ENDTAG;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      boolean boolean0 = capabilities0.m_MissingClassValuesTest;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8'");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      boolean boolean1 = ClassCache.VERBOSE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      capabilities0.disableAllClasses();
      capabilities0.enableAll();
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities;
      capabilities1.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      boolean boolean2 = capabilities2.m_MinimumNumberInstancesTest;
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      ClassDiscovery.m_Cache = null;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Superclass = "weka/core/Capabilities.props";
      findWithCapabilities0.setClassIndex("8'");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      findWithCapabilities1.m_Packages = vector0;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities1.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      vector0.add("9gUw4hd{2Ml");
      vector0.containsAll(vector1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      boolean boolean0 = capabilities0.m_AttributeTest;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector2 = findWithCapabilities2.m_Misses;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }
}
