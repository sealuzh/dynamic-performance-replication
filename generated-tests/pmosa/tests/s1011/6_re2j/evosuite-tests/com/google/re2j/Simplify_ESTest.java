/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 20:03:09 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = 20;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 0;
      regexp1.runes = intArray0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      regexp2.op = regexp_Op0;
      regexp2.cap = 1;
      regexp2.max = (-2440);
      regexp2.runes = regexp1.runes;
      Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp3.op = regexp_Op1;
      regexp3.name = "XbQTxniB";
      Simplify.simplify(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.reinit();
      regexp0.op = regexp_Op1;
      Regexp regexp1 = Simplify.simplify(regexp0);
      assertSame(regexp0, regexp1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[0] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp4 = Simplify.simplify(regexp0);
      assertNotNull(regexp4);
      
      Regexp regexp5 = new Regexp(regexp4);
      Simplify.simplify(regexp5);
      assertSame(regexp4, regexp0);
      assertTrue(regexp0.equals((Object)regexp5));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp1;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertSame(regexp2, regexp0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      int[] intArray0 = new int[4];
      intArray0[0] = 2392;
      intArray0[1] = 2312;
      intArray0[2] = (-826);
      intArray0[3] = 3;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0.op);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[2] = regexp0;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[2] = regexp1;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
          Regexp regexp0 = new Regexp(regexp_Op0);
          Regexp[] regexpArray0 = new Regexp[7];
          Regexp regexp1 = new Regexp(regexp_Op0);
          regexpArray0[0] = regexp1;
          Regexp regexp2 = new Regexp(regexp1);
          Regexp regexp3 = Simplify.simplify(regexp2);
          regexpArray0[1] = regexp3;
          regexpArray0[2] = regexp0;
          regexpArray0[3] = regexp0;
          regexpArray0[4] = regexp0;
          regexpArray0[5] = regexp0;
          regexpArray0[6] = regexp0;
          regexp0.subs = regexpArray0;
          regexp0.min = 2342;
          Regexp regexp4 = Simplify.simplify(regexp0);
          Regexp regexp5 = Simplify.simplify(regexp4);
          Regexp regexp6 = Simplify.simplify(regexp5);
          assertFalse(regexp4.equals((Object)regexp3));
          assertSame(regexp4, regexp6);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
