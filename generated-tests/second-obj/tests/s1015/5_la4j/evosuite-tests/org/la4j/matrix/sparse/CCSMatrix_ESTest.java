/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:07:45 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      Integer integer0 = new Integer((byte)91);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(17, vectorProcedure0);
      cCSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix cCSMatrix1 = CCSMatrix.random(3002, (int) (byte)91, (double) 3854, (Random) mockRandom0);
      double double0 = (-3692.975);
      cCSMatrix1.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 8;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(8, 8);
      cCSMatrix0.nonZeroIteratorOfColumn(8);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      int int1 = 1000;
      int int2 = 579;
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("* mC'`fa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Matrix.fromCSV("");
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow((-1481));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getScript();
      RowMajorSparseMatrix.zero(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3911, 0);
      cCSMatrix0.getRow(3864);
      cCSMatrix0.shuffle();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(3, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.max();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1489);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1908), (-1489), (-3312.78), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 2388);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(2388, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      Matrix matrix0 = Matrix.fromCSV("");
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      double double0 = cCSMatrix0.maxInColumn(3);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(2388, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(2388, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      cCSMatrix0.each((MatrixProcedure) null);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(2388, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3916, 3916);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3916, cCSMatrix0.rows());
      assertEquals(3916, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      Matrix matrix0 = Matrix.constant(3916, 3854, 869.2630632);
      assertEquals(3854, matrix0.columns());
      assertEquals(3916, matrix0.rows());
      assertNotNull(matrix0);
      
      double double0 = cCSMatrix0.maxInColumn((byte)91);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3916, cCSMatrix0.rows());
      assertEquals(3916, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(3916, cCSMatrix0.rows());
      assertEquals(3916, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(byteArray0);
      
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.euclideanNorm();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cCSMatrix0.columnMajorIterator();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(iterator0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 3901;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3901);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.iteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-555.201150109226);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-555.201150109226);
      doubleArray2[1] = (-555.201150109226);
      doubleArray2[2] = (-555.201150109226);
      doubleArray2[3] = (-555.201150109226);
      doubleArray2[4] = (-555.201150109226);
      doubleArray2[5] = (-555.201150109226);
      doubleArray0[1] = doubleArray2;
      CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix.identity(321);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      int int1 = 1199;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1199, 0);
      cCSMatrix0.foldNonZeroInRow(0, (VectorAccumulator) null);
      int int2 = 430;
      int int3 = 2088;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector.fromMap(hashMap0, int3);
      CCSMatrix cCSMatrix1 = new CCSMatrix(int2, int0, int1);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cCSMatrix1.min();
      int int4 = 1;
      CCSMatrix.from1DArray(int4, int1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3916;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      Matrix matrix0 = Matrix.constant(3854, 3854, (-966.0));
      cCSMatrix0.maxInColumn(11);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(554, 2197, matrixFunction0);
      cCSMatrix0.toBinary();
      cCSMatrix0.iteratorOfColumn(3854);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Integer integer0 = new Integer(11);
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixMatrixOperation0, matrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new InPlaceCopyMatrixToMatrix();
      int int1 = (-1);
      int int2 = 3281;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(int1, int2, int0);
      inPlaceCopyMatrixToMatrix1.partiallyApply(denseMatrix0);
      cCSMatrix0.power(int0);
      int int3 = 1064;
      CCSMatrix.identity(int3);
      int int4 = 13;
      cCSMatrix0.power(int4);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      double[] doubleArray0 = null;
      int int5 = 1045;
      int int6 = 48;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int5, int6, doubleArray0);
      cCSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      Matrix.constant(11, 3854, (byte)91);
      cCSMatrix0.maxInColumn((byte)91);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3854).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 3854, matrixFunction0);
      cCSMatrix0.toBinary();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 3016;
      CCSMatrix.from1DArray(3916, Integer.MAX_VALUE, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix.identity(0);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.rank();
      Locale locale0 = Locale.CANADA_FRENCH;
      Matrix matrix0 = cCSMatrix0.removeFirstRow();
      locale0.getScript();
      int int0 = 3709;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix.identity(8);
      double[][] doubleArray0 = new double[1][2];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 5;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      double[][] doubleArray0 = new double[0][7];
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3883;
      doubleArray0[1] = (double) 3883;
      doubleArray0[2] = (double) 3883;
      int[] intArray0 = new int[8];
      intArray0[0] = 3883;
      intArray0[1] = 3883;
      intArray0[2] = 3883;
      intArray0[3] = 1000;
      intArray0[4] = 3883;
      intArray0[5] = 3883;
      intArray0[6] = 3883;
      intArray0[7] = 3883;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3883, 3883, 3883, doubleArray0, intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2, 2);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.swapColumns(2, 2);
      cCSMatrix0.toBinary();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2);
      int int1 = 614;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(614);
      cCSMatrix2.copyOfRows(233);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(2, vectorProcedure0);
      int int2 = 582;
      CCSMatrix.diagonal(int2, int1);
      int int3 = (-893);
      int int4 = 555;
      CCSMatrix.zero(int3, int0, int4);
      int int5 = (-4029);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int5;
      doubleArray0[2] = (double) int2;
      CCSMatrix.from1DArray(int5, int2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale0 = new Locale("2ME", "2ME", "S]aki4{+2");
      locale0.getDisplayLanguage(locale0);
      locale0.getScript();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 17);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      cCSMatrix0.copyOfColumns(0);
      cCSMatrix0.power(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        cCSMatrix1.power((-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1022.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 3916;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      byte byte0 = (byte)91;
      int int1 = 3854;
      Matrix.constant(11, 3854, 869.2630632);
      cCSMatrix0.maxInColumn((byte)91);
      int int2 = 780;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 3854, matrixFunction0);
      cCSMatrix0.toBinary();
      CCSMatrix.fromCSV("org.la4j.LinearAlgebra$SolverFactory$5");
      cCSMatrix0.eachInColumn(int2, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix0.each(matrixProcedure0);
      double double0 = (-52.0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int2, double0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.foldNonZeroInRows(vectorAccumulator0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) byte0;
      int int3 = (-165);
      SparseMatrix.from1DArray(int0, int3, doubleArray0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.transform(matrixFunction1);
      cCSMatrix0.minInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3863, 3863);
      cCSMatrix0.setColumn(3, (double) 3863);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      byte byte0 = (byte)91;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(11, 3854, (byte)91);
      cCSMatrix0.maxInColumn((byte)91);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3854).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 3854, matrixFunction0);
      cCSMatrix0.toBinary();
      SparseMatrix.fromCSV("");
      cCSMatrix0.iteratorOfColumn(3916);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Integer integer0 = new Integer(218);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Integer> matrixMatrixOperation1 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation1).partiallyApply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(0);
      cCSMatrix0.set(0, 3854, (byte)91);
      cCSMatrix0.apply(matrixMatrixOperation1, (Matrix) cRSMatrix0);
      inPlaceCopyMatrixToMatrix0.partiallyApply((DenseMatrix) basic2DMatrix0);
      int int0 = 22;
      cCSMatrix0.power(int0);
      int int1 = 2710;
      cCSMatrix0.eachInColumn(int1, vectorProcedure0);
      cCSMatrix0.max();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(byte0);
      int int2 = 4;
      cCSMatrix1.power(int2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      double[] doubleArray0 = null;
      int int3 = 2775;
      CCSMatrix.from1DArray(byte0, int3, doubleArray0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Matrix matrix0 = Matrix.diagonal(5, 0.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toBinary();
      cCSMatrix0.insert(matrix0);
      int int0 = (-3070);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn((-1224), (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1224
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3893, 3893, 0);
      Integer integer0 = new Integer(3893);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)29;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.max();
      cCSMatrix0.nonZeroAt((byte)5, 3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2538;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2538, 2538);
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.maxInColumn(2538);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory0);
      int int1 = (-1197);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int1);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(int0, int1, matrixFunction0);
      cCSMatrix1.toString();
      int int2 = (-2444);
      int int3 = (-5894);
      cCSMatrix1.getOrElse(int2, int3, int3);
      CCSMatrix.identity(int0);
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix1.eachNonZeroInColumn(int3, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 2393);
      Matrix.fromCSV("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3912, 3912, 3912);
      cCSMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[3];
      cCSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
      intArray0[0] = 7;
      intArray0[1] = (-522);
      intArray0[2] = (-500);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 137;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(137);
      Locale locale0 = Locale.PRC;
      int int1 = 2243;
      locale0.getScript();
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.power(2243);
      NumberFormat.getPercentInstance(locale0);
      Matrix.diagonal(int0, int0);
      cCSMatrix1.removeColumn(int0);
      int int2 = 282;
      int[] intArray0 = new int[2];
      intArray0[0] = int2;
      intArray0[1] = int1;
      cCSMatrix0.select(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      double double0 = (-2811.9);
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int2;
      Matrix.from1DArray(int0, intArray0[0], doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int3 = (-2106);
      cCSMatrix1.eachNonZeroInColumn(int3, vectorProcedure0);
      cCSMatrix0.toBinary();
      cCSMatrix0.setAll(int2);
      String string0 = "";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromMatrixMarket(string0);
      int int4 = 1782;
      cCSMatrix2.iteratorOfColumn(int4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3, (-1541.0749331266077));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(3, vectorProcedure0);
      cCSMatrix0.getRow((-2013265919));
      cCSMatrix0.add((double) (-1920));
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(2234, 2311.4053275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2234
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3912, 3912, 0);
      Integer integer0 = new Integer(3912);
      byte byte0 = (byte)91;
      cCSMatrix0.maxInColumn((byte)91);
      int int0 = 780;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(780, vectorProcedure0);
      cCSMatrix0.each((MatrixProcedure) null);
      double double0 = (-52.0);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int0, double0);
      double double1 = 259.130408;
      cCSMatrix1.add(double1);
      cCSMatrix1.getColumn(byte0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3912, 3912, 0);
      Integer integer0 = new Integer(3912);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toBinary();
      cCSMatrix0.setAll(0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(48, 3893);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale0 = new Locale("2ME", "2ME", "S]aki4{+2");
      locale0.getDisplayLanguage(locale0);
      locale0.getScript();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 17);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix matrix0 = cCSMatrix0.power(0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1336.627;
      int int0 = (-3609);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1336.627).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRow((-3609), vectorAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix1.mkString((NumberFormat) null, "6K3ZBc5A;x9E", "6K3ZBc5A;x9E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      cCSMatrix0.getColumn(6);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(1, 3893, 1.0, (Random) mockRandom0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)57;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 8);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.add((-52.0));
      cCSMatrix0.setColumn(4, (-1450.252391));
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(8, 13, 4);
      SparseMatrix.diagonal(8, 349.44832);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      ((CCSMatrix) columnMajorSparseMatrix0).eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      int int0 = 3854;
      Matrix.constant(740, 740, 3854);
      cCSMatrix0.maxInColumn(313);
      cCSMatrix0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(729, vectorProcedure0);
      cCSMatrix0.each((MatrixProcedure) null);
      CCSMatrix.diagonal(int0, int0);
      double double0 = (-853.3383);
      cCSMatrix0.setColumn(int0, double0);
      double[][] doubleArrayArray0 = null;
      CCSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      int int0 = 11;
      double double0 = 869.2630632;
      Matrix.constant(11, 3854, 869.2630632);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(11, vectorProcedure0);
      int int1 = 3324;
      int int2 = 7;
      MockRandom mockRandom0 = new MockRandom(1L);
      cCSMatrix0.each((MatrixProcedure) null);
      CCSMatrix.diagonal(int1, double0);
      cCSMatrix0.setColumn(int0, (double) int2);
      double[][] doubleArrayArray0 = null;
      CCSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      Matrix.constant(3916, 3854, 869.2630632);
      cCSMatrix0.maxInColumn((byte)91);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      DenseMatrix.fromCSV("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      SparseMatrix.from1DArray(0, 0, doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray1 = new double[1][6];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3912, 3912, 14);
      Integer integer0 = new Integer(3912);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)29;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn((byte)91, vectorProcedure0);
      cCSMatrix0.toBinary();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn((byte)1, vectorFunction0);
      CCSMatrix.block(cCSMatrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(2, 2, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn((-678), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -678
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 460, 79, doubleArray0, intArray0, intArray0);
      cCSMatrix0.toColumnMajorSparseMatrix();
      SparseMatrix.from1DArray(0, 6, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transform(matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 8;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(8, 8, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      int int0 = 3854;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(11, 3854, (byte)91);
      cCSMatrix0.maxInColumn((byte)91);
      int int1 = 780;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3854).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 3854, matrixFunction0);
      Matrix.from1DArray(3916, 11, (double[]) null);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((DenseMatrix) basic2DMatrix0, (SparseMatrix) cCSMatrix0);
      double double0 = 1.0;
      cCSMatrix0.equals(matrix0, double0);
      VectorAccumulator vectorAccumulator0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int1, double0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.forEach(consumer0);
      cCSMatrix0.foldNonZeroInRow(int0, vectorAccumulator0);
      byte[] byteArray0 = null;
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 5;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      int int1 = 18;
      double double0 = 7.0;
      Matrix matrix0 = cCSMatrix0.add(7.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      SparseMatrix.from1DArray(0, 0, doubleArray0);
      columnMajorSparseMatrix0.blankOfRows(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldNonZeroInRow((-1765), vectorAccumulator0);
      cCSMatrix0.minInColumn(0);
      cCSMatrix0.setAll((-2.0));
      double[][] doubleArray1 = new double[0][0];
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      int int0 = 3854;
      Matrix.constant(11, 3854, 869.2630632);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(11, vectorProcedure0);
      int int1 = 3324;
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix cCSMatrix1 = CCSMatrix.random(3324, 7, -0.0, (Random) mockRandom0);
      cCSMatrix1.toBinary();
      cCSMatrix1.setAll(Double.POSITIVE_INFINITY);
      int int2 = (-629);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(int2, int0);
      cCSMatrix2.setAll(int1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3854).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 3854, matrixFunction0);
      cCSMatrix0.toBinary();
      cCSMatrix0.iteratorOfColumn(3916);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Integer integer0 = new Integer(218);
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2710, vectorProcedure0);
      cCSMatrix0.max();
      cCSMatrix0.power((-1031));
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      int int1 = 354;
      CCSMatrix.from1DArray(int1, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      Matrix.constant(11, 3854, 869.2630632);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(11, vectorProcedure0);
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix cCSMatrix1 = CCSMatrix.random(3324, 7, -0.0, (Random) mockRandom0);
      cCSMatrix1.toBinary();
      MockRandom mockRandom1 = new MockRandom(1L);
      CCSMatrix cCSMatrix2 = CCSMatrix.random(7, 3324, (double) 1L, (Random) mockRandom1);
      int int0 = (-77);
      VectorAccumulator vectorAccumulator0 = null;
      cCSMatrix2.foldNonZeroInRow(int0, vectorAccumulator0);
      double[][] doubleArray0 = new double[0][0];
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 14;
      double[][] doubleArray0 = new double[1][2];
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(14, 14, 14);
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      NumberFormat.getPercentInstance(locale0);
      Matrix.diagonal(5, 5);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix.from1DArray(2, 3849, (double[]) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1465.900639928722), (double)2, (-1465.900639928722), 183.94470556554595, (-1465.900639928722)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(4, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Matrix.constant(2011, 1203, 5);
      CCSMatrix cCSMatrix0 = new CCSMatrix(1203, 1203);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 970;
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3916);
      byte byte0 = (byte)91;
      int int0 = 3854;
      Matrix.constant(11, 3854, (byte)91);
      cCSMatrix0.maxInColumn((byte)91);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cCSMatrix0.min();
      int int2 = 3016;
      double double0 = 2824.82621306;
      double[] doubleArray0 = new double[8];
      double double1 = 1615.5756556;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) int1;
      double double2 = (-2699.6749337);
      doubleArray0[7] = double2;
      CCSMatrix.from1DArray(int0, int1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 5;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      int int1 = 1000;
      cCSMatrix0.toCSV();
      NumberFormat.getPercentInstance(locale0);
      Matrix.diagonal(5, 5);
      int int2 = 282;
      int[] intArray0 = new int[15];
      intArray0[1] = 1000;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1000' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      decimalFormat0.setPositivePrefix("\"~6Wb0]v");
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      Matrix.diagonal(5, 5);
      Matrix.identity(8);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = NumberFormat.INTEGER_FIELD;
      SparseMatrix.diagonal(0, 1631);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfRows(0);
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.blankOfColumns(1631);
      cCSMatrix0.nonZeroIteratorOfColumn(5);
      cCSMatrix0.columnMajorIterator();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      cCSMatrix0.select(intArray0, intArray0);
      int int1 = 3369;
      CCSMatrix cCSMatrix3 = CCSMatrix.zero(3546, 0, 3369);
      int int2 = 48;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int2, vectorProcedure0);
      cCSMatrix2.toBinary();
      double double0 = 0.7;
      cCSMatrix3.setAll(double0);
      String string0 = "";
      CCSMatrix.fromMatrixMarket(string0);
      cCSMatrix1.iteratorOfColumn(int1);
      int int3 = (-3430);
      cCSMatrix1.iteratorOfColumn(int3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      NumberFormat.getPercentInstance(locale0);
      Matrix.diagonal(5, 5);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix.from1DArray(2, 3849, (double[]) null);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(4, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(2, 0.5643646893910728, (Random) mockRandom0);
      int int1 = 1000;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.power(2);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Matrix.diagonal(2, 2);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 1000;
      intArray0[2] = 1000;
      intArray0[3] = 282;
      intArray0[4] = 2;
      intArray0[5] = 282;
      int int2 = 3912;
      intArray0[6] = 3912;
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      Locale locale0 = Locale.PRC;
      int int1 = 1000;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale locale1 = new Locale("2ME", "2ME", "[t/`3~Z");
      Locale locale2 = Locale.JAPANESE;
      locale0.getDisplayLanguage(locale2);
      locale2.getScript();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 17);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      int int0 = 1000;
      Matrix matrix0 = cCSMatrix0.add((double) 5);
      Matrix matrix1 = Matrix.diagonal(5, 191.98796);
      Matrix matrix2 = cCSMatrix0.removeFirstRow();
      int int1 = (-3294);
      RowMajorSparseMatrix.zero(8, 302);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, cCSMatrix0, matrix0, matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1114;
      doubleArray0[1] = (double) 1425;
      doubleArray0[2] = (double) 1425;
      doubleArray0[3] = (double) 1114;
      doubleArray0[4] = (double) 1114;
      doubleArray0[5] = (double) 1114;
      int[] intArray0 = new int[9];
      intArray0[0] = 1425;
      intArray0[1] = 1425;
      intArray0[2] = 1425;
      intArray0[3] = 797;
      intArray0[4] = 1114;
      intArray0[5] = 1114;
      intArray0[6] = 1114;
      intArray0[7] = 1114;
      intArray0[8] = 1114;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1425, 1425, 1114, doubleArray0, intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      double double0 = 191.98796;
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cCSMatrix0.add((double) 5);
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(5, 191.98796);
      Basic1DMatrix basic1DMatrix0 = (Basic1DMatrix)Matrix.from1DArray(5, 1398, (double[]) null);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CCSMatrix cCSMatrix1 = (CCSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((DenseMatrix) basic2DMatrix0, (SparseMatrix) cCSMatrix0);
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.copyOfShape(1398, 5);
      cCSMatrix0.equals((Matrix) cRSMatrix0, 3.0);
      cCSMatrix0.setAll(1158.1515);
      double[][] doubleArray0 = new double[8][1];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      cCSMatrix2.equals((Matrix) basic1DMatrix0, 191.98796);
      cCSMatrix2.setAll(1398);
      CCSMatrix.from2DArray(doubleArray0);
      double double1 = Locale.LanguageRange.MIN_WEIGHT;
      int int0 = (-1373);
      cCSMatrix2.setColumn(int0, double0);
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1298, 130.75739636489);
      cCSMatrix0.getRow((-1));
      cCSMatrix0.add(1023.14923071956);
      cCSMatrix0.setColumn(0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3870, 3870);
      cCSMatrix0.getRow(3870);
      cCSMatrix0.add((-511.80083371060607));
      cCSMatrix0.setColumn(1, (double) 3870);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      Matrix.diagonal(5, 191.98796);
      cCSMatrix0.removeFirstRow();
      int int0 = (-3294);
      RowMajorSparseMatrix.zero(8, 302);
      CCSMatrix.zero(1000, 6);
      cCSMatrix0.iteratorOfColumn(3);
      cCSMatrix0.min();
      cCSMatrix0.power((-142));
      int int1 = 13;
      int int2 = 13;
      double double0 = (-30.708971582591);
      cCSMatrix0.set(int1, int2, double0);
      String string0 = "";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string0);
      int int3 = 2260;
      CCSMatrix.diagonal(int3, int0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      Locale locale0 = Locale.PRC;
      cCSMatrix0.add((double) 5);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1000, 168.47305962737698, (double)3860, (-1263.1), 1000.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.rank();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(1000, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, denseMatrix0, denseMatrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[4];
      int int1 = 0;
      intArray0[0] = 0;
      int int2 = 3879;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3879, 0);
      Matrix matrix0 = cCSMatrix0.blankOfRows(0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      cCSMatrix0.minInColumn(0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1, vectorProcedure0);
      int int3 = 1273;
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      sparseVector0.toDiagonalMatrix();
      CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, matrix0);
      double double1 = (-929.19500759333);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int1, double1);
      cCSMatrix0.max();
      CCSMatrix.identity(int0);
      cCSMatrix1.power(int3);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachNonZero(matrixProcedure0);
      CCSMatrix cCSMatrix3 = new CCSMatrix();
      cCSMatrix3.power(int2);
      int int4 = 2;
      int int5 = 3891;
      CCSMatrix.from1DArray(int4, int5, doubleArray0);
      cCSMatrix0.min();
  }
}
