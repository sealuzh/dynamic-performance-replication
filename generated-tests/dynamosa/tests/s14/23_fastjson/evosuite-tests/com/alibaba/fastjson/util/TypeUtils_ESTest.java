/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:41:06 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getClass((Type) class0);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      noSuchMethodError0.getSuppressed();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<HttpCookie> class0 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      String string0 = "!`Stj0";
      ParserConfig.getFieldFromCache("!`Stj0", hashMap0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Class<Point> class1 = Point.class;
      FieldInfo fieldInfo0 = new FieldInfo("!`Stj0", class0, class1, class1, (Field) null, (-509), (-509), 192);
      BeanContext beanContext0 = new BeanContext(fieldInfo0.declaringClass, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Byte byte0 = new Byte((byte)64);
      Byte.toUnsignedInt((byte)18);
      TypeUtils.castToBoolean(byte0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("ZD", "");
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getGenericParamType(class1);
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64("fYm<}jK6h_k0|x=/pS&");
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "ANG[\\).ZS%~q@d";
      TypeUtils.toLocale("ANG[).ZS%~q@d");
      Class<PageAttributes> class0 = PageAttributes.class;
      Field[] fieldArray0 = new Field[5];
      Class<Object> class1 = Object.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ite", "_C3 ]LoN.k9", noSuchMethodError0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = TypeUtils.toLocale("qS");
      assertEquals("", locale0.getCountry());
      
      TypeUtils.getClass((Type) class0);
      Class<Long> class1 = Long.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      SerializeConfig.getGlobalInstance();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      JSONObject jSONObject0 = new JSONObject(hashtable0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      Class<IllegalAccessError>[] classArray0 = (Class<IllegalAccessError>[]) Array.newInstance(Class.class, 8);
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      classArray0[0] = class0;
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      classArray0[1] = class1;
      Class<IllegalAccessError> class2 = IllegalAccessError.class;
      classArray0[2] = class2;
      Class<IllegalAccessError> class3 = IllegalAccessError.class;
      classArray0[3] = class3;
      Class<IllegalAccessError> class4 = IllegalAccessError.class;
      classArray0[4] = class4;
      Class<IllegalAccessError> class5 = IllegalAccessError.class;
      classArray0[5] = class5;
      Class<IllegalAccessError> class6 = IllegalAccessError.class;
      classArray0[6] = class6;
      Class<IllegalAccessError> class7 = IllegalAccessError.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        parserConfig0.initJavaBeanDeserializers(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm deserializer error, java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.castToString(parserConfig0);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("com.alibaba.fastjson.parser.ParserConfig@0000000149");
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("fastjson.parser.deny", "}HW=~cqm!+b'J/*p[ib");
      linkedHashMap0.put("fastjson.parser.deny", "FvYM3");
      Class<NumberFormat> class2 = NumberFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) treeMap0, false, (PropertyNamingStrategy) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      TypeUtils.isProxy(class1);
      TypeUtils.getClass((Type) class1);
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertFalse(class3.isInterface());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("'5<fNO0Wi1>)");
      TypeUtils.loadClass("3](vS/$_g,jM1p)r");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("wait");
      SQLException sQLException0 = new SQLException("3](vS/$_g,jM1p)r", noSuchMethodError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLException: 3](vS/$_g,jM1p)r
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("$=C1k7/^2_ctfTFFXD&");
      assertEquals("$=c1k7/^2_CTFTFFXD&", locale0.toString());
      
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      long long0 = TypeUtils.fnv1a_64("$=C1k7/^2_ctfTFFXD&");
      assertEquals((-9143914990195528545L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      MockThread mockThread0 = new MockThread("{\"$ref\":\"");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("`*!/x?1dCnd}v:", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("{\"$ref\":\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {\"$ref\":\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1795423976), (-1), (-1802488858), (-1257), (-757), (-834));
      TypeUtils.castToSqlTime((Object) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g;0");
      hashMap0.put("[Z", "java.beans.Transient");
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, hashMap0, false, propertyNamingStrategy0);
      HashMap<RenderingHints.Key, SimpleDateFormat> hashMap1 = new HashMap<RenderingHints.Key, SimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      Class<Timestamp> class2 = Timestamp.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getClass(type0);
      TypeUtils.getCollectionItemClass(class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLDataException> class1 = SQLDataException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.fnv1a_64("c^X rxoBA8?8");
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Z={uyVZCQ;[= ", "new Date(");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      TypeUtils.decapitalize((String) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) jSONPDeserializer0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.isNumber("ishashCode");
      Class<TimeZone> class0 = TimeZone.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "ishashCode", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.TimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Class<Date> class1 = Date.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(illegalThreadStateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      int[] intArray0 = new int[4];
      intArray0[0] = 131072;
      intArray0[1] = 131072;
      intArray0[2] = 131072;
      intArray0[3] = 131072;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", "yyyy-MM-dd'T'HH:mm:ss.SSSXXX", 131072, intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(noSuchMethodError0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.NullPointerException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.isKotlin(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      String string0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.castToString(parserConfig0);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("com.alibaba.fastjson.parser.ParserConfig@0000000149");
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("fastjson.parser.deny", "}HW=~cqm!+b'J/*p[ib");
      linkedHashMap0.put("fastjson.parser.deny", "FvYM3");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("has", biFunction0);
      TypeUtils.decapitalize("*;~c ");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("}HW=~cqm!+b'J/*p[ib");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}HW=~cqm!+b'J/*p[ib\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ToDoubleFunction<String> toDoubleFunction0 = (ToDoubleFunction<String>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super String>) toDoubleFunction0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(comparator0);
      Character.valueOf('O');
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.GridBagConstraints@577f28d4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Character.isBmpCodePoint((-1717986916));
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wk<<r< wrwO~a:9k|jB");
      TypeUtils.fnv1a_64_lower("Wk<<r< wrwO~a:9k|jB");
      TypeUtils.castToDate((Object) null);
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) concurrentHashMap0, (Type) class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("`*!/x?1dCnd}v:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.isNumber("j");
      TypeUtils.loadClass("j");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("toS", hashMap0);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      Type[] typeArray0 = new Type[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", true);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.castToSqlTime((Object) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      hashMap1.put("toS", "fastjson.parser.deny");
      TypeUtils.computeGettersWithFieldBase(class0, hashMap1, true, (PropertyNamingStrategy) null);
      HashMap<RenderingHints.Key, SimpleDateFormat> hashMap2 = new HashMap<RenderingHints.Key, SimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap2);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) renderingHints0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.isNumber("j");
      TypeUtils.loadClass("j");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isKotlin(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("\"}hwc]64+LVI_d", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("j", (Class<?>) null, class1, class0, (Field) null, (-595), (-595), 3007);
      BeanContext beanContext0 = new BeanContext((Class<?>) null, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, fieldInfo0.fieldType, fieldInfo0.fieldClass);
      parameterizedTypeImpl0.getTypeName();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Dimension dimension0 = new Dimension((-4511), (-118));
      dimension0.clone();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "must > ", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.toLocale("com.alibaba.fastjson.serializer.AtomicCodec");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getClassFromMapping("com.alibaba.fastjson.serializer.AtomicCodec");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<String> class2 = String.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("`*!/x?1dCnd}v:", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("`*!/x?1dCnd}v:", class1, class2, class2, (Field) null, (-1239), 19, 19);
      BeanContext beanContext0 = new BeanContext(fieldInfo0.fieldClass, fieldInfo0);
      beanContext0.getFieldClass();
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "unsupported set operation.");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      TypeUtils.loadClass((String) null, classLoader1, false);
      Class<?> class3 = TypeUtils.getClass((Type) fieldInfo0.declaringClass);
      Type type0 = TypeUtils.getCollectionItemType(class3);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("`d^q#V\"$gm\"E5!NsM.");
      assertEquals(7089243645547700972L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("x>-n3STsgWGuVtqG(");
      assertEquals(12, byteArray0.length);
      
      TypeUtils.isHibernateInitialized("x>-n3STsgWGuVtqG(");
      Class<?> class0 = TypeUtils.loadClass("`*!/x?1dCnd}v:");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      boolean boolean0 = false;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      BiConsumer<JavaBeanDeserializer, Object> biConsumer0 = (BiConsumer<JavaBeanDeserializer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      Locale locale0 = Locale.ITALIAN;
      short short0 = (short)56;
      Short short1 = new Short((short)56);
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) short1, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Character.isBmpCodePoint(45);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      TypeUtils.unwrapOptional(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((String) null);
      Class<Byte> class0 = Byte.TYPE;
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null);
      stringIndexOutOfBoundsException0.initCause(mockIllegalArgumentException0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.StringIndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters(class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Float> class2 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy1, true);
      TypeUtils.isProxy(class1);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      mockThread0.getContextClassLoader();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("+8", (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      hashMap0.put("+8", (String) null);
      hashMap0.clear();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("getSuppressed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<MapDeserializer> class0 = MapDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(identityHashMap0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      Class<NoSuchFieldException> class2 = NoSuchFieldException.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class1, type0, propertyNamingStrategy0, false, false);
      TypeUtils.isProxy(javaBeanInfo0.clazz);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      boolean boolean0 = TypeUtils.isHibernateInitialized(optionalCodec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.castToBigInteger((Object) null);
      Class<String> class0 = String.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<?> class1 = TypeUtils.loadClass("illegal jsonp : ", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("N[/]j_qMSI");
      Insets insets0 = new Insets(4049, 4049, 49, 31);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<DataTruncation> class0 = DataTruncation.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(throwableDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.castToBytes("x>-n3STI6sgWGuVtqG(");
      TypeUtils.isHibernateInitialized("x>-n3STI6sgWGuVtqG(");
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "x>-n3STI6sgWGuVtqG(", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0;Xy%HviWD*Vy~!6-vN");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "HMmg0", (byte) (-66));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader0, false);
      Class<?> class1 = TypeUtils.getClass(type0);
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.fnv1a_64_lower("Yw'}fgwCjv:E[0");
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("HMmg0");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : HMmg0
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(5, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      jSONObject0.getShortValue("getSuppressed");
      UUID uUID0 = MockUUID.fromString("P8`");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) uUID0, serializeConfig0, serializerFeatureArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<String> class0 = String.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, parserConfig0);
      Insets insets0 = new Insets(3089, (-1124924129), 989, (-1478));
      Class<NumberFormatException> class1 = NumberFormatException.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("EqITD=Kss!FV')gQy<");
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      Class<String> class1 = String.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, treeMap0, false, propertyNamingStrategy1);
      TypeUtils.castToInt((Object) null);
      Class<?> class2 = TypeUtils.loadClass("EqITD=Kss!FV')gQy<");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Dimension dimension0 = new Dimension((-4511), (-118));
      dimension0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Float> class2 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy1, false);
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) hashtable0, propertyNamingStrategy2);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TypeUtils.getClassFromMapping("4t'>y");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      Long.getLong("siC(Ex'[");
      Long.divideUnsigned((-922337203685477580L), (-922337203685477580L));
      Long.max((-538L), (-538L));
      TypeUtils.castToFloat((Object) null);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getClass((Type) class0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("VakVXPM\"wq", classLoader1, true);
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, "siC(Ex'[", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.castToBytes("x>-n3STsgWGuVtqG(");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      InternalError internalError0 = new InternalError("/", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.InternalError: /
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Float> class1 = Float.TYPE;
      TypeUtils.decapitalize("parse error");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters(class0, (Map<String, String>) hashtable0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      TypeUtils.getKoltinConstructorParameters(class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Map<String, String> map0 = null;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.clearClassMapping();
      TypeUtils.castToSqlDate((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.toLocale("YxD;3");
      TypeUtils.toLocale("YxD;3");
      Class<String> class1 = String.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("YxD;3", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      Class<BigInteger> class1 = BigInteger.class;
      FieldInfo.getFieldType(class1, parameterizedTypeImpl0, class1);
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("AutoCloseSource", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("java.lang.NoSuchMethodError@0000000001", class2, class0, class0, (Field) null, 45380, 26085, 26085);
      Class<InstantiationException> class3 = InstantiationException.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      beanContext0.getField();
      ParserConfig.getFieldFromCache("\"0gda8p$nrvkc^en", weakHashMap0);
      Class<Float> class5 = Float.class;
      weakHashMap0.put("~!v#", (Field) null);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class5, "AutoCloseSource", fieldArray0);
      Field field0 = ParserConfig.getFieldFromCache("\"0gda8p$nrvkc^en", weakHashMap0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getRawClass(class0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize("LQ~eCfx");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(21);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.isNumber("ishashCode");
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      TypeUtils.toLocale("*.,$");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "*.,$", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Character.isBmpCodePoint(45);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(45);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("U9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"U9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      TypeUtils.unwrapOptional(class0);
      PageAttributes pageAttributes0 = new PageAttributes();
      Boolean boolean0 = Boolean.TRUE;
      Class<?> class1 = TypeUtils.getClass(type0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("WriteEnumUsingToString", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("WriteEnumUsingToString", class0, class0, parameterizedTypeImpl0, (Field) null, 2, 2, 2);
      ParserConfig.getFieldFromCache("Ljava.util.concurrent.ConcurrentSkipListMap", identityHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L+8");
      Class<Collator> class0 = Collator.class;
      String string0 = "com.alibaba.fastjson.serializer.AtomicCodec";
      TypeUtils.castToString("com.alibaba.fastjson.serializer.AtomicCodec");
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      TypeUtils.getParserFeatures(class2);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.AtomicCodec");
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class3, linkedHashMap0, true, propertyNamingStrategy0);
      HashMap<RenderingHints.Key, SimpleDateFormat> hashMap0 = new HashMap<RenderingHints.Key, SimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      Class<Timestamp> class4 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.text.Collator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      MockThread mockThread0 = new MockThread();
      TypeUtils.fnv1a_64_lower("com.alibaba.fastjson.parser.SymbolTable");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("toS", hashMap0);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", true);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.castToSqlTime((Object) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      hashMap1.put("toS", "fastjson.parser.deny");
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) parserConfig0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Dimension dimension0 = new Dimension(49, 49);
      dimension0.clone();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.isNumber("");
      TypeUtils.loadClass("");
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(33);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<String> class2 = String.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("`*!/x?1dCnd}v:", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("`*!/x?1dCnd}v:", class1, class2, class2, (Field) null, (-1239), (-31), (-31));
      BeanContext beanContext0 = new BeanContext(fieldInfo0.fieldClass, fieldInfo0);
      beanContext0.getFieldClass();
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "unsupported set operation.");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader1, false);
      Class<?> class3 = TypeUtils.getClass((Type) fieldInfo0.declaringClass);
      TypeUtils.getCollectionItemType(class3);
      TypeUtils.fnv1a_64_lower("`d^q#V\"$gm\"E5!NsM.");
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class4);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      Class<Timestamp> class2 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "Yw'}fgwCjv:E[0", class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Yw'}fgwCjv:E[0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("b/");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<StackTraceElement> class0 = StackTraceElement.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Object object0 = new Object();
      Class<OptionalCodec> class1 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      long long1 = TypeUtils.fnv1a_64("b/");
      assertTrue(long1 == long0);
      assertEquals(623177934962519422L, long1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<?> class1 = TypeUtils.getRawClass(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class1);
      Collection collection0 = new TreeSet<NoClassDefFoundError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(collection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.NoSuchMethodError@0000000001", "NTcI|4sK+o(+");
      linkedHashMap0.put("com.alibaba.fastjson.parser.Feature", ":");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("java.lang.NoSuchMethodError@0000000001");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("r*");
      MockDate mockDate0 = new MockDate(8064, 8, 57, 1023, 1023, (-1795836997));
      TypeUtils.castToSqlDate(mockDate0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      String string0 = "NotWriteDefaultValue";
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, "getFastMatchToken", "<ZzAIRHhu.g#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(487);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Character.isBmpCodePoint(45);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.getOrDefault(parameterizedTypeImpl0, "H=y>x20R[&|");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Dimension dimension0 = new Dimension(2169, (-1933623348));
      Object object0 = new Object();
      TypeUtils.cast((Object) null, (Type) parameterizedTypeImpl0, (ParserConfig) null);
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64("=e^V");
      assertEquals(4792391934355896679L, long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      TypeUtils.decapitalize("j");
      TypeUtils.loadClass("j", (ClassLoader) null, false);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.fnv1a_64("yyyyMMddHHmmssSSSZ");
      BigDecimal bigDecimal0 = new BigDecimal(2072.65);
      Insets insets0 = new Insets((-1444649576), (-1443623647), (-1443623647), 4049);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(insets0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.remove((Object) "Yw'}fgwCjv:E[0");
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<BufferCapabilities> class3 = BufferCapabilities.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      JavaBeanInfo.build((Class<?>) class4, (Type) class3, propertyNamingStrategy0, true, true);
      Class<StackTraceElementDeserializer> class5 = StackTraceElementDeserializer.class;
      TypeUtils.isProxy(class5);
      TypeUtils.isHibernateInitialized((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("Yw'}fgwCjv:E[0");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(type0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.getRawClass(class0);
      Class<Properties> class1 = Properties.class;
      TypeUtils.getParserFeatures(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(noSuchMethodError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLFeatureNotSupportedException: java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.printStackTrace();
      noSuchMethodError0.getSuppressed();
      PageAttributes pageAttributes0 = new PageAttributes();
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<?> class1 = TypeUtils.loadClass("&I &L%");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Character character0 = Character.valueOf('6');
      int int0 = 45;
      Character.isBmpCodePoint(45);
      hashMap0.remove((Object) character0, (Object) character0);
      String string0 = "]T)%:~2G1WU&c{J)A";
      hashMap0.put("]T)%:~2G1WU&c{J)A", "eY^2j[hKk");
      hashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      hashMap0.clear();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0L);
      TypeUtils.castToByte(atomicLong0);
      TypeUtils.castToLong((Object) null);
      ClassLoader.getSystemClassLoader();
      Insets insets0 = new Insets(52, 52, (-1465125889), (-2581));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Insets[top=52,left=52,bottom=-1465125889,right=-2581]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Class<SQLException> class1 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("com.alibaba.fastjson.serializer.AtomicCodec", class0, class1, class0, (Field) null, 2, 2, 2);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      Type type0 = TypeUtils.getCollectionItemType(class2);
      assertNotNull(type0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0);
      Class<Jdk8DateCodec> class3 = Jdk8DateCodec.class;
      int int0 = TypeUtils.getSerializeFeatures(class3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Dimension dimension0 = new Dimension(49, 49);
      dimension0.clone();
      ParserConfig parserConfig0 = null;
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeDeserializer0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.fnv1a_64("");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BigDecimal bigDecimal1 = TypeUtils.castToBigDecimal(bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      PageAttributes pageAttributes0 = new PageAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      String string0 = TypeUtils.castToString(noSuchMethodError0);
      assertNotNull(string0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.NoSuchMethodError@0000000001", "NTcI|4sK+o(+");
      linkedHashMap0.put("com.alibaba.fastjson.parser.Feature", "pl");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("pl", biFunction0);
      TypeUtils.decapitalize("8ORi;I3");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      Class<HttpCookie> class1 = HttpCookie.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Locale locale0 = TypeUtils.toLocale("com.alibaba.fastjson.parser.Feature");
      assertEquals("com.alibaba.fastjson.parser.feature", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put((String) null, (String) null);
      MockThread mockThread0 = new MockThread();
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<Double> class0 = Double.TYPE;
      TreeMap<Locale, OptionalCodec> treeMap0 = new TreeMap<Locale, OptionalCodec>();
      TypeUtils.castToBigDecimal(treeMap0);
      String string0 = TypeUtils.decapitalize("`*!/x?1dCnd}v:");
      assertEquals("`*!/x?1dCnd}v:", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(49, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      jSONObject0.getShortValue("style");
      BreakIterator breakIterator0 = BreakIterator.getWordInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[5] = serializerFeature2;
      JSON.toJSONString((Object) breakIterator0, serializeConfig0, serializerFeatureArray0);
      JSONObject jSONObject1 = new JSONObject(false);
      Class<String> class0 = String.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      TypeUtils.isProxy(javaBeanInfo0.clazz);
      TypeUtils.unwrapOptional((Type) null);
      Class<?> class1 = TypeUtils.getClassFromMapping("=|-{gFK");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<Collator> class1 = Collator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      ParserConfig.getFieldFromCache("@(;R=Q~0K#8y26<8N", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("oracle.sql.DATE", class0, class1, class1, (Field) null, 27, 12, (-1371));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Float> class1 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy1, false);
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashtable0, propertyNamingStrategy2);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("EqITD=Kss!FV')gQy<");
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy1);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<?> class1 = TypeUtils.getRawClass(class0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(jSONType0);
      TypeUtils.getRawClass(class1);
      TypeUtils.getParserFeatures(class1);
      Class<?> class2 = TypeUtils.loadClass("com.alibaba.fastjson.annotation.JSONType$MockitoMock$1260198839@0000000001");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Float> class1 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy1, false);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Character.isBmpCodePoint(45);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("com.alibaba.fastjson.serializer.AtomicCodec", "com.alibaba.fastjson.serializer.AtomicCodec");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "chars");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("java.io.Serializable", (ClassLoader) aSMClassLoader0, true);
      HttpCookie httpCookie0 = new HttpCookie("com.alibaba.fastjson.serializer.AtomicCodec", "java.io.Serializable");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.serializer.AtomicCodec=\"java.io.Serializable\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", identityHashMap0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("isintValue");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("getRoundingMode", "com.alibaba.fastjson.serializer.AtomicCodec");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters(class1, (Map<String, String>) linkedHashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      Class<Field> class2 = Field.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("N[/]j_qMSI");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("`*!/x?1dCnd}v:", identityHashMap0);
      Class<Double> class1 = Double.class;
      Class<LinkageError> class2 = LinkageError.class;
      Class<Calendar> class3 = Calendar.class;
      FieldInfo fieldInfo0 = new FieldInfo("Wu", class3, class0, class1, (Field) null, 2, 2, 71);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getField();
      FieldInfo fieldInfo1 = new FieldInfo("`*!/x?1dCnd}v:", class1, class1, class1, (Field) null, 71, 53, 71);
      Class<TimeUnit> class4 = TimeUnit.class;
      BeanContext beanContext1 = new BeanContext(class4, fieldInfo0);
      beanContext0.getFieldClass();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "z");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Constructor<UUID>[] constructorArray0 = (Constructor<UUID>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      BatchUpdateException batchUpdateException0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.isNumber("ishashCode");
      Class<TimeZone> class0 = TimeZone.class;
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      TypeUtils.cast((Object) null, (Type) class0, (ParserConfig) null);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sqlDateDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alib\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Dimension dimension0 = new Dimension(49, 49);
      dimension0.clone();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(49);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Dimension[width=49,height=49]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      System.setCurrentTimeMillis((-3750763034362895579L));
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      boolean boolean0 = false;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      BiConsumer<JavaBeanDeserializer, Object> biConsumer0 = (BiConsumer<JavaBeanDeserializer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      Locale locale0 = Locale.ITALIAN;
      Short short0 = new Short((short)9);
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) propertyNamingStrategy0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Z={uyVZCQ;[= ", "new Date(");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      hashMap0.put("HxWe+)nf3cD!7hvOH", "m_");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) weakHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Yw'}fgwCjv:E[0", (-1872417015366588117L));
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("Yw'}fgwCjv:E[0", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils.isNumber("j");
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("j");
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("com.alibaba.fastjson.parser.Feature", "j");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      String string0 = "j";
      TypeUtils.decapitalize("j");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.castToSqlDate((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@ad
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize((String) null);
      TypeUtils.computeGetters(class0, (Map<String, String>) hashtable0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<Character> class2 = Character.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class2, (Type) parameterizedTypeImpl0, propertyNamingStrategy0, false, false);
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("isintValue");
      TypeUtils.castToBoolean((Object) null);
      Constructor<UUID>[] constructorArray0 = (Constructor<UUID>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      Class<Boolean> class1 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("i");
      TypeUtils.getCollectionItemClass(class0);
      System.setCurrentTimeMillis((-9223372036854775807L));
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      MockThread mockThread0 = new MockThread();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(487);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Thread[MockThread-0,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<Double> class0 = Double.TYPE;
      TypeUtils.loadClass("`*!/x?1dCnd}v:");
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      ToDoubleFunction<String> toDoubleFunction0 = (ToDoubleFunction<String>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super String>) toDoubleFunction0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(comparator0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("kotlin.reflect.jvm.internal.KClassImpl", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("kotlin.reflect.jvm.internal.KClassImpl", class0, class0, class0, (Field) null, 2, 2, 2);
      Class<Boolean> class1 = Boolean.class;
      identityHashMap0.put("kotlin.reflect.jvm.internal.KClassImpl", (Field) null);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      TypeUtils.getCollectionItemType(class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(comparator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.Comparator$$Lambda$46/544078613@663693d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.isKotlin(class0);
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      Class<Time> class1 = Time.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      TypeUtils.isHibernateInitialized(propertyNamingStrategy0);
      String string0 = "ts";
      Class<StringIndexOutOfBoundsException> class2 = StringIndexOutOfBoundsException.class;
      Class<InstantiationError> class3 = InstantiationError.class;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("]%hh=)FLnyLy", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("javassist.util.proxy.ProxyObject");
      String string0 = TypeUtils.decapitalize("qF*w+D,/~]3@5\"=\"E");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "error parse true";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("error parse true");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SQLDataException sQLDataException0 = new SQLDataException("error parse true", "must > ", (-2170), sQLIntegrityConstraintViolationException0);
      sQLDataException0.fillInStackTrace();
      sQLDataException0.getSuppressed();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("must > ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : must > 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeUtils.toLocale("$=C1k7/^2_ctfTFFXD&");
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(hashMap0);
      hashMap0.put("Ljava.awt.Rectangle", "$=C1k7/^2_ctfTFFXD&");
      treeMap0.put("Ljava.awt.Rectangle", "cause");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>((Comparator<? super BatchUpdateException>) null);
      // Undeclared exception!
      try { 
        treeSet0.add((BatchUpdateException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Short short0 = new Short((short) (-2881));
      Short.toUnsignedLong((short)35);
      Timestamp timestamp0 = new Timestamp(35L);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      mockIllegalArgumentException0.getCause();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      mockIllegalArgumentException0.printStackTrace((PrintStream) mockPrintStream0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalArgumentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", identityHashMap0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Byte byte0 = new Byte((byte)64);
      TypeUtils.castToBoolean(byte0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("ZD", "");
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, true, propertyNamingStrategy0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("Q~eCfx", hashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("f.DEV_FE3\"~/:}19", true);
      classLoader0.clearAssertionStatus();
      classLoader0.setClassAssertionStatus("f.DEV_FE3\"~/:}19", false);
      TypeUtils.loadClass("f.DEV_FE3\"~/:}19", classLoader0, false);
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "f.DEV_FE3\"~/:}19", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.StringCharacterIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.NullPointerException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      TypeUtils.castToDouble((Object) null);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.getParserFeatures(class0);
      Class<?> class1 = TypeUtils.loadClass("di9O$1");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedHashMap<SQLNonTransientConnectionException, TimeUnit> linkedHashMap0 = new LinkedHashMap<SQLNonTransientConnectionException, TimeUnit>();
      String string0 = "psi7)(J05^<3={";
      TypeUtils.loadClass("psi7)(J05^<3={");
      linkedHashMap0.remove((Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      String string1 = "j";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("j", "fastjson.parser.autoTypeSupport", 1665);
      sQLNonTransientConnectionException0.getStackTrace();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      linkedHashMap0.put(sQLNonTransientConnectionException0, timeUnit0);
      parserConfig0.getDeserializer((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashMap0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      TypeUtils.getRawClass(class0);
      Class<Properties> class1 = Properties.class;
      TypeUtils.getParserFeatures(class1);
      Class<?> class2 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", identityHashMap0);
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("isintValue");
      String string0 = "=7)HrHeQD|SnBH{S[0n";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=7)HrHeQD|SnBH{S[0n", "com.alibaba.fastjson.serializer.AtomicCodec", (-3364));
      int int0 = (-176);
      int int1 = 1295;
      Field[] fieldArray0 = new Field[0];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "port", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isNumber("TxS");
      TypeUtils.loadClass((String) null);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      String string0 = "";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("8]TyQ&", "8]TyQ&");
      Type[] typeArray0 = new Type[6];
      Class<Integer> class0 = Integer.TYPE;
      typeArray0[5] = (Type) class0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(":Ek", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      JSONObject jSONObject0 = new JSONObject(26, true);
      SerializeConfig.getGlobalInstance();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      boolean boolean1 = TypeUtils.isNumber("2Q,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      TypeUtils.isKotlin(class1);
      Class<ParameterizedTypeImpl> class2 = ParameterizedTypeImpl.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("\"}hwc]64+LVI_d", hashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("getintern", class1, class2, parameterizedTypeImpl0, (Field) null, 3007, (-595), (-595));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      TypeUtils.fnv1a_64_lower("y0vMhSMy O:9)rz");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class2, class2);
      parameterizedTypeImpl1.getTypeName();
      ClassLoader.getSystemClassLoader();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "{Vwhr\"");
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) gridBagConstraints0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"anchor\":10,\"fill\":0,\"gridheight\":1,\"gridwidth\":1,\"gridx\":-1,\"gridy\":-1,\"insets\":{\"bottom\":0,\"left\":0,\"right\":0,\"top\":0},\"ipadx\":0,\"ipady\":0,\"weightx\":0.0,\"weighty\":0.0}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TypeUtils.isNumber("j");
      TypeUtils.loadClass("j");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("toS", hashMap0);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      ClassLoader.getSystemClassLoader();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";]/U:z-,=l[!7D");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Class<MapDeserializer> class0 = MapDeserializer.class;
      TypeUtils.isProxy(class0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("WriteEnumUsingToString", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("WriteEnumUsingToString", class0, class0, parameterizedTypeImpl0, (Field) null, 2, 2, 2);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      String string0 = "_C3 ]\\LoN.k9";
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      int int0 = (-1713);
      String string1 = "ite";
      ParserConfig.getFieldFromCache("Ljava.util.concurrent.ConcurrentSkipListMap", identityHashMap0);
      int int1 = 34;
      int int2 = 5;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Character character0 = Character.valueOf('@');
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : @
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.getRawClass(class0);
      Class<Properties> class1 = Properties.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(noSuchMethodError0);
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Currency> class3 = Currency.class;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("`iEZm})^DI?}c,", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("`iEZm})^DI?}c,", class3, class4, class0, (Field) null, (-144689306), (-144689306), 0);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "*";
      TypeUtils.getClassFromMapping("*");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkageError linkageError0 = new LinkageError("j");
      linkageError0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(linkageError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Long> class1 = Long.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      String string0 = "Q~eCfx";
      TypeUtils.loadClass("Q~eCfx", (ClassLoader) aSMClassLoader0);
      TypeUtils.loadClass("+8", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("Q~eCfx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "A!Buke``JYUs9']t#z";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("A!Buke``JYUs9']t#z", classLoader0, true);
      TypeUtils.isGenericParamType((Type) null);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      weakHashMap0.put((String) null, "Ljava.util.concurrent.ConcurrentSkipListSet");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {null=Ljava.util.concurrent.ConcurrentSkipListSet}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      noSuchMethodError0.getSuppressed();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      Class<HttpCookie> class1 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy1);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("EqITD=Kss!FV')gQy<");
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      HashMap<RenderingHints.Key, SimpleDateFormat> hashMap0 = new HashMap<RenderingHints.Key, SimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) typeUtils0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      Type type1 = TypeUtils.unwrapOptional(class0);
      PageAttributes pageAttributes0 = new PageAttributes();
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.createCollection(type1);
      Class<StringIndexOutOfBoundsException> class1 = StringIndexOutOfBoundsException.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getClass(type0);
      TypeUtils.getCollectionItemClass(class0);
      String string0 = null;
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("error parse true");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SQLDataException sQLDataException0 = new SQLDataException("error parse true", "must > ", (-2170), sQLIntegrityConstraintViolationException0);
      sQLDataException0.fillInStackTrace();
      sQLDataException0.getSuppressed();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLDataException: error parse true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Byte byte0 = new Byte((byte)64);
      TypeUtils.castToBoolean(byte0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getGenericParamType(class1);
      TypeUtils.castToShort((Object) null);
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("`*!/x?1dCnd}v:", identityHashMap0);
      Class<Double> class1 = Double.class;
      Class<Calendar> class2 = Calendar.class;
      FieldInfo fieldInfo0 = new FieldInfo("Wu", class2, class0, class1, (Field) null, 2, 2, 71);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      TypeUtils.unwrapOptional(fieldInfo0.declaringClass);
      PageAttributes pageAttributes0 = new PageAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("`*!/x?1dCnd}v:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : `*!/x?1dCnd}v:
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Ljava.awt.Point", "C", "@()e&|*v+u&[7=3", 11);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("@()e&|*v+u&[7=3", "\"OeM\"0xv9[x}uVf", "Ljava.awt.Point", 31);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("C", "syntax error", "C", 31);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLTimeoutException0.getSuppressed();
      StackTraceElement stackTraceElement3 = new StackTraceElement("K-\".JW0tWbDdVy!", "o", "Ljava.awt.Point", 11);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("J0U(R", "syntax error", "Ljava.awt.Point", (-366));
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      TypeUtils.isHibernateInitialized(sQLTimeoutException0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      Class<Properties> class1 = Properties.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, hashtable0, true, propertyNamingStrategy0);
      TypeUtils.decapitalize("@()e&|*v+u&[7=3");
      TypeUtils.getParserFeatures(class0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy1);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      InternalError internalError0 = new InternalError("yAk;yl8PlJPXUHh3Y", sQLTimeoutException0);
      Map<String, Object> map0 = javaBeanSerializer0.getFieldValuesMap(internalError0);
      Class<HttpCookie> class2 = HttpCookie.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(map0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public java.net.HttpCookie(java.lang.String,java.lang.String)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("UseISO8601DateFormat", "getMetaClass", 90);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("tn3gT&yfVPb");
      sQLNonTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("writeFieldValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : writeFieldValue
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TypeUtils.castToBytes("x>-n3STsgWGuVtqG(");
      Class<SQLException> class0 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "x>-n3STsgWGuVtqG(", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      TypeUtils.getRawClass(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TreeSet<NoClassDefFoundError> treeSet0 = new TreeSet<NoClassDefFoundError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(24, true);
      SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Collator> class0 = Collator.class;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("02UwZnk", class1, class2, class0, (Field) null, 3089, 3089, 3089);
      parserConfig0.getDeserializer(fieldInfo0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.NoSuchMethodError@0000000001", "NTcI|4sK+o(+");
      linkedHashMap0.put("com.alibaba.fastjson.parser.Feature", "pl");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("pl", biFunction0);
      TypeUtils.decapitalize("8ORi;I3");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      ParserConfig parserConfig0 = new ParserConfig();
      BiConsumer<ThrowableDeserializer, BufferCapabilities> biConsumer0 = (BiConsumer<ThrowableDeserializer, BufferCapabilities>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      Locale locale0 = Locale.ITALIAN;
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) locale0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      LinkedHashSet<SQLWarning> linkedHashSet0 = new LinkedHashSet<SQLWarning>();
      SQLWarning sQLWarning0 = new SQLWarning();
      linkedHashSet0.add(sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : [java.sql.SQLWarning]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<NegativeArraySizeException> class1 = NegativeArraySizeException.class;
      NegativeArraySizeException negativeArraySizeException0 = TypeUtils.cast((Object) null, class1, parserConfig0);
      assertNull(negativeArraySizeException0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "must > ";
      int int0 = (-2170);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.util.concurrent.ConcurrentSkipListMap");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      SQLDataException sQLDataException0 = new SQLDataException("error parse true", "must > ", (-2170), sQLIntegrityConstraintViolationException0);
      sQLDataException0.fillInStackTrace();
      sQLDataException0.getSuppressed();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLDataException: error parse true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("error parse true");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SQLDataException sQLDataException0 = new SQLDataException("error parse true", "must > ", (-2170), sQLIntegrityConstraintViolationException0);
      sQLDataException0.fillInStackTrace();
      sQLDataException0.getSuppressed();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("must > ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : must > 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = null;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      TypeUtils.castToDouble((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.decapitalize((String) null);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.RuleBasedCollator@289747d6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      MockThread mockThread0 = new MockThread("{\"$ref\":\"");
      mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      noSuchFieldError0.printStackTrace();
      String string0 = TypeUtils.castToString(noSuchFieldError0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      ToDoubleFunction<String> toDoubleFunction0 = (ToDoubleFunction<String>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(toDoubleFunction0).applyAsDouble(anyString());
      Comparator<String> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super String>) toDoubleFunction0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(comparator0);
      String string0 = "kotlin.reflect.jvm.internal.KClassImpl";
      treeMap0.put("kotlin.reflect.jvm.internal.KClassImpl", "kotlin.reflect.jvm.internal.KClassImpl");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, treeMap0, true, propertyNamingStrategy0);
      Class<NullPointerException> class1 = NullPointerException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("N[/]j_qMSI");
      Insets insets0 = new Insets(4049, 4049, 49, 31);
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.global = parserConfig0;
      Class<DataTruncation> class0 = DataTruncation.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      Class<InterruptedException> class2 = InterruptedException.class;
      Class<Double> class3 = Double.TYPE;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeSupport", class1, class2, class3, (Field) null, 44, (-12473307), 4049);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(throwableDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(49, false);
      SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      jSONObject0.getShortValue("style");
      BreakIterator.getCharacterInstance(jSONObject0.defaultLocale);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) serializerFeature0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : WriteDateUseDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Character.isBmpCodePoint(45);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.getOrDefault(parameterizedTypeImpl0, "H=y>x2R[&|");
      hashMap0.put("eY^2j[hKk", "OweHJ!0\"D|<)B(l");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      hashMap0.put((String) null, "5 ]PD(JZz]b$");
      hashMap0.clear();
      Double double0 = new Double((-1931.1));
      TypeUtils.castToFloat(double0);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(487);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("eY^2j[hKk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"eY^2j[hKk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      timeUnit0.toHours(2103L);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(timeUnit0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", identityHashMap0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Byte byte0 = new Byte((byte)64);
      TypeUtils.castToBoolean(byte0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("ZD", "");
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getGenericParamType(class1);
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      TypeUtils.castToSqlTime((Object) null);
      SQLDataException sQLDataException0 = new SQLDataException("[C");
      InternalError internalError0 = new InternalError(sQLDataException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.InternalError: java.sql.SQLDataException: [C
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      int int0 = (-610);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -610
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put(".wS5^-l16B4?0", ".wS5^-l16B4?0");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.merge("hf", "hf", biFunction0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      weakHashMap0.entrySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      weakHashMap0.size();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TypeUtils.castToChar((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Time time0 = TypeUtils.castToSqlTime(bigInteger0);
      assertNotNull(time0);
      
      Class<?> class2 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.text.RuleBasedCollator", class2.toString());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TypeUtils.castToChar((Object) null);
      Class<String> class0 = String.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = null;
      hashMap0.put((String) null, (String) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      TypeUtils.decapitalize("&u}]%/~");
      TypeUtils.toLocale("T");
      Class<Point> class1 = Point.class;
      String string1 = "GUfyEq+JL}iZO$>S,W.";
      Field[] fieldArray0 = new Field[6];
      Class<IllegalStateException> class2 = IllegalStateException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      FieldInfo.getFieldType(class0, class0, class0);
      Locale.getISOCountries();
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertEquals("ljava.util.concurrent.ConcurrentSkipListSet", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TreeMap<Locale, OptionalCodec> treeMap0 = new TreeMap<Locale, OptionalCodec>();
      TypeUtils.castToBigDecimal(treeMap0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("unsupportd class ");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: unsupportd class 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SerializeConfig.getGlobalInstance();
      Class<String> class0 = String.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      boolean boolean1 = TypeUtils.isNumber("2Q,");
      assertTrue(boolean1 == boolean0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.loadClass("isintValue");
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("com.alibaba.fatjson.sealizer.AtomicCode", "&NCi,pzEP%l7mBfM");
      Class<MockCalendar> class0 = MockCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.getRawClass(class0);
      Class<Properties> class1 = Properties.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(noSuchMethodError0);
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("[").when(genericArrayType0).toString();
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Currency> class3 = Currency.class;
      Class<SQLRecoverableException> class4 = SQLRecoverableException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("`iEZm})^DI?}c,", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("`iEZm})^DI?}c,", class3, class4, class0, (Field) null, (-144689306), (-144689306), 0);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getSuppressed", classLoader0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("j", (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      hashMap0.put("+8", (String) null);
      hashMap0.clear();
      Double double0 = new Double((-744.1507858));
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("getSuppressed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("b/");
      assertEquals(623177934962519422L, long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", false);
      TypeUtils.decapitalize((String) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<StackTraceElement> class0 = StackTraceElement.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.castToSqlDate((Object) null);
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.getClass((Type) class0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "b/");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      boolean boolean0 = TypeUtils.isHibernateInitialized(timeDeserializer0);
      assertTrue(boolean0);
      
      TypeUtils.castToBigDecimal(weakHashMap0);
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("isintValue");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).toString();
      TypeUtils.decapitalize("");
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.loadClass("");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(biFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.NoSuchMethodError@0000000001", "NTcI|4sK+o(+");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy1, true);
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      Class<MockDate> class1 = MockDate.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy2);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Class<AtomicLong> class0 = AtomicLong.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      assertNotNull(type0);
      
      Class<Annotation> class1 = Annotation.class;
      Class<Insets> class2 = Insets.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      ParserConfig.getFieldFromCache("com.alibaba.fatjson.sealizer.AtomicCode", linkedHashMap0);
      Class<Integer> class4 = Integer.class;
      Class<SQLTransactionRollbackException> class5 = SQLTransactionRollbackException.class;
      FieldInfo fieldInfo0 = new FieldInfo("oracle.sql.DATE", class4, class5, class1, (Field) null, (-1371), 27, 1221);
      BeanContext beanContext0 = new BeanContext(class4, fieldInfo0);
      beanContext0.getMethod();
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "[!J|:By?l?h!4]@", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getRawClass(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Dimension dimension0 = new Dimension(178, 178);
      dimension0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TypeUtils.isNumber("");
      TypeUtils.loadClass("");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("toS", hashMap0);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setDefaultAssertionStatus(true);
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getClass((Type) class0);
      String string0 = "andDecrement";
      SQLWarning sQLWarning0 = new SQLWarning("andDecrement", "java.awt.Rectangle");
      TypeUtils.isHibernateInitialized("Ljava.awt.Rectangle");
      DataTruncation dataTruncation0 = new DataTruncation((-595), true, false, (-214748364), (-214748364));
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(dataTruncation0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.BigIntegerCodec", (ClassLoader) null, true);
      NumberFormatException numberFormatException0 = new NumberFormatException("com.alibaba.fastjson.serializer.BigIntegerCodec");
      String string0 = "td`8m$[X9$R$H(dJ>w";
      MockFile.createTempFile("object", "td`8m$[X9$R$H(dJ>w");
      TypeUtils.getCollectionItemClass(class0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.serializer.BigIntegerCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<BigInteger> class0 = BigInteger.class;
      FieldInfo.getFieldType(class0, parameterizedTypeImpl0, class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("AutoCloseSource", weakHashMap0);
      ParserConfig.getFieldFromCache("\"0gda8p$nrvkc^en", weakHashMap0);
      Class<Float> class1 = Float.class;
      weakHashMap0.put("~!v#", (Field) null);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "AutoCloseSource", fieldArray0);
      Field field0 = ParserConfig.getFieldFromCache("\"0gda8p$nrvkc^en", weakHashMap0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TypeUtils.isNumber("");
      String string0 = "wQV+1@`H+!$jes(";
      // Undeclared exception!
      try { 
        JSON.parseArray("wQV+1@`H+!$jes(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(49, false);
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      jSONObject0.getShortValue("style");
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(jSONObject0.defaultLocale);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[5] = serializerFeature2;
      JSON.toJSONString((Object) breakIterator0, serializeConfig0, serializerFeatureArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.loadClass(".000000000", (ClassLoader) null, false);
      HttpCookie httpCookie0 = new HttpCookie("5ffzDr*sd>HG\"y", ".000000000");
      Integer integer0 = new Integer(989);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(integer0);
      assertEquals("1970-01-01 00:00:00.989", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("groupingUsed", noSuchMethodError0);
      TypeUtils.castToString(typeNotPresentException0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.TypeNotPresentException@0000000001", "byte");
      linkedHashMap0.put("z\">m]A", "java.lang.TypeNotPresentException@0000000001");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<String> class1 = String.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      ParserConfig parserConfig0 = new ParserConfig();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      Locale locale0 = Locale.ITALIAN;
      Short short0 = new Short((short)509);
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) short0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(49, false);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      jSONObject0.getShortValue("style");
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(jSONObject0.defaultLocale);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      serializerFeatureArray0[0] = serializerFeature3;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[5] = serializerFeature2;
      JSON.toJSONString((Object) breakIterator0, serializeConfig0, serializerFeatureArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<String> class0 = String.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      boolean boolean0 = TypeUtils.isProxy(javaBeanInfo0.clazz);
      assertFalse(boolean0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.createCollection(class0);
      Class<?> class2 = TypeUtils.loadClass(",50");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-32));
      TypeUtils.castToLong(byte0);
      ClassLoader.getSystemClassLoader();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("gettoStrLing");
      mockIllegalStateException0.getSuppressed();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, mockIllegalStateException0);
      sQLTransactionRollbackException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(sQLTransactionRollbackException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<?> class1 = TypeUtils.getRawClass(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class1);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy1, false);
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy2);
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      TypeUtils.getGenericParamType(class2);
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      TypeUtils.isNumber("j");
      TypeUtils.loadClass("j");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isKotlin(class0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("\"}hwc]64+LVI_d", hashMap0);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.createCollection(type0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<IllegalAccessException> class1 = IllegalAccessException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classLoader0.setClassAssertionStatus("f.DEV_FE3\"~/:}19", false);
      TypeUtils.loadClass("f.DEV_FE3\"~/:}19", classLoader0, false);
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "f.DEV_FE3\"~/:}19", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.StringCharacterIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TypeUtils.loadClass("L%},81B(q`L`Hrz8};");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("L%},81B(q`L`Hrz8};").when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      long long0 = TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      assertEquals(1738295696926195886L, long0);
      
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      String string0 = TypeUtils.decapitalize("E*gjtVPxF\"@kOHhJE");
      assertEquals("e*gjtVPxF\"@kOHhJE", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      String string0 = "ite";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ite", "_C3 ]LoN.k9", noSuchMethodError0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("ite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ite
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getSuppressed", classLoader0);
      TypeUtils.loadClass("[double", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("getSuppressed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getGenericParamType(class0);
      Class<NegativeArraySizeException> class1 = NegativeArraySizeException.class;
      NegativeArraySizeException negativeArraySizeException0 = TypeUtils.cast((Object) null, class1, (ParserConfig) null);
      assertNull(negativeArraySizeException0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("`*!/x?1dCnd}v:", identityHashMap0);
      Class<Double> class1 = Double.class;
      Class<LinkageError> class2 = LinkageError.class;
      Class<Calendar> class3 = Calendar.class;
      FieldInfo fieldInfo0 = new FieldInfo("Wu", class3, class0, class1, (Field) null, 2, 2, 71);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getField();
      FieldInfo fieldInfo1 = new FieldInfo("`*!/x?1dCnd}v:", class1, class1, class1, (Field) null, 71, 53, 71);
      Class<TimeUnit> class4 = TimeUnit.class;
      BeanContext beanContext1 = new BeanContext(class4, fieldInfo0);
      beanContext0.getFieldClass();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "z");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("`d^q#V\"$gm\"E5!NsM.", classLoader1, false);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("AjWl+0!%U%$nX3");
      assertEquals(3197149997734166645L, long0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = null;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      boolean boolean0 = false;
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.loadClass("(CLjava/lang/String;J)V");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "[int", 419L);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[int", classLoader0);
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TypeUtils.decapitalize("char");
      SecurityException securityException0 = new SecurityException();
      Class<?> class0 = TypeUtils.getClassFromMapping("char");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      TypeUtils.unwrapOptional(class1);
      PageAttributes pageAttributes0 = new PageAttributes();
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.createCollection(class1);
      TypeUtils.getClass((Type) class1);
      Class<NegativeArraySizeException> class2 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) boolean0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      TypeUtils.isNumber("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      Class<InternalError> class0 = InternalError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getClass(type0);
      TypeUtils.loadClass("gKbH35?GA", (ClassLoader) null, false);
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      TypeUtils.isNumber("gKbH35?GA");
      TypeUtils.fnv1a_64_lower("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("principal", treeMap0);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, (Class<?>) null, class1, (Type) null, (Field) null, 435, (-202), 435);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      String string0 = "`*!/x?1dCnd}v:";
      Class<Double> class0 = Double.TYPE;
      TypeUtils.loadClass("`*!/x?1dCnd}v:");
      TypeUtils.castToBigInteger((Object) null);
      Dimension dimension0 = new Dimension(43, 43);
      TypeUtils.isHibernateInitialized(dimension0);
      Hashtable<OptionalCodec, Calendar> hashtable0 = new Hashtable<OptionalCodec, Calendar>();
      Class<StackTraceElement> class1 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) hashtable0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Declaring class is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getParserFeatures(class0);
      Class<Collator> class1 = Collator.class;
      String string0 = null;
      Field[] fieldArray0 = new Field[8];
      Class<Integer> class2 = Integer.TYPE;
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class1, class1, class2, (Field) null, 44, 0, 193);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TypeUtils.clearClassMapping();
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(javaObjectDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", hashtable0);
      int int0 = (-49);
      String string0 = "=`{d!";
      FieldInfo fieldInfo0 = new FieldInfo("=`{d!", class0, class0, class0, (Field) null, (-49), (-49), 41);
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      ParserConfig.getFieldFromCache("Ljava.util.concurrent.ConcurrentSkipListMap", hashtable0);
      Class<BitSet> class1 = BitSet.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Dimension dimension0 = new Dimension(49, 49);
      dimension0.clone();
      Class<InstantiationException> class0 = InstantiationException.class;
      FieldInfo.getFieldType(class0, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("groupingUsed", noSuchMethodError0);
      TypeUtils.castToString(typeNotPresentException0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.TypeNotPresentException@0000000001", "yte");
      linkedHashMap0.put("z\">m]A", (String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("yte", biFunction0);
      TypeUtils.decapitalize((String) null);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      parameterizedTypeImpl1.getTypeName();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dimension0, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@401
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(24, true);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      jSONObject0.getShortValue("style");
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) jSONObject0, serializeConfig0, serializerFeatureArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<String> class0 = String.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, parserConfig0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, false, false);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gd`");
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.isPath(class0);
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      TypeUtils.unwrapOptional(class0);
      Class<Double> class1 = Double.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("0r[QF", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("0r[QF", class1, class1, class1, (Field) null, 0, 512, (-848));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Dimension dimension0 = new Dimension(55, (-4511));
      dimension0.clone();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("com.alibaba.fastjson.serializer.BeforeFilter");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.IllegalAccessError: com.alibaba.fastjson.serializer.BeforeFilter
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Short short0 = new Short((short) (-2881));
      Short.toUnsignedLong((short)35);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -2881
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Method method0 = null;
      TypeUtils.isTransient((Method) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("EqITD=Kss!FV')gQy<");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      TypeUtils.castToSqlDate((Object) null);
      Properties properties0 = new Properties();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      TypeUtils.decapitalize((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("isintValue");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("");
      TreeMap<SimpleDateFormat, IllegalArgumentException> treeMap0 = new TreeMap<SimpleDateFormat, IllegalArgumentException>();
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) treeMap0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Character.isBmpCodePoint(45);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("eY^2j[hKk", "OweHJ!0\"D|<)B(l");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      hashMap0.put((String) null, "5 ]PD(JZz]b$");
      hashMap0.clear();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(487);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("eY^2j[hKk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"eY^2j[hKk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("getgetSQLState", biFunction0);
      TypeUtils.decapitalize("b?PNe");
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Locale locale0 = Locale.FRENCH;
      BreakIterator breakIterator0 = BreakIterator.getLineInstance(locale0);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) breakIterator0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      TypeUtils.isNumber("j");
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("j");
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("com.alibaba.fastjson.parser.Feature", "j");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("M_|9", biFunction0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Calendar> class1 = Calendar.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0);
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<BufferCapabilities> class3 = BufferCapabilities.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class3, propertyNamingStrategy0, false, false);
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getSuppressed", classLoader0);
      String string0 = "+8";
      Class<Float> class0 = Float.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Dimension dimension0 = new Dimension((-1624309490), (-1933623348));
      dimension0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "+8", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getGenericParamType(class0);
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      SqlDateDeserializer sqlDateDeserializer0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(sqlDateDeserializer0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(24, true);
      SerializeConfig.getGlobalInstance();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature0;
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Collator> class0 = Collator.class;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("02UwZnk", class1, class2, class0, (Field) null, 819, 819, 3089);
      parserConfig0.getDeserializer(fieldInfo0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      JSONObject jSONObject0 = new JSONObject(20, false);
      SerializeConfig.getGlobalInstance();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject2, class1, parserConfig0);
      TypeUtils.isProxy(class0);
      Class<IllegalStateException> class2 = IllegalStateException.class;
      TypeUtils.cast((Object) jSONObject2, class2, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.ParserConfig@98
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      Class<Float> class1 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      assertTrue(hashtable1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(type0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      int[] intArray0 = new int[4];
      intArray0[0] = 131072;
      intArray0[1] = 131072;
      intArray0[2] = 131072;
      intArray0[3] = 131072;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", "yyyy-MM-dd'T'HH:mm:ss.SSSXXX", 131072, intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(noSuchMethodError0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point();
      Point2D.Float point2D_Float0 = new Point2D.Float(302.32455F, 0.0F);
      point0.setLocation((Point2D) point2D_Float0);
      point0.move(370, 370);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.awt.Point[x=370,y=370]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(weakHashMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("gettoLocalizedPattern", "getInstance");
      treeMap0.put("getInstance", " K");
      TypeUtils.computeGetters(class0, (Map<String, String>) linkedHashMap0, true);
      Comparator<SQLException> comparator0 = Comparator.nullsFirst((Comparator<? super SQLException>) null);
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>(comparator0);
      treeSet0.add((BatchUpdateException) null);
      byte[] byteArray0 = TypeUtils.castToBytes("getInstance");
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-21), (byte)72, (byte) (-98), (byte) (-53), (byte)90, (byte) (-99), (byte) (-57)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.decapitalize("j");
      TypeUtils typeUtils0 = new TypeUtils();
      long long0 = TypeUtils.fnv1a_64("yyyyMMddHHmmssSSSZ");
      assertEquals((-2788892379773433580L), long0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.toLocale("YxD;3");
      TypeUtils.toLocale("YxD;3");
      TypeUtils.decapitalize("getgetCause");
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Dimension dimension0 = new Dimension((-614), (-582));
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(dimension1);
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) rectangle0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("groupingUsed", noSuchMethodError0);
      TypeUtils.castToString(typeNotPresentException0);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.TypeNotPresentException@0000000001", "byte");
      linkedHashMap0.put("z\">m]A", (String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("byte", biFunction0);
      TypeUtils.decapitalize((String) null);
      Class<String> class1 = String.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      ParserConfig parserConfig0 = new ParserConfig();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      Locale locale0 = Locale.ITALIAN;
      Short short0 = new Short((short)509);
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) short0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(type0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<String> class1 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, true, propertyNamingStrategy0);
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread.reset();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "to", (-1872417015366588117L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("It)6QviW}x>az=BGTS", classLoader0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation(class0, class2);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("to");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StringIndexOutOfBoundsException: to
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("`*!/x?1dCnd}v:", identityHashMap0);
      Class<Double> class1 = Double.class;
      Class<LinkageError> class2 = LinkageError.class;
      Class<Calendar> class3 = Calendar.class;
      FieldInfo fieldInfo0 = new FieldInfo("Wu", class3, class0, class1, (Field) null, 2, 2, 71);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getField();
      FieldInfo fieldInfo1 = new FieldInfo("`*!/x?1dCnd}v:", class1, class1, class1, (Field) null, 71, 53, 71);
      Class<TimeUnit> class4 = TimeUnit.class;
      BeanContext beanContext1 = new BeanContext(class4, fieldInfo0);
      beanContext0.getFieldClass();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "z");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("`d^q#V\"$gm\"E5!NsM.", classLoader1, false);
      Class class5 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class5.isInterface());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("b/");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", false);
      TypeUtils.decapitalize((String) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("toZ", "xm\"sh&|");
      TypeUtils.castToSqlDate((Object) null);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      TypeUtils.isHibernateInitialized(timeDeserializer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      long long0 = TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      assertEquals(1738295696926195886L, long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<GridBagConstraints> class2 = GridBagConstraints.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0, false);
      assertEquals("class [S", class1.toString());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      TypeUtils.decapitalize("j");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.castToSqlDate((Object) null);
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.getClass((Type) class0);
      SQLWarning sQLWarning0 = new SQLWarning("j", "j");
      TypeUtils.isHibernateInitialized(sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("getgetSQLState", biFunction0);
      TypeUtils.decapitalize("b?PNe");
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Locale locale0 = Locale.FRENCH;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : fr
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      String string0 = TypeUtils.castToString("com.alibaba.fastjson.serializer.AtomicCodec");
      assertNotNull(string0);
      
      TypeUtils.getRawClass(class0);
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      Class<?> class2 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.AtomicCodec");
      assertNotNull(class2);
      
      Class<DecimalFormatSymbols> class3 = DecimalFormatSymbols.class;
      boolean boolean0 = TypeUtils.isProxy(class3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      TypeUtils.getRawClass(class0);
      TypeUtils.decapitalize("=k62jF[rg]y");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.loadClass((String) null);
      TypeUtils.decapitalize("TODO");
      ConcurrentHashMap<SQLTransientException, TimeUnit> concurrentHashMap0 = new ConcurrentHashMap<SQLTransientException, TimeUnit>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(optionalCodec0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("b/");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", false);
      TypeUtils.decapitalize((String) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<StackTraceElement> class0 = StackTraceElement.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.castToSqlDate((Object) null);
      Class<Integer> class1 = Integer.TYPE;
      TypeUtils.getClass((Type) class0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "b/");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.checkAutoType((String) null, class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      Type type1 = TypeUtils.unwrapOptional(class1);
      PageAttributes pageAttributes0 = new PageAttributes();
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.createCollection(type1);
      TypeUtils.getClass(type0);
      Class<NegativeArraySizeException> class2 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, false, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Yw'}fgwCjv:E[0", (-1872417015366588117L));
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class2 = TypeUtils.loadClass("Yw'}fgwCjv:E[0", classLoader0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getClass(type0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("#S!a{CY&I]/cH`ih").when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isInterface());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64("Yw'}fgwCjv:E[0");
      TypeUtils.getCollectionItemClass((Type) null);
      System.setCurrentTimeMillis(1738295696926195886L);
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader classLoader2 = classLoader1.getParent();
      TypeUtils.loadClass("Yw'}fgwCjv:E[0", classLoader2, false);
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.fnv1a_64_lower("Yw'}fgwCjv:E[0");
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      InternalError internalError0 = new InternalError("java.double");
      DataTruncation dataTruncation0 = new DataTruncation(512, false, true, 512, 512, internalError0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) dataTruncation0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.RuntimeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.isNumber("jjeId]\"C}0tt'Hf2");
      Class<TimeZone> class1 = TimeZone.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) type0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.TimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TypeUtils.isNumber("j");
      TypeUtils.loadClass("j");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("toS", hashMap0);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", true);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      TypeUtils.castToSqlTime((Object) null);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      hashMap1.put("toS", "fastjson.parser.deny");
      TypeUtils.computeGettersWithFieldBase(class0, hashMap1, true, (PropertyNamingStrategy) null);
      HashMap<RenderingHints.Key, SimpleDateFormat> hashMap2 = new HashMap<RenderingHints.Key, SimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap2);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      linkedHashMap0.put((String) null, "LR");
      linkedHashMap0.put("SNEd5<wa,", "wZ");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("wZ", biFunction0);
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      Class<Double> class2 = Double.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) linkedHashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      TypeUtils.getKoltinConstructorParameters(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build(class0, (Type) class1, propertyNamingStrategy0, false, false);
      Class<JavaObjectDeserializer> class3 = JavaObjectDeserializer.class;
      TypeUtils.isProxy(class3);
      LinkedHashMap<Timestamp, StackTraceElementDeserializer> linkedHashMap1 = new LinkedHashMap<Timestamp, StackTraceElementDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(linkedHashMap1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<Properties> class2 = Properties.class;
      TypeUtils.getParserFeatures(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(noSuchMethodError0);
      String string0 = "toString";
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("toString", weakHashMap0);
      Field[] fieldArray0 = new Field[4];
      fieldArray0[0] = null;
      fieldArray0[1] = null;
      fieldArray0[2] = null;
      fieldArray0[3] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "tDy4}~Ihv", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", identityHashMap0);
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("isintValue");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("=7)HrHeQD|SnBH{S[0n", "com.alibaba.fastjson.serializer.AtomicCodec", (-3364));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("port");
      sQLNonTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientException: =7)HrHeQD|SnBH{S[0n
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      TypeUtils.isNumber("j");
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("j");
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("com.alibaba.fastjson.parser.Feature", "j");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("org.springframework.security.authentication.UsernamePasswordAuthenticationToken", biFunction0);
      boolean boolean0 = new Boolean(false);
      TypeUtils.loadClass("com.alibaba.fastjson.parser.Feature");
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      TypeUtils.castToString("com.alibaba.fastjson.serializer.AtomicCodec");
      TypeUtils.getRawClass(class0);
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.AtomicCodec");
      Class<JobAttributes> class2 = JobAttributes.class;
      String string0 = "Ljava.awt.Point";
      Field[] fieldArray0 = new Field[1];
      Class<SQLSyntaxErrorException> class3 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class3, "java.lang.String@0000000001", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("getDeclaringClass", weakHashMap0);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      Class<Properties> class1 = Properties.class;
      FieldInfo fieldInfo0 = new FieldInfo("getDeclaringClass", class0, class1, class1, (Field) null, 2791, 80, 20);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      TypeUtils.fnv1a_64_lower(" Z>18dRrz'{");
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) fieldInfo0.fieldClass;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = fieldInfo0.fieldType;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[1]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("H|NT8", false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "2Yhwc]6^+LVI_d", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TypeUtils.isNumber("j");
      TypeUtils.loadClass("j");
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.fnv1a_64_lower("Ljava.awt.Rectangle");
      Type[] typeArray0 = new Type[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.castToSqlTime((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      String string0 = "Q~eCfx";
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getSuppressed", classLoader0);
      TypeUtils.loadClass("Q~eCfx", classLoader0, true);
      TypeUtils.castToBigInteger((Object) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("Q~eCfx", hashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, treeMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("b/");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", false);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(99, (-1802488858), (-1626715158), 15, (-1626715158), (-1802488858));
      TypeUtils.castToSqlTime(mockGregorianCalendar0);
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b/");
      hashMap0.put("b/", "'$x~*\"aJl:x\"y$vN");
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, (PropertyNamingStrategy) null);
      HashMap<RenderingHints.Key, SimpleDateFormat> hashMap1 = new HashMap<RenderingHints.Key, SimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap1);
      Class<Timestamp> class1 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "fastjson.parser.deny", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classLoader0.setClassAssertionStatus("f.DEV_FE3\"~/:}19", false);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TypeUtils.getClassFromMapping("4t'>y");
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getCollectionItemClass(type0);
      Class<DataTruncation> class0 = DataTruncation.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|gmKWeWAHx4");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      System.setCurrentTimeMillis((-1857L));
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<Collator> class1 = Collator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class class2 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class3);
      ParserConfig.getFieldFromCache("@(;R=Q~0K#8y26<8N", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("oracle.sql.DATE", class0, class1, class1, (Field) null, 27, 12, (-1371));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("", (ClassLoader) aSMClassLoader0);
      TypeUtils.loadClass("", classLoader0, false);
      TypeUtils.castToBigInteger((Object) null);
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.isPath(class0);
      TypeUtils.getClassFromMapping("ti|\"_");
      Class<BigDecimal> class1 = BigDecimal.class;
      Class<PageAttributes> class2 = PageAttributes.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("ti|\"_", hashMap0);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo(":%k;XtO.n", class2, (Class<?>) null, class2, (Field) null, 5, 2639, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      mockThread0.getContextClassLoader();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("QD400%@}i2aN\\&wFb", "QD400%@}i2aN\\&wFb");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<AtomicInteger> class0 = AtomicInteger.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Point point0 = new Point();
      point0.x = 161;
      point0.translate(161, 161);
      Point point1 = new Point(53, 322);
      point1.setLocation((double) 161, 2089.0);
      point0.setLocation(point1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.awt.Point[x=161,y=2089]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TypeUtils.isNumber("");
      TypeUtils.loadClass("");
      TypeUtils.getCollectionItemType((Type) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>(33);
      Class<String> class0 = String.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("N[/]j_qMSI");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.MessageFormat@b90b8d65
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<?> class1 = TypeUtils.getRawClass(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class1);
      TreeSet<NoClassDefFoundError> treeSet0 = new TreeSet<NoClassDefFoundError>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(noSuchFieldException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Float> class0 = Float.class;
      Dimension dimension0 = new Dimension(1618, 1618);
      dimension0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      weakHashMap2.clear();
      weakHashMap2.put("reverseOrder", (String) null);
      Class<Collator> class0 = Collator.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.loadClass("");
      Class<Rectangle> class1 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(26, true);
      SerializeConfig.getGlobalInstance();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class0, parserConfig0);
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("1.2.46");
      assertEquals(8131914416413125856L, long0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("error parse true");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      TypeUtils.loadClass("error parse true");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("error parse true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : error parse true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Double> class0 = Double.TYPE;
      MockThread mockThread0 = new MockThread("{\"$ref\":\"");
      TypeUtils.castToBigDecimal(concurrentHashMap0);
      String string0 = TypeUtils.decapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      noSuchMethodError0.getSuppressed();
      TypeUtils.unwrapOptional(class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("java.io.Serializable", (ClassLoader) aSMClassLoader0, false);
      WeakHashMap<StringIndexOutOfBoundsException, Timestamp> weakHashMap0 = new WeakHashMap<StringIndexOutOfBoundsException, Timestamp>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TypeUtils.castToString("");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "Ljava.util.concurrent.ConcurrentSkipListSet");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("getparallelStream", classLoader1, false);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ljava.util.concurrent.ConcurrentSkipListMap");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      Dimension dimension0 = new Dimension((-2170), (-2353));
      dimension0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MPhnMrqe");
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", (ClassLoader) null);
      TypeUtils.cast((Object) null, (Type) null, (ParserConfig) null);
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      FieldInfo.getFieldType(class0, class0, class0);
      String string0 = "java.lang.String@0000000001";
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("java.lang.String@0000000001");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(illegalAccessError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalAccessError: java.lang.String@0000000001
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-95);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("b/", (String) null, (-95), intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("getSuppressed");
      TypeUtils.castToSqlDate((Object) null);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Byte byte0 = new Byte((byte)64);
      TypeUtils.castToBoolean(byte0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.getKoltinConstructorParameters(class1);
      TreeSet<NoClassDefFoundError> treeSet0 = new TreeSet<NoClassDefFoundError>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap2 = new WeakHashMap<String, String>();
      weakHashMap2.put("Ljava.util.concurrent.ConcurrentSkipListSet", ">|[Fkla?%,,J(1x_A");
      TypeUtils.getParserFeatures(class0);
      TypeUtils.loadClass(">|[Fkla?%,,J(1x_A");
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      InternalError internalError0 = new InternalError("~%.UVv}^BWGzK", noSuchMethodError0);
      internalError0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InternalError: ~%.UVv}^BWGzK
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.NoSuchMethodError@0000000001", "NTcI|4sK+o(+");
      linkedHashMap0.put("com.alibaba.fastjson.parser.Feature", ":");
      TypeUtils.unwrapOptional(class0);
      TypeUtils.createCollection(parameterizedTypeImpl0);
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      Class<NegativeArraySizeException> class1 = NegativeArraySizeException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.getRawClass(class0);
      TypeUtils.loadClass("isintValue");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("");
      TypeUtils.castToBoolean((Object) null);
      Class<?> class1 = TypeUtils.loadClass("");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters(class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Class<ParameterizedTypeImpl> class2 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy1, false);
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy2);
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Z={uyVZCQ;[= ", "new Date(");
      hashMap0.put("8ORi;I3", (String) null);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      TypeUtils.decapitalize((String) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      weakHashMap0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) weakHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.RuleBasedCollator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TypeUtils.decapitalize("kotlin.Metadata");
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("kotlin.Metadata", linkedHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("kotlin.Metadata", class0, class1, class1, (Field) null, 83, 1644, 1644);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("kotlin.Metadata", (String) null, "kotlin.Metadata", 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Class<String> class0 = String.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      TypeUtils.decapitalize((String) null);
      Class<SQLException> class1 = SQLException.class;
      Type type0 = FieldInfo.getFieldType(class1, class0, class0);
      Class<?> class2 = TypeUtils.getRawClass(type0);
      TypeUtils.getParserFeatures(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Method method0 = null;
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("i,1X6~Hy@Z ", "LocalizedMessage").when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : LocalizedMessage
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      mockThread0.getContextClassLoader();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(identityHashMap0);
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      Class<SQLException> class1 = SQLException.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getClass(type0);
      TypeUtils.getCollectionItemClass(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("getgetSQLState", biFunction0);
      TypeUtils.decapitalize("getgetDateFormatSymbols");
      Class<Annotation> class0 = Annotation.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      Locale locale0 = Locale.FRENCH;
      BreakIterator.getLineInstance(locale0);
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "getgetDateFormatSymbols", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemClass(class1);
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.castToString(noSuchMethodError0);
      noSuchMethodError0.getSuppressed();
      Class<BigInteger> class0 = BigInteger.class;
      FieldInfo.getFieldType(class0, parameterizedTypeImpl0, class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.createCollection(type0);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      MockThread mockThread0 = new MockThread("{\"$ref\":\"");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("scanFieldDouble", classLoader0, true);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      TypeUtils.getKoltinConstructorParameters((Class) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getSuppressed", classLoader0);
      TypeUtils.getCollectionItemClass((Type) null);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("getSuppressed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getSuppressed\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.isPath(class0);
      TypeUtils.decapitalize("j");
      TypeUtils.loadClass("j", (ClassLoader) null, false);
      Class<IllegalStateException> class1 = IllegalStateException.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      TypeUtils.getAnnotation((Class<?>) class3, class2);
      Class<DataTruncation> class4 = DataTruncation.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class4, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("b/");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";]/U:z-,=l[!7D", false);
      TypeUtils.decapitalize((String) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      String string0 = TypeUtils.castToString(noSuchMethodError0);
      assertNotNull(string0);
      
      noSuchMethodError0.printStackTrace();
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.NoSuchMethodError@0000000001", "NTcI|4sK+o(+");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      Class<String> class0 = String.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("EqITD=Kss!FV')gQy<");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getSuppressed", classLoader0);
      TypeUtils.loadClass("Q~eCfx", classLoader0, false);
      TypeUtils.castToBigInteger((Object) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.isPath(class0);
      TypeUtils.getClassFromMapping("EqITD=Kss!FV')gQy<");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("Q~eCfx", hashMap0);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      FieldInfo fieldInfo0 = new FieldInfo("+8", class1, class2, class0, (Field) null, (-1123436946), (-176), (-826));
      BeanContext beanContext0 = new BeanContext(fieldInfo0.fieldClass, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("Ljava.awt.Color", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. Ljava.awt.Color
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getClassFromMapping("EqITD=Kss!FV')gQy<");
      Collection collection0 = new Vector<ArrayDeque<IndexOutOfBoundsException>>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "getSuppressed");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getSuppressed", classLoader0);
      TypeUtils.loadClass("Q~eCfx", classLoader0, true);
      TypeUtils.castToBigInteger((Object) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("Q~eCfx", hashMap0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy1, true);
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) null, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Float> class2 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters(class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy1, false);
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.toLocale("YxD;3");
      TypeUtils.toLocale("YxD;3");
      Class<String> class1 = String.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("YxD;3", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.castToDate((Object) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string0 = "can not cast to Date, value : ";
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Class<Collator> class0 = Collator.class;
      Class<SQLException> class1 = SQLException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.AtomicCodec", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("com.alibaba.fastjson.serializer.AtomicCodec", class0, class1, class0, (Field) null, 2, 2, 2);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      Class class3 = (Class)TypeUtils.getCollectionItemType(class2);
      assertNotNull(class3);
      assertEquals("class java.lang.Object", class3.toString());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      hashMap0.put(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      hashMap0.put("~NzV(Bfm", "]m CDB");
      hashMap0.remove((Object) ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z");
      hashMap0.putIfAbsent(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z", (String) null);
      hashMap0.put("getBounds", "yyyy-MM-dd HH:mm:ss.SSS");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      TypeUtils.castToFloat((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("groupingUsed", noSuchMethodError0);
      TypeUtils.castToString(typeNotPresentException0);
      noSuchMethodError0.getSuppressed();
      noSuchMethodError0.getSuppressed();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.TypeNotPresentException@0000000001", "byte");
      linkedHashMap0.put("z\">m]A", "java.lang.TypeNotPresentException@0000000001");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("byte", biFunction0);
      Class<String> class0 = String.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      WeakHashMap<ThrowableDeserializer, BufferCapabilities> weakHashMap0 = new WeakHashMap<ThrowableDeserializer, BufferCapabilities>();
      ParserConfig parserConfig0 = new ParserConfig();
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "fastjson.parser.autoTypeSupport", (-1872417015366588117L));
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("byte", classLoader0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("`*!/x?1dCnd}v:", identityHashMap0);
      Class<Double> class1 = Double.class;
      Class<LinkageError> class2 = LinkageError.class;
      Class<Calendar> class3 = Calendar.class;
      FieldInfo fieldInfo0 = new FieldInfo("Wu", class3, class0, class1, (Field) null, 2, 2, 71);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      beanContext0.getField();
      FieldInfo fieldInfo1 = new FieldInfo("`*!/x?1dCnd}v:", class1, class1, class1, (Field) null, 71, 53, 71);
      Class<TimeUnit> class4 = TimeUnit.class;
      BeanContext beanContext1 = new BeanContext(class4, fieldInfo0);
      beanContext0.getFieldClass();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      HashMap<RenderingHints.Key, SimpleDateFormat> hashMap0 = new HashMap<RenderingHints.Key, SimpleDateFormat>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      Class<Timestamp> class5 = Timestamp.class;
      LinkedHashMap<Boolean, MessageFormat> linkedHashMap0 = new LinkedHashMap<Boolean, MessageFormat>();
      Timestamp timestamp0 = TypeUtils.castToJavaBean((Object) linkedHashMap0, class5);
      assertEquals(0, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      hashMap0.putAll(treeMap0);
      hashMap0.put("N*[gc~R", "N*[gc~R");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(hashMap0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("8nLZdk];__1e6!l/T6", classLoader0, false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<DataTruncation> class1 = DataTruncation.class;
      parserConfig0.clearDeserializers();
      parserConfig0.checkAutoType("N*[gc~R", class1, (-1959));
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("ishashCode");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      Class<JobAttributes> class1 = JobAttributes.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
