/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 02:53:17 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("zx}X0%xV");
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'x';
      charArray0[2] = 'l';
      charArray0[3] = 'e';
      charArray0[4] = 'C';
      charArray0[5] = 'N';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.sp = 117;
      jSONScanner0.isEnabled((-2503));
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      System.setCurrentTimeMillis(2147483647L);
      int int0 = 115;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ", 115);
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1421));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 93;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{Axns1", 93);
      jSONReaderScanner0.nextToken(261);
      char char0 = 'H';
      jSONReaderScanner0.scanDecimal('H');
      char char1 = '8';
      jSONReaderScanner0.scanDecimal('8');
      String string0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nPz+Rp@kre\"<~Q>9Nl");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`N[\u0000'!l$Sk", 12);
      Locale locale0 = Locale.KOREAN;
      jSONScanner0.setLocale(locale0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      charArray0[7] = 'g';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDate('g');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "new";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.np = 1702;
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.getCurrent();
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      int int0 = 207;
      SymbolTable symbolTable0 = new SymbolTable(207);
      jSONReaderScanner0.scanFloat('c');
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("new", 3421, 451, 3744, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<T1pIYOC*I$9P", (-207));
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = '@';
      charArray0[2] = 'X';
      charArray0[3] = '\'';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.charAt(9975);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray1);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(1266, 2048, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.matchStat = 95;
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'T';
      charArray0[2] = '-';
      charArray0[3] = '<';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'I';
      jSONScanner0.scanFieldLong(charArray1);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONScanner0.isEnabled(feature0);
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"QY *jlKs!/&Sz7", 12);
      Locale locale0 = new Locale("\"QY *jlKs!/&Sz7");
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('p');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Mi");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[4];
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('!', '!', 'p', '!', 'j', 'j');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      jSONReaderScanner0.scanDate('.');
      jSONReaderScanner0.putChar('.');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanDate(')');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=Z.4CO*[>4UGz");
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      jSONScanner0.nextIdent();
      int int0 = 29;
      jSONScanner0.scanFloat('C');
      SymbolTable symbolTable0 = new SymbolTable(29);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.vm.name");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(9999999);
      jSONScanner0.scanEnum(class0, symbolTable0, 'B');
      int int0 = 6;
      jSONScanner0.setToken(6);
      jSONScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ., info : pos 4, json : java.vm.name
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 57);
      char[] charArray0 = new char[8];
      charArray0[5] = '5';
      charArray0[1] = 'A';
      charArray0[2] = 'o';
      charArray0[3] = 'c';
      charArray0[4] = 'M';
      charArray0[5] = 'g';
      charArray0[6] = '%';
      charArray0[7] = '{';
      pipedWriter0.write(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(pipedReader0, 57);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-1991));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 318;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" not", 318);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.stringDefaultValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      int int1 = 78;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 90, 78);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'P';
      charArray0[2] = 'h';
      charArray0[3] = 'I';
      charArray0[4] = 'J';
      charArray0[5] = '2';
      charArray0[6] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84, 84);
      Locale locale0 = Locale.PRC;
      locale0.getExtension('P');
      Locale locale1 = locale0.stripExtensions();
      Locale.setDefault(locale0);
      locale1.getDisplayScript();
      jSONReaderScanner0.locale = locale0;
      Locale.setDefault(locale1);
      jSONReaderScanner0.setToken(Integer.MAX_VALUE);
      locale0.clone();
      jSONReaderScanner0.setToken(Integer.MAX_VALUE);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.isEnabled(4096);
      jSONReaderScanner0.charAt(99);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" -> ");
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = ')';
      charArray0[2] = '6';
      charArray0[3] = 'a';
      charArray0[4] = 'g';
      charArray0[5] = 'F';
      SymbolTable symbolTable0 = new SymbolTable(117);
      jSONScanner0.scanFieldStringArray(charArray0, 117, symbolTable0);
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = 'o';
      charArray0[2] = 'K';
      charArray0[3] = '!';
      charArray0[4] = 'T';
      charArray0[5] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 160, 160);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" is not a primitive type");
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.nextTokenWithChar('i');
      jSONReaderScanner0.np = (-1114725154);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-1408));
      SymbolTable symbolTable0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6\"(R .ja!}PSV\"<9", (-320));
      jSONScanner0.next();
      jSONScanner0.tokenName();
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken(1373);
      SymbolTable symbolTable0 = new SymbolTable(1373);
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 1373, 44, 42);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'-3JmW");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('o');
      jSONReaderScanner0.pos = (-3579);
      jSONReaderScanner0.scanDouble('~');
      jSONReaderScanner0.isBlankInput();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '_';
      charArray0[2] = ']';
      charArray0[3] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1928, 1928);
      jSONReaderScanner0.scanString(']');
      jSONReaderScanner0.putChar('_');
      jSONReaderScanner0.scanBoolean('z');
      jSONReaderScanner0.scanFloat('I');
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. *
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '~';
      charArray0[0] = '~';
      charArray0[1] = 'u';
      char char1 = 'N';
      charArray0[2] = 'N';
      int int0 = 41;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41);
      jSONReaderScanner0.scanFloat('u');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 103);
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = ':';
      charArray0[2] = '<';
      charArray0[3] = 'G';
      charArray0[4] = 'e';
      charArray0[5] = 'f';
      charArray0[6] = 'c';
      charArray0[7] = '(';
      charArray0[8] = ']';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanString('a');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-968));
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      jSONReaderScanner0.scanStringArray(list0, '@');
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("new", (-1));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 39, 39, 0, 704, (-1));
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      Locale locale0 = Locale.ITALY;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.setTime('&', ']', '@', '^', '&', '8');
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('^');
      assertEquals((-968), jSONReaderScanner0.getFeatures());
      
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(33);
      jSONScanner0.scanEnum(class0, symbolTable0, '-');
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = 'N';
      charArray0[2] = 'W';
      charArray0[3] = '}';
      charArray0[4] = 'k';
      charArray0[5] = 'A';
      charArray0[6] = 'c';
      charArray0[7] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 670);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("treeset");
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '5';
      charArray0[2] = '[';
      charArray0[3] = 'k';
      charArray0[4] = 'y';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 69);
      jSONReaderScanner0.scanDecimal('+');
      stringReader0.reset();
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(41);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '+');
      Class<Object> class1 = Object.class;
      jSONReaderScanner0.newCollectionByType(class1);
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      char[] charArray1 = new char[8];
      charArray1[0] = '+';
      charArray1[1] = '+';
      charArray1[2] = '+';
      charArray1[3] = '+';
      charArray1[4] = '+';
      charArray1[5] = '+';
      charArray1[6] = '+';
      charArray1[7] = '+';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(2704, 3517, charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<g");
      jSONScanner0.resetStringPosition();
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.getLocale();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2814);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.close();
      jSONReaderScanner0.bytesValue();
      int int0 = 4187;
      jSONReaderScanner0.ch = ';';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(4187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":J");
      jSONReaderScanner0.isRef();
      char char0 = 'A';
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDate('A');
      jSONReaderScanner0.stringDefaultValue = "u)9RVs)^#*JmknOZXj{";
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '!';
      charArray0[2] = '\\';
      charArray0[3] = 'Z';
      charArray0[4] = '-';
      charArray0[5] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 39);
      int int0 = 711;
      int int1 = (-1722624049);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), "D", 91, 711, 91, 91, 39, 91, 711, 711, (-1722624049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 91
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1901);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.nextIdent();
      Locale locale0 = Locale.CHINA;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(2);
      jSONReaderScanner0.addSymbol(1901, 69, (-1719465673), symbolTable0);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T_2Vwtitz$hY");
      jSONScanner0.matchStat = 10;
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONScanner0.nextToken();
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.setLocale((Locale) null);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('h', 'h', 'q', '}', '`', 'q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = '}';
      charArray0[2] = '+';
      char char0 = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'U';
      charArray0[5] = '+';
      charArray0[6] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2384, 2384);
      jSONReaderScanner0.pos = (-1218);
      SymbolTable symbolTable0 = new SymbolTable(50);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 50, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 44;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 44);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '}';
      charArray0[0] = '}';
      int int0 = 54;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 54);
      jSONReaderScanner0.scanFieldDate(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(54);
      int int1 = (-3220);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("Set", 106, (-1), (-3220), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'T';
      charArray0[0] = 'T';
      char char1 = 'p';
      charArray0[1] = 'p';
      char char2 = '+';
      charArray0[2] = '+';
      char char3 = 'W';
      charArray0[3] = 'W';
      char char4 = 't';
      charArray0[4] = 't';
      char char5 = ')';
      charArray0[5] = ')';
      charArray0[6] = '\"';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3);
      char char6 = '$';
      jSONScanner0.sp = 3;
      jSONScanner0.scanDate('$');
      Class<Integer> class0 = Integer.class;
      jSONScanner0.setToken(3);
      jSONScanner0.scanEnum(class0, (SymbolTable) null, '*');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'L';
      charArray0[0] = 'L';
      charArray0[1] = '5';
      int int0 = 56;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed jsonArray", 2981);
      char char0 = 'G';
      jSONScanner0.scanLong('G');
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'C';
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      SymbolTable symbolTable0 = new SymbolTable(991);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanStringArray(set0, 'x');
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3561, 3561);
      jSONReaderScanner0.nextTokenWithChar('N');
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.isBlankInput();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = 'v';
      charArray0[0] = 'v';
      char char1 = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'x';
      charArray0[3] = 'f';
      charArray0[4] = 'I';
      int int0 = 1620;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1620);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.putChar('$');
      String string0 = "treeset";
      JSONScanner jSONScanner0 = new JSONScanner(string0, int0);
      char char2 = 'u';
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '(';
      charArray0[2] = 'h';
      charArray0[3] = 'n';
      charArray0[4] = 'd';
      charArray0[5] = 'u';
      charArray0[6] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3931, 127);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 113);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.matchStat = 49;
      jSONReaderScanner0.locale = null;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanType("undefined");
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.sp = (-1208);
      int int0 = 1762;
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1762, jSONReaderScanner0.sbuf, (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",q<,k");
      jSONScanner0.np = (-1339);
      jSONScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(",q<,k");
      linkedHashSet0.add((String) null);
      char char0 = 'Y';
      jSONScanner0.scanStringArray(linkedHashSet0, 'Y');
      jSONScanner0.tokenName();
      int int0 = (-782);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ", 110);
      char char0 = 'Y';
      jSONScanner0.scanFloat('Y');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 1707;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset", 1707);
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      charArray0[0] = 'T';
      charArray0[1] = '^';
      charArray0[2] = 'T';
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray0[3] = '+';
      charArray0[4] = 'Z';
      charArray0[5] = '?';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '{';
      charArray0[2] = 'l';
      charArray0[3] = 't';
      charArray0[4] = '}';
      charArray0[5] = 'C';
      charArray0[6] = 'T';
      charArray0[7] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6, 6);
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1689), 48);
      assertEquals(6, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1006));
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '6';
      charArray0[2] = 'Z';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '1';
      charArray0[0] = '1';
      charArray0[1] = 'd';
      char char1 = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'T';
      int int0 = 2;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2);
      jSONScanner0.hasSpecial = false;
      Locale locale0 = new Locale("syntax error");
      jSONScanner0.locale = locale0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = (-2147483647);
      JSONScanner jSONScanner0 = new JSONScanner("0l!QPS5w,sVt{h", (-2147483647));
      jSONScanner0.putChar('^');
      jSONScanner0.floatValue();
      jSONScanner0.getFeatures();
      int int1 = (-1686);
      int int2 = 41;
      SymbolTable symbolTable0 = new SymbolTable(117);
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      charArray0[6] = '^';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 57, (-2147483647), (-1686));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      char char0 = ':';
      charArray0[1] = ':';
      charArray0[2] = '`';
      charArray0[3] = 'o';
      char char1 = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'C';
      charArray0[6] = 'W';
      int int0 = 503;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 503);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.charAt(2412);
      jSONReaderScanner0.np = 16;
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(503);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - e, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-:z");
      jSONReaderScanner0.matchStat();
      int int0 = 57;
      jSONReaderScanner0.isEnabled(57, 0);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.nextToken();
      charArray0[0] = 'd';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'g';
      charArray0[2] = 'C';
      charArray0[3] = 'f';
      charArray0[4] = 'P';
      charArray0[5] = '6';
      charArray0[6] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 56);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanDouble('g');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '/');
      jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8");
      char char0 = '&';
      jSONScanner0.scanDecimal('&');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONLexerBase.isWhitespace('W');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 308, 308);
      jSONReaderScanner0.token = 308;
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner.checkDate('@', '?', ';', '#', '@', '?', (-6019), 10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = 't';
      charArray0[2] = 'e';
      charArray0[3] = '5';
      charArray0[4] = 'h';
      charArray0[5] = 's';
      charArray0[6] = 'G';
      charArray0[7] = '5';
      charArray0[8] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 110);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.token = 9;
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanUUID('1');
      jSONScanner0.matchStat();
      assertEquals((-1), jSONScanner0.matchStat());
      
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "Set";
      StringReader stringReader0 = new StringReader("Set");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char char0 = 'e';
      jSONReaderScanner0.scanDecimal('e');
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      stringReader0.close();
      try { 
        stringReader0.read(charArray0, 2837, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B[]-Sgcr/HOR?*5D", 1);
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'Y';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = 'j';
      charArray1[1] = 'D';
      charArray1[2] = 'w';
      charArray1[3] = 'z';
      jSONReaderScanner0.scanDate('(');
      charArray1[4] = '>';
      jSONReaderScanner0.scanLong('u');
      charArray1[5] = 'q';
      jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 110;
      JSONScanner jSONScanner0 = new JSONScanner("\"", 110);
      jSONScanner0.scanFloat('>');
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("setter not found, class ", (-1737));
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '}';
      charArray0[3] = ':';
      charArray0[4] = '-';
      charArray0[5] = 'p';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M`R:Eew+E\"!GWO*");
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'z';
      charArray0[2] = '?';
      charArray0[3] = ')';
      charArray0[4] = 'I';
      charArray0[5] = 'X';
      charArray0[6] = 't';
      charArray0[7] = 'K';
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 1406;
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Color", 1406);
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(22, 1406);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = '=';
      charArray0[2] = 'm';
      charArray0[3] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4000, 4000);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt(';');
      assertEquals(4000, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "";
      int int0 = (-2149);
      JSONScanner jSONScanner0 = new JSONScanner("", (-2149));
      char[] charArray0 = new char[2];
      char char0 = 'E';
      charArray0[0] = 'E';
      Feature feature0 = Feature.SupportAutoType;
      boolean boolean0 = false;
      jSONScanner0.nextIdent();
      jSONScanner0.config(feature0, false);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.vm.name", 32);
      jSONScanner0.isRef();
      jSONScanner0.info();
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      Locale locale0 = Locale.ROOT;
      Locale locale1 = locale0.stripExtensions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.tokenName();
      jSONScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. j
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 116);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.subString(4096, 686);
      jSONReaderScanner0.scanBoolean('S');
      jSONReaderScanner0.isRef();
      SymbolTable symbolTable0 = new SymbolTable(1);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 78, 93, 2479);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      char[] charArray0 = new char[9];
      jSONScanner0.scanIdent();
      charArray0[0] = '[';
      charArray0[1] = '8';
      charArray0[2] = 'o';
      charArray0[3] = '<';
      charArray0[4] = ',';
      jSONScanner0.matchStat = (-2554);
      charArray0[5] = 'f';
      charArray0[6] = 'G';
      charArray0[7] = '1';
      charArray0[8] = '/';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.isEnabled(61, 61);
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.isEnabled(feature0);
      int int0 = jSONScanner0.pos();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 133);
      char[] charArray0 = new char[4];
      jSONReaderScanner0.hasSpecial = false;
      charArray0[0] = '<';
      charArray0[1] = 'O';
      char char0 = 'v';
      SymbolTable symbolTable0 = new SymbolTable(1625);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      char[] charArray1 = new char[2];
      charArray1[0] = 'o';
      charArray1[1] = '3';
      char[] charArray2 = new char[1];
      charArray2[0] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A0nW9@i<4-l/ In>~O\"");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.next();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 578);
      jSONScanner0.scanNullOrNew();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char char0 = '?';
      jSONReaderScanner0.scanDouble('?');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0lYo17JNb");
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.charAt(1838);
      jSONReaderScanner0.getCurrent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}L}:NU0*Z*H9");
      char char0 = '\'';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '\\');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xma!:+Fk%@FR&U'", 991);
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      HashSet<String> hashSet0 = new HashSet<String>(0);
      jSONReaderScanner0.scanStringArray(hashSet0, ')');
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.resetStringPosition();
      char[] charArray1 = new char[2];
      charArray1[0] = ')';
      charArray1[1] = ')';
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      JSONScanner jSONScanner0 = new JSONScanner("`M1CLPCjN39GxE`Rp%^");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '|';
      charArray0[2] = 'e';
      charArray0[3] = 'q';
      charArray0[4] = 'K';
      charArray0[5] = 'T';
      charArray0[6] = 'M';
      charArray0[7] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 748);
      jSONReaderScanner0.token();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"qvp1#8]EQ82");
      boolean boolean0 = jSONScanner0.isEnabled(4096);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("iAmn,J", (-876));
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'R';
      charArray0[2] = 'z';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.scanInt('7');
      assertEquals('A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A0nW9@i<4-l/ In>~O\"", 66);
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = 'o';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      charArray1[1] = '3';
      char[] charArray2 = new char[1];
      charArray2[0] = 'N';
      jSONReaderScanner0.scanFieldUUID(charArray2);
      jSONReaderScanner0.scanFieldInt(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">5=_mIEB@kzT<'Xp");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[0] = '-';
      jSONScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = '(';
      charArray1[1] = 'E';
      jSONScanner0.scanFieldFloatArray(charArray1);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")fHS0sMj");
      Object[] objectArray0 = new Object[9];
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, ')');
      objectArray0[0] = (Object) ")fHS0sMj";
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) ")fHS0sMj";
      objectArray0[3] = (Object) ")fHS0sMj";
      objectArray0[4] = (Object) jSONScanner0;
      objectArray0[5] = (Object) ")fHS0sMj";
      objectArray0[6] = (Object) ")fHS0sMj";
      objectArray0[7] = (Object) jSONScanner0;
      objectArray0[8] = (Object) jSONScanner0;
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 75);
      jSONReaderScanner0.close();
      jSONReaderScanner0.info();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-123008));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      char char0 = '&';
      charArray0[1] = '&';
      char char1 = '\\';
      charArray0[2] = '\\';
      int int0 = 57;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      jSONReaderScanner0.token = 57;
      jSONReaderScanner0.scanDate('&');
      jSONReaderScanner0.scanType((String) null);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.setToken(57);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanDecimal('.');
      jSONReaderScanner0.nextToken(83);
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '<';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = '.';
      charArray0[6] = '.';
      charArray0[7] = '.';
      charArray0[8] = '.';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 83, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "";
      int int0 = 10;
      JSONScanner jSONScanner0 = new JSONScanner("", 10);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = 'b';
      jSONScanner0.scanFieldBigInteger(charArray0);
      charArray0[4] = 'b';
      charArray0[5] = '5';
      charArray0[6] = 'b';
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('b', 'b', '5', '5', '5', '5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")fHS0sMj");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")fHS0sMj";
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) ")fHS0sMj";
      objectArray0[3] = (Object) ")fHS0sMj";
      objectArray0[4] = (Object) jSONScanner0;
      objectArray0[5] = (Object) ")fHS0sMj";
      objectArray0[6] = (Object) ")fHS0sMj";
      objectArray0[7] = (Object) jSONScanner0;
      objectArray0[8] = (Object) jSONScanner0;
      jSONScanner0.lexError(")fHS0sMj", objectArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("KQ", (-3662));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - K, info : pos 0, json : KQ
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Locale locale0 = new Locale(";P2!P[,q?$4rTX67X", ";P2!P[,q?$4rTX67X", "");
      jSONReaderScanner0.setLocale(locale0);
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      int int0 = 116;
      jSONReaderScanner0.np = 116;
      charArray0[1] = 'w';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 899;
      JSONScanner jSONScanner0 = new JSONScanner("8Q=lS& ]38", 899);
      jSONScanner0.getFeatures();
      char[] charArray0 = new char[6];
      char char0 = '!';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(899);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 8, info : pos 0, json : 8Q=lS& ]38
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      char char0 = 'H';
      charArray0[0] = 'H';
      charArray0[1] = 'K';
      char char1 = 'a';
      charArray0[2] = 'a';
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.setToken(95);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanInt('/');
      assertEquals(95, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("", (-1));
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '+';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      charArray0[7] = '/';
      charArray0[8] = '/';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '{';
      char char0 = 'C';
      charArray0[2] = 'C';
      int int0 = 65279;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65279, 65279);
      jSONReaderScanner0.matchStat = 65279;
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.putChar('g');
      char char1 = 'v';
      jSONReaderScanner0.scanDate('v');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(65279);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - D, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("is");
      char char0 = '?';
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '^';
      charArray0[2] = '%';
      charArray0[3] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONReaderScanner0.scanDate('d');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A!V_/':y\"0@//");
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanUUID('4');
      jSONScanner0.isRef();
      jSONScanner0.scanUUID('U');
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 1792;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1792);
      jSONReaderScanner0.putChar('4');
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.np = 356;
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = 'w';
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = ';';
      charArray0[2] = 'b';
      charArray0[3] = 'y';
      charArray0[4] = '#';
      charArray0[5] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.pos = 84;
      int int0 = (-1975);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 1944;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/wCDb 2dj<apF?z&", 1944);
      jSONReaderScanner0.stringVal();
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.hasSpecial = false;
      char[] charArray0 = new char[3];
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2(charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sFJ>ziZq2{1>w)eDr");
      char char0 = 'I';
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.matchStat = 205;
      jSONScanner0.np = 12;
      jSONScanner0.scanDate('I');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str", 21);
      jSONScanner0.scanISO8601DateIfMatch(false);
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'o';
      charArray0[2] = 'h';
      charArray0[3] = 'G';
      charArray0[4] = 'V';
      charArray0[5] = 'k';
      charArray0[6] = '5';
      charArray0[7] = '&';
      charArray0[8] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, (-237));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-237), 135, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/wCDb 2dj<apF?z&", 1944);
      jSONReaderScanner0.stringVal();
      int int0 = 3600;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "iJI{69F";
      int int0 = 179;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iJI{69F", 179);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      jSONReaderScanner0.putChar('i');
      charArray0[1] = 'i';
      jSONReaderScanner0.matchField(charArray0);
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("b)+u$/pD1");
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = '3';
      charArray0[3] = '(';
      charArray0[4] = '3';
      charArray0[5] = 'S';
      charArray0[6] = 'l';
      charArray0[7] = 'F';
      charArray0[8] = '+';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 1792;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1792);
      jSONReaderScanner0.putChar('4');
      jSONReaderScanner0.nextToken();
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanInt('#');
      jSONReaderScanner0.np = 356;
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Locale locale0 = new Locale(";P2!P[,q?$4rTX67X", ";P2!P[,q?$4rTX67X", "");
      jSONReaderScanner0.setLocale(locale0);
      char[] charArray0 = new char[5];
      char char0 = '8';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6(*Z;&U%`N'-");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-3662));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('M');
      assertEquals((-3662), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("r^5WpXOq$:+");
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 't';
      charArray0[2] = '@';
      charArray0[3] = 'J';
      charArray0[4] = 'd';
      charArray0[5] = '-';
      charArray0[6] = 'W';
      charArray0[7] = 'h';
      charArray0[8] = '%';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'p';
      charArray1[1] = 'o';
      charArray1[2] = 's';
      charArray1[3] = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit", 93);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "unclosed.str.lit", 93, 0, 5, 5, 5, 13, 0, 116);
      jSONReaderScanner0.timeZone = (TimeZone) simpleTimeZone0;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanUUID('X');
      assertEquals(93, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = '<';
      int int0 = 32;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 32);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanBoolean('/');
      SymbolTable symbolTable0 = new SymbolTable(32);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((String) null, (-1517), (-1517), 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9F~)", 3452);
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.nextToken(127);
      jSONReaderScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(3452);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ~, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7WTq{-uVCb1e6^rh`&:", 603);
      jSONReaderScanner0.charAt(603);
      char[] charArray0 = new char[4];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[0] = '.';
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanLong('.');
      int int0 = (-1997);
      jSONReaderScanner0.np = (-1997);
      jSONReaderScanner0.scanNumber();
      charArray0[1] = 'k';
      charArray0[2] = '\\';
      char char0 = ',';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1202);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Lb&4/ 4aH00");
      boolean boolean0 = jSONReaderScanner0.isEnabled(2203, 2203);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 's';
      charArray0[2] = '>';
      charArray0[3] = '%';
      charArray0[4] = 'W';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 2203);
      jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2203, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'k';
      charArray0[2] = 'Z';
      charArray0[3] = 'g';
      int int0 = (-1601);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1601), 75);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
