/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:43:14 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1125L);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2534), (-1250), (-1469.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[14][1];
      CRSMatrix.diagonal(19, 19);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInColumn(1, vectorProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(1782);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1782
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix.from2DArray(doubleArray0);
      int int0 = (-2683);
      int int1 = 9;
      MockRandom mockRandom0 = new MockRandom((-2683));
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2683), 9, 677.45, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix0.setAll(3071.513100641);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (-2722.7590455713485), (Random) mockRandom0);
      SparseMatrix.zero(0, 1616);
      sparseMatrix0.multiplyByItsTranspose();
      ((CRSMatrix) sparseMatrix0).setAll(0);
      int int0 = (-1473);
      cRSMatrix0.getColumn((-1473));
      MockRandom mockRandom1 = new MockRandom(1024L);
      // Undeclared exception!
      try { 
        mockRandom1.longs((-2280L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      CRSMatrix.from1DArray(2, 2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.nonZeroRowMajorIterator();
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      int int0 = (-2339);
      int int1 = 1182;
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(1182, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1182
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = NumberFormat.INTEGER_FIELD;
      cRSMatrix0.min();
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, sparseMatrix0, cRSMatrix0);
      int int1 = 108;
      MockRandom mockRandom0 = new MockRandom((-27));
      // Undeclared exception!
      try { 
        SparseMatrix.random(0, 108, (double) 108, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(149);
      org.evosuite.runtime.Random.setNextRandom(149);
      double[] doubleArray0 = new double[0];
      RowMajorSparseMatrix.from1DArray(149, 149, doubleArray0);
      int int0 = 1735;
      org.evosuite.runtime.Random.setNextRandom(int0);
      cRSMatrix0.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.randomSymmetric(0, (-2722.7590455713485), (Random) mockRandom0);
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom();
      Integer integer0 = new Integer(17);
      mockRandom0.doubles(0L, (-2722.7590455713485), 0.05863554642795976);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(8);
      cRSMatrix1.equals((Matrix) cRSMatrix0, (double) 0L);
      CRSMatrix cRSMatrix2 = new CRSMatrix(0, 0, 0);
      cRSMatrix0.insert((Matrix) cRSMatrix2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 0.0, 3273.39, (-1.0), (double)8).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-29.3866444);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.mkString((String) null, (String) null);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2683), (-793), 2430.1607766413754, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      long long0 = (-437L);
      mockRandom0.longs((-437L), 9977L);
      mockRandom0.longs(9977L);
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      cRSMatrix0.getColumn((-2047));
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-2047), 9977L);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.toRowVector();
      cRSMatrix0.transpose();
      cRSMatrix0.blankOfShape(3, 2787);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<CRSMatrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[1];
      intArray0[0] = 1030;
      cRSMatrix0.rotate();
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1030' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(172, 1656, 0);
      cRSMatrix0.nonZeroIteratorOfColumn(0);
      Integer integer0 = new Integer(0);
      int[] intArray0 = new int[8];
      cRSMatrix0.toColumnVector();
      intArray0[1] = 1656;
      intArray0[1] = 4;
      intArray0[2] = 1442;
      intArray0[3] = 172;
      intArray0[4] = 1656;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1656' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1772;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1772);
      double double0 = 0.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1772;
      doubleArray0[2] = 0.0;
      RowMajorSparseMatrix.from1DArray(1772, 1772, doubleArray0);
      cRSMatrix0.iteratorOfNonZeroRows();
      double double1 = 1763.06390707;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double0, double1, double0, (double)int0, double0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte)61;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-103);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-42);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-30);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte)2;
      byteArray0[6] = byte6;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      int int1 = 1756;
      cRSMatrix1.nonZeroIteratorOfRow(int1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1721, 8);
      cRSMatrix0.eachNonZeroInRow(13, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.iteratorOfNonZeroRows();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.removeLastRow();
      cRSMatrix0.each(matrixProcedure1);
      cRSMatrix0.getColumn(3);
      cRSMatrix0.iteratorOfRow(3);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1766);
      cRSMatrix0.max();
      int[] intArray0 = new int[7];
      intArray0[0] = 1766;
      intArray0[1] = 1766;
      intArray0[2] = 1766;
      intArray0[3] = 1766;
      intArray0[4] = 1747;
      intArray0[5] = 1766;
      intArray0[6] = 1766;
      int[] intArray1 = new int[6];
      intArray1[0] = 1766;
      intArray1[1] = 1747;
      intArray1[2] = 1747;
      intArray1[3] = 1766;
      intArray1[4] = 1766;
      intArray1[5] = 1766;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1766;
      doubleArray0[1] = (double) 1747;
      CRSMatrix.from1DArray((-1), 13, doubleArray0);
      cRSMatrix0.select(intArray0, intArray1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(intArray0[0], vectorProcedure0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)106;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-17);
      byteArray0[1] = byte1;
      byte byte2 = (byte)7;
      byteArray0[2] = byte2;
      byte byte3 = (byte)17;
      byteArray0[3] = byte3;
      byte byte4 = (byte)8;
      byteArray0[4] = byte4;
      byte byte5 = (byte)107;
      byteArray0[5] = byte5;
      CRSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      int int1 = 198;
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(0, 198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '198' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0L);
      long long0 = 9977L;
      mockRandom0.longs((-434L), 9977L);
      int int1 = 8;
      CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      mockRandom0.doubles(1919L, (double) 0L, 1.0);
      mockRandom0.nextInt();
      CRSMatrix.randomSymmetric(8, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) 8, (double) 9977L, (double) (-434L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1733;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1733);
      double double0 = (-0.627330743);
      cRSMatrix0.blankOfShape(1733, 1733);
      cRSMatrix0.toBinary();
      double double1 = (-1325.9259170276077);
      cRSMatrix0.setColumn(8, (-253.28357));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, (double)int0, double0, double0, double1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(0, 0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)denseMatrix0.hadamardProduct(cRSMatrix0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      cRSMatrix0.min();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
      cRSMatrix1.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte)0;
      cRSMatrix1.getColumn((-1060));
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)Matrix.constant(2601, 2601, 0.0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(basic2DMatrix0, denseMatrix0, denseMatrix0, basic2DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1733);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(1733, 1733);
      cRSMatrix0.update((MatrixFunction) null);
      int int0 = 1794;
      SparseMatrix.identity(int0);
      int int1 = 888;
      cRSMatrix1.nonZeroIteratorOfRow(int1);
      int int2 = (-2035);
      int int3 = 3041;
      int int4 = 185;
      SparseMatrix.zero(int2, int3, int4);
      DenseMatrix denseMatrix0 = cRSMatrix1.toDenseMatrix();
      SparseMatrix.block(denseMatrix0, denseMatrix0, cRSMatrix0, cRSMatrix0);
      int int5 = 17;
      CRSMatrix.zero(int0, int1, int5);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int6 = 1792;
      DenseVector denseVector0 = DenseVector.zero(int6);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (RowMajorSparseMatrix) cRSMatrix0);
      int int7 = 1648;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int7, int7);
      MatrixVectorOperation<Matrix> matrixVectorOperation0 = (MatrixVectorOperation<Matrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.apply(matrixVectorOperation0, vector0);
      int int8 = 1280;
      cRSMatrix2.getColumn(int8);
      MockRandom mockRandom0 = new MockRandom(int8);
      long long0 = 3196944L;
      mockRandom0.longs(long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1733);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1733, (double)1733, (-0.627330743), (-0.627330743), (-1325.9259170276077)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal((byte)32, 13);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(13, 1729);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInColumn((-2488), vectorProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix1.nonZeroIteratorOfRow((byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3726);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      int int0 = 2459;
      cRSMatrix0.nonZeroIteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte byte0 = (byte)32;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2811.43;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 2811.43;
      doubleArray2[1] = 2811.43;
      doubleArray2[2] = 2811.43;
      doubleArray2[3] = 2811.43;
      doubleArray2[4] = 2811.43;
      doubleArray2[5] = (-2505.877507064881);
      doubleArray2[6] = 2811.43;
      doubleArray2[7] = 2811.43;
      doubleArray2[8] = 2811.43;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 2811.43;
      doubleArray3[1] = (-250.142352);
      doubleArray3[2] = (-2505.877507064881);
      doubleArray3[3] = (-2505.877507064881);
      doubleArray3[4] = (-2505.877507064881);
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[3] = (double) 1765;
      doubleArray1[0] = (double) 1765;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.mkString((String) null, "");
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      cRSMatrix0.toColumnMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (double)1765, (-1185.9654), (-1185.9654)).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom(9979L);
      mockRandom0.nextDouble();
      mockRandom0.nextBoolean();
      cRSMatrix0.add((-0.627330743));
      mockRandom0.nextInt(9987);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1000, 9987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.toRowVector();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs();
      mockRandom0.doubles(0L, (double) 0L, 1.0);
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(8, 1.0, (Random) mockRandom0);
      int int0 = Double.SIZE;
      mockRandom0.longs();
      cRSMatrix0.setRow(0, 0.6);
      int int1 = 1721;
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs((-434L), 9977L);
      int int0 = 8;
      mockRandom0.longs(951L, 954L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix.randomSymmetric(0, (-2723.794), (Random) mockRandom0);
      mockRandom0.nextLong();
      mockRandom0.longs();
      mockRandom0.doubles(0L, (-2723.794), (-17.4551903776008));
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      cRSMatrix1.rank();
      cRSMatrix1.setRow(0, 0.4);
      cRSMatrix0.spliterator();
      CRSMatrix.zero(1756, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<CRSMatrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      long long0 = 9977L;
      mockRandom0.longs((-444L), 9977L);
      int int0 = 0;
      mockRandom0.doubles(0L, (double) 0L, 1.0);
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 1.0, (Random) mockRandom0);
      cRSMatrix0.rank();
      mockRandom0.longs();
      cRSMatrix0.setRow(0, 0.6);
      CRSMatrix.diagonal(0, 0.6);
      int int1 = 1721;
      cRSMatrix0.getColumn(2438);
      int int2 = 813;
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1721, 813, (double) 813, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      int int1 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 17, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(8);
      cRSMatrix1.equals((Matrix) cRSMatrix0, (double) 0L);
      Matrix matrix0 = cRSMatrix1.sliceBottomRight(0, 0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(matrix0, cRSMatrix0, matrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-20L));
      mockRandom0.longs((-434L), 9977L);
      int int0 = 8;
      mockRandom0.longs(9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      SparseMatrix.zero(0, 8);
      matrix0.multiplyByItsTranspose();
      cRSMatrix0.setAll((-966.0));
      // Undeclared exception!
      try { 
        matrix0.getRow(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs((-434L), 9977L);
      mockRandom0.longs(9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 8, 8);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      SparseMatrix.zero(0, 8);
      matrix0.multiplyByItsTranspose();
      cRSMatrix0.setAll((-434L));
      matrix0.getColumn((-1094));
      MockRandom mockRandom1 = new MockRandom((-1094));
      // Undeclared exception!
      try { 
        mockRandom0.longs((-434L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.min();
      int int0 = 3;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3, 0.0);
      Matrix matrix0 = cRSMatrix1.power(3);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cRSMatrix0, 0, 1841, 0, 3, 0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 1841
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-15L));
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      MockRandom mockRandom1 = new MockRandom();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.setAll((-286.837));
      cRSMatrix0.blankOfRows(2752);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow((-4036), vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.swapColumns(1062, 12);
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(1030, 5.76482E-318, (Random) mockRandom0);
      cRSMatrix1.blankOfShape(8, 1062);
      cRSMatrix1.minInRow((byte)32);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(48, 1062, 13);
      cRSMatrix2.getColumn(12);
      MockRandom mockRandom1 = new MockRandom(48);
      MockRandom mockRandom2 = new MockRandom((-2926L));
      mockRandom2.longs((long) 13);
      CRSMatrix.identity(3297);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs((long) 0, 0L, 9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(4, 8, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(4);
      Matrix matrix0 = cRSMatrix1.sliceBottomRight(0, 0);
      Matrix matrix1 = cRSMatrix0.insert(matrix0);
      matrix0.toBinary();
      cRSMatrix0.nonZeroRowMajorIterator();
      matrix0.setAll((-2620.0476281493));
      matrix1.minInRow(2);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(10, 1422, 4);
      cRSMatrix2.iteratorOfRow(3015);
      CRSMatrix cRSMatrix3 = new CRSMatrix();
      int int0 = 4;
      int int1 = 19;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateAt(int0, int1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(8, 0.05285836293789592, (Random) mockRandom0);
      cRSMatrix0.rank();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1, 1);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix1, cRSMatrix1);
      // Undeclared exception!
      try { 
        cRSMatrix2.iteratorOfRow(37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      long long1 = 9977L;
      mockRandom0.longs((-434L), 9977L);
      int int0 = 8;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(8);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(227, 0L);
      // Undeclared exception!
      try { 
        SparseMatrix.block(sparseMatrix0, sparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1788);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1030;
      mockRandom0.nextFloat();
      mockRandom0.longs((-1841L), (long) 1788);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(32, 1062, 1.0, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix1);
      SparseMatrix.block(matrix0, cRSMatrix1, cRSMatrix1, matrix0);
      int int1 = 409;
      Vector vector0 = cRSMatrix1.getRow(int1);
      SparseVector.zero(int0);
      int int2 = (-177);
      cRSMatrix0.insertColumn(int2, vector0);
      cRSMatrix1.getColumn(int2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = NumberFormat.INTEGER_FIELD;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(12, (double) 0, (Random) mockRandom0);
      cRSMatrix0.min();
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(sparseMatrix0, cRSMatrix0, sparseMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 8;
      doubleArray3[1] = (double) 0L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 8;
      doubleArray4[1] = (double) 8;
      doubleArray4[2] = (double) 8;
      doubleArray4[3] = (double) 8;
      doubleArray4[4] = (double) 0;
      Matrix matrix0 = cRSMatrix0.power(8);
      cRSMatrix0.spliterator();
      cRSMatrix0.getColumn(0);
      MockRandom mockRandom1 = new MockRandom((-1L));
      mockRandom1.longs((long) 0);
      int int0 = (-3764);
      mockRandom0.setSeed(1L);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(0, 0, matrixFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs((-443L), 9977L);
      mockRandom0.doubles(0L, (double) 0L, 1.0);
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(8, 1.0, (Random) mockRandom0);
      cRSMatrix0.setRow(0, 0.6);
      SparseMatrix.zero(1072, 0);
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom();
      Integer integer0 = new Integer(1798);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      cRSMatrix0.getRow(0);
      cRSMatrix0.maxInRow(0);
      cRSMatrix0.min();
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(0, (-62));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-62
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs((-411L), 9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(7, 8, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(7);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix1);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.setAll((-2620.0476281493));
      matrix0.setAll(Double.NEGATIVE_INFINITY);
      cRSMatrix0.minInRow(2);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(8, 0, 0);
      cRSMatrix2.getColumn(8);
      MockRandom mockRandom1 = new MockRandom(7);
      mockRandom0.longs(0L);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      long long0 = (-434L);
      long long1 = 9985L;
      mockRandom0.longs((-434L), 9985L);
      mockRandom0.nextGaussian();
      int int1 = 8;
      mockRandom0.longs(9985L);
      int int2 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1788);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      double double0 = 1809.0;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.setColumn((-538), (double) 1788);
      int int0 = 2134;
      CRSMatrix.diagonal(int0, double0);
      cRSMatrix0.toMatrixMarket();
      int int1 = 1729;
      int int2 = 4078;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int1, int2);
      MockRandom mockRandom0 = new MockRandom(int1);
      long long0 = 0L;
      mockRandom0.longs(long0);
      int int3 = 267;
      int int4 = (-583);
      int int5 = 4;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.updateAt(int1, int5, matrixFunction0);
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
      cRSMatrix0.maxInRow(int3);
      int int6 = (-1545);
      long long1 = (-2331L);
      MockRandom mockRandom1 = new MockRandom(long1);
      CRSMatrix.random(int6, int4, (double) int5, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs((-443L), 9977L);
      mockRandom0.doubles(0L, (double) 0L, 0.8280934423168187);
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 8);
      cRSMatrix0.rank();
      cRSMatrix0.setRow(0, (double) 9977L);
      SparseMatrix.zero(1072, 0);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.setAll(1072);
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom();
      Integer integer0 = new Integer(1798);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1798, 0.8280934423168187);
      cRSMatrix1.copyOfColumns(10);
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix.fromCSV("WCx$^{RP6.<;'q\"6");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
      int int0 = 50644;
      matrix0.iteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.longs((-444L), 9977L);
      mockRandom0.nextGaussian();
      mockRandom0.doubles(0L, (double) 0L, 1.0);
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(8, 1.0, (Random) mockRandom0);
      cRSMatrix0.rank();
      mockRandom0.longs((long) 8, 0L, (long) 7);
      cRSMatrix0.setRow(1, 0.6);
      cRSMatrix0.getRow(2854);
      int int0 = (-371);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
      String string0 = "org.la4j.LinearAlgebra$DecompositorFactory$3";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2986);
      cRSMatrix0.iteratorOfColumn(12);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      mockRandom0.longs((-434L), 9977L);
      mockRandom0.longs(9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      SparseMatrix.zero(0, 8);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      mockRandom0.nextBoolean();
      MockRandom mockRandom1 = new MockRandom();
      Integer integer0 = new Integer(0);
      int[] intArray0 = new int[2];
      matrix1.select(intArray0, intArray0);
      cRSMatrix0.select(intArray0, intArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.setColumn(0, 3071.513100641);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1409, (-1378.65457891));
      cRSMatrix0.getColumn(0);
      cRSMatrix0.power(1409);
      cRSMatrix0.setAll(0.75);
      cRSMatrix0.blankOfShape(7, 1409);
      mockRandom0.nextGaussian();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.transformRow(3, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(3, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      mockRandom0.longs((-434L), 9977L);
      mockRandom0.longs(9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      mockRandom0.doubles((double) (-434L), 1669.554792589);
      cRSMatrix0.rank();
      mockRandom0.longs();
      cRSMatrix0.setRow(0, 4310.8);
      CRSMatrix.diagonal(8, 4310.8);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3763.178);
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(8, 0, doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix1.blankOfShape(767, 3);
      cRSMatrix1.maxInRow(3);
      cRSMatrix0.setAll(9977L);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.setColumn(0, 3071.513100641);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3, 0.0);
      cRSMatrix1.getColumn(3);
      CRSMatrix.diagonal(3, (-431.5));
      int int0 = 2259;
      cRSMatrix0.power(2259);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(2259, 3);
      mockRandom0.longs(1264L);
      CRSMatrix.diagonal(0, 0);
      cRSMatrix0.setAll(1264L);
      CRSMatrix cRSMatrix3 = new CRSMatrix();
      cRSMatrix3.blankOfShape(3, 2259);
      mockRandom0.nextGaussian();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix2.transformRow(3, vectorFunction0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2259;
      cRSMatrix3.select(intArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(28L);
      mockRandom0.doubles();
      mockRandom0.longs((-434L), 9977L);
      mockRandom0.longs(9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cRSMatrix0);
      mockRandom0.doubles((double) (-434L), 1669.554792589);
      cRSMatrix0.rank();
      mockRandom0.longs();
      CRSMatrix.diagonal(8, 4290.013557462705);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3763.178);
      CRSMatrix.from1DArray(8, 0, doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      matrix0.getColumn(414);
      CRSMatrix cRSMatrix1 = new CRSMatrix(2986, 3, 187);
      matrix0.copyOfShape(2, 8);
      CRSMatrix.diagonal(6, 767);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      mockRandom0.longs((-434L), 9977L);
      mockRandom0.longs(9977L);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(8, 8, (double) 0, (Random) mockRandom0);
      cRSMatrix0.insert((Matrix) cRSMatrix0);
      mockRandom0.doubles((double) (-434L), 1669.554792589);
      cRSMatrix0.rank();
      mockRandom0.longs();
      cRSMatrix0.setRow(0, 4290.013557462705);
      CRSMatrix.diagonal(8, 4290.013557462705);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3763.178);
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(8, 0, doubleArray0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix1.getColumn(Integer.MAX_VALUE);
      CRSMatrix cRSMatrix2 = new CRSMatrix(1173, 8, 1777);
      cRSMatrix2.copyOfShape(8, 347);
      CRSMatrix.diagonal((-1372), (-188.552));
  }
}
