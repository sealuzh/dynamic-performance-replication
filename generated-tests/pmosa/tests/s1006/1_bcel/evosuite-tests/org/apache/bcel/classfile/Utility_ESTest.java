/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:32:02 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 0;
      Utility.clearBit(0, 0);
      String string0 = "class";
      boolean boolean0 = false;
      Method method0 = new Method();
      Method method1 = new Method(method0);
      // Undeclared exception!
      try { 
        method1.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("Nx>n^S|D J3d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nx>n^S|D J3d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = Utility.searchOpcode(")0Su7+nnC,;");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      short short0 = Utility.searchOpcode("ineg");
      assertEquals((short)116, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.convertString("");
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Zh#s6F^ot?wEa4xw");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.accessToString((int) (byte)4, false);
      assertEquals("protected", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.compactClassName("void");
      Utility.classOrInterface(755);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "interface";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.compactClassName("(Linterface;)L;", false);
      Utility.accessToString(0);
      Utility.searchOpcode("void");
      try { 
        Utility.methodSignatureArgumentTypes("Invalid type: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid type: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("C:Jt,_&tV~Q[V|::", "int", true);
      assertEquals("C:Jt,_&tV~Q[V|::", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.classOrInterface(943);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aload_1", "aload_1", "iflt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-36);
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "@h8P`I8|`p\\.DHDm";
      Utility.decode("@h8P`I8|`p.DHDm", false);
      try { 
        Utility.methodSignatureArgumentTypes("@h8P`I8|`p.DHDm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @h8P`I8|`p.DHDm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.format(39, (-2806), false, '!');
      assertEquals("39", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.format(2338, 2338, true, 'm');
      Utility.accessToString(227, false);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.convertString("8tP]KHJO+.q3BhM(Iy");
      try { 
        Utility.typeOfSignature("8tP]KHJO+.q3BhM(Iy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8tP]KHJO+.q3BhM(Iy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("W:5", false);
      assertEquals("W:5", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"_|c+:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"_|c+:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.isJavaIdentifierPart('F');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TK2u3c");
      byte byte0 = Utility.typeOfSignature("TK2u3c");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = Utility.isSet((-884), 824);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.clearBit(281, 281);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-94);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("EZxV%gZ}^Pd", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EZxV%gZ}^Pd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.fillup("[xlqyKX`k(f,", 1415, false, 'n');
      Utility.compactClassName("=wX/>}Nql!U> Y@Wvm");
      Utility.clearBit(1415, (-3404));
      String string1 = Utility.fillup("c.'i ", 1415, false, 'n');
      char char0 = '1';
      Utility.format(1415, 60, false, '1');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) "c.'i ";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) string0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      String string2 = Utility.printArray(objectArray0, false, true);
      Utility.fillup(string2, 1415, false, '`');
      try { 
        Utility.methodSignatureReturnType(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnc.'i '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Lfload_0;V");
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("Vwqz}nj*", (String[]) null);
      assertEquals("()LVwqz}nj*;", string0);
      
      String string1 = Utility.methodSignatureReturnType("()LVwqz}nj*;", true);
      assertEquals("Vwqz}nj*", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-127);
      byteArray0[8] = (byte)97;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("The strings must not be null");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("LkTv*7IsJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LkTv*7IsJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.accessToString(48, true);
      try { 
        Utility.typeOfMethodSignature("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokevirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.compactClassName(">cH-[G8");
      Utility.compactClassName(">cH-[G8");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", ">cH-[G8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.accessToString(188, false);
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false, false);
      Utility.classOrInterface(947);
      Utility.accessToString(188, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 59
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.*dmJ3rEJ-ayc`w{fPPw");
      assertEquals("*dmJ3rEJ-ayc`w{fPPw", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "RE,;Uv%";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RE,;Uv%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RE,;Uv%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.setBit(76, 76);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "<illegal type>";
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) "<illegal type>";
      objectArray0[5] = (Object) byteArray0;
      Utility.printArray(objectArray0, true);
      Utility.encode(byteArray0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('o');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      assertEquals(86, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fload_0";
      stringArray0[1] = "fload_0";
      stringArray0[2] = "fload_0";
      stringArray0[3] = "<illegal opcode>";
      stringArray0[4] = "(1ye%2;";
      String string1 = Utility.methodTypeToSignature("(1ye%2;", stringArray0);
      assertEquals("(Lfload_0;Lfload_0;Lfload_0;L<illegal;L(1ye%2;;)L(1ye%2;;", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte)34);
      assertEquals("1:    monitorenter\n2:    aconst_null\n", string2);
      
      String string3 = Utility.format(192, (-567), true, '8');
      assertEquals("192", string3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.typeOfSignature("IG8o61>HTOTaN<");
      Utility.isJavaIdentifierPart('f');
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.getSignature(" 8?.12Pg2gn.");
      assertEquals("L8?/12Pg2gn/;", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      String string0 = Utility.compactClassName("/iQaHbXOF", "", true);
      assertEquals(".iQaHbXOF", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Utility.compactClassName("`Q:hg%fX*JyOHwcCK,K", "", true);
      assertEquals("`Q:hg%fX*JyOHwcCK,K", string0);
      
      String string1 = Utility.methodSignatureReturnType("StackMapTable");
      assertEquals("short", string1);
      
      String string2 = Utility.getSignature("org.apache.bcel.classfile.Method");
      assertEquals("Lorg/apache/bcel/classfile/Method;", string2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.getSignature("N[W]~=RG2/If-3");
      try { 
        Utility.typeOfSignature("Wr3QW.$kr[S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wr3QW.$kr[S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.convertString("");
      Utility.setBit(64, 64);
      StringWriter stringWriter0 = new StringWriter(65);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 69);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      Utility.printArray(printWriter0, (Object[]) null);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("Dont call getValueLong() on a non LONG ElementValue", true);
      assertEquals("double", string0);
      
      String string1 = Utility.convertString("DFDMqJo A0=OQUinterface");
      assertEquals("DFDMqJo A0=OQUinterface", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.convertString("jpiK<z@Uz*e");
      Utility.compactClassName("jpiK<z@Uz*e", "jpiK<z@Uz*e", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2243, 1793);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.signatureToString("Byte code error: ", false);
      String string1 = Utility.convertString("byte");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-1);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$e4DUt$P$5d$b2$ff", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("\n     Method Arguments:");
      assertEquals("\\n     Method Arguments:", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.convertString("R,5%v{%");
      assertEquals("R,5%v{%", string0);
      
      String string1 = Utility.classOrInterface(4);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("i)*tj1PTJo", false);
      assertEquals("i)*tj1PTJo", string2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.accessToString(943);
      assertEquals("public private protected static synchronized transient native interface", string0);
      
      int int0 = Utility.clearBit(943, 67);
      assertEquals(935, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.signatureToString("Zh#s6F^ot?&wEa4xw");
      String string0 = Utility.convertString("Zh#s6F^ot?&wEa4xw");
      assertEquals("Zh#s6F^ot?&wEa4xw", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.compactClassName("Unrecognized attribute type tag parsed: ");
      assertEquals("Unrecognized attribute type tag parsed: ", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)49;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lload\t\t%9", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.convertString("aload_1");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-117);
      byteArray1[4] = (byte) (-64);
      byteArray1[5] = (byte) (-90);
      byteArray1[6] = (byte)65;
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("d1 b8 04 8b c0 a6 41", string1);
      
      String string2 = Utility.convertString("yHRl%Dcvgi$$qTS\"");
      assertEquals("yHRl%Dcvgi$$qTS\\\"", string2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.convertString("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-95);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$d8$99$d34$a1", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = ",i";
      Utility.convertString(",i");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) ",i";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) ",i";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[2] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2597, 1872, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "R,5%v{%";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Total of ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)42;
      Utility.getSignature("\"");
      try { 
        Utility.typeOfSignature(".class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.convertString("Unexpected element value kind in annotation: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unexpected element value kind in annotation: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unexpected element value kind in annotation: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "HWcJmfV?Mz$'";
      try { 
        Utility.methodSignatureReturnType("HWcJmfV?Mz$'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HWcJmfV?Mz$''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("IG8o61>HTOTaN<");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("/)Y[b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y[b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 619, 34, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V;3t");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-318), 83);
      assertEquals("0:    lsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@+#oMpH..%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @+#oMpH..%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.getSignature("\\/m:Xz{U/Lwp%");
      assertEquals("L\\/m:Xz{U/Lwp%;", string0);
      
      byte byte0 = Utility.typeOfSignature("L\\/m:Xz{U/Lwp%;");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "float";
      Utility.getSignature("float");
      // Undeclared exception!
      try { 
        Utility.getSignature("l+z]#y[EXb0!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[EXb0!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.signatureToString("Zh#s6F^ot?&wEa4xw");
      String string0 = Utility.convertString("zQ|?2a'");
      assertEquals("zQ|?2a\\'", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)48;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)75;
      byteArray1[6] = (byte)75;
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)75;
      byteArray1[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)48, 154, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.accessToString(2750, true);
      assertEquals("private protected static final transient strictfp", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1779, 4711);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.convertString("N[W]~=RG2/If-3");
      try { 
        Utility.typeOfSignature("N[W]~=RG2/If-3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N[W]~=RG2/If-3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, (int) (byte) (-85), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.replace("TKk-3c", "TKk-3c", "TKk-3c");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-57);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-956), 4711);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1792, 1337);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UsAwt{w18OYXs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UsAwt{w18OYXs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-37);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), (-692));
      assertEquals("0:    astore_1\n1:    saload\n2:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gmch^B*3HX>,z,~zgpS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gmch^B*3HX>,z,~zgpS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)2;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 97);
      assertEquals("0:    fstore_0\n1:    iaload\n2:    <illegal opcode>\n3:    ddiv\n4:    iaload\n5:    f2i\n6:    iconst_m1\n", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-57);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)105, 4711);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, 1337);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    lmul
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)62;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)104, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-24);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 941, 67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.typeOfSignature("-\"[o>HJ*+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -\"[o>HJ*+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(192, 192);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (int) (byte) (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)99;
      byteArray0[5] = (byte)99;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 99, (-2988));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.typeOfSignature("+C[rKV Tr");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (-2983));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)1, (byte) (-57));
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(3382);
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantArray0[5] = (Constant) constantMethodHandle0;
      constantArray0[6] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(459);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[7] = (Constant) constantMethodType1;
      constantArray0[8] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 41, 3382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)2;
      byte byte0 = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-46);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-24), 1134);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_m1
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    iconst_m1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(192, 192);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-66);
      byteArray0[1] = (byte)8;
      byteArray0[7] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (int) (byte) (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48640. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.typeOfSignature("IG8o61>HTOTaN<");
      Utility.isJavaIdentifierPart('f');
      Utility.compactClassName("h/G(>\"jozMIDr ", "h/G(>\"jozMIDr ", true);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O:b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O:b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      try { 
        Utility.typeOfSignature(")9Ndm_ei_;N@>hA<'N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )9Ndm_ei_;N@>hA<'N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)72;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (-692));
      assertEquals("0:    dload\t\t%72\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-57);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)105, 4711);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-2198), (int) (byte)1, true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "The strings must not be null";
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)5;
      byteArray0[4] = (byte) (-107);
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte) (-72);
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(53, (byte) (-29));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-51), (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    isub
         // 4:    fcmpl
         // 5:    iconst_2
         // 6:    nop
         // 7:    lstore_0
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)2;
      try { 
        Utility.methodSignatureReturnType("L<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)127;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3682), (-161));
      assertEquals("0:    <illegal opcode>\n1:    impdep2\n2:    iload\t\t%69\n4:    faload\n5:    dcmpl\n6:    fastore\n7:    fdiv\n8:    land\n", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.typeOfSignature("D8uj");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-24);
      byteArray0[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 941, 67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F~K|3ao?hP%>\"V0");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ks%xu,Q{45e'n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ks%xu,Q{45e'n'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1993), (int) (byte) (-79));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Ks%xu,Q{45e'n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ks%xu,Q{45e'n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)45;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 57, 74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O*{J}`Y~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O*{J}`Y~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "&o)|nhbmH/W";
      try { 
        Utility.typeOfSignature("&o)|nhbmH/W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &o)|nhbmH/W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";Spoz{EN7QuIzZ+@]x4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Spoz{EN7QuIzZ+@]x4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)123;
      byteArray0[2] = (byte)123;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)93, (-63), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.methodSignatureReturnType("J'");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.io.filefilter.PrefixFileFilter");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte) (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3682), (-161));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!48@RB+0a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 48@RB+0a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CX");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JZ");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5Si");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5Si
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3NL_N0'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3NL_N0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("D#u~y", false);
      byte byte0 = Utility.typeOfSignature("D#u~y");
      assertEquals((byte)7, byte0);
      
      byte[] byteArray0 = Utility.decode("D#u~y", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2681), 257);
      constantArray0[0] = (Constant) constantMethodref0;
      Constant constant0 = constantMethodref0.copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertArrayEquals(new byte[] {(byte)68, (byte)35, (byte)117, (byte)126, (byte)121}, byteArray0);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-24);
      try { 
        Utility.typeOfSignature("16y6Y~]INQtMI#!`o+Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 16y6Y~]INQtMI#!`o+Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byte byte0 = Utility.typeOfSignature("*F.u d^fZ&\"$*_{");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2681), 84);
      Constant constant0 = constantMethodref0.copy();
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = constant0;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = constant0;
      constantArray0[5] = (Constant) constantMethodref0;
      constantArray0[6] = (Constant) constantMethodref0;
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[8] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("bipush\t\t8", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'4'']*,mW~%&w?C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '4'']*,mW~%&w?C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "*$P!V<{";
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("*$P!V<{", false);
      try { 
        Utility.typeOfSignature("*$P!V<{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $P!V<{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.setBit(0, 0);
      Utility.typeOfSignature("S;Sx");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "CONSTANT_Utf8";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 127, (-2313));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(string_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `string_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[8] = (byte)20;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)23;
      byteArray0[0] = (byte)23;
      byteArray0[4] = (byte)83;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte)83;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-2));
      assertEquals("0:    fload\t\t%8\n2:    fload\t\t%0\n4:    aastore\n5:    nop\n6:    arraylength\n7:    impdep1\n8:    aastore\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n21:   nop\n22:   nop\n23:   nop\n24:   nop\n25:   nop\n26:   nop\n27:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      try { 
        Utility.typeOfSignature("7wUaLrHEU1iWMe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7wUaLrHEU1iWMe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)50, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), (int) (byte)34);
      assertEquals("0:    fneg\n1:    fstore_3\n2:    fload_0\n3:    goto_w\t\t#2039789699\n", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{\"java.lang.Object@11e10570\", \"java.lang.Object@15773be5\", \"java.lang.Object@5104042d\", \"java.lang.Object@6539e897\"}");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)97, (byte) (-60));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-127);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-127), (int) (byte) (-60));
      assertEquals("0:    ladd\n1:    wide\t(wide)\n2:    lor\n", string0);
      
      boolean boolean0 = Utility.isSet((byte)97, (byte) (-60));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)12;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)12);
      assertEquals("0:    astore\t\t%0\n2:    nop\n3:    dup2_x1\n4:    fconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("PMGClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)69, (byte)36);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantNameAndType1;
      constantArray0[1] = (Constant) constantNameAndType1;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType1;
      constantArray0[4] = (Constant) constantNameAndType1;
      constantArray0[5] = (Constant) constantNameAndType1;
      constantArray0[6] = (Constant) constantNameAndType1;
      constantArray0[7] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-108), (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13103. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "HlOzz\")t5X}q}&*K";
      try { 
        Utility.typeOfSignature("HlOzz\")t5X}q}&*K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HlOzz\")t5X}q}&*K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-80);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte)63);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[1] = ">9|TIYj";
      stringArray0[2] = "impdep2";
      stringArray0[3] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[4] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[5] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[6] = "0:    lstore_0\n1:    areturn\n";
      Utility.methodTypeToSignature("0:    lstore_0\n1:    areturn\n", stringArray0);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)97, (byte) (-60));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-127);
      try { 
        Utility.typeOfSignature("%^QoBh9g.{|C50_:cQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %^QoBh9g.{|C50_:cQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XWQo?WC%tpV#?F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XWQo?WC%tpV#?F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.SC_WRITE_METHOD;
      try { 
        Utility.methodSignatureReturnType("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(87, 2808);
      Constant constant0 = constantMethodref0.copy();
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = constant0;
      constantArray0[1] = constant0;
      constantArray0[2] = constant0;
      constantArray0[3] = constant0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)121;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-1317), (-1317));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    lshl\n1:    lcmp\n2:    lcmp\n3:    lcmp\n4:    ior\n5:    lshl\n", (String) null, "0:    lshl\n1:    lcmp\n2:    lcmp\n3:    lcmp\n4:    ior\n5:    lshl\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lshl
         // 1:    lcmp
         // 2:    lcmp
         // 3:    lcmp
         // 4:    ior
         // 5:    lshl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6P2HT>r5)j=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6P2HT>r5)j=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(87, 2808);
      constantMethodref0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4001, (-2249));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)116;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)93, 2643, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 224, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 54, 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("X6~13c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X6~13c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(87, 2808);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (-3817));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Vdv9ts[");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.getSignature("'+,");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2vyO4;[^+,1U)`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2vyO4;[^+,1U)`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-80);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte)63);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[1] = ">9|TIYj";
      stringArray0[2] = "impdep2";
      stringArray0[3] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[4] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[5] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[6] = "0:    lstore_0\n1:    areturn\n";
      Utility.methodTypeToSignature("0:    lstore_0\n1:    areturn\n", stringArray0);
      try { 
        Utility.typeOfSignature("0:    lstore_0\n1:    areturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lstore_0
         // 1:    areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      String string0 = "E#pd";
      try { 
        Utility.typeOfSignature("E#pd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E#pd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, 1059);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4128. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger((byte)51);
      ConstantFloat constantFloat0 = new ConstantFloat(1107.784F);
      Constant constant0 = constantFloat0.copy();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = constant0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = constant0;
      constant0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12101. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-62), 2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ineg
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.setBit(45, 45);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{\"java.lang.Object@1bf957d4\", \"java.lang.Object@23099e72\", \"java.lang.Object@7773215d\", \"java.lang.Object@79a80a70\"}");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-9), 2126);
      assertEquals("0:    <illegal opcode>\n1:    dup_x1\n2:    dup_x1\n", string0);
      
      boolean boolean0 = Utility.isSet((-3191), (-3191));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)75;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", high = ";
      stringArray0[1] = ", high = ";
      stringArray0[2] = ", high = ";
      stringArray0[3] = ", high = ";
      stringArray0[4] = ", high = ";
      stringArray0[5] = "%KQ\"<f";
      stringArray0[6] = ", high = ";
      stringArray0[7] = ", high = ";
      stringArray0[8] = ", high = ";
      Utility.methodTypeToSignature(", high = ", stringArray0);
      try { 
        Utility.typeOfSignature("MqmLT~\"[aIhd4^j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MqmLT~\"[aIhd4^j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m.eo");
      try { 
        Utility.typeOfSignature("/(=MVs< g>=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /(=MVs< g>=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object object0 = new Object();
      ConstantInteger constantInteger0 = new ConstantInteger((-185));
      ConstantFloat constantFloat0 = new ConstantFloat((-185));
      Constant constant0 = constantInteger0.copy();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = constant0;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (-725));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-100);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((-3832));
      constantArray0[0] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-100), (byte)32);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantLong constantLong0 = new ConstantLong((-1712L));
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 165, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(87, 2808);
      constantMethodref0.copy();
      Utility.compactClassName("9K{h!Mum+v4LW,i7Y{");
      try { 
        Utility.typeOfSignature("9K{h!Mum+v4LW,i7Y{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9K{h!Mum+v4LW,i7Y{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)123;
      Utility.decode("+c$\".q/M6St#\"^Q>", false);
      String string0 = Utility.classOrInterface((byte)93);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Object object0 = new Object();
      ConstantInteger constantInteger0 = new ConstantInteger((-185));
      ConstantFloat constantFloat0 = new ConstantFloat((-185));
      Constant constant0 = constantInteger0.copy();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = constant0;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte) (-125);
      byteArray1[5] = (byte) (-93);
      byteArray1[6] = (byte)69;
      byteArray1[7] = (byte)31;
      byteArray1[8] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 218, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-80);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte)63);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0:    lstore_0\n1:    areturn\n";
      stringArray0[1] = ">9|TIYj";
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 58, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">j|*>z.*9<@;7^T'+=:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >j|*>z.*9<@;7^T'+=:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#hDJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #hDJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1035), (-1035));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoader0.clearAssertionStatus();
      classLoaderRepository0.findClass(")9Ndm_ei_;N@>hA<'N");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantMethodref0.accept(descendingVisitor0);
      constantMethodref0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)3;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)114;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    nop
         // 4:    iconst_m1
         // 5:    iconst_m1
         // 6:    iconst_0
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(84, 84);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantMethodref0.dump(dataOutputStream0);
      constantMethodref0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)7;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\t\t<";
      stringArray0[1] = "\t\t<";
      stringArray0[2] = "\t\t<";
      stringArray0[3] = "\t\t<";
      stringArray0[4] = "\t\t<";
      Utility.methodTypeToSignature("\t\t<", stringArray0);
      try { 
        Utility.typeOfSignature("^r'25v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^r'25v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-56);
      byteArray0[3] = (byte) (-115);
      byteArray0[5] = (byte) (-108);
      byteArray0[7] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-14));
      assertEquals("0:    fneg\n1:    fneg\n2:    <illegal opcode>\n3:    f2d\n4:    nop\n5:    lcmp\n6:    nop\n7:    ior\n", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2249, (-2951));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(84, 84);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantMethodref0.dump(dataOutputStream0);
      constantMethodref0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)57;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray0;
      Utility.printArray(objectArray0, false, true);
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.replace("\r", "f Ejc~p^N_DyxW]", "E");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-10);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-2), (int) (byte) (-10));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55294. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-98);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L>9|TIYj;V");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("sastore");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "sastore";
      Utility.printArray(objectArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("{null, sastore}", "monitorexit");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // monitorexit
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("<illegal", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2775, 1857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(84, 84);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3158), (int) (byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(1091);
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      constantInteger0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-82);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2305, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "'+,";
      objectArray0[1] = (Object) "'+,";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "'+,";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "'+,";
      objectArray0[6] = (Object) "'+,";
      Utility.printArray(objectArray0, false, true);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 111, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Zh#s6F^ot?wEa4xw";
      objectArray0[2] = (Object) "Zh#s6F^ot?wEa4xw";
      objectArray0[3] = (Object) "Zh#s6F^ot?wEa4xw";
      objectArray0[4] = (Object) "Zh#s6F^ot?wEa4xw";
      objectArray0[5] = (Object) "Zh#s6F^ot?wEa4xw";
      Utility.printArray(objectArray0, false, true);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("'+,", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1857, 1857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-58);
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-113);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      objectArray0[7] = (Object) byteArray0;
      Utility.printArray(objectArray0, false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("Q0; ]h9H70;4#[;+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q0; ]h9H70;4#[;+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("A$?7WYM6zEh!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A$?7WYM6zEh!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 2775);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    ior
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-98);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L>9|TIYj;V");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("sastore");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 29, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)112, (-2070));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 127, (-2313));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      byte[] byteArray0 = Utility.decode("z4m", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2775, 2775);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((-1954));
      ConstantFloat constantFloat0 = new ConstantFloat(1144.6F);
      constantFloat0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2110, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-42);
      byteArray0[7] = (byte)113;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, 201);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-56);
      byteArray0[3] = (byte) (-118);
      byteArray0[5] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-14));
      assertEquals("0:    fneg\n1:    fneg\n2:    <illegal opcode>\n3:    l2d\n4:    nop\n5:    lcmp\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(1091);
      constantInteger0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 194, 522);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 966, (-1067));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, 159);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-79), (int) (byte) (-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 38590. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("wLv=G", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), (-1322));
      assertEquals("0:    ladd\n1:    caload\n2:    <illegal opcode>\n3:    lrem\n4:    l2i\n5:    freturn\n6:    daload\n7:    daload\n", string0);
      
      String string1 = Utility.convertString("0:    ladd\n1:    caload\n2:    <illegal opcode>\n3:    lrem\n4:    l2i\n5:    freturn\n6:    daload\n7:    daload\n");
      assertEquals("0:    ladd\\n1:    caload\\n2:    <illegal opcode>\\n3:    lrem\\n4:    l2i\\n5:    freturn\\n6:    daload\\n7:    daload\\n", string1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("astore_2", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (-2013265917));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 288, (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.decode("'+,", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, (int) (byte)112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.typeOfSignature("Zh#s6F^ot?wEa4xw");
      byte byte0 = Utility.typeOfSignature("Zh#s6F^ot?wEa4xw");
      assertEquals((byte)4, byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), (-2926));
      assertEquals("0:    iconst_1\n1:    l2f\n2:    nop\n3:    iconst_1\n4:    iconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Object object0 = new Object();
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-66);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$b7Zz$b8$b1$C$be", string1);
      
      byte[] byteArray1 = Utility.decode("$b7Zz$b8$b1$C$be", false);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)90, (byte)122, (byte) (-72), (byte) (-79), (byte)2, (byte) (-66)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "O0$5U$UWgGp";
      // Undeclared exception!
      try { 
        Utility.decode("O0$5U$UWgGp", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.methodSignatureReturnType("LVWS!G/+7Lm*!SR8>;V");
      byte[] byteArray0 = Utility.decode("L$l$8b$I$A$A$A$A$A$A$A;V", false);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2249, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(48, 48);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble(48);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-56), 115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    goto_w\t\t#-925906743
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.decode("'+,", false);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte) (-101);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, (int) (byte)112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "L>9|TIYj;V";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+{-]vYQwzS&5f[?4v");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = 117;
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)85;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-29));
      assertEquals("0:    return\n1:    fcmpg\n2:    arraylength\n3:    istore_0\n4:    castore\n", string0);
      
      String string1 = Utility.convertString("(string_index = ");
      assertEquals("(string_index = ", string1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-113);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$e0$E$8f$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$A$e0$E$8f$A$A", false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-32), (byte)4, (byte) (-113), (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-397), (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ireturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      Utility.replace("Null", "Bh^,D8", "Null");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 160, (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (-2077));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)0;
      Utility.codeToString(byteArray0, constantPool0, (-3619), 1380);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Q9i|<\\-@O>74\"K#dK", (String) null, "bkJf,UW:4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q9i|<\\-@O>74\"K#dK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("(v?>QUel:U", true);
      try { 
        Utility.typeOfMethodSignature("(v?>QUel:U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (v?>QUel:U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.clearBit((-242), (-771));
      Utility.accessToString((-536871154));
      Utility.isSet((-536871154), (-163));
      Utility.searchOpcode("private protected static native interface abstract strictfp synthetic annotation enum");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)44;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)54;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[7] = (byte) (-48);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)23, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-66);
      byteArray0[1] = (byte) (-113);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(string_index = ", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-182), 785);
      assertEquals("0:    dload_2\n1:    drem\n2:    ineg\n3:    frem\n4:    lmul\n5:    fdiv\n6:    dsub\n7:    swap\n8:    lmul\n9:    fdiv\n10:   isub\n11:   lsub\n12:   ishl\n13:   lload_2\n14:   istore_2\n15:   lload_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)60;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("boolean");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2356, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2609, 2609);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("Yd/ ^%pCUadnk0s@]e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yd/ ^%pCUadnk0s@]e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2212, 787);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref(83, 83);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "unknown");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)25;
      byteArray0[0] = (byte)72;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("unknown", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_1
         // 1:    <illegal opcode>
         // 2:    aload\t\t%0
         // 4:    impdep1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-89);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, constantPool0, (-532), (int) (byte) (-89));
      Utility.compactClassName("0:    goto\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n");
      // Undeclared exception!
      try { 
        constantPool0.getConstant(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(60, 60);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(60, 60);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte) (-6);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)98, 1972);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1296), (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_3
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("omm7/@xz|y3-!vkGf", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 629, 1338);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("]RJlprOuMPcR)", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-66);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 6, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)67;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, (-1296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      Constant[] constantArray0 = new Constant[8];
      ConstantString constantString0 = new ConstantString(2);
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      constantArray0[6] = (Constant) constantFieldref0;
      constantArray0[7] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-60);
      constantPool0.setConstantPool(constantArray0);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-19);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte) (-44));
      assertEquals("0:    impdep2\n1:    <illegal opcode>\n2:    bipush\t\t-60\n4:    iushr\n5:    fload_3\n6:    <illegal opcode>\n7:    nop\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(anonymous)", "SimpleElementValue class does not know how to stringify type ", "new", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `anonymous)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1456, (-3624));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "[Pug|";
      try { 
        Utility.methodSignatureReturnType("[Pug|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pug|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(1091);
      constantInteger0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-111);
      byteArray0[0] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-111), (int) (byte) (-111));
      assertEquals("0:    i2b\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "Gen-wV^DJDV5";
      Utility.compactClassName("Gen-wV^DJDV5", true);
      try { 
        Utility.typeOfSignature("Gen-wV^DJDV5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gen-wV^DJDV5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-72);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, (int) (byte) (-72), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 631, (int) (byte)12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)116;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)116, 1701);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-108);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1296), (int) (byte) (-108));
      try { 
        Utility.typeOfSignature("=;`#VO(s_@%4+1Ope>K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =;`#VO(s_@%4+1Ope>K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1538), (int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-108);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      byteArray1[5] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-108), (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2l
         // 1:    dconst_0
         // 2:    dconst_0
         // 3:    lcmp
         // 4:    lcmp
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-769), 929);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)66;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), (int) (byte) (-102));
      assertEquals("0:    ifne\t\t#14877\n3:    astore\t\t%154\n5:    if_icmpne\t\t#27045\n8:    lstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(St4rbng_0:index:= ", "(St4rbng_0:index:= ", "(St4rbng_0:index:= ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t4rbng_0:index:= '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M01OUkv!T*SyB\"?H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M01OUkv!T*SyB\"?H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "Rr63cvfT.+";
      try { 
        Utility.typeOfSignature("Rr63cvfT.+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rr63cvfT.+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)3;
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)3);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-113), (-113));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-1513), (-2729), false);
      try { 
        Utility.typeOfMethodSignature("0:    lushr\n1:    <illegal opcode>\n2:    iconst_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lushr
         // 1:    <illegal opcode>
         // 2:    iconst_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), (int) (byte) (-116));
      assertEquals("0:    f2l\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)76;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 176, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[14];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byteArray0[1] = (byte) (-85);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-2028));
      assertEquals("0:    nop\n1:    lookupswitch\tdefault = 1, npairs = 0 ()\n12:   nop\n13:   nop\n", string0);
  }
}
