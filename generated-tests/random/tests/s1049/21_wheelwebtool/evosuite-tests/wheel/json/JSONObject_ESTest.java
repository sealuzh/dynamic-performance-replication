/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:46:16 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.valueToString(jSONObject0, (-50462705), 46);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getBoolean("=rj]6=Ca2(@;/K,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=rj]6=Ca2(@;/K,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Y0~mzO@kVL;1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Y0~mzO@kVL;1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", 64177L);
      int int0 = jSONObject1.optInt("gettoString");
      assertEquals(64177, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long(1765L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Short short0 = new Short((short) (-1784));
      jSONObject0.putOpt("|ObG^@sZ`\"F2Z=Mh", short0);
      int int0 = jSONObject0.optInt("|ObG^@sZ`\"F2Z=Mh");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1784), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(418.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("false", 0.0);
      double double0 = jSONObject0.optDouble("false");
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float((-1392.4308));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("{", 44);
      long long0 = jSONObject0.getLong("{");
      assertEquals(4, jSONObject0.length());
      assertEquals(44L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((-1392.4308));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("{", 44);
      int int0 = jSONObject0.getInt("{");
      assertEquals(4, jSONObject0.length());
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(0, 182);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4?FN<p");
      jSONObject0.remove("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("bn0I(wni'ADL-u", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = Double.valueOf(2225.1539375247626);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      hashMap0.put(double0, "getlogicalOr");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@00000000010", (Map) hashMap0);
      jSONObject1.getJSONObject("java.lang.Short@00000000010");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (long) 29);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("hUQ", (-603));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = JSONObject.valueToString(boolean0, 222, (-577));
      jSONObject0.put(string0, 0.0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("isvalueOf", (-3616L));
      assertEquals((-3616L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      long long0 = jSONObject0.optLong((String) null, 652L);
      assertEquals(652L, long0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt(">X.#u2Qz", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-128044258));
      assertEquals((-128044258), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble("] is not a JSONObject.", 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = Double.valueOf(2225.1539375247626);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("getlogicalOr", (-1.0));
      assertEquals(3, jSONObject0.length());
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject0.accumulate("", long0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float(418.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(2623, 2623);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1609L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("t#-", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float float0 = new Float((-1392.4308));
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getDouble("istoHexString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoHexString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float((-1392.4308));
      JSONObject jSONObject0 = new JSONObject(float0);
      Short short0 = new Short((short)983);
      JSONObject jSONObject1 = jSONObject0.append(":!5TdyA#=0966Vc", short0);
      jSONObject1.toString((-22654515), (-396));
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getreverseBytes", false);
      String string0 = jSONObject0.toString((-851), (-851));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("*Q/O9fJx3xQE|,");
      assertEquals("\"*Q/O9fJx3xQE|,\"", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("]rFZ::Fs*%r$iN'", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("ha", (double) 222);
      assertEquals(222.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.opt("*ErH");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("] not found.");
      jSONObject0.names();
      jSONObject0.optInt("] not found.", 1);
      jSONObject0.optInt("L", 1);
      jSONObject0.optInt("L");
      Short short0 = new Short((short) (-1408));
      jSONObject0.put("] not found.", (Object) short0);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(1919.919436148);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Float float0 = new Float((double) 0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double((-1532.19));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Collection) linkedList0);
      try { 
        jSONObject1.getInt("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)3036);
      jSONObject0.append("getmin", short0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      jSONObject0.put("{2Gjy7-0MK:v/_", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("yx+YH(", 0L);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 15, (-1919));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.valueToString(hashMap0, 61, (-2832));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "w&dI8rrI");
      jSONObject0.toString((-2257));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 43, 811);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 29, 13);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      jSONObject0.append("oT?i 1QDO!.\")b", (Object) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(")g;", (Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(32);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "w&dI8rrI");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-5020));
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", short0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNotSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double(1919.919436148);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Short short0 = new Short((short)55);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.get("&5ItZZ6R%5ty</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&5ItZZ6R%5ty<\\/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "pzL!X2,CtMM19'+z\u0003v");
      long long0 = jSONObject0.optLong("pzL!X2,CtMM19'+z\u0003v");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("|=3Z/}<`MIal~", false);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getBoolean("{\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n\"java.lang.String@0000000004\": \"java.lang.String@0000000004\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\",\\n\\\"java.lang.String@0000000004\\\": \\\"java.lang.String@0000000004\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Short@0000000001";
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate(">X.#u2Qz", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.put((String) null, 781);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      String string0 = jSONObject1.optString("{}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optJSONObject((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("UZ*I-zl1MOh\"=]f&A", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("UZ*I-zl1MOh\"=]f&A");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optJSONArray("lo");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Short short0 = new Short((short) (-1408));
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Object) short0);
      double double0 = jSONObject1.optDouble("] not found.");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1408.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Short short0 = new Short((short) (-1408));
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Object) short0);
      jSONObject1.toString(1, 13);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.putOpt("ishashCode", "toO");
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float((-1392.4308));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{", (-1508.61883312));
      long long0 = jSONObject1.getLong("{");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1508L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("9=aoeKnJ><Gm", (Object) "\"9=aoeKnJ><Gm\"");
      try { 
        jSONObject1.getLong("9=aoeKnJ><Gm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9=aoeKnJ><Gm\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = Double.valueOf(2225.1539375247626);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@00000000010", (Map) hashMap0);
      jSONObject1.getJSONObject("java.lang.Short@00000000010");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = new Boolean("+c5&tZ|oj(a?{>-");
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("+c5&tZ|oj(a?{>-", false);
      try { 
        jSONObject0.getJSONObject("+c5&tZ|oj(a?{>-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+c5&tZ|oj(a?{>-\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001", stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("java.lang.Short@0000000001", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("java.lang.Short@0000000001");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("java.lang.Long@00000000050", true);
      try { 
        jSONObject0.getJSONArray("java.lang.Long@00000000050");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000050\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = new Float((-1392.4308));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("{", (-1508.61883312));
      int int0 = jSONObject1.getInt("{");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1508), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("1513.1", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("<%K_.h}E[h<7", 112);
      assertEquals(1, jSONObject0.length());
      
      double double0 = jSONObject1.getDouble("<%K_.h}E[h<7");
      assertEquals(112.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("lo", object0);
      int int0 = jSONObject0.optInt("lo", (-2475));
      assertEquals(2, jSONObject0.length());
      assertEquals((-2475), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("jkO?", true);
      boolean boolean1 = jSONObject0.optBoolean("jkO?", true);
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("9 r%=b", false);
      boolean boolean0 = jSONObject0.optBoolean("9 r%=b", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1513.1);
      assertEquals("1513.1", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-12437164));
      assertEquals("-1.2437164E7", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{J7X*a `%>O%^TC", 0L);
      try { 
        jSONObject0.append("{J7X*a `%>O%^TC", "5urY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{J7X*a `%>O%^TC] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte) (-63));
      jSONObject0.append("|=3Z/}<`MIal~", byte0);
      jSONObject0.append("|=3Z/}<`MIal~", float0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject1.accumulate("{}", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      Set<Byte> set0 = hashMap0.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.accumulate("1466.00", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", "{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      boolean boolean1 = jSONObject1.optBoolean("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", false);
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.putOpt("~L%iUF", stringWriter0);
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("~L%iUF", double0);
      jSONObject0.toString(49);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("\"java.lang.Object@0000000001\"", stringArray0);
      String string0 = jSONObject0.optString("Bad value from toJSONString: ", "\"java.lang.Object@0000000001\"");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = new Boolean("OQ");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      jSONObject0.put("OQ", (Map) hashMap0);
      jSONObject0.optJSONObject("OQ");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{n'yB H:i3sA&_Pu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 16 of {n'yB H:i3sA&_Pu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{?~t^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {?~t^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("lo", object0);
      boolean boolean0 = jSONObject0.isNull("lo");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{}", object0);
      boolean boolean0 = jSONObject0.optBoolean("{}", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("tr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("s8AT5Dw.St&-<9;=[", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("{}");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getlogicalXor", 2055.161519976);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove(",\n");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.has("]rFZ::Fs*%r$iN'");
      assertFalse(boolean0);
  }
}
