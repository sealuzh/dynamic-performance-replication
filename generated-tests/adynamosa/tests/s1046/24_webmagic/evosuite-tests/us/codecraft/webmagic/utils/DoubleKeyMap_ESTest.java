/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 04:37:21 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<Object, Object>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<Object, Object>>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, HashMap<Object, Object>> hashMap1 = new HashMap<Integer, HashMap<Object, Object>>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Object, Object>>(hashMap0);
      Map<Integer, HashMap<Object, Object>> map0 = doubleKeyMap0.remove(integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Map<Object, Integer>, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, HashMap<Map<Object, Integer>, Integer>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Map<Object, Integer>, Integer> hashMap1 = new HashMap<Map<Object, Integer>, Integer>();
      doubleKeyMap0.put(hashMap0, "us.codecraft.webmagic.utils.DoubleKeyMap", hashMap1);
      HashMap<Map<Object, Integer>, Integer> hashMap2 = doubleKeyMap0.get(hashMap0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertSame(hashMap2, hashMap1);
      assertNotNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Map<String, Object>, Map<String, Integer>> hashMap0 = new HashMap<Map<String, Object>, Map<String, Integer>>();
      DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String>();
      Map<String, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put((Map<String, Object>) null, map0);
      DoubleKeyMap<Map<String, Object>, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, String, Integer>(hashMap0, class0);
      Map<String, Integer> map1 = doubleKeyMap1.get((Map<String, Object>) null);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer((-3702));
      HashMap<Map<String, Object>, Map<String, Integer>> hashMap0 = new HashMap<Map<String, Object>, Map<String, Integer>>();
      DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String>();
      Map<String, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put((Map<String, Object>) null, map0);
      DoubleKeyMap<Map<String, Object>, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, String, Integer>(hashMap0, class0);
      doubleKeyMap1.put((Map<String, Object>) null, (String) null, integer0);
      Map<String, Integer> map1 = doubleKeyMap1.get((Map<String, Object>) null);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Class<Map> class0 = Map.class;
      Map<Map<Object, Integer>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, Object, Object>(map0, class0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = doubleKeyMap1.remove((Map<Object, Integer>) hashMap1, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Map<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Map<String, Object>, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.remove(object0, (Object) doubleKeyMap0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      DoubleKeyMap<HashMap<Object, Object>, Map<Object, Integer>, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Map<Object, Integer>, String>();
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Object) doubleKeyMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Object object0 = doubleKeyMap0.put((Integer) null, "&hYv yyGH+@9(z", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Integer, Object>(class0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(hashMap0, (Integer) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Object>((Map<HashMap<Object, Integer>, Map<Object, Object>>) null);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(hashMap0, object0, (Object) "TgR~E_ri.H];k?*");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Object, Integer>, String>> hashMap0 = new HashMap<Integer, Map<HashMap<Object, Integer>, String>>();
      DoubleKeyMap<Integer, HashMap<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, String>(hashMap0);
      HashMap<Object, Map<Integer, String>> hashMap1 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(hashMap1);
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Integer) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(class0);
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>();
      Map<Object, Integer> map0 = doubleKeyMap1.get((Object) "", (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      DoubleKeyMap<Object, HashMap<Object, Integer>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Integer>, String>();
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (HashMap<Object, Integer>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Map<String, Object>, Map<String, Integer>> hashMap0 = new HashMap<Map<String, Object>, Map<String, Integer>>();
      DoubleKeyMap<Map<String, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, String, Integer>(hashMap0, class0);
      Map<String, Integer> map0 = doubleKeyMap0.get((Map<String, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("", (Object) "", "ci^BIW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, Map<Object, Integer>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Map<Object, Integer>, String>((Map<HashMap<Object, Object>, Map<Map<Object, Integer>, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Map<String, Object>, Map<String, Integer>> hashMap0 = new HashMap<Map<String, Object>, Map<String, Integer>>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap1.put("", integer0);
      hashMap0.put((Map<String, Object>) null, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, String, Integer>(hashMap0, class0);
      doubleKeyMap0.remove((Map<String, Object>) null, "e-w#d@Pl S]");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Map<Object, Integer>, String> hashMap1 = new HashMap<Map<Object, Integer>, String>();
      DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Map<Object, Integer>, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<Object, Integer>, HashMap<Map<Object, Integer>, String>>();
      doubleKeyMap0.put((Map<Object, Integer>) null, hashMap0, hashMap1);
      HashMap<Map<Object, Integer>, String> hashMap2 = doubleKeyMap0.put((Map<Object, Integer>) null, hashMap0, hashMap1);
      assertNotNull(hashMap2);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) "E#");
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      String string0 = doubleKeyMap1.get(integer0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<Object, Integer>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Integer>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Map<String, Object>, Map<String, Integer>> hashMap1 = new HashMap<Map<String, Object>, Map<String, Integer>>();
      DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String>();
      Map<String, Integer> map0 = doubleKeyMap0.newMap();
      hashMap1.put(hashMap0, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, Object>, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<String, Object>, String, Integer>(hashMap1, class0);
      doubleKeyMap1.remove((Map<String, Object>) hashMap0, "Xgb");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, String>();
      DoubleKeyMap<Object, Integer, Map<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Integer, Integer>>();
      Map<Integer, Map<Integer, Integer>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }
}
