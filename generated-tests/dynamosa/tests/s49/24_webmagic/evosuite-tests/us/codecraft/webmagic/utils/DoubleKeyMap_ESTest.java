/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:11:27 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Integer>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Integer integer0 = doubleKeyMap0.remove("", hashMap0);
      doubleKeyMap0.put((String) null, hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.remove((String) null, hashMap0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Integer>();
      Integer integer0 = doubleKeyMap0.remove(" ~$t12*^/*", (HashMap<String, String>) null);
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>();
      doubleKeyMap1.put(integer0, (String) null, integer0);
      Integer integer1 = doubleKeyMap1.get(integer0, "");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, Map<String, HashMap<String, Object>>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Map<String, HashMap<String, Object>>, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, HashMap<String, Object>> hashMap1 = new HashMap<String, HashMap<String, Object>>();
      doubleKeyMap0.put(hashMap0, (Map<String, HashMap<String, Object>>) hashMap1, "kJy7=xnGt");
      Map<Map<String, HashMap<String, Object>>, String> map0 = doubleKeyMap0.remove(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Integer>();
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      DoubleKeyMap<String, HashMap<Object, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = doubleKeyMap1.put("ne9W", hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Map<HashMap<Map<String, HashMap<String, Object>>, Map<String, HashMap<String, Object>>>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<Map<String, HashMap<String, Object>>, Map<String, HashMap<String, Object>>>, Object>>();
      DoubleKeyMap<Object, HashMap<Map<String, HashMap<String, Object>>, Map<String, HashMap<String, Object>>>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Map<String, HashMap<String, Object>>, Map<String, HashMap<String, Object>>>, Object>(hashMap0);
      Map<Map<Object, Object>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, Object, String>(map0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Map<Object, Object>) hashMap1, object0, "S~<2VYJg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>((Map<Object, Map<HashMap<String, String>, Integer>>) null, class0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.put(object0, (HashMap<String, String>) null, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0, class0);
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(class0);
      String string0 = doubleKeyMap2.get("$)m", (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      HashMap<Object, Map<Map<Map<String, HashMap<String, Object>>, Object>, Map<String, HashMap<String, Object>>>> hashMap0 = new HashMap<Object, Map<Map<Map<String, HashMap<String, Object>>, Object>, Map<String, HashMap<String, Object>>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Map<String, HashMap<String, Object>>, Object>, Map<String, HashMap<String, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Map<String, HashMap<String, Object>>, Object>, Map<String, HashMap<String, Object>>>(hashMap0, class0);
      HashMap<Map<String, HashMap<String, Object>>, Object> hashMap1 = new HashMap<Map<String, HashMap<String, Object>>, Object>();
      Map<String, HashMap<String, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Map<Map<String, HashMap<String, Object>>, Object>) hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Map<String, HashMap<String, Object>>, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, HashMap<String, Object>>, Object, HashMap<String, String>>();
      Map<Object, HashMap<String, String>> map0 = doubleKeyMap0.get((Map<String, HashMap<String, Object>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<String, HashMap<String, Object>>, Map<Integer, Map<String, HashMap<String, Object>>>> hashMap0 = new HashMap<Map<String, HashMap<String, Object>>, Map<Integer, Map<String, HashMap<String, Object>>>>();
      DoubleKeyMap<Map<String, HashMap<String, Object>>, Integer, Map<String, HashMap<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Map<String, HashMap<String, Object>>, Integer, Map<String, HashMap<String, Object>>>(hashMap0);
      DoubleKeyMap<Object, Map<String, HashMap<String, Object>>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, HashMap<String, Object>>, Integer>();
      Map<Map<String, HashMap<String, Object>>, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<Object, Map<String, HashMap<String, Object>>>, Map<String, Object>> hashMap0 = new HashMap<HashMap<Object, Map<String, HashMap<String, Object>>>, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<String, HashMap<String, Object>>>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<String, HashMap<String, Object>>>, String, Object>(hashMap0, class0);
      HashMap<Object, Map<String, HashMap<String, Object>>> hashMap1 = new HashMap<Object, Map<String, HashMap<String, Object>>>();
      HashMap<String, HashMap<String, Object>> hashMap2 = new HashMap<String, HashMap<String, Object>>(0);
      hashMap1.put(hashMap0, hashMap2);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      hashMap0.put(hashMap1, hashMap3);
      // Undeclared exception!
      try { 
        doubleKeyMap0.remove(hashMap1, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Object) integer0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, String>, Map<String, HashMap<String, Object>>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Map<String, HashMap<String, Object>>, Integer>((Map<HashMap<String, String>, Map<Map<String, HashMap<String, Object>>, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, Object>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Map<String, Integer>>, String, Map<Integer, Map<String, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Map<String, Integer>>, String, Map<Integer, Map<String, Integer>>>();
      Map<Integer, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put(map0, "a4^p\"'F:", map0);
      Map<Integer, Map<String, Integer>> map1 = doubleKeyMap0.remove(map0, "");
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(265);
      HashMap<String, Map<String, Integer>> hashMap0 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<String, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put("", map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>(hashMap0, class0);
      Integer integer1 = doubleKeyMap1.put("", (String) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(265);
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      doubleKeyMap0.put((Integer) null, "us.codecraft.webmagic.utils.MultiKeyMapBase", integer0);
      Integer integer1 = doubleKeyMap0.get((Integer) null, (String) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, Integer>();
      Integer integer0 = new Integer(265);
      doubleKeyMap0.put((String) null, (HashMap<String, String>) null, integer0);
      Integer integer1 = doubleKeyMap0.remove((String) null, (HashMap<String, String>) null);
      assertEquals(265, (int)integer1);
  }
}
