/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:14:24 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(100000000, rationalNumber0.divisor);
      assertEquals(1.0E-8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2020L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(2020.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals("2020", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1060.3333333333333);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1060.3334F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.806235326919705E-9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      String string1 = rationalNumber0.toString();
      assertEquals(3.806235323703738E-9, rationalNumber0.doubleValue(), 0.01);
      assertEquals("1/262726793 (0)", string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.12000000000000455);
      assertEquals(0.12F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(825.7);
      String string0 = rationalNumber0.toString();
      assertEquals("8257/10 (825.7)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(2370, 100);
      String string0 = rationalNumber0.toString();
      assertEquals("2370/100 (23.7)", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(23.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483629L, 2147483629L);
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(0, int0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1", string0);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      int int0 = rationalNumber0.intValue();
      assertEquals((-2147483647), int0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      rationalNumber0.toString();
      rationalNumber0.toString();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1241.49882);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1,241.5", string0);
      assertEquals(2, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 2147483654L;
      double double0 = (-487.4366794308198);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483654L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483654, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1L), 2147483655L);
      assertEquals(2147483641, rationalNumber0.divisor);
      assertEquals(4.656612888256223E-10, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1295L, (-2147483663L));
      float float0 = rationalNumber0.floatValue();
      assertEquals((-6.025657E-7F), float0, 0.01F);
      assertEquals((-1073741832), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483652L), (-2147483652L));
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1780L), 0L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2.1474836449695678E9);
      rationalNumber1.toString();
      rationalNumber1.toDisplayString();
      RationalNumber rationalNumber2 = new RationalNumber(1, 1);
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      // Undeclared exception!
      try { 
        rationalNumber3.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
