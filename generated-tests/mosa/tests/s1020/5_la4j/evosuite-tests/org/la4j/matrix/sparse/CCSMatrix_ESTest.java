/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:29:02 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(12, 1, 110.675961109, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      sparseMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertTrue(sparseMatrix0.equals((Object)cCSMatrix0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 774;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(774.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      assertEquals(9, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(9.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      assertEquals(9, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(9.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(9, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(9.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertEquals(81.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(9, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(9, cCSMatrix1.rows());
      assertEquals(9, cCSMatrix1.columns());
      assertEquals(0.1111111111111111, cCSMatrix1.density(), 0.01);
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(612, 612);
      cCSMatrix0.copyOfShape(1, 1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1040);
      assertNotNull(cCSMatrix1);
      
      cCSMatrix0.copyOfRows(0);
      DenseVector.zero(0);
      cCSMatrix0.minInColumn(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("707x\"2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(39, 39);
      assertEquals(39, cCSMatrix0.cardinality());
      assertEquals(0.02564102564102564, cCSMatrix0.density(), 0.01);
      assertEquals(39.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(39, cCSMatrix0.columns());
      assertEquals(39, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      Matrix matrix0 = cCSMatrix0.blankOfRows(844);
      matrix0.toRowVector();
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(999, (double) 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(46);
      cCSMatrix0.removeFirstRow();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1239, 1239, doubleArray0);
      int int0 = 81;
      cCSMatrix0.power(int0);
      int int1 = (-5524);
      int int2 = 32;
      cCSMatrix0.sliceTopLeft(int1, int2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1653.4442564131677;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 3, doubleArray0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      int int0 = cCSMatrix0.rank();
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      Matrix matrix0 = cCSMatrix0.rotate();
      cCSMatrix0.kroneckerProduct(matrix0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.shuffle();
      cCSMatrix1.eachNonZeroInRow(2, (VectorProcedure) null);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.toMatrixMarket();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      DenseMatrix denseMatrix0 = cCSMatrix1.toDenseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random(1, 1, (-1.0), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.toString();
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.nextInt();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(37, 37, 0.6, (Random) mockRandom0);
      cCSMatrix1.sliceTopLeft((-756), (-1004));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-37L));
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 11, 0.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(12, 12);
      cCSMatrix0.min();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 29);
      sparseMatrix0.rank();
      ((CCSMatrix) sparseMatrix0).minInColumn(7);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(0, 0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.zero(12, 12);
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          cCSMatrix0.update(matrixFunction0);
          cCSMatrix0.min();
          // Undeclared exception!
          try { 
            CCSMatrix.zero((-3259), 463, (-3259));
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Wrong matrix dimensions: -3259x463
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix0.partiallyApply(denseMatrix0);
      cCSMatrix0.apply(matrixOperation0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(42, 42);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(844, 844);
      cCSMatrix1.toRowVector();
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.toString();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(39, 39);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = 61;
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.toString();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1837);
      DenseMatrix.unit(40, 40);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.partiallyApply(denseMatrix0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(40, 40);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(46);
      cCSMatrix0.minInColumn(0);
      Matrix.zero(0, 0);
      cCSMatrix0.copyOfShape(60, 0);
      cCSMatrix0.getRow(60);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(42, 42);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(42, 48);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
      CCSMatrix.block(cCSMatrix1, cCSMatrix2, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1596;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1596;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(2168, 1596, doubleArray0);
      double double0 = 9.0;
      cCSMatrix0.set(int0, int0, double0);
      int int1 = (-1306);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(42, 42, 42);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      CCSMatrix.zero(9, 9);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(612);
      cCSMatrix0.copyOfShape(612, 612);
      CCSMatrix.zero(418, 2410, 17);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumn(2, vectorAccumulator0);
      CCSMatrix.zero(418, 37, 1519);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.getColumn(17);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.norm();
      Matrix matrix0 = cCSMatrix0.power(9);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        matrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.toString();
      cCSMatrix0.setColumn(2, (double) 9);
      CCSMatrix.identity(2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1018, 1018, 1018);
      cCSMatrix0.setColumn(474, (-4006.0));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(986, 972, 9);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(36, 36);
      cCSMatrix0.blankOfRows(36);
      cCSMatrix0.toRowVector();
      int[] intArray0 = new int[2];
      cCSMatrix0.blank();
      intArray0[1] = 36;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      DenseVector.unit(0);
      cCSMatrix0.minInColumn(0);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(12, 0, 0);
      ColumnMajorSparseMatrix.zero(0, 12);
      DenseVector.unit(0);
      Integer integer0 = new Integer(0);
      ((CCSMatrix) columnMajorSparseMatrix0).setAll(0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(612, 612);
      cCSMatrix0.toBinary();
      CCSMatrix.zero(612, 2410, 17);
      cCSMatrix0.toRowVector();
      int[] intArray0 = new int[5];
      intArray0[0] = 612;
      intArray0[1] = 612;
      int[] intArray1 = new int[8];
      cCSMatrix0.select(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      MockRandom mockRandom0 = new MockRandom(9);
      mockRandom0.nextInt();
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(141, (double) 141, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 19881.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix.diagonal(9, 9);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = Double.MAX_EXPONENT;
      CCSMatrix.randomSymmetric(9, (double) (byte)1, (Random) mockRandom0);
      CCSMatrix.identity(5);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      cCSMatrix0.minInColumn(0);
      cCSMatrix0.setAll((-3401.13208));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1018);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1018);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(1018, 67);
      cCSMatrix2.toMatrixMarket((NumberFormat) null);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(67, vectorProcedure0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      CCSMatrix.identity(1018);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(46);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      Matrix matrix0 = cCSMatrix0.blankOfRows(844);
      matrix0.columnMajorIterator();
      matrix0.toRowVector();
      int[] intArray0 = new int[1];
      intArray0[0] = 2410;
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(36, 36);
      cCSMatrix0.copyOfRows(36);
      DenseVector.unit(0);
      CCSMatrix.identity(842);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix.diagonal(42, 42);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(844, 844);
      cCSMatrix0.toRowVector();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.zero(42, 844);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(12, 12);
      cCSMatrix0.toRowVector();
      cCSMatrix0.min();
      CCSMatrix.zero(12, 12, 12);
      cCSMatrix0.setAll(3.043252722170454E52);
      cCSMatrix0.setAll(3.043252722170454E52);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(65, 65, 65);
      MockRandom mockRandom0 = new MockRandom(65);
      mockRandom0.nextInt();
      cCSMatrix0.multiply(0.0);
      cCSMatrix0.maxInColumn(19);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.toString();
      MockRandom mockRandom0 = new MockRandom((-1L));
      mockRandom0.nextInt();
      cCSMatrix0.setColumn((int) (byte)1, (double) 0);
      CCSMatrix.identity(13);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, Double.NEGATIVE_INFINITY);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(42, 42);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(844, 844);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix1.updateColumn(7, vectorFunction0);
      cCSMatrix1.toRowVector();
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, (-1272.1575791));
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(194, 4, 4);
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix0.partiallyApply(denseMatrix0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.apply(matrixOperation0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      cCSMatrix1.rank();
      cCSMatrix0.minInColumn(0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      Matrix matrix0 = cCSMatrix0.shuffle();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom((-1L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(2, mockRandom0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1078;
      intArray0[5] = 2;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
