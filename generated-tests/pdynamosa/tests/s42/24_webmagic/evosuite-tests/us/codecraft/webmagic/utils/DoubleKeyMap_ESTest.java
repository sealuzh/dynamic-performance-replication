/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:55:00 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<Object, String>> hashMap0 = new HashMap<Map<Integer, String>, Map<Object, String>>();
      DoubleKeyMap<Map<Integer, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, String>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put((Map<Integer, String>) null, hashMap1);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.remove((Map<Integer, String>) null, (Object) integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Map<Object, HashMap<Integer, String>>> hashMap0 = new HashMap<Integer, Map<Object, HashMap<Integer, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Integer, String>>(hashMap0, class0);
      Integer integer0 = new Integer((-1373));
      HashMap<Object, HashMap<Integer, String>> hashMap1 = new HashMap<Object, HashMap<Integer, String>>();
      hashMap0.put(integer0, hashMap1);
      Integer integer1 = new Integer((-1373));
      HashMap<Integer, String> hashMap2 = doubleKeyMap0.get(integer0, (Object) integer1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("J8C5jC<9yBJm2", "J8C5jC<9yBJm2");
      hashMap0.put("J8C5jC<9yBJm2", hashMap1);
      doubleKeyMap0.remove("J8C5jC<9yBJm2", "J8C5jC<9yBJm2");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<String, String> map0 = doubleKeyMap0.newMap();
      hashMap0.put("lYb{o,/8Iu{(6`", map0);
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>(hashMap0);
      Map<String, String> map1 = doubleKeyMap1.remove("lYb{o,/8Iu{(6`");
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, String>, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<Integer, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Integer>(map0);
      Map<Integer, String> map1 = doubleKeyMap1.newMap();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(map1, hashMap1);
      DoubleKeyMap<Map<Integer, String>, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Integer, String>, Object, Object>(hashMap0);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Map<Object, Object> map2 = doubleKeyMap2.get((Map<Integer, String>) hashMap2);
      assertEquals(0, map2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.remove((String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Map<Integer, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Integer, String>>(class0);
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      DoubleKeyMap<HashMap<String, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, Object>();
      Object object0 = doubleKeyMap0.put(hashMap0, "C&C<ku@6y+q+h\"", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(class0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = doubleKeyMap1.put((Object) hashMap0, (Object) doubleKeyMap0, (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Integer, String>>(class0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = doubleKeyMap0.put((HashMap<Object, Object>) null, (HashMap<Object, Object>) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>(class0);
      DoubleKeyMap<Integer, HashMap<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Integer>, Object>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(map0, class0);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap2.put((Object) doubleKeyMap0, (String) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>(class0);
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.get((Object) "dvq[UIh\u0005<J!8p-cb", (String) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      HashMap<Map<Integer, String>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, String>, Map<Object, Object>>();
      DoubleKeyMap<Map<Integer, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, Object, Object>(hashMap0);
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, Integer>(class0);
      Map<Integer, String> map0 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap1.get(map0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Object, Map<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, String>, String>();
      String string0 = doubleKeyMap0.get((Object) null, (Map<Integer, String>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0, class0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) hashMap0, "!a.&5J4<vi", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("", "");
      hashMap0.put("J8C5jC<9yBJm2", hashMap1);
      doubleKeyMap0.remove("J8C5jC<9yBJm2", "J8C5jC<9yBJm2");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, String>, Object>();
      HashMap<Object, Map<Object, Map<Integer, String>>> hashMap0 = new HashMap<Object, Map<Object, Map<Integer, String>>>();
      DoubleKeyMap<Object, Object, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Integer, String>>(hashMap0);
      Map<Integer, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      String string0 = doubleKeyMap0.put("", "98PQ", "<`'!BF[2P9RCLGfwI[7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0, class0);
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<String, Object>, HashMap<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<String, Object>, HashMap<Object, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
