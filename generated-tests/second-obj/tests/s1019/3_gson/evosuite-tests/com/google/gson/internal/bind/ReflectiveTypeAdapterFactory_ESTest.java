/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:09:11 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.InstanceCreator;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.lang.reflect.Type;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ReflectiveTypeAdapterFactory.BoundField> class0 = ReflectiveTypeAdapterFactory.BoundField.class;
      TypeToken.get(class0);
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      excluder0.excludeFieldsWithoutExposeAnnotation();
      Class<InputStream> class1 = InputStream.class;
      TypeToken<InputStream> typeToken0 = TypeToken.get(class1);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder0, typeToken0);
      Type[] typeArray0 = new Type[8];
      Class<Integer> class2 = Integer.TYPE;
      Class<Long> class3 = Long.TYPE;
      typeArray0[1] = (Type) class3;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      typeArray0[6] = (Type) class2;
      typeArray0[7] = (Type) class1;
      // Undeclared exception!
      try { 
        TypeToken.getParameterized(class1, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.$Gson$Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<InstanceCreator<Object>> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<InstanceCreator<Object>>((ObjectConstructor<InstanceCreator<Object>>) null, hashMap0);
      InstanceCreator<Object> instanceCreator0 = (InstanceCreator<Object>) mock(InstanceCreator.class, new ViolatedAssumptionAnswer());
      JsonElement jsonElement0 = reflectiveTypeAdapterFactory_Adapter0.toJsonTree(instanceCreator0);
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.fromJsonTree(jsonElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Gson gson0 = new Gson();
      gson0.fieldNamingStrategy();
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      Class<Object> class0 = Object.class;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory1 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      gson0.toJsonTree((Object) jsonAdapterAnnotationTypeAdapterFactory0, (Type) class0);
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      TypeAdapter<Object> typeAdapter0 = jsonAdapterAnnotationTypeAdapterFactory1.create(gson0, typeToken0);
      assertNull(typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.TYPE;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Class<Type> class2 = Type.class;
      TypeToken.get(class2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TypeToken<Integer> typeToken0 = TypeToken.get(class1);
      TypeToken.get(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Gson gson0 = new Gson();
      Excluder excluder0 = gson0.excluder();
      excluder0.excludeFieldsWithoutExposeAnnotation();
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingPolicy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      TypeAdapter<Integer> typeAdapter0 = reflectiveTypeAdapterFactory0.create(gson0, typeToken0);
      assertNull(typeAdapter0);
  }
}
