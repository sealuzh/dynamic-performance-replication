/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:18:41 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(240, timeUnit0);
      assertSame(cacheControl_Builder0, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      assertSame(cacheControl_Builder2, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.noCache();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      int int0 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(Integer.MAX_VALUE, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      assertSame(cacheControl_Builder3, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder1.maxAge((-316), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -316
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.build();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(2147483619, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(2147483619, timeUnit0);
      assertSame(cacheControl_Builder1, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.toString();
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      String string0 = cacheControl0.toString();
      assertEquals("no-store", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      cacheControl_Builder0.maxAge(44, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("max-age=2640", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      cacheControl0.FORCE_CACHE.toString();
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder0.minFresh(686, timeUnit0);
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("no-store, min-fresh=0", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noTransform();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      String string0 = cacheControl0.toString();
      assertEquals("no-transform", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.minFresh((-1968685031), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minFresh < 0: -1968685031
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      boolean boolean0 = cacheControl0.isPrivate();
      assertFalse(boolean0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.noStore();
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      cacheControl0.noTransform();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n-transom";
      stringArray0[1] = "n-transom";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      int int0 = cacheControl0.minFreshSeconds();
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), int0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      boolean boolean0 = cacheControl0.isPublic();
      cacheControl0.noCache();
      boolean boolean1 = cacheControl0.onlyIfCached();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      int int0 = cacheControl0.minFreshSeconds();
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(2147483593, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      assertSame(cacheControl_Builder2, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1789569704), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1789569704
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "onry-if-ca^hped,P";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "yDF=";
      Headers.of(stringArray0);
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noCache());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = cacheControl_Builder0.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String[] stringArray0 = new String[6];
      String string0 = cacheControl0.headerValue;
      cacheControl0.FORCE_NETWORK.headerValue = "Cache-Control";
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "min-fresh=";
      stringArray0[4] = "bytes is empty";
      stringArray0[5] = "B<`(v";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noTransform());
      
      cacheControl_Builder0.noStore();
      cacheControl0.maxStaleSeconds();
      String string1 = cacheControl0.toString();
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.set("M1", "Cache-Control");
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("Cache-Control", "only-if-cached");
      headers_Builder1.set("only-if-cached", "M1");
      headers_Builder0.addLenient("iachRzeByntroM", "max-stale");
      headers_Builder1.build();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.headerValue = "xfs WhShX$M<^#;_2{";
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.onlyIfCached());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "no-transform";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "Cache-Control";
      stringArray0[4] = "no-transform";
      stringArray0[5] = "Cache-Control";
      stringArray0[6] = "Cache-Control";
      stringArray0[7] = "no-store";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers headers1 = Headers.of(stringArray0);
      Set<String> set0 = headers1.names();
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "no-cache";
      stringArray0[2] = "no-cache, ";
      stringArray0[3] = "no-cache, ";
      stringArray0[4] = "no-cache, ";
      stringArray0[5] = "Cache-Control";
      Headers headers0 = Headers.of(stringArray0);
      Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.toString();
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.isPrivate());
      assertTrue(cacheControl0.noCache());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "B<`(v";
      stringArray0[3] = "Cache-Control";
      stringArray0[4] = "B<`(v";
      stringArray0[5] = "B<`(v";
      stringArray0[6] = "Cache-Control";
      stringArray0[7] = "no-store";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.FORCE_CACHE.headerValue = "no-store";
      String string0 = cacheControl0.toString();
      assertEquals("no-store", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "private";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "Cache-Control";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      cacheControl1.FORCE_CACHE.headerValue = "Cache-Control";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cacheControl1.noCache();
      cacheControl0.noStore();
      int int0 = cacheControl1.sMaxAgeSeconds();
      assertEquals((-1), int0);
      
      boolean boolean0 = cacheControl1.noTransform();
      assertFalse(cacheControl1.mustRevalidate());
      assertTrue(cacheControl1.isPrivate());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(boolean0);
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noStore());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("Cache-Control", "max-age=");
      Headers headers0 = new Headers(headers_Builder1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      CacheControl.parse(headers0);
      Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      assertFalse(cacheControl0.isPublic());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "Cache-Control";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "y=3";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = cacheControl0.noTransform();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      cacheControl_Builder1.noTransform();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Pragma";
      stringArray0[1] = "ib\"7%-jt2 ;Erklu(v";
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.onlyIfCached());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noStore());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.addLenient("Cache-Control", "max-stale");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.mustRevalidate();
      boolean boolean1 = cacheControl0.noCache();
      assertFalse(cacheControl0.noTransform());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals(Integer.MAX_VALUE, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "private";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "Cache-Control";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cacheControl0.toString();
      cacheControl0.toString();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      cacheControl_Builder0.maxAge(2645, timeUnit0);
      cacheControl_Builder1.build();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      assertSame(cacheControl_Builder2, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "iUViWidd";
      stringArray0[1] = "iUViWidd";
      stringArray0[2] = "iUViWidd";
      stringArray0[3] = "Cache-Control";
      stringArray0[4] = "Cache-Control";
      stringArray0[5] = "iUViWidd";
      stringArray0[6] = "Cache-Control";
      stringArray0[7] = "s-maxage";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl_Builder0.onlyIfCached();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers0.values("Cache-Control");
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      
      cacheControl0.mustRevalidate();
      boolean boolean0 = cacheControl0.onlyIfCached();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "must-revalidate";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "y=3";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Cache-Control";
      stringArray0[1] = "must-revalidate";
      stringArray0[2] = "Cache-Control";
      stringArray0[3] = "y=3";
      Headers headers0 = Headers.of(stringArray0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cacheControl0.FORCE_NETWORK.toString();
      String string0 = cacheControl0.toString();
      assertEquals("must-revalidate", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      cacheControl_Builder1.noCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Pragma", "#q=\"`d%\"^");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.noTransform();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      headers0.toMultimap();
      cacheControl0.maxStaleSeconds();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.removeAll("#q=\"`d%\"^");
      cacheControl1.toString();
      // Undeclared exception!
      try { 
        headers_Builder0.addLenient("efbbbf", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("pragma", "public");
      Headers headers0 = headers_Builder1.build();
      Headers.Builder headers_Builder2 = headers_Builder1.addLenient("public");
      Headers headers1 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      int int0 = cacheControl0.minFreshSeconds();
      cacheControl1.noStore();
      int int1 = cacheControl0.sMaxAgeSeconds();
      assertTrue(int1 == int0);
      
      Headers.Builder headers_Builder3 = headers_Builder2.addLenient("public");
      headers_Builder3.add("]-:3ec");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.minFresh(19, timeUnit0);
      cacheControl_Builder3.maxAge(44, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.onlyIfCached();
      cacheControl_Builder4.noCache();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      String string0 = cacheControl2.toString();
      assertNotNull(string0);
      assertEquals("public", string0);
  }
}
