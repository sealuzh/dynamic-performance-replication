/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:32:00 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "F?i(F~xJtZp8r{8J7", "", "", "F?i(F~xJtZp8r{8J7");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3257);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3257, "+l?uN<`**k:9C[c$", "+l?uN<`**k:9C[c$", "Synthetic", "Synthetic");
      ByteVector byteVector0 = new ByteVector(1);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 4, "Synthetic", "char", "", (Object) null);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      assertNotSame(fieldWriter0, fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3257);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3257, "+l?uN<`**k:9C[c$", "+l?uN<`**k:9C[c$", "Synthetic", "Synthetic");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3257);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3257, "+l?uN<`**k:9C[c$", "+l?uN<`**k:9C[c$", "Synthetic", "Synthetic");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      Attribute attribute0 = new Attribute("Synthetic");
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.putLong(3119L);
      classWriter0.newFloat(3257);
      fieldWriter0.put(byteVector1);
      byte[] byteArray0 = new byte[0];
      attribute0.value = byteArray0;
      fieldWriter1.visitAttribute(attribute0);
      ByteVector byteVector2 = byteVector0.putLong(2);
      fieldWriter0.put(byteVector2);
      fieldWriter0.getSize();
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter2.visitAnnotation("Synthetic", false);
      int int0 = fieldWriter1.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3257);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "RuntimeVisibleAnnotations", "FHKNeC[3}E|=~y5G", "FHKNeC[3}E|=~y5G", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      fieldWriter0.getSize();
      mockHijrahDate0.getMockedClassName();
      fieldWriter0.visitEnd();
      mockHijrahDate0.getMockedClassName();
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3257);
      ByteVector byteVector0 = new ByteVector(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 3257, "", "+l?uN<`**k:9C[c$", "+l?uN<`**k:9C[c$", "Synthetic");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("+l?uN<`**k:9C[c$", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "){D,'0'=*]Rik[P9p{", "@", "){D,'0'=*]Rik[P9p{", "){D,'0'=*]Rik[P9p{");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      int int0 = Type.FLOAT;
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      classWriter0.invalidFrames = true;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "){D,'0'=*]Rik[P9p{", "", "){D,'0'=*]Rik[P9p{", "){D,'0'=*]Rik[P9p{");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.visitAnnotation("){D,'0'=*]Rik[P9p{", true);
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3257);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeInvisibleAnnotations", "+l?uN<`**k:9C[c$", (String) null, "@");
      ByteVector byteVector0 = new ByteVector(3257);
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "F?i(F~xJtZp8r{8J7", "", "8'GDbXi(r`>@hHq@7m/", "F?i(F~xJtZp8r{8J7");
      Attribute attribute0 = new Attribute("8'GDbXi(r`>@hHq@7m/");
      Attribute attribute1 = attribute0.next;
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "F?i(F~xJtZp8r{8J7", "", "8'GDbXi(r`>@hHq@7m/", "F?i(F~xJtZp8r{8J7");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.next = fieldWriter1;
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "){D,'0'=*]Rik[P9p{", "M", "N2t/<'1}>=n\">", "){D,'0'=*]Rik[P9p{");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 196, "85!6eSlfDT7P<Y_c", "The FileFilter must not be null", "xVl,~U-}^,>vz:,<", (Object) null);
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter0.visitAnnotation("xVl,~U-}^,>vz:,<", true);
      fieldWriter2.visitAnnotation("RuntimeVisibleParameterAnnotations", true);
      fieldWriter2.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putShort((-2845));
      fieldWriter1.put(byteVector0);
      fieldWriter1.visitEnd();
      fieldWriter1.getSize();
      Attribute attribute0 = new Attribute("Gnk");
      fieldWriter1.visitAttribute(attribute0);
      fieldWriter0.visitEnd();
      // Undeclared exception!
      try { 
        fieldWriter1.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "){D,'0'=*]Rik[P9p{", "M", "N2t/<'1}>=n\">", "){D,'0'=*]Rik[P9p{");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 1, "@\"[a", "M", "k$", (Object) null);
      fieldWriter0.getSize();
      FieldWriter fieldWriter2 = classWriter0.lastField;
      fieldWriter2.getSize();
      fieldWriter1.visitEnd();
      assertNotSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2845));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2845), "){D,'0'=*]Rik[P9p{", "@", "){D,'0'=*]Rik[P9p{", "){D,'0'=*]Rik[P9p{");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "){D,'0'=*]Rik[P9p{";
      stringArray0[2] = "@";
      stringArray0[3] = "){D,'0'=*]Rik[P9p{";
      stringArray0[4] = "sEg";
      stringArray0[5] = "@";
      stringArray0[6] = "@";
      classWriter0.visit((-2845), (-2845), "", "@", "", stringArray0);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(1355L);
  }
}
