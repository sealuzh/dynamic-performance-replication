/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:02:59 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3613);
      double double0 = sparseMatrix0.diagonalProduct();
      assertEquals(3613, sparseMatrix0.columns());
      assertEquals(3613, sparseMatrix0.rows());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("Out of bounds: Cannot add ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.sliceTopLeft((-2994), (-2994));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-2994][0..-2994].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-637), 1387);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -637x1387
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(37, 37, mockRandom0);
      // Undeclared exception!
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2, 2);
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      sparseMatrix0.equals((Object) ", ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(28);
          cCSMatrix0.equals(matrix0, (double) 28);
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
          matrix0.foldColumns(vectorAccumulator0);
          cCSMatrix0.equals(matrix0, (double) 28);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CCSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1858, 1858);
      // Undeclared exception!
      basic2DMatrix0.subtract(2696.1030823427063);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(19, (-198.5));
      Locale locale0 = Locale.CANADA_FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      cCSMatrix0.toCSV(numberFormat0);
      cCSMatrix0.blankOfRows(19);
      Integer integer0 = new Integer(19);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.diagonal(7, 7);
      basic2DMatrix0.minInRow(5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.insert((Matrix) cCSMatrix0, 0, 0);
      cRSMatrix0.multiplyByItsTranspose();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      sparseMatrix0.is(matrixPredicate0);
      sparseMatrix0.iterator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(37, 37, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(37);
      cCSMatrix0.equals(matrix0, 1.0);
      matrix0.setRow(9, 1.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.eachInColumn(37, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.add(0.0);
      matrix0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(3, 3, mockRandom0);
      basic2DMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      int int0 = 7;
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInColumn(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInColumn(2, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.hadamardProduct(cCSMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.ensureIndexesAreInBounds(1451, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1451' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      sparseMatrix0.toSparseMatrix();
      sparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 15;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(15, 15, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix matrix0 = Matrix.unit(4, 4);
          matrix0.toString();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 4194;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4194, 4194);
      // Undeclared exception!
      SparseMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1161, 37);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateColumn(19, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '19' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 755;
      doubleArray0[1] = (double) (-2275);
      doubleArray0[2] = (double) 755;
      doubleArray0[3] = (double) (-2275);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-2275), 755, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2275x755
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      sparseMatrix0.swapColumns((-637), (-637));
      // Undeclared exception!
      try { 
        sparseMatrix0.blankOfColumns((-637));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-637
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      matrix0.is(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix.identity(21);
      Matrix.diagonal(21, 0.964);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4194, 4194);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.copyOfColumns(537);
      columnMajorSparseMatrix0.getRow(4194);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 2);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(862, 32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(0, 32, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 28;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 4194;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4194, 4194);
      columnMajorSparseMatrix0.removeFirstColumn();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("    ");
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns(3931, (-1181));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3931' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      Matrix matrix0 = sparseMatrix0.multiplyByItsTranspose();
      DenseVector denseVector0 = DenseVector.unit(0);
      // Undeclared exception!
      try { 
        matrix0.setColumn(0, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(6);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(6);
      matrix0.add((Matrix) sparseMatrix0);
      Matrix matrix1 = matrix0.power(6);
      matrix1.multiply(matrix0);
      // Undeclared exception!
      try { 
        matrix1.setRow((-357913942), 789.59958);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -357913942
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.transpose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.add(1.0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      Double double0 = new Double((-1745965966));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.insert((Matrix) cCSMatrix0, 0, 0);
      cRSMatrix0.multiplyByItsTranspose();
      matrix0.divide(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateColumn(48, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(21, 21);
      basic2DMatrix0.euclideanNorm();
      basic2DMatrix0.subtract((-1254.2023561997));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4190, 4190);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      columnMajorSparseMatrix0.getRow(4190);
      columnMajorSparseMatrix0.non(matrixPredicate0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.randomSymmetric(4190, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2717);
      matrix0.set(2011, (-3097), 2011);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4194, 4194);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.getRow(4194);
      // Undeclared exception!
      columnMajorSparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("    ");
      // Undeclared exception!
      try { 
        sparseMatrix0.slice(355, 355, 355, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [355..355][355..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(28);
      cCSMatrix0.subtract(matrix0);
      cCSMatrix0.equals(matrix0, (double) 28);
      MatrixFactory<ColumnMajorSparseMatrix> matrixFactory0 = (MatrixFactory<ColumnMajorSparseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      matrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.diagonal(5, (-1733.121201));
      Matrix matrix0 = Matrix.random(5, 37, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(37);
      cCSMatrix0.equals(matrix0, 0.5);
      // Undeclared exception!
      try { 
        cCSMatrix0.power((-2413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2413.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      cCSMatrix0.toCSV();
      denseMatrix0.removeFirstRow();
      cCSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(21, 21);
      Locale locale0 = Locale.PRC;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      cRSMatrix0.toMatrixMarket(numberFormat0);
      cRSMatrix0.equals((Object) null);
      String string0 = cRSMatrix0.toCSV();
      cRSMatrix0.mkString(string0, (String) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(16, (-1733.121201));
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = cCSMatrix0.toCSV((NumberFormat) decimalFormat0);
      CRSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = sparseMatrix0.multiplyByItsTranspose();
      matrix0.divide((-2348.41962));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2275);
      doubleArray0[2] = (double) (-2275);
      doubleArray0[3] = (double) (-2275);
      // Undeclared exception!
      try { 
        Matrix.constant((-2275), (-2275), (-2275.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.insert((Matrix) cCSMatrix0, 0, 0);
      cRSMatrix0.multiplyByItsTranspose();
      Matrix.zero(2147483645, 966);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn((-1610612735), vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 28;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.maxInRow(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      sparseMatrix0.swapColumns((-641), (-641));
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(15, 15, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(15);
      matrix0.setColumn(10, (double) 15);
      cCSMatrix0.equals(matrix0, 0.1);
      Integer integer0 = new Integer(15);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      sparseMatrix0.infinityNorm();
      Matrix matrix0 = sparseMatrix0.multiplyByItsTranspose();
      matrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(24);
      cCSMatrix0.manhattanNorm();
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(6);
      Matrix.zero(6, 6);
      // Undeclared exception!
      try { 
        matrix0.foldRow(6, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(4, 28);
      Matrix matrix0 = basic2DMatrix0.copyOfShape(4, 4);
      matrix0.subtract((double) 28);
      basic2DMatrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(28);
      cCSMatrix0.iterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      cCSMatrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformRow((-2067947215), vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2067947215' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CCSMatrix cCSMatrix0 = null;
      try {
        cCSMatrix0 = new CCSMatrix(Integer.MAX_VALUE, 701);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 21;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(21, 21);
      cRSMatrix0.toMatrixMarket();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      Integer integer0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(19, 19);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(19);
      cRSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.removeLastColumn();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(3754, 3754);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(28);
      cCSMatrix0.equals(matrix0, (double) 28);
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1161);
      cCSMatrix0.equals((Matrix) sparseMatrix0, 0.1);
      cCSMatrix0.getRow(1101588098);
      sparseMatrix0.rank();
      // Undeclared exception!
      cCSMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(21, 21);
      mockRandom0.ints((long) 21);
      basic2DMatrix0.equals((Object) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(15, 15);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(15, 15);
      sparseMatrix0.equals((Object) basic2DMatrix0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.insert((Matrix) cCSMatrix0, 17, 17);
      // Undeclared exception!
      try { 
        cRSMatrix0.ensureIndexesAreInBounds(17, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(28, 28, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(28);
      // Undeclared exception!
      cCSMatrix0.kroneckerProduct(matrix0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("    ");
      Locale locale0 = Locale.GERMAN;
      NumberFormat.getIntegerInstance(locale0);
      Vector vector0 = Vector.constant(1344, 772.3169646);
      // Undeclared exception!
      try { 
        sparseMatrix0.multiply(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 1344 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(4194, 4194);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.getRow(4194);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(21, 21, mockRandom0);
      matrix0.toRowVector();
      Matrix matrix1 = matrix0.copy();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(21);
      matrix0.equals((Object) basic2DMatrix0);
      matrix0.minInRow(2);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 2, 21, 2, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 2 rows and 10 cols at 2, 21 in a 21x21 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(21, 21, mockRandom0);
      mockRandom0.ints((long) 21);
      matrix0.copy();
      Matrix matrix1 = matrix0.add((double) 21);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix1.transform(matrixFunction0);
      matrix0.equals((Object) matrix1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(21, 24, 21);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cRSMatrix0, (-1851), 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1851x24
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldRows(vectorAccumulator0);
      sparseMatrix0.toSparseMatrix();
      sparseMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 19);
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0, 949, (-2714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 949x-2714
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(21);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 0.0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      cCSMatrix1.shuffle();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(37);
      // Undeclared exception!
      try { 
        cCSMatrix0.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2355);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cCSMatrix0.foldRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(287, 287);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.forEach(consumer0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(287, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 288
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1065);
      sparseMatrix0.equals((Object) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(37, 37, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(37);
      cCSMatrix0.removeLastRow();
      cCSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(3, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.transformColumn(17, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 19;
      CCSMatrix cCSMatrix0 = new CCSMatrix(19, 4);
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(4, Integer.MAX_VALUE, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.toDenseMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, 0.0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      cCSMatrix1.shuffle();
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      cRSMatrix0.non(advancedMatrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.toString();
      matrix0.transformColumn(9, vectorFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(9, 9);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) cCSMatrix0, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 9 rows and 9 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(13, 13, 13);
      cCSMatrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformRow(13, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SparseMatrix.fromCSV(", ");
      Matrix matrix0 = Matrix.fromCSV(", ");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow((-641), vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      Matrix matrix1 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      matrix1.norm();
      RowMajorSparseMatrix.block(matrix1, rowMajorSparseMatrix0, matrix1, columnMajorSparseMatrix0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      columnMajorSparseMatrix0.is(matrixPredicate0);
      matrix0.slice(0, 0, 0, 0);
      Matrix matrix2 = rowMajorSparseMatrix0.insert(matrix0, 0, 0);
      Matrix matrix3 = matrix2.multiply(matrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix3.updateRow(0, vectorFunction0);
      matrix1.hashCode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(1, 1, mockRandom0);
      mockRandom0.ints(397L);
      matrix0.copy();
      Object object0 = new Object();
      matrix0.add((double) 1);
      Double double0 = new Double((-1044.130472901));
      cCSMatrix0.equals((Object) double0);
      CCSMatrix.identity(634);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.getRow(10);
      cCSMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      sparseMatrix0.swapColumns((-641), (-641));
      // Undeclared exception!
      try { 
        sparseMatrix0.swapRows((-2702), Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2701
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.forEach(consumer0);
      sparseMatrix0.swapRows(942, 942);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(19);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      Matrix matrix0 = cRSMatrix0.copyOfShape(19, 19);
      cRSMatrix0.subtract(matrix0);
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(33, 33);
      Vector vector0 = cCSMatrix0.getRow(33);
      Matrix matrix0 = cCSMatrix0.insertRow(0, vector0);
      matrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        matrix0.euclideanNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(13, 13, 13);
      cCSMatrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.add(0.0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(13, 13);
      Vector vector0 = cCSMatrix1.getRow(13);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-1344), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..12
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(13, 13, 13);
      cCSMatrix0.manhattanNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Object object0 = new Object();
      Matrix matrix0 = cCSMatrix0.add(0.0);
      cCSMatrix0.equals(object0);
      cCSMatrix0.transformRow(10, vectorFunction0);
      matrix0.euclideanNorm();
      cCSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(17, 17);
      cCSMatrix0.getRow(17);
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insertRow(17, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 21;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(21, 21);
      cRSMatrix0.divide(21);
      cRSMatrix0.toColumnVector();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      Integer integer0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(15);
      cCSMatrix0.sum();
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      double double0 = 379.3806484588;
      sparseMatrix0.subtract(379.3806484588);
      int int0 = (-641);
      sparseMatrix0.swapColumns((-641), (-641));
      // Undeclared exception!
      try { 
        sparseMatrix0.removeRow((-641));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(19, 19);
      cRSMatrix0.toSparseMatrix();
      cRSMatrix0.columnMajorIterator();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      Matrix matrix1 = cCSMatrix0.blank();
      matrix1.swapColumns(17, 17);
      matrix0.infinityNorm();
      matrix0.max();
      // Undeclared exception!
      try { 
        matrix0.minInRow((-357));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -357
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 10;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 10);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceBottomRight(36, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [36..10][10..10].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.identity(6);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      SparseMatrix.identity(6);
      cRSMatrix0.rank();
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.power(6);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SparseMatrix.fromCSV(", ");
      CCSMatrix cCSMatrix0 = new CCSMatrix(1161, 37);
      Vector vector0 = cCSMatrix0.getRow(1161);
      Matrix matrix0 = cCSMatrix0.insertRow(37, vector0);
      matrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1161);
      Vector vector0 = cCSMatrix0.getRow(1161);
      // Undeclared exception!
      try { 
        sparseMatrix0.insertColumn(1161, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(19, 19, 19);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      Vector vector0 = cCSMatrix0.getRow(0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(0, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 19.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 5, 5);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Vector vector0 = cCSMatrix0.getRow((-1));
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn((-1), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0, 0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 12 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 1596);
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      int int0 = 32;
      // Undeclared exception!
      try { 
        cCSMatrix0.insert(matrix0, 0, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 0 rows and 32 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV(", ");
      sparseMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        sparseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 15;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(15, 15, mockRandom0);
      CCSMatrix.identity(15);
      SparseVector sparseVector0 = SparseVector.zero(4, 5);
      // Undeclared exception!
      try { 
        matrix0.insertRow(5, sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 4. Should be: 15.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(16, (-1733.121201));
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cRSMatrix0, 16, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 16 rows and 15 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(5, (-1733.121201));
      Locale locale0 = Locale.CANADA_FRENCH;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 1000);
      Vector vector0 = cCSMatrix0.toColumnVector();
      Matrix matrix0 = cRSMatrix0.insertColumn(5, vector0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateAt(5, 1000, matrixFunction0);
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.removeLastColumn();
      Matrix matrix1 = cCSMatrix0.multiplyByItsTranspose();
      int int0 = 1176;
      int int1 = 3081;
      cRSMatrix0.get(int0, int1);
      double double0 = (-1968.716660267);
      matrix1.setRow(int0, double0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("          ");
      sparseMatrix0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(16, (-1733.121201));
      Locale locale0 = Locale.KOREA;
      Matrix matrix0 = cCSMatrix0.rotate();
      Matrix matrix1 = cCSMatrix0.insert(matrix0, 16, 16);
      cCSMatrix0.equals(matrix1, (double) 16);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("0");
      sparseMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.random(3, 17, mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.equals(matrix0, 5.369987854728473E-17);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 1291;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1291, 1291);
      // Undeclared exception!
      basic2DMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0, 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cCSMatrix0.multiplyByItsTranspose();
      int int1 = 4452;
      CCSMatrix cCSMatrix1 = new CCSMatrix(4452, 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) cRSMatrix1, 4452, 0, 0, 4452);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4452, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 32;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(32, 32);
      Matrix matrix0 = basic2DMatrix0.rotate();
      // Undeclared exception!
      matrix0.multiplyByItsTranspose();
  }
}
