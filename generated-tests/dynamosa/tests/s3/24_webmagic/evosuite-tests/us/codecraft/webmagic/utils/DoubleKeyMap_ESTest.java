/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:17:13 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>(class0);
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put(integer0, (Integer) null, hashMap0);
      HashMap<Integer, String> hashMap1 = doubleKeyMap0.remove(integer0, (Integer) null);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = new Integer((-1646));
      doubleKeyMap0.put((Object) null, "%twI4 i2", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.remove((Object) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<Integer, String>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<Integer, String>>>();
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>(hashMap0);
      Integer integer0 = new Integer(1);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      doubleKeyMap0.put(integer0, integer0, hashMap1);
      HashMap<Integer, String> hashMap2 = doubleKeyMap0.put(integer0, integer0, hashMap1);
      assertTrue(hashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Integer>>> hashMap0 = new HashMap<Integer, Map<HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Integer>>(hashMap0, class0);
      Integer integer0 = new Integer(0);
      HashMap<HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Integer>> hashMap1 = new HashMap<HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Integer>>();
      hashMap0.put(integer0, hashMap1);
      Map<HashMap<Integer, Map<Integer, Integer>>, Map<Integer, Integer>> map0 = doubleKeyMap0.get(integer0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Map<Integer, Integer>, Map<String, Object>>> hashMap0 = new HashMap<String, Map<Map<Integer, Integer>, Map<String, Object>>>();
      DoubleKeyMap<String, Map<Integer, Integer>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, Integer>, Map<String, Object>>(hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put("", (Map<Integer, Integer>) hashMap1, (Map<String, Object>) null);
      Map<Map<Integer, Integer>, Map<String, Object>> map0 = doubleKeyMap0.get("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>(class0);
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap0 = doubleKeyMap0.remove(integer0, (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = doubleKeyMap1.remove((Integer) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Integer>>((Map<Object, Map<String, HashMap<Object, Integer>>>) null, class0);
      Object object0 = new Object();
      HashMap<Object, Integer> hashMap0 = doubleKeyMap0.remove(object0, "6!j2*]4zTTdG");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Map<String, Integer> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0, class0);
      Object object0 = new Object();
      Map<Integer, Integer> map1 = doubleKeyMap1.remove(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Integer>>((Map<Object, Map<String, HashMap<Object, Integer>>>) null, class0);
      Object object0 = new Object();
      DoubleKeyMap<Map<Integer, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Object, Object>(class0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object object1 = doubleKeyMap1.put((Map<Integer, Integer>) hashMap0, (Object) doubleKeyMap0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.put(object0, (Object) hashMap0, "%twI4 i2");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>(1942);
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
      String string0 = doubleKeyMap1.get((Object) "<sKD)rGIn_", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
      Integer integer0 = doubleKeyMap0.get((Object) null, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.get(object0, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>(class0);
      HashMap<Object, Map<Map<Integer, Object>, Integer>> hashMap0 = new HashMap<Object, Map<Map<Integer, Object>, Integer>>();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Map<Integer, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, Object>, Integer>(hashMap0, class1);
      Map<Map<Integer, Object>, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<String, Map<String, String>>> hashMap0 = new HashMap<Object, Map<String, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<String, String>>(hashMap0, class0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) null, "~'t~", (Map<String, String>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<Integer, String>>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, (Integer) null, (HashMap<Integer, String>) null);
      HashMap<Integer, String> hashMap0 = doubleKeyMap0.remove(integer0, integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Object object0 = new Object();
      doubleKeyMap0.put((Object) "%twI4 i2", object0, "");
      doubleKeyMap0.get((Object) "%twI4 i2", (Object) "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }
}
