/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 20:40:48 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.classfile.Visitor;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[6] = (byte)113;
      byteArray0[2] = (byte)113;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("GDsvreN#!7#Uhj[)=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[)=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("4zpR'tj}F[mw9/F");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "4zpR'tj}F[mw9/F";
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-2528));
      byteSequence0.mark((-4152));
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = "|qQX!^amt[g!Zm)";
      try { 
        Utility.typeOfSignature("|qQX!^amt[g!Zm)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |qQX!^amt[g!Zm)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G2F#I]Ao");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G2F#I]Ao");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string0);
      
      String string1 = Utility.replace("y", "monitorexit", "{}");
      assertEquals("y", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uxa3+!D");
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byte byte0 = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-23);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("uxa3+!D", stringArray0);
      String string0 = "x?^bC|$8Z";
      Utility.methodTypeToSignature("x?^bC|$8Z", stringArray0);
      Utility.methodSignatureArgumentTypes("()Lx?^bC|$8Z;", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("5.iPz;7>)^N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5.iPz;7>)^N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      Utility.getSignature("Warning: Padding byte != 0 in ");
      Object object1 = new Object();
      Utility.searchOpcode("LWarning:;");
      Utility.accessToString((-1012));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("aload_0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)102;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString((-1083));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-112);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)121, 411);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("y$90$A$A$A$A$A", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), (int) (byte)121);
      assertEquals("0:    lshl\n1:    d2f\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string1);
      
      String string2 = Utility.getSignature("\"PVRdv=Qr");
      assertEquals("L\"PVRdv=Qr;", string2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.getSignature("fdiv");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.replace("/b*a#}", "/b*a#}", "/b*a#}");
      assertEquals("/b*a#}", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "/b*a#}";
      objectArray0[1] = (Object) "/b*a#}";
      Utility.printArray(objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[2] = (byte)66;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)3;
      byteArray0[2] = (byte) (-50);
      byteArray0[5] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{/b*a#}, /b*a#}}", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      assertTrue(boolean0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"/b*a#}\", \"/b*a#}\"}", string2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.replace("A", "A", "A");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "Dont call getValueDouble() on a non DOUBLE ElementValue", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("dreturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.convertString("jM|{?.&4KEyd5}");
      assertEquals("jM|{?.&4KEyd5}", string0);
      
      byte[] byteArray1 = Utility.decode("dup2_x2", false);
      assertArrayEquals(new byte[] {(byte)100, (byte)117, (byte)112, (byte)50, (byte)95, (byte)120, (byte)50}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = Utility.compactClassName("/$7{", "", true);
      assertEquals(".$7{", string0);
      
      Utility.decode("dload_3", false);
      Utility.convertString("");
      byte[] byteArray0 = Utility.decode("Y>]t 6e;", false);
      assertArrayEquals(new byte[] {(byte)89, (byte)62, (byte)93, (byte)116, (byte)32, (byte)54, (byte)101, (byte)59}, byteArray0);
      
      int int0 = Utility.setBit(125, (-2556));
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("4zpR'tj}F[mw9/F");
      assertEquals("4zpR\\'tj}F[mw9/F", string0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "4zpR'tj}F[mw9/F";
      objectArray0[2] = (Object) "4zpR'tj}F[mw9/F";
      objectArray0[3] = (Object) "4zpR'tj}F[mw9/F";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-113);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$89$e19$c4$8f", string1);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte) (-113);
      Utility.codeToString(byteArray1, (ConstantPool) null, (-2045), (int) (byte) (-60));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-60);
      byteArray2[1] = (byte) (-88);
      byteArray2[2] = (byte) (-113);
      byteArray2[3] = (byte) (-119);
      byteArray2[4] = (byte)57;
      byteArray2[5] = (byte) (-60);
      byteArray2[6] = (byte)102;
      byteArray2[7] = (byte)57;
      byteArray2[8] = (byte) (-119);
      String string2 = Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte) (-113), (-3389), true);
      assertEquals("0:    wide\t(wide)\n1:    jsr\t\t#-28790\n4:    dstore\t\t%50278\n7:    dstore\t\t%137\n", string2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = true;
      String string0 = "/$7{";
      Utility.compactClassName("", "/$7{", false);
      // Undeclared exception!
      try { 
        Utility.decode("/$7{", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d2f");
      Utility.getSignature("H,&Q!JR00UF");
      try { 
        Utility.typeOfMethodSignature("d2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.getSignature("L==b1Z/*)!/|;V8n0EX.Wa&@a?,lzU2");
      Object object0 = new Object();
      Utility.compactClassName("L==b1Z/*)!/|;V8n0EX.Wa&@a?,lzU2");
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte) (-46);
      byteArray1[3] = (byte) (-32);
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte)83;
      byteArray1[7] = (byte)101;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-32), 101);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string0 = Utility.convertString("dcmpl");
      assertEquals("dcmpl", string0);
      
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.convertString("Z4R");
      assertEquals("Z4R", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('g');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(10, (-1403));
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-84), (-5066));
      constantArray0[0] = (Constant) constantNameAndType0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lc@p#MH?](cx9E\"");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.getSignature("Ljava/lang/<illegal;V");
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.convertString("Ljava/lang/<illegal;V");
      Utility.convertString("Ljava/lang/<illegal;V");
      Utility.getSignature("Ljava/lang/<illegal;V");
      try { 
        Utility.typeOfMethodSignature("Ljava/lang/<illegal;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ljava/lang/<illegal;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "putfield";
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G2F#I]Ao");
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte)85;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.getSignature("5D=ZHX>a&ixp'");
      assertEquals("L5D=ZHX>a&ixp';", string0);
      
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      String string1 = Utility.convertString("I");
      assertEquals("I", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Integer integer0 = new Integer(2357);
      Utility.decode("D/F`44G;c\"!", false);
      byteSequence1.close();
      Utility.compactClassName(">", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifnull\t\t#0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnull\t\t#0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      Utility.convertString("Illegally");
      Utility.replace("2P)lFJuDs", "RM*umOmj;!4(VZof+u", "L{};V");
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G2F#I]Ao");
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(929);
      try { 
        Utility.decode("$f3$8b$vd$A$bfB$_$L", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.getSignature("H$");
      Object object0 = new Object();
      String string1 = Utility.classOrInterface(145);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      String string2 = Utility.replace("class", "class", "LH$;");
      assertTrue(string2.equals((Object)string0));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload\t\t%25", string3);
      
      String string4 = Utility.accessToString(1025);
      assertEquals("public abstract", string4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.getSignature("t");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-106);
      byte byte0 = (byte) (-124);
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Constant");
      try { 
        Utility.methodSignatureArgumentTypes("arraylength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.replace("invokeinterface", "int", (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-66);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)5, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.getSignature("H$");
      assertEquals("LH$;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantClass constantClass0 = new ConstantClass((byte) (-80));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("goto_w\t\t#-1331713104", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = Utility.replace("Xf,&<0Jw|PeWA)", "Xf,&<0Jw|PeWA)", "Xf,&<0Jw|PeWA)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.compactClassName("Xf,&<0Jw|PeWA)");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.classOrInterface((-1062));
      assertEquals("interface", string2);
      
      String string3 = Utility.accessToString((int) (byte)81, true);
      assertEquals("public final volatile", string3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("D+2zK/{#(~vD+2zK.{#(~v", "D+2zK/{#(~vD+2zK.{#(~v", "D+2zK/{#(~vD+2zK.{#(~v");
      assertEquals("D+2zK/{#(~vD+2zK.{#(~v", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      String string1 = Utility.format((byte)0, (byte)0, false, '3');
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Method method0 = new Method(byteSequence0, (ConstantPool) null);
      method0.getLocalVariableTable();
      try { 
        Utility.methodSignatureToString("", "", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-72);
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.getSignature("Warning: Padding byte != 0 in ");
      assertEquals("LWarning:;", string0);
      
      Object object1 = new Object();
      short short0 = Utility.searchOpcode("LWarning:;");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.accessToString((-1012));
      assertEquals("protected static abstract strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)107;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, 1, (int) (byte)107);
      assertEquals("1:    i2d\n2:    <illegal opcode>\n3:    dload_0\n4:    iload\t\t%148\n6:    lload\t\t%107\n", string2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readLong();
      Object object0 = new Object();
      int int0 = (-710);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      int int1 = 92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 92, 67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-120);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[4];
      byteSequence0.markSupported();
      objectArray0[0] = (Object) byteSequence0;
      // Undeclared exception!
      try { 
        Utility.signatureToString(".class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.read();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.classOrInterface((byte)99);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.convertString("char");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence1.readUnsignedByte();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((byte) (-108), (byte)118, byteSequence1, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      String string0 = "Ezq\"I9})oraNj3hA;0G";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ezq\"I9})oraNj3hA;0G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ezq\"I9})oraNj3hA;0G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      Utility.replace("M&g=`{:2n26eg4mn|[", "M&g=`{:2n26eg4mn|[", "Illegally nested brackets:");
      Utility.signatureToString("Illegally nested brackets:");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)116;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 57, true);
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.ParameterAnnotations", true);
      assertEquals("org.apache.bcel.classfile.ParameterAnnotations", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte)25;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("UsI'}H", "(start_pc = ", "UsI'}H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UsI'}H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.compactClassName("fload_3", "fload_3", true);
      assertEquals("", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$ro", string1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      Utility.replace("M&g=`{:2n26eg4mn|[", "M&g=`{:2n26eg4mn|[", "Illegally nested brackets:");
      Utility.signatureToString("Illegally nested brackets:");
      Utility.setBit(0, 17);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LWC9rf<C&;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LWC9rf<C&;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-119);
      byteArray0[1] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f2d", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.convertString("3@bw;yaDRM rDj2:9");
      Utility.replace("2P)lFJuDs", "Y>A", "Y>A");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y>A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y>A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.classOrInterface(110);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.skip(1L);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, (int) (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)95;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$JZ$v$d9_$sj_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$JZ$v$d9_$sj_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("`L{");
      assertEquals("`L{", string0);
      
      String string1 = Utility.getSignature("ljgzA#");
      assertEquals("LljgzA#;", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)29;
      byteArray0[8] = (byte) (-53);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)29);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)73;
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)28;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)0;
      byteArray1[7] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2928, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.replace("A", "A", "A");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.compactClassName("A");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2902, 186, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      String string0 = "java.lang.nop";
      byte[] byteArray1 = Utility.decode("java.lang.nop", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Locale.getISOLanguages();
      Utility.getSignature("Rv,iK&*");
      Utility.compactClassName("ubQ");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2277, 165, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.replace("areturn", "WVefa]E", "WVefa]E");
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte)87;
      byteArray1[3] = (byte)124;
      byteArray1[4] = (byte) (-25);
      byteArray1[5] = (byte) (-43);
      byteArray1[6] = (byte)76;
      byteArray1[7] = (byte)85;
      byteArray1[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2442, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, 1018);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      Object object0 = new Object();
      String[] stringArray0 = Constants.TYPE_NAMES;
      String string0 = " gZ)dV^OpAL\\R_F^h";
      try { 
        Utility.methodTypeToSignature(" gZ)dV^OpALR_F^h", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byte byte0 = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byte byte1 = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-60);
      byte byte2 = (byte)17;
      byteArray0[4] = (byte)17;
      byte byte3 = (byte)14;
      byteArray0[5] = (byte)14;
      byte byte4 = (byte)20;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte)20;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<G,");
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('9');
      try { 
        Utility.methodSignatureReturnType("<G,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<G,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.replace("A", "A", "A");
      byte[] byteArray0 = new byte[0];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte) (-6);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 14, 1948);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      Utility.signatureToString("Z@5i;o&c0)D:f!}xc", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("byte");
      assertEquals("byte", string0);
      
      String string1 = Utility.getSignature("imul");
      assertEquals("Limul;", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Utility.printArray(objectArray0);
      Utility.fillup("{java.lang.Object@6a69346f, java.lang.Object@6a69346f}", (-1715), false, '=');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, (int) (byte) (-96));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (-159));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[2] = object1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byte byte0 = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "vCm(&5yZpVF\\[";
      Utility.compactClassName("vCm(&5yZpVF[");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), 33, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    wide\t(wide)
         // 1:    fconst_1
         // 2:    ifeq\t\t#-9289
         // 5:    dload_1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F-l4\"`IS)}(i%`7\u0006 ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString((int) (byte)36);
      try { 
        Utility.methodSignatureArgumentTypes("i2d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-69), (byte)0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("/)[Zkq{0");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)0, 5);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23296. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Utility.compactClassName("5*g~;}>4&PUO~", "5*g~;}>4&PUO~", true);
      assertEquals("", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("\"0A<Fo*{2&k;rne");
      assertEquals("\"0A<Fo*{2&k;rne", string1);
      
      String string2 = Utility.classOrInterface(8);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.typeOfSignature("S");
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte) (-95), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    l2i
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)52;
      byteArray0[3] = (byte) (-113);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-96);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.accessToString((int) (byte) (-96));
      assertEquals("synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
      
      short short0 = Utility.searchOpcode("synchronized transient native interface abstract strictfp synthetic annotation enum");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("a0 34 00 8f 00", string1);
      
      String string2 = Utility.compactClassName("5:(xy*6Fx*KM");
      assertEquals("5:(xy*6Fx*KM", string2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.available();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.format((short)0, (byte)17, true, 'g');
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool0, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("nop", "java.lang.Boolean", "nop", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&Fj?8=p^mm`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Fj?8=p^mm`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-18);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)121, 411);
      byteSequence0.readUnsignedShort();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte) (-28);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      String[] stringArray0 = Constants.ACCESS_NAMES;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[4] = (byte)8;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)76;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.classOrInterface((byte)0);
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("Z-.`O");
      Utility.searchOpcode("72-]ei6,y7qT(J|ksp-");
      Utility.methodTypeToSignature("class", stringArray0);
      Utility.toHexString(byteArray1);
      try { 
        Utility.typeOfSignature("4c 08 23 4c 08 08");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4c 08 23 4c 08 08
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.getSignature("int");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 71;
      Utility.classOrInterface(71);
      try { 
        Utility.typeOfSignature("HUZUw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HUZUw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "RC[.2/1]6Y9**u*,3(";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "Illegal type: ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(142);
      try { 
        Utility.typeOfSignature("RC[.2/1]6Y9**u*,3(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RC[.2/1]6Y9**u*,3(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readBoolean();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Object object0 = new Object();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("a9 00 00 00", string0);
      
      String string1 = Utility.compactClassName("lstore_3");
      assertEquals("lstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-395), (byte)41);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.replace("`", "o", "double");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      constantMethodref0.setNameAndTypeIndex(189);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, 76, 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.getSignature("int");
      assertEquals("I", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("J>i*uTkF+WNX", "ifge", false);
      assertEquals("J>i*uTkF+WNX", string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 4);
      assertEquals("0:    laload\n1:    nop\n2:    nop\n", string2);
      
      String string3 = Utility.accessToString((-2760));
      assertEquals("static final synchronized native abstract synthetic annotation enum", string3);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "J>i*uTkF+WNX";
      String string4 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"J>i*uTkF+WNX\"", string4);
      
      String string5 = Utility.replace("putfield", "]43f,_9pC", "5U+u(KrJdT\"$l");
      assertEquals("putfield", string5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface((byte)60);
      assertEquals("class", string0);
      
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("Illegal type: ", stringArray0);
      assertEquals("()LIllegal;", string1);
      
      String string2 = Utility.methodSignatureToString("()LIllegal;", "class", "Bl?Pks',", false);
      assertEquals("Bl?Pks', Illegal class()", string2);
      
      String string3 = Utility.signatureToString("Illegal type: ");
      assertEquals("int", string3);
      
      String string4 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{}", string4);
      
      String string5 = Utility.methodTypeToSignature("Lnative;V", stringArray0);
      assertEquals("()LLnative;V;", string5);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-90);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((int) (byte)84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip((byte) (-90));
      byteSequence1.readDouble();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.accessToString((int) (byte) (-106));
      Utility.codeToString(byteSequence2, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 440, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      Utility.compactClassName("L~-_K4wY_b&", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-119);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), (int) (byte) (-119), false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 142, (int) (byte) (-77));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.accessToString((int) (byte)0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".%`O", (String) null, "_-6V|2Q", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .%`O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)93;
      Constant[] constantArray0 = new Constant[9];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, (byte)0);
      constantMethodref0.toString();
      constantMethodref0.clone();
      constantArray0[1] = (Constant) constantMethodref0;
      Utility.compactClassName("F", true);
      Utility.isSet((byte)45, (byte)85);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.signatureToString("F", false);
      Utility.classOrInterface((-3053));
      Utility.equals(byteArray1, byteArray0);
      byteSequence0.markSupported();
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.searchOpcode("monitorexit");
      byteSequence0.available();
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      Utility.isSet(77, 63);
      byteSequence1.readShort();
      byteSequence2.markSupported();
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte) (-61);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-65), (byte) (-65));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.replace("{java.lang.Object@47d571e, null, java.lang.Object@e4e5499, java.lang.Object@5d866be6, java.lang.Object@6831c41d, java.lang.Object@61aaba2, null, java.lang.Object@7a0ccd64, null, null, null, null}", "{java.lang.Object@47d571e, null, java.lang.Object@e4e5499, java.lang.Object@5d866be6, java.lang.Object@6831c41d, java.lang.Object@61aaba2, null, java.lang.Object@7a0ccd64, null, null, null, null}", "{java.lang.Object@47d571e, null, java.lang.Object@e4e5499, java.lang.Object@5d866be6, java.lang.Object@6831c41d, java.lang.Object@61aaba2, null, java.lang.Object@7a0ccd64, null, null, null, null}");
      ConstantPool constantPool1 = constantPool0.copy();
      constantMethodref0.setNameAndTypeIndex((byte) (-65));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 36, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.searchOpcode("monitorexit");
      byteSequence3.available();
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.markSupported();
      Utility.isSet(9, (short)195);
      byteSequence1.readShort();
      byteSequence4.markSupported();
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.accessToString((int) (short)195);
      try { 
        Utility.methodSignatureArgumentTypes("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "):\n";
      Utility.methodTypeToSignature("):\n", stringArray0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-76);
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, (int) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)12;
      String string0 = Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      Utility.compactClassName(";CM", false);
      Utility.isSet((byte)61, 682);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte) (-61);
      byteArray0[6] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-65), (byte) (-65));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.replace("{java.lang.Object@1c89d759, null, java.lang.Object@36654aee, java.lang.Object@50e4b37f, java.lang.Object@5bca2fb4, java.lang.Object@92b188b, null, java.lang.Object@1585117a, null, null, null, null}", "{java.lang.Object@1c89d759, null, java.lang.Object@36654aee, java.lang.Object@50e4b37f, java.lang.Object@5bca2fb4, java.lang.Object@92b188b, null, java.lang.Object@1585117a, null, null, null, null}", "{java.lang.Object@1c89d759, null, java.lang.Object@36654aee, java.lang.Object@50e4b37f, java.lang.Object@5bca2fb4, java.lang.Object@92b188b, null, java.lang.Object@1585117a, null, null, null, null}");
      ConstantPool constantPool1 = constantPool0.copy();
      constantMethodref0.setNameAndTypeIndex((byte) (-65));
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), 471);
      assertEquals("0:    lstore\t\t%191\n2:    fstore_1\n3:    nop\n4:    monitorexit\n5:    nop\n6:    athrow\n", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "/", "idiv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-78);
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      String[] stringArray0 = Constants.ACCESS_NAMES;
      Utility.getSignature("s:");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)35);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)101;
      byteArray1[4] = (byte)35;
      byteArray1[5] = (byte)35;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 200, (-1019));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.compactClassName("\t\t");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)33;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-57), (byte)62);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-57));
      Utility.searchOpcode("\t\t");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte) (-57);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t\t";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[1] = "\t\t";
      Utility.methodTypeToSignature("$c7$n$A", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t", "\t\t", "\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 157;
      Utility.fillup("6fq;E&D>]kuF*BfkqP", 157, false, 'V');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV6fq;E&D>]kuF*BfkqP";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[1] = "U`d6eS7zaNJy";
      Utility.methodTypeToSignature("boolean", stringArray0);
      Utility.methodTypeToSignature("x?^bC|$8Z", stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fer^#UWyh;");
      try { 
        Utility.methodSignatureArgumentTypes("(LVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV6fq;E&D>]kuF*BfkqP;LU`d6eS7zaNJy;)Lx?^bC|$8Z;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E&D>]kuF*BfkqP;LU`d6eS7zaNJy;)Lx?^bC|$8Z;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "DQA0";
      boolean boolean0 = true;
      Utility.signatureToString("DQA0", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)95, (byte) (-31));
      constantFieldref0.toString();
      constantFieldref0.setClassIndex(62);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = null;
      byteSequence0.readShort();
      JavaClass.getComparator();
      Utility.printArray((Object[]) constantArray0, true, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)115;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65536, (int) (byte) (-89), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.typeOfSignature("S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      String[] stringArray0 = Constants.ACCESS_NAMES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = Constants.ACCESS_NAMES;
      byte byte0 = (byte)119;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-50), 62);
      ConstantInteger constantInteger0 = new ConstantInteger(177);
      Utility.searchOpcode("org.apache.bcel.classfile.ConstantLong");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool0, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      try { 
        classPath0.getInputStream((String) null, "dneg");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: nulldneg
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G2F#I]Ao");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      Utility.isJavaIdentifierPart('|');
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("G2F#I]Ao", "G2F#I]Ao", "G2F#I]Ao");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G2F#I]Ao
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readBoolean();
      byteSequence2.read();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte)41;
      byteArray1[5] = (byte) (-15);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)100;
      Object object0 = new Object();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -83
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.replace("/b*a#}", "/b*a#}", "/b*a#}");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)3;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/b*a#}";
      stringArray0[1] = "\t";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureToString("", "'$2V7],M+@Fn|,>[|z", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte) (-113);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 73, (int) (byte) (-59), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VW(xo\"2x[xjV");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readShort();
      byteSequence0.readUnsignedShort();
      byteSequence0.skip((byte) (-107));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VW(xo\"2x[xjV");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s]ly5_SNbn%7");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cOiS*@CBhl");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), (int) (byte) (-107));
      assertEquals("0:    monitorexit\n1:    fconst_1\n2:    i2s\n3:    fmul\n4:    i2s\n5:    <illegal opcode>\n6:    fcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)99;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.accessToString((int) (byte)93);
      assertEquals("public protected static final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VW(xo\"2x[xjV");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-109);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString((int) (byte)0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("iastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iastore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 1544;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1544, 1544);
      Utility.compactClassName("F", true);
      Utility.isSet((byte)8, 181);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)8;
      byteArray0[1] = (byte) (-102);
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readShort();
      Utility.format((byte) (-102), (byte)8, true, 's');
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1196, 5079);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VW(xo\"2x[xjV");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("DQA0", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-31);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((int) (byte) (-31));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1334L));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.markSupported();
      Utility.codeToString(byteSequence3, constantPool0, true);
      Utility.printArray((Object[]) null, false, false);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 185, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)77;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("MWM", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      short short0 = Utility.searchOpcode("MWM");
      assertEquals((short) (-1), short0);
      
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      byteSequence1.readUnsignedByte();
      String string1 = Utility.compactClassName("astore_2");
      assertEquals("astore_2", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String[] stringArray0 = Constants.ACCESS_NAMES;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (-2155), true);
      assertEquals("0:    fload_1\n1:    iconst_5\n2:    lxor\n3:    lxor\n4:    astore_1\n", string0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.accessToString(3);
      assertEquals("public private", string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.accessToString(512, true);
      Utility.accessToString((-470));
      Utility.isJavaIdentifierPart('x');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "private static synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "private static synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) "private static synchronized interface abstract strictfp synthetic annotation enum";
      objectArray0[4] = (Object) "";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "private static synchronized interface abstract strictfp synthetic annotation enum";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)65;
      byte byte0 = (byte)4;
      byteArray0[4] = (byte)4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)77;
      byte byte1 = (byte) (-107);
      ConstantPool constantPool0 = null;
      int int0 = 1;
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte) (-55), false);
      try { 
        Utility.methodSignatureArgumentTypes("1:    istore_1\n2:    jsr_w\t\t#1090791759\n7:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1:    istore_1
         // 2:    jsr_w\t\t#1090791759
         // 7:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)119;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("a9 89 b8 44 77");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 258, (int) (byte)119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-18);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)121, 411);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-18);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-59);
      byteArray2[1] = (byte) (-18);
      byteArray2[2] = (byte) (-18);
      byteArray2[3] = (byte)121;
      byteArray2[4] = (byte) (-18);
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      ConstantPool constantPool1 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 61166. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)94;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte)43;
      byteArray1[4] = (byte)47;
      byteArray1[5] = (byte)35;
      byteArray1[6] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 4836, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String[] stringArray0 = Constants.ACCESS_NAMES;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)50;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$I$pB$8322$I22", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.accessToString((-1507));
      assertEquals("public protected static final interface strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.getSignature("m*");
      Utility.format(32, 32, false, '');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.markSupported();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)100, 29);
      ConstantInteger constantInteger0 = new ConstantInteger(86);
      Utility.searchOpcode("32");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ClassPath classPath0 = new ClassPath((ClassPath) null, "h&P 'oO$");
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      syntheticRepository0.findClass("Lm*;");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1304, (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 6912. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VW(xo\"2x[xjV");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$93j$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$93j$A$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)106, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray1.length);
      
      String string1 = Utility.fillup("", (byte)62, true, '\\');
      assertEquals("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)90;
      byteArray0[3] = (byte)39;
      byteArray0[6] = (byte)39;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Z$R$t$tZ$A$t", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)90, (byte)0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence2, constantPool0, false);
      String string1 = Utility.accessToString((-70));
      assertEquals("private static final synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
      
      Utility.codeToString(byteSequence2, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-3925));
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-3925), (int) (byte)17, false);
      assertEquals("0:    dup_x1\n1:    sipush\t\t10023\n4:    dup_x1\n5:    nop\n6:    dload_1\n", string2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byte[] byteArray1 = new byte[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray1, false);
      Utility.decode("$Q$t$a0$c2$A$A$A$A$A", false);
      Utility.fillup("", (byte) (-83), false, '5');
      try { 
        Utility.methodSignatureReturnType("if_acmpne", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_acmpne'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)121;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)121, 411);
      boolean boolean0 = true;
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.readShort();
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref((byte) (-18), (byte) (-18));
      Utility.searchOpcode("nop");
      ConstantPool constantPool1 = null;
      ByteSequence byteSequence5 = null;
      try {
        byteSequence5 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)52;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.clearBit(282, (-3329));
      Utility.signatureToString("Code", false);
      try { 
        Utility.typeOfSignature("$p#~p>MQfic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $p#~p>MQfic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2389), (-2874));
      ConstantInteger constantInteger0 = new ConstantInteger((-1442));
      Utility.searchOpcode("I<4(dy|s;0Z\">m8S8Rw");
      String string0 = Utility.accessToString(76, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte)17;
      byteArray1[7] = (byte)17;
      byteArray1[8] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.readBoolean();
      byteSequence0.markSupported();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(183, 700);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)39);
      Utility.searchOpcode("<BVkE?~[wR&i:P");
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte)17;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)90;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)90, (byte)39);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence2, constantPool0, false);
      Utility.accessToString((-70));
      Utility.codeToString(byteSequence2, constantPool0, false);
      int int0 = (-3925);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, (-3925));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.replace("/b*a#}", "/b*a#}", "/b*a#}");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "/b*a#}";
      objectArray0[1] = (Object) "/b*a#}";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)48, (short)12350);
      Utility.searchOpcode("{/b*a#}, /b*a#}}");
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.getSignature("RC[.2/1]6Y9**u*,3(");
      Utility.searchOpcode("[LRC;");
      Utility.getSignature("RC[.2/1]6Y9**u*,3(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 45, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.getSignature("RC[.2/1]6Y9**u*,3(");
      Utility.searchOpcode("[LRC;");
      Utility.getSignature("RC[.2/1]6Y9**u*,3(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-94);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)58;
      Utility.typeOfSignature("[LRC;");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RC[.2/1]6Y9**u*,3(";
      stringArray0[1] = "[LRC;";
      stringArray0[2] = "\\";
      stringArray0[3] = "RC[.2/1]6Y9**u*,3(";
      stringArray0[4] = "[LRC;";
      stringArray0[5] = "RC[.2/1]6Y9**u*,3(";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\\", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [LRC;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-127);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65536, 47, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.replace("RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(");
      assertEquals("RC[.2/1]6Y9**u*,3(", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("bastore");
      assertEquals("bastore", string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3667), 53);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.searchOpcode("aastore");
      Utility.compactClassName("lneg");
      try { 
        Utility.methodSignatureReturnType(",o:^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,o:^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)73;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)4;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString((int) (byte)0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("nop", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-128);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2207, 192);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-101));
      String string0 = "dstore_1";
      Utility.searchOpcode("dstore_1");
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), 4);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodTypeToSignature("):\n", stringArray0);
      assertEquals("(LBogus;LInteger;LFloat;LDouble;LLong;LNull;LInitObject;LObject;LNewObject;)L):;", string0);
      
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(163, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1513, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VW(xo\"2x[xjV");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1094, 47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-128);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2207, 192);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-101));
      short short0 = Utility.searchOpcode("dstore_1");
      assertEquals((short)72, short0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), 28);
      assertEquals("0:    lor\n1:    iflt\t\t#-32424\n4:    ior\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((int) (byte)10);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.skip((byte)93);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.codeToString(byteArray0, constantPool0, (-2358), (int) (byte) (-39));
      String string1 = Utility.accessToString(3305);
      assertEquals("public static synchronized volatile transient abstract strictfp", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)63;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lstore_0";
      stringArray0[1] = "BpTla;fKP<9]s H%";
      stringArray0[2] = "CONSTANT_InterfaceMethodref";
      stringArray0[3] = "BpTla;fKP<9]s H%";
      stringArray0[4] = "lstore_0";
      stringArray0[5] = "lstore_0";
      stringArray0[6] = "lstore_0";
      stringArray0[7] = "lstore_0";
      stringArray0[8] = "BpTla;fKP<9]s H%";
      String string0 = Utility.methodTypeToSignature("BpTla;fKP<9]s H%", stringArray0);
      assertEquals("(Llstore_0;LBpTla;fKP<9]s;LCONSTANT_InterfaceMethodref;LBpTla;fKP<9]s;Llstore_0;Llstore_0;Llstore_0;Llstore_0;LBpTla;fKP<9]s;)LBpTla;fKP<9]s;", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.getSignature("m*");
      Utility.format(32, 32, false, 'z');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-5);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString(187);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-13);
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readBoolean();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte) (-15);
      byteArray1[5] = (byte) (-15);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)100;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-13);
      objectArray0[3] = (Object) (byte)41;
      objectArray0[4] = (Object) (byte) (-15);
      objectArray0[5] = (Object) (byte)100;
      objectArray0[6] = (Object) byteSequence0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) (byte) (-15);
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.compactClassName("\t\t");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)48;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-57), (byte)62);
      try { 
        Utility.decode("$c70$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)4;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-796), (int) (byte)40, true);
      assertEquals("0:    impdep2\n1:    wide\t(wide)\n2:    areturn\n3:    dload_2\n4:    iconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.signatureToString("DQA0", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)95, (byte) (-31));
      constantArray0[0] = (Constant) constantFieldref0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-101);
      Utility.encode(byteArray0, false);
      Utility.methodTypeToSignature("double", (String[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 3305);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)85;
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("castore", string1);
      
      String string2 = Utility.compactClassName("Illegal type: ");
      assertEquals("Illegal type: ", string2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)125;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2207, 176);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-101));
      short short0 = Utility.searchOpcode("dstore_1");
      assertEquals((short)72, short0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), 28);
      assertEquals("0:    lor\n1:    iflt\t\t#-32424\n4:    lushr\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-124);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[3] = (byte) (-13);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)11;
      Utility.encode(byteArray0, false);
      Utility.methodTypeToSignature("$f3$84$A$f3$A$A$o$_$L", (String[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("Illegal type: ");
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.accessToString((int) (byte)10);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)10;
      byteArray1[6] = (byte)93;
      byteArray1[7] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.compactClassName("\t\t");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)81;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c7Q$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-57), (byte)62);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-57));
      short short0 = Utility.searchOpcode("\t\t");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte) (-57);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fastore", string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte) (-15);
      byteArray1[5] = (byte) (-15);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)41, (int) (byte) (-13));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      String string0 = Utility.encode(byteArray0, false);
      Utility.isSet((byte)43, 4062);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.compactClassName("\t\t");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)48;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-57), (byte)62);
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-57));
      Utility.searchOpcode("\t\t");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte) (-57);
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.setBit(78, 78);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("{s'h", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$x$5e$5e", string0);
      
      boolean boolean1 = Utility.isSet((byte)43, 4062);
      assertFalse(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-353), 5);
      assertEquals("0:    aload_1\n1:    dup2_x2\n2:    dup2_x2\n", string1);
      
      String string2 = Utility.accessToString(57);
      assertEquals("public static final synchronized", string2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)87;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-100);
      byteArray0[8] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-96);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (int) (byte) (-113), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-100);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$81$9b$81W$7d$f2$9c$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte) (-100);
      byteArray1[4] = (byte) (-45);
      byteArray1[5] = (byte) (-100);
      byteArray1[6] = (byte) (-101);
      byteArray1[7] = (byte) (-127);
      byteArray1[8] = (byte)125;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lor", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-110));
      assertEquals("private final transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      Utility.signatureToString("Z@5i;o&c0)D:f!}xc", true);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      String string0 = "HMV3txvyK;B&z~";
      // Undeclared exception!
      try { 
        Utility.signatureToString("HMV3txvyK;B&z~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HMV3txvyK;B&z~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid method signature: ");
      Utility.signatureToString("Invalid method signature: ", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "WCRmRU`P{", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String[] stringArray0 = Constants.ACCESS_NAMES;
      String string0 = Utility.getSignature("s:");
      assertEquals("Ls:;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string1);
      
      String string2 = Utility.compactClassName("Byte code error: ");
      assertEquals("Byte code error: ", string2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = Utility.format(32, 32, false, 'z');
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz32", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)102;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("49 66", string1);
      
      Utility.encode(byteArray0, true);
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)73;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)73;
      byteArray1[4] = (byte)73;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fsub", string3);
      
      String string4 = Utility.compactClassName("LLong;V");
      assertEquals("LLong;V", string4);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("LObject;V");
      byte byte0 = (byte) (-93);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodTypeToSignature("):\n", stringArray0);
      assertEquals("(LBogus;LInteger;LFloat;LDouble;LLong;LNull;LInitObject;LObject;LNewObject;)L):;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("freturn", string1);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte) (-82);
      byteArray1[3] = (byte) (-82);
      byteArray1[4] = (byte) (-82);
      byteArray1[5] = (byte) (-82);
      byteArray1[6] = (byte) (-82);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray1[7] = (byte) (-82);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (-282));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byte byte0 = (byte)83;
      byteArray0[1] = (byte)83;
      byte byte1 = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)77;
      Utility.toHexString(byteArray0);
      String string0 = "G2F#z]Ao";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("G2F#z]Ao", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G2F#z]Ao'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.typeOfSignature("Z G");
      Utility.setBit((byte)4, (byte)4);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readChar();
      byteSequence0.reset();
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      byteSequence0.markSupported();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-96);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, (int) (byte) (-113), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("O%M2810+d8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("O%M2810+d8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O%M2810+d8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)73;
      byte byte1 = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)83;
      Utility.toHexString(byteArray0);
      Utility.accessToString(62);
      Utility.setBit((byte)73, 579);
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      String[] stringArray0 = Constants.ACCESS_NAMES;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)8;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, constantPool1, false);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable(158, (byte)91, byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.typeOfSignature("S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S");
      Utility.getSignature("s:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-49);
      byte byte0 = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Utility.replace("RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(");
      assertEquals("RC[.2/1]6Y9**u*,3(", string0);
      
      short short0 = Utility.searchOpcode("RC[.2/1]6Y9**u*,3(");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(',');
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("RC[.2/1]6Y9**u*,3(");
      assertEquals("[LRC;", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.compactClassName("2B>;a;");
      assertEquals("2B>;a;", string2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("0X{HPXei}(&x{j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0X{HPXei}(&x{j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.replace("/b*a#}", "/b*a#}", "/b*a#}");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)3;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/b*a#}";
      stringArray0[1] = "\t";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureToString("\t", "'$2V7],M+@Fn|,>[|z", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("):\n");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-50);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("):\n");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(141, (byte)111);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-82), 2);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte)111);
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantNameAndType1;
      // Undeclared exception!
      try { 
        constantLong1.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      String[] stringArray0 = Constants.ACCESS_NAMES;
      Utility.compactClassName("Byte code error: ", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)116;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)116, 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-119);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)58, (byte) (-21));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      constantArray0[1] = (Constant) constantFieldref2;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)116, 88);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantLong constantLong0 = new ConstantLong((byte)58);
      constantArray0[3] = (Constant) constantLong0;
      ConstantFieldref constantFieldref3 = new ConstantFieldref(constantFieldref2);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      int int0 = Utility.clearBit((-2079), (-2079));
      assertEquals((-2079), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)38;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("ZEE$faEE$s", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.fillup("dup_x1", (-2407), true, 'Z');
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte) (-6);
      byteArray1[4] = (byte) (-6);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantClass constantClass0 = new ConstantClass((-2270));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2270), 172);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(2194, 47);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      constantArray0[5] = (Constant) constantInterfaceMethodref1;
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[6] = (Constant) constantClass1;
      constantArray0[7] = (Constant) constantClass0;
      constantArray0[8] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1909, 1909);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 9255. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.printArray((Object[]) null, true, true);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(240);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-257), 171);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte)7, (-3171));
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 194, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)50;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)36;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("z0>[", "z0>[", "Byte code error: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z0>[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), 94, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iinc\t\t%160\t-96
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.clearBit((-2146), (-2146));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.getSignature("m*");
      Utility.format(32, 32, false, 'z');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)102;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)102, 32);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.replace("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz32", "Lm*;", "49 66");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte) (-21);
      byteArray1[4] = (byte) (-79);
      byteArray1[5] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 177, 2516, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodTypeToSignature("):\n", stringArray0);
      assertEquals("(LBogus;LInteger;LFloat;LDouble;LLong;LNull;LInitObject;LObject;LNewObject;)L):;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("freturn", string1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte) (-61);
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)44, (byte)27);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.replace("{java.lang.Object@31021199, java.lang.Object@4e5aa3d9, java.lang.Object@43865486, java.lang.Object@1c5e9922, java.lang.Object@3df1dde9, java.lang.Object@262ee5e5, java.lang.Object@57fda7c2, java.lang.Object@3f02a396}", "{java.lang.Object@31021199, java.lang.Object@4e5aa3d9, java.lang.Object@43865486, java.lang.Object@1c5e9922, java.lang.Object@3df1dde9, java.lang.Object@262ee5e5, java.lang.Object@57fda7c2, java.lang.Object@3f02a396}", "{java.lang.Object@31021199, java.lang.Object@4e5aa3d9, java.lang.Object@43865486, java.lang.Object@1c5e9922, java.lang.Object@3df1dde9, java.lang.Object@262ee5e5, java.lang.Object@57fda7c2, java.lang.Object@3f02a396}");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 624, 2372, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-119);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.compactClassName(",NtMGS&g6|aQ_");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(H=o~. h@nZ-^", (String) null, "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H=o~. h@nZ-^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)65;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2303, false);
      assertEquals("0:    nop\n1:    iconst_4\n2:    lstore_2\n3:    nop\n", string0);
      
      int int0 = Utility.setBit((byte)7, 40);
      assertEquals(263, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)66;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("B$q2$qB2B", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_2", string1);
      
      String string2 = Utility.accessToString(13);
      assertEquals("public protected static", string2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.compactClassName("\t\t");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)62;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("LObject;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LObject;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "m*";
      Utility.getSignature("m*");
      Utility.clearBit(66, 125);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)3;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      String string1 = "9d8:VG4{Lhd";
      try { 
        Utility.typeOfSignature("9d8:VG4{Lhd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9d8:VG4{Lhd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.getSignature("m*");
      assertEquals("Lm*;", string0);
      
      int int0 = Utility.clearBit(66, 66);
      assertEquals(66, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, 7, 64, true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("BootstrapMethods(", true);
      assertEquals("BootstrapMethods(", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-119);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-21);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3868), (-3868), true);
      assertEquals("0:    nop\n1:    ineg\n2:    astore\t\t%235\n", string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)50;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      byteSequence0.markSupported();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)50;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("y$ee1$sB$q2", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.accessToString((int) (byte)36);
      assertEquals("protected synchronized", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)59;
      Object[] objectArray0 = new Object[6];
      byteArray0[6] = (byte)125;
      objectArray0[1] = (Object) (byte)112;
      objectArray0[2] = (Object) (byte)112;
      objectArray0[3] = (Object) (byte)112;
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
      
      String string1 = Utility.compactClassName("irem", "irem", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-96);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, (-1171), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)50;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("y$ee1$sB$q2", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_0", string1);
      
      String string2 = Utility.accessToString(40);
      assertEquals("static synchronized", string2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = Utility.getSignature("m*");
      assertEquals("Lm*;", string0);
      
      int int0 = Utility.clearBit(66, 125);
      assertEquals(66, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)59;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)125;
      objectArray0[1] = (Object) (byte)64;
      objectArray0[2] = (Object) (byte)64;
      objectArray0[3] = (Object) (byte)64;
      objectArray0[4] = (Object) (byte)59;
      objectArray0[5] = (Object) (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_1", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string1);
      
      String string2 = Utility.compactClassName("lstore_1", "lstore_1", true);
      assertEquals("", string2);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-13);
      byteArray1[1] = (byte)59;
      byteArray1[2] = (byte)64;
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte) (-13);
      byteArray1[5] = (byte) (-13);
      byteArray1[6] = (byte)59;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string3 = Utility.accessToString((-2622));
      assertEquals("private volatile transient native abstract synthetic annotation enum", string3);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("lload_1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, 2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.getSignature("m*");
      String string0 = Utility.format(32, 32, false, 'z');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)102;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("f0Flx+}@}", false);
      Utility.isSet(66, 91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.typeOfSignature("V+$83`u2s}x7ohV_|");
      Utility.convertString("$VuTyHS]|yVr;.DK x");
      Utility.classOrInterface((-1365));
      boolean boolean0 = false;
      Utility.format((byte)12, 146, false, 'a');
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)8;
      byteArray0[1] = (byte)39;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-47), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-86);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.methodTypeToSignature("2\"_8;M9]Kl}6ek/TH", (String[]) null);
      assertEquals("()L2\"_8;M9]Kl}6ek/TH;", string1);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)70;
      Utility.getSignature("2\"_8;M9]Kl}6ek/TH");
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_3", string2);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.getSignature("m*");
      assertEquals("Lm*;", string0);
      
      int int0 = Utility.clearBit(66, 125);
      assertEquals(66, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("istore\t\t%3", string1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)12;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2d 3d 3d ff 2d 2d 3d 0c", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$z$3d$3d$ff$z$z$3d$M", string1);
      
      String string2 = Utility.compactClassName(";CM", false);
      assertEquals(";CM", string2);
      
      boolean boolean0 = Utility.isSet((byte)61, 682);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-1);
      Utility.equals(byteArray1, byteArray0);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      Utility.encode(byteArray0, true);
      Utility.isSet((byte)62, 2076);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-86);
      Utility.encode(byteArray0, true);
      Utility.methodTypeToSignature("2\"_8;M9]Kl}6ek/TH", (String[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)94;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('B');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2\"_8;M9]Kl}6ek/TH", "2\"_8;M9]Kl}6ek/TH", "jsr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2\"_8;M9]Kl}6ek/TH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[7] = (byte) (-1);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)85;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 171, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)45);
      Utility.decode("DuL+2F/{#(~vDuL+2F.{#(~v", false);
      byte[] byteArray1 = Utility.decode("", false);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)111;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("~\"");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)97, (byte) (-50));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantLong constantLong0 = new ConstantLong(1L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-3786), (int) (byte)11);
      assertEquals("0:    ladd\n1:    fconst_0\n2:    <illegal opcode>\n3:    ddiv\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      String string1 = Utility.classOrInterface((-936));
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)22;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isJavaIdentifierPart('i');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("SS4H$3b$W$A", "iconst_2", "SS4H$3b$W$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: SS4H$3b$W$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 2303, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 6, 11, false);
      byte[] byteArray1 = Utility.decode("6:    nop\n", false);
      assertArrayEquals(new byte[] {(byte)54, (byte)58, (byte)32, (byte)32, (byte)32, (byte)32, (byte)110, (byte)111, (byte)112, (byte)10}, byteArray1);
      
      String string1 = Utility.compactClassName("6:    nop\n", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)39;
      Object object2 = new Object();
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.decode("zek4khi_1Pd9$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "m*";
      Utility.getSignature("m*");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":v2i";
      stringArray0[1] = "Lm*;";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-47);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, (int) (byte) (-73), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 28402. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)50;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("y$ee1$sB$q2", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.accessToString(40);
      assertEquals("static synchronized", string1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 23, (int) (byte) (-13), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = Utility.clearBit(125, (-2079));
      assertEquals(125, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.classOrInterface((-3078));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.available();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      boolean boolean0 = false;
      String[] stringArray0 = Constants.ACCESS_NAMES;
      Utility.getSignature("s:");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, 45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$3a$3c$3c$3c$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string1);
      
      String string2 = Utility.accessToString(28);
      assertEquals("protected static final", string2);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte)36, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isJavaIdentifierPart('2');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("CD|AdX", "CD|AdX", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.getSignature("m*");
      assertEquals("Lm*;", string0);
      
      int int0 = Utility.clearBit(66, 125);
      assertEquals(66, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.replace("/b*a#}", "/b*a#}", "/b*a#}");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "/b*a#}";
      objectArray0[1] = (Object) "/b*a#}";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)12;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      String string0 = Utility.compactClassName(";CM", false);
      Utility.isSet((byte)61, 682);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)21;
      byteArray0[1] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 200, 200, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "@qsJn_{*dKW6";
      try { 
        Utility.typeOfSignature("@qsJn_{*dKW6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @qsJn_{*dKW6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)62;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean0 = Utility.isSet(5, (byte)46);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iastore", string1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "RC[.2/1]6Y9**u*,3(";
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (int) (byte)14, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-46), 5, false);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.signatureToString("DQA0", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-31);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "double";
      objectArray0[2] = (Object) (byte) (-31);
      objectArray0[3] = (Object) (byte)123;
      objectArray0[4] = (Object) "double";
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) (byte)123;
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "invokedynamic";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("To0++mB@ bF3(7", "invokedynamic", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AP>`C<b-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AP>`C<b-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)76;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte)35, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[0];
      String string0 = Utility.methodTypeToSignature("", stringArray1);
      assertEquals("()L;", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      Utility.signatureToString("Z@5i;o&c0)D:f!}xc", true);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      Utility.signatureToString("Z@5i;o&c0)D:f!}xc", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpge\t\t#23458", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isJavaIdentifierPart('I');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "\t\t%", "r}S.v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = false;
      String string0 = "${&tmi";
      Utility.compactClassName("${&tmi", false);
      Utility.fillup("${&tmi", (byte)0, false, 'm');
      try { 
        Utility.decode("${&tmi", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.replace("RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(");
      Utility.searchOpcode("RC[.2/1]6Y9**u*,3(");
      Utility.isJavaIdentifierPart(';');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-50);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 67, (int) (short) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "DQA0";
      Utility.signatureToString("DQA0", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)123, (byte) (-31));
      constantArray0[0] = (Constant) constantFieldref0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), 1034, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid method signature: ");
      String string0 = Utility.getSignature("s:");
      assertEquals("Ls:;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpgt\t\t#2767", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte) (-1);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("P$fee$9b$k2$98$H$ff", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lastore", string1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.getSignature("):\n");
      assertEquals("L):;", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = Utility.convertString(")\t");
      assertEquals(")\t", string0);
      
      int int0 = Utility.setBit(5380, 5380);
      assertEquals(5396, int0);
      
      boolean boolean0 = Utility.isSet((-1734), (-769));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "S";
      objectArray0[2] = (Object) "S";
      Utility.printArray(objectArray0, false, false);
      int int0 = 0;
      Utility.isSet((-678), 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)111;
      byte byte0 = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      Constant[] constantArray0 = new Constant[5];
      ConstantClass constantClass0 = new ConstantClass((byte)111);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      MockFile mockFile0 = new MockFile("*k r-k3*0?Onk>J<");
      File file0 = MockFile.createTempFile("*k r-k3*0?Onk>J<", "b'ua0C", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "*k r-k3*0?Onk>J<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"*k r-k3*0?Onk>J<\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Utility.compactClassName("rV#c[=`.[", "rV#c[=`.[", true);
      Utility.format(228, 148, false, 'M');
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 120, 148, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S");
      assertEquals((byte)9, byte0);
      
      String[] stringArray0 = Constants.ITEM_NAMES;
      int int0 = Utility.clearBit(2079, 0);
      assertEquals(2078, int0);
      
      String string0 = Utility.methodSignatureReturnType("S");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-96);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 200, (-1171), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.signatureToString("DQA0", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)123, (byte) (-31));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString((byte) (-90));
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(187, (byte) (-31));
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = Utility.getSignature("BgMjZ#cHf[8v/^cU]J");
      assertEquals("[LBgMjZ#cHf;", string0);
      
      String string1 = Utility.signatureToString("BgMjZ#cHf[8v/^cU]J");
      assertEquals("byte", string1);
      
      String string2 = Utility.signatureToString("[LBgMjZ#cHf;");
      assertEquals("BgMjZ#cHf[]", string2);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "2";
      try { 
        Utility.typeOfSignature("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = Utility.replace(", npairs = ", ", npairs = ", "char");
      assertEquals("char", string0);
      
      String string1 = Utility.convertString(", npairs = ");
      assertEquals(", npairs = ", string1);
      
      int int0 = Utility.setBit(0, 168);
      assertEquals(256, int0);
      
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) ", npairs = ";
      objectArray0[1] = (Object) "char";
      objectArray0[2] = (Object) "char";
      objectArray0[3] = (Object) ", npairs = ";
      objectArray0[4] = (Object) "char";
      String string2 = Utility.accessToString(168);
      assertEquals("static synchronized transient", string2);
      
      String string3 = Utility.accessToString(0);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = ")\t";
      Utility.convertString(")\t");
      byte[] byteArray0 = null;
      String string1 = "S";
      boolean boolean0 = false;
      Utility.signatureToString("S", false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(66);
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aaload", string0);
      
      String string1 = Utility.format((-703), (byte)35, false, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV-703", string1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.fillup(")\t", (-2021), true, 'A');
      String string0 = Utility.compactClassName("L");
      assertEquals("L", string0);
      
      String string1 = Utility.format((-2021), (-2021), true, '*');
      assertEquals("-2021", string1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      String string0 = "Z@5i;o&c0)D:f!}xc";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[>eT=;BB;N/ox9-BV{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>eT=;BB;N/ox9-BV{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z@5i;o&c0)D:f!}xc");
      // Undeclared exception!
      try { 
        Utility.signatureToString("MG", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Utility.signatureToString("J8}{lYA-#qHBbM@Nq", true);
      Utility.isSet(2465, 120);
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aload_0", "aload_0", "2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = Utility.getSignature("+XVHP$!");
      assertEquals("L+XVHP$!;", string0);
      
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
      
      Utility.compactClassName("BootstrapMethods(", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-21);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3868), (int) (byte) (-119), true);
      assertEquals("0:    l2f\n1:    aaload\n2:    astore\t\t%235\n", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)45;
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("SS4H$3b$W$z");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(240, (-3786));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)72, (-936));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)67;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("><yUg|b5OD/n|", "Q[EMa{)92CUhsj2", true);
      Utility.setBit((byte)67, (-384));
      // Undeclared exception!
      try { 
        Utility.signatureToString("9HL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9HL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("V", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = Utility.signatureToString("I?>rHwf}~", false);
      assertEquals("int", string0);
      
      String string1 = Utility.methodSignatureReturnType("I?>rHwf}~");
      assertEquals("int", string1);
      
      Utility.typeOfSignature("+B`^>?qU]DPz;");
      try { 
        Utility.methodSignatureArgumentTypes("j.LBoR2oQ)8+%&3.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j.LBoR2oQ)8+%&3.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.accessToString((-3412), false);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      String[] stringArray0 = Constants.TYPE_NAMES;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U~N K;agX0}&}Lb`[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U~N K;agX0}&}Lb`['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = Utility.replace("", "$L6J6Fb]1Y8my3=RB", "X\"0}f3e[$}#k8Sc|n^");
      assertEquals("", string0);
      
      String string1 = Utility.getSignature("$L6J6Fb]1Y8my3=RB");
      assertEquals("L$L6J6Fb]1Y8my3=RB;", string1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.fillup("", (-568), false, 'q');
      try { 
        Utility.methodSignatureArgumentTypes("/K<rnx?|O?\"%J", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /K<rnx?|O?\"%J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "X\"0}f3e[$}#k8Sc|n^";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X\"0}f3e[$}#k8Sc|n^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X\"0}f3e[$}#k8Sc|n^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)11;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$f3$8b$vd$A$bfB$_$L", string0);
      
      String string1 = Utility.methodTypeToSignature("$f3$8b$vd$A$bfB$_$L", (String[]) null);
      assertEquals("()L$f3$8b$vd$A$bfB$_$L;", string1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":WUS5U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :WUS5U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-28);
      Utility.encode(byteArray0, true);
      String string0 = "G1Z%'W+eLF%EUfq";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G1Z%'W+eLF%EUfq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G1Z%'W+eLF%EUfq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = Constants.TYPE_NAMES;
      // Undeclared exception!
      try { 
        Utility.getSignature(" [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d\"!h@1IvRMh");
      Utility.replace("fstore_2", "fstore_2", "fstore_2");
      Utility.compactClassName("\t<", "", false);
      try { 
        Utility.methodSignatureReturnType(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, npairs = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.replace("lload_1", "`B;!fc.~~B.dusQ", "LlrBsAExX6z7H_&a");
      Utility.methodSignatureReturnType("J");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte)55;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1094, 48);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (int) (byte)124, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "lstore";
      Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      try { 
        Utility.methodSignatureArgumentTypes("lstore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      Utility.isJavaIdentifierPart('z');
      int int0 = (-1752);
      Utility.setBit((-1752), 42);
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[7];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NC=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NC=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("By:e yode 1rror: ", "By:e yode 1rror: ", "invokeVirtual");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.classOrInterface(365);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("class");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-Ql3Sj4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -Ql3Sj4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.compactClassName("DuL+2F/#(~v", "DuL+2F/#(~v", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("DuL+2F/#(~v");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "DuL+2F.#(~v";
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) bufferedOutputStream0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.replace("DuL+2F.#(~v", (String) null, "NZBS&iGXo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L[KMaQ)92CUDsj2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L[KMaQ)92CUDsj2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isJavaIdentifierPart('2');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("athrow", (String) null, "athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Utility.decode("32", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("newarray");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "n3=`\":c7.,u v,AG6", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("lload_1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte) (-52);
      Utility.toHexString(byteArray0);
      String string1 = Utility.signatureToString("Llload_1;", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = ")P";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType(")P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CwVej%8gn");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.replace("ge)", "CwVej%8gn", "S >s?");
      assertEquals("ge)", string0);
      
      String string1 = Utility.methodSignatureReturnType("CwVej%8gn");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.getSignature("BgMjZ#cHf[8v/^cU]J");
      assertEquals("[LBgMjZ#cHf;", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
      
      Utility.typeOfSignature("L);");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.getSignature(")\t");
      try { 
        Utility.methodSignatureToString("xSK\u0006", (String) null, "L);", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xSK\u0006
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.convertString(")\t");
      Utility.isSet(244, 244);
      Utility.classOrInterface(244);
      Utility.isSet(244, 83);
      Utility.getSignature("!1]yg(h+OB($>U^Ww");
      Utility.accessToString((-1807));
      try { 
        Utility.methodSignatureToString("I", "public final synchronized volatile transient strictfp synthetic annotation enum", "I", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String[] stringArray0 = Constants.ACCESS_NAMES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3302), (-3302), false);
      Utility.methodSignatureReturnType("Sensitive", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("E7}", "Hbl#^PZ'KItM}>", "8 2WZ8=Z[yyD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E7}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "1W&U";
      try { 
        Utility.typeOfSignature("1W&U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1W&U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int int0 = new Integer((-1709));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Utility.getSignature("int");
      try { 
        Utility.typeOfSignature(";Pnt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Pnt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.signatureToString("I", true);
      Utility.fillup("!H8TH#", (-532), true, 'W');
      Utility.isJavaIdentifierPart('W');
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LineNumberTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LineNumberTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(76, 76, true, '7');
      Utility.classOrInterface(76);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("AGc/u", "AGc/u", "AGc/u", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AGc/u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.signatureToString("DuL+2F/#(~v", true);
      try { 
        Utility.methodSignatureReturnType("'3G{,ni");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'3G{,ni'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String[] stringArray0 = Constants.ACCESS_NAMES;
      String string0 = Utility.getSignature("s:");
      assertEquals("Ls:;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iconst_5", string1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.typeOfSignature("Byte code error: ");
      try { 
        Utility.methodSignatureReturnType("EVR,vcM`eo?a+x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EVR,vcM`eo?a+x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-9);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, (-257), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("fstore_2", "lload_1", "lload_1");
      Utility.compactClassName("fstore_2", "Invalid type: ", true);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = Utility.convertString("}*6>)");
      assertEquals("}*6>)", string0);
      
      String string1 = Utility.compactClassName("}*6>)", "}*6>)", true);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifeq\t\t#12872", string2);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("Fh`C");
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("<CS@@&29{cFi");
      try { 
        Utility.typeOfSignature("<CS@@&29{cFi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <CS@@&29{cFi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#aEoEVZdy,-NFz!iRY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #aEoEVZdy,-NFz!iRY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Utility.isSet(1225, 1225);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t%aG0@=?%O`(@wS1=", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.getSignature("m*");
      Utility.clearBit(66, 125);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 66, (int) (byte)39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = 1296;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(1296, 104);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("TTR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TTR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("tableswitch", "", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = Utility.clearBit((-673), (-673));
      assertEquals(2147482975, int0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$VuTyHS]|yVr;.DK x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $VuTyHS]|yVr;.DK x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("R9 B%k:'u5-:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R9 B%k:'u5-:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = Utility.getSignature("n2d$,;558LbBOS;Wk&x");
      assertEquals("Ln2d$,;558LbBOS;Wk&x;", string0);
      
      boolean boolean0 = Utility.isSet((-147), 79);
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature(" arg");
      assertEquals("Larg;", string1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("NCt+PY}.K|zY@3<o?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NCt+PY}.K|zY@3<o?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.methodSignatureReturnType("Byte code error: ");
      assertEquals("byte", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Byte code error: ";
      objectArray0[1] = (Object) "byte";
      objectArray0[2] = (Object) "byte";
      objectArray0[3] = (Object) "byte";
      objectArray0[4] = (Object) "Byte code error: ";
      objectArray0[5] = (Object) "Byte code error: ";
      objectArray0[6] = (Object) "Byte code error: ";
      objectArray0[7] = (Object) "Byte code error: ";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "Total of ";
      Utility.typeOfSignature("Total of ");
      try { 
        Utility.methodSignatureReturnType("Total of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V~cVJca[k3X)k?");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      Utility.isJavaIdentifierPart('A');
      Utility.accessToString(1213, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "Q+n_//m*/", " H/](");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureReturnType("Total of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 369, 84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.accessToString(3, true);
      Utility.classOrInterface(3);
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)125;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      boolean boolean0 = Utility.isSet(11, 11);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      try { 
        Utility.methodSignatureReturnType("\"u-{0fG8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"u-{0fG8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Total of ");
      try { 
        Utility.typeOfSignature("Gs9~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gs9~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.convertString("yz1^IU*If,^'?");
      assertEquals("yz1^IU*If,^\\'?", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = null;
      String string1 = "boolean";
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      String string0 = "Z@5i;o&c0)D:f!}xc";
      Utility.signatureToString("Z@5i;o&c0)D:f!}xc", true);
      Utility.typeOfSignature("Z@5i;o&c0)D:f!}xc");
      try { 
        Utility.methodSignatureReturnType("boolean", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Utility.methodSignatureReturnType("V", true);
      try { 
        Utility.typeOfSignature("a0[n|~Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a0[n|~Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Integer integer0 = new Integer(0);
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[6] = (Object) "[~*";
      objectArray0[7] = (Object) "";
      Utility.printArray(objectArray0, true, false);
      Utility.accessToString(16);
      try { 
        Utility.methodSignatureArgumentTypes("imul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: imul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "[]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "MG";
      try { 
        Utility.typeOfSignature("MG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.getSignature("long");
      assertEquals("J", string0);
      
      boolean boolean0 = Utility.isSet(76, 929);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.isJavaIdentifierPart('B');
      Utility.methodSignatureReturnType("Z@5i;o&c0)D:f!}xc");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=c jDqVAL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =c jDqVAL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('B');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true, false);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("Q[EMa{)92CUhsj2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[EMa{)92CUhsj2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.isSet(139, 139);
      byte[] byteArray0 = Utility.decode("", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, false);
      Utility.getSignature("&B2)FWjHzpL4");
      Utility.isSet(0, 139);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, 0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "(", "(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.signatureToString("S6&WnE/eU@DS]");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[1] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[2] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[3] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[4] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[5] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[6] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[7] = "3Kd[XsJ1i{Bt=U^Ra0";
      stringArray0[8] = "3Kd[XsJ1i{Bt=U^Ra0";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("3Kd[XsJ1i{Bt=U^Ra0", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[XsJ1i{Bt=U^Ra0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E'ID^%O#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E'ID^%O#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      Utility.isSet((-2837), (-2837));
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jyte code ");
      byte byte0 = Utility.typeOfSignature("Jyte code ");
      assertEquals((byte)11, byte0);
      
      String string0 = Utility.fillup("monitorexit", (byte)11, false, '~');
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Jyte code ");
      byte byte0 = Utility.typeOfSignature("Jyte code ");
      assertEquals((byte)11, byte0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Jyte code ";
      stringArray0[1] = "Jyte code ";
      stringArray0[2] = "Jyte code ";
      stringArray0[3] = "Jyte code ";
      stringArray0[4] = "Jyte code ";
      String string0 = Utility.methodTypeToSignature("Jyte code ", stringArray0);
      assertEquals("(LJyte;LJyte;LJyte;LJyte;LJyte;)LJyte;", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('!');
      String string0 = Utility.methodSignatureReturnType("C#1y1+y*(Kc");
      assertEquals("char", string0);
      
      boolean boolean1 = Utility.isSet(1317, (-5895));
      assertTrue(boolean1 == boolean0);
      
      int int0 = Utility.clearBit(1688, 85);
      assertEquals(1688, int0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Utility.signatureToString("Dwn9(e`Gz~H");
      try { 
        Utility.methodSignatureReturnType("Mj{d.jF>j){F |1t/*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{F |1t/*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorexit", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.format(2913, 2913, false, '.');
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Utility.typeOfSignature("SAME_LOCALS__STA$K_EXE1DED");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">3*Plo^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >3*Plo^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = "BytKEe code error: ";
      try { 
        Utility.typeOfSignature("5?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Utility.isJavaIdentifierPart('');
      try { 
        Utility.methodSignatureReturnType("H/u98.[;YHw~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H/u98.[;YHw~1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('+');
      String string0 = "/Oli`?G[0g>";
      try { 
        Utility.typeOfSignature("/Oli`?G[0g>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Oli`?G[0g>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-32);
      Utility.encode(byteArray0, true);
      Utility.getSignature("$l$8b$I$A$A$A$A$A$A$A");
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "8*:,X|";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.replace("7nW-(7#Q[l:8B", "7nW-(7#Q[l:8B", "7nW-(7#Q[l:8B");
      try { 
        Utility.typeOfSignature("7nW-(7#Q[l:8B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7nW-(7#Q[l:8B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 171, (-1562));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Utility.isJavaIdentifierPart('Y');
      try { 
        Utility.methodSignatureReturnType("H/u98.[;YHw~1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H/u98.[;YHw~1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*dMi\"4j's=~ZBA");
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "access flags\t\t";
      String string0 = Utility.methodTypeToSignature("|7'U 3", stringArray0);
      assertEquals("(Laccess;)L|7'U;", string0);
      
      int int0 = Utility.clearBit(82, 82);
      assertEquals(82, int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!mgYH*9ith8ie");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: mgYH*9ith8ie
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Utility.typeOfSignature("SAME_LOCALS_1_STA$K_EXTE1DED");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q[EMa{)92CUhs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `92CUhs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = ", ";
      try { 
        Utility.typeOfSignature(", max_locals = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , max_locals = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8*:,X|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8*:,X|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Byte code error: ", "getstatic", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SAME_LOCALS_1_STA$K_EXTE1DED");
      assertEquals((byte)9, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "Y9yGqn7@&";
      try { 
        Utility.typeOfSignature("Y9yGqn7@&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y9yGqn7@&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Byte code error: ", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.replace("Byte code error: ", "m$q", "m$q");
      assertEquals("Byte code error: ", string0);
      
      String string1 = Utility.signatureToString("Byte code error: ", false);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I?>rHwf}~");
      assertEquals("int", string0);
      
      String string1 = Utility.compactClassName("I?>rHwf}~", "int", false);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = Utility.isSet((-3417), 2219);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "I?>rHwf}~";
      stringArray0[1] = "I?>rHwf}~";
      stringArray0[2] = "int";
      stringArray0[3] = "int";
      stringArray0[4] = "I?>rHwf}~";
      String string2 = Utility.methodTypeToSignature("int", stringArray0);
      assertEquals("(LI?>rHwf}~;LI?>rHwf}~;IILI?>rHwf}~;)I", string2);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "java.lang.;K8-yiQ2", "?/oK3u\"V*|>C", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("JY");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = "Xo*16\\";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xo*16");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xo*16'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-90);
      Utility.encode(byteArray0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("EZ$u$a9$3aZf$z$a6", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.PrefixFileFilter", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6f 72 67 2e 61 70 61 63 68 65 2e 63 6f 6d 6d 6f 6e 73 2e 69 6f 2e 66 69 6c 65 66 69 6c 74 65 72 2e 50 72 65 66 69 78 46 69 6c 65 46 69 6c 74 65 72", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f1N-", (String) null, "(string_index = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f1N-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Utility.convertString("(\"");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('u');
      assertTrue(boolean0);
      
      String string0 = Utility.format((-1026), (-1026), true, 'u');
      assertEquals("-1026", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(674);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant constant0 = constantString1.copy();
      constantArray0[0] = constant0;
      Constant constant1 = constantString0.copy();
      constantArray0[1] = constant1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("monitorenter", string1);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = Utility.getSignature("j(");
      assertEquals("Lj(;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)111;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$sYE$a7$60$9eo", string1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.convertString("\r");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byte byte0 = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)89;
      byte byte1 = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)104;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2360);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.replace("ah", "ah", "ah");
      Utility.convertString("ah");
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)51;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      Utility.getSignature("");
      Utility.convertString("");
      Utility.clearBit((-84), 3907);
      Utility.printArray((Object[]) null, false, false);
      Utility.accessToString((int) (byte)27);
      try { 
        Utility.typeOfMethodSignature("L;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.signatureToString("SAME_LOCALS_1_STACK_EXTENDED");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      int int0 = Utility.clearBit(184, (-1566));
      assertEquals(184, int0);
      
      short short0 = Utility.searchOpcode("dastore");
      assertEquals((short)82, short0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "R[0l2Y%|bC^mc?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.isJavaIdentifierPart('u');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6-Rc'G-<2G]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6-Rc'G-<2G]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature(";w5!w/ 78>+nD");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "short");
      Utility.fillup("L;w5!w/;", 75, true, 'D');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("DiX$l&K4W :2", "L;w5!w/;", "short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: DiX$l&K4W :2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O-7t5Tt*z");
      Utility.setBit((-1415), 92);
      // Undeclared exception!
      try { 
        Utility.signatureToString("O-7t5Tt*z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O-7t5Tt*z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y`;4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`;4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(',');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "fUJs+LlCiY<!N}", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "int";
      Utility.replace(" [", " [", "int");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " [";
      objectArray0[1] = (Object) " [";
      objectArray0[2] = (Object) "int";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureArgumentTypes("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.compactClassName(" [", "#fDHfRaWS%dTYYf", true);
      Utility.format((-3400), (-1408), true, ';');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      try { 
        ConstantUtf8.getInstance((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = Utility.compactClassName("YH^>+lnyh{a@:i)A)", "java.lang.", false);
      String string1 = Utility.replace("YH^>+lnyh{a@:i)A)", "java.lang.", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o");
      String string0 = "short";
      Utility.searchOpcode("short");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "o";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "short";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "o";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "short";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = Utility.accessToString(16, false);
      assertEquals("final", string0);
      
      String string1 = Utility.replace("multianewarray", "java.lang.;<_LYaChQAt`K", "t");
      assertEquals("multianewarray", string1);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = " [";
      Utility.replace(" [", " [", " [");
      try { 
        Utility.typeOfMethodSignature(" [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.printArray((Object[]) null, false, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName("monitorenter", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.replace(" [", " [", " [");
      try { 
        Utility.typeOfSignature("cdhzWjdyG@ Yo5l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cdhzWjdyG@ Yo5l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface(222);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.signatureToString("I?>rHwf}~");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = Utility.accessToString(982);
      assertEquals("private protected final volatile transient native interface", string1);
      
      String string2 = Utility.replace("{}", "org.apache.bcel.classfile.FieldOrMethod", "\n");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Utility.clearBit((-13), 159);
      Utility.format(159, 660, true, ' ');
      try { 
        Utility.methodSignatureReturnType("byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QEPyh).", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QEPyh).'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.fillup("s0\"L", (-395124829), false, '&');
      try { 
        Utility.methodSignatureReturnType("s0\"L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `s0\"L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      String string0 = Utility.fillup("0`}!*0Q61nxc`S", (-5281), true, '8');
      assertEquals("0`}!*0Q61nxc`S", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      String string0 = Utility.fillup("\"?+-R>ZIz@\",jlq:", 70, false, 'f');
      assertEquals("fffffffffffffffffffffffffffffffffffffffffffffffffffff\"?+-R>ZIz@\",jlq:", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("WM[(r|Z@kQ[/]P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WM[(r|Z@kQ[/]P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = null;
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-11), (byte) (-33));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = "USB3+Db5n'!ue\\<(0";
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.clearBit((-1), (-1));
      String string0 = null;
      String string1 = "invokespecial";
      MockFile mockFile0 = new MockFile("invokespecial");
      String string2 = "org.apache.commons.io.filefilter.SuffixFileFilter";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "org.apache.commons.io.filefilter.SuffixFileFilter");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.io.filefilter.SuffixFileFilter
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Utility.replace(" [", " [", " [");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.isSet(2369, 3476);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&x[Z@v{9", "AnnotationDefault", "p!IXet-]LB%6VJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &x[Z@v{9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W .{7Ps<6'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W .{7Ps<6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)8;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{h,mX8Ecq,_OF]ed\"+");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "{h,mX8Ecq,_OF]ed\"+");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "{h,mX8Ecq,_OF]ed\"+";
      objectArray0[4] = (Object) "{h,mX8Ecq,_OF]ed\"+";
      objectArray0[6] = (Object) "{h,mX8Ecq,_OF]ed\"+";
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{h,mX8Ecq,_OF]ed\"+");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "{h,mX8Ecq,_OF]ed\"+");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "{h,mX8Ecq,_OF]ed\"+";
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) "{h,mX8Ecq,_OF]ed\"+";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "{h,mX8Ecq,_OF]ed\"+";
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      byte byte0 = (byte)1;
      try { 
        Utility.typeOfSignature("QEPyh).");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QEPyh).
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = "\"?+-R>ZIz@\",jlq:";
      String string1 = "&2EP%n{zF'h~1KFvR";
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "&2EP%n{zF'h~1KFvR", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"?+-R>ZIz@\",jlq:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"?+-R>ZIz@\",jlq:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";w5!w/ 78>+nD";
      stringArray0[1] = ";w5!w/ 78>+nD";
      stringArray0[2] = ";w5!w/ 78>+nD";
      String string0 = Utility.getSignature(";w5!w/ 78>+nD");
      assertEquals("L;w5!w/;", string0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.clearBit(1550, 1550);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "os8[r<[h4WE_yr";
      stringArray0[1] = "os8[r<[h4WE_yr";
      stringArray0[2] = "os8[r<[h4WE_yr";
      stringArray0[3] = "os8[r<[h4WE_yr";
      stringArray0[4] = "os8[r<[h4WE_yr";
      stringArray0[5] = "os8[r<[h4WE_yr";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("os8[r<[h4WE_yr", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[r<[h4WE_yr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rM0C3.].*");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.fillup("", 9, true, 'y');
      assertEquals("yyyyyyyyy", string0);
      
      String string1 = Utility.accessToString((-680));
      assertEquals("static final volatile native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = "\t\t%";
      Utility.compactClassName("f", "\t\t%", false);
      try { 
        Utility.methodSignatureReturnType("arraylength", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `arraylength'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.clearBit(5294, 1419);
      Utility.isSet(1550, (-6310));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.AnnotationEntry", "short", "\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.AnnotationEntry
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4HhP'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4HhP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":3BW=[n1odtd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "lo;xW2QLGr*tNJl";
      Utility.getSignature("lo;xW2QLGr*tNJl");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "Llo;xW2QLGr*tNJl;", 207, (-1472));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.compactClassName("(b{3L~", "\t\t%", false);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("(b{3L~", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.replace("RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(");
      Utility.searchOpcode("RC[.2/1]6Y9**u*,3(");
      char char0 = ';';
      Utility.isJavaIdentifierPart(';');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)0;
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("RC[.2/1]6Y9**u*,3(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RC[.2/1]6Y9**u*,3('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)44, (byte)27);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore\t\t%27", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-569), 16);
      assertEquals("0:    lstore\t\t%27\n2:    fstore_1\n3:    aload_2\n4:    monitorexit\n5:    dup2\n6:    <illegal opcode>\n", string2);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(45, 45);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\n");
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"?+-R>ZIz@\",jlq:", "K", "\"?+-R>ZIz@\",jlq:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"?+-R>ZIz@\",jlq:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = "*#Q])0C8.w-";
      try { 
        Utility.typeOfMethodSignature("*#Q])0C8.w-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *#Q])0C8.w-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = "X9Vlq!7dqLXi/$^rck";
      try { 
        Utility.typeOfSignature("X9Vlq!7dqLXi/$^rck");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X9Vlq!7dqLXi/$^rck
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Utility.fillup("R] f9yd.", (byte)0, true, 'O');
      Utility.compactClassName("R] f9yd.", "&5'Y_Cm !!", true);
      byte byte0 = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ClassPath classPath0 = new ClassPath("R] f9yd.");
      try { 
        classPath0.getInputStream("fastore");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Couldn't find: fastore.class
         //
         verifyException("org.apache.bcel.util.ClassPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      byte[] byteArray0 = new byte[5];
      int int0 = 60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, 247, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.classOrInterface((-3078));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Utility.replace("RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(");
      Utility.searchOpcode("RC[.2/1]6Y9**u*,3(");
      Utility.isJavaIdentifierPart(';');
      Utility.compactClassName("", "RC[.2/1]6Y9**u*,3(", true);
      Constant[] constantArray0 = new Constant[3];
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)44, (byte)27);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 624, 2372, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte byte0 = (byte) (-17);
      ConstantPool constantPool0 = null;
      int int0 = 60;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 32, (-672), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2RSqI^.=rE{5tyi";
      Utility.signatureToString("ZaL^a/8-Jevqyz>t\"aB", false);
      Utility.accessToString(194);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 34
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Utility.compactClassName("(b{3L~", "\t\t%", true);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("(b{3L~", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)92;
      String string0 = Utility.compactClassName("{java.lang.Object@4244ce7e, java.lang.Object@239f0794, java.lang.Object@11994150, java.lang.Object@7d6126c3, java.lang.Object@19b2302f, java.lang.Object@42ca372a, java.lang.Object@19027de2, java.lang.Object@6da1073f}", "{java.lang.Object@4244ce7e, java.lang.Object@239f0794, java.lang.Object@11994150, java.lang.Object@7d6126c3, java.lang.Object@19b2302f, java.lang.Object@42ca372a, java.lang.Object@19027de2, java.lang.Object@6da1073f}", true);
      assertEquals("", string0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray1, byteArray2);
      assertTrue(boolean0);
      
      String string1 = Utility.convertString("{java.lang.Object@4244ce7e, java.lang.Object@239f0794, java.lang.Object@11994150, java.lang.Object@7d6126c3, java.lang.Object@19b2302f, java.lang.Object@42ca372a, java.lang.Object@19027de2, java.lang.Object@6da1073f}");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.replace("RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(", "RC[.2/1]6Y9**u*,3(");
      Utility.searchOpcode("RC[.2/1]6Y9**u*,3(");
      Utility.isJavaIdentifierPart(';');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.clearBit(1550, 1550);
      Utility.isSet((-1827), (-387));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Q]U6Lv?vHHr.u5`!", "Q]U6Lv?vHHr.u5`!", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q]U6Lv?vHHr.u5`!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = "4HhP'";
      try { 
        Utility.methodSignatureArgumentTypes("4HhP'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4HhP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      try { 
        Utility.typeOfSignature("USB3+Db5n'!ue<(0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: USB3+Db5n'!ue<(0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)123;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$u$87$A$A$c4$A$7d$a2$7b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$u$87$A$A$c4$A$7d$a2$7b'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Utility.searchOpcode("1{V");
      String string0 = Utility.fillup("1{V", 1219, true, 'O');
      Utility.compactClassName("1{V", string0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)77;
      byteArray0[3] = (byte)77;
      Constant[] constantArray0 = new Constant[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: EB00004D
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O-7t5Tt*z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O-7t5Tt*z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)91;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("06 04 94 00 28 00 28 5b", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int int0 = Utility.clearBit(0, 148);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      int int0 = Utility.clearBit(1624, 1624);
      assertEquals(1624, int0);
      
      int int1 = Utility.setBit(16384, 1624);
      assertEquals(16793600, int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-68);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 bc", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = Utility.format(2913, 2913, false, '.');
      try { 
        Utility.methodSignatureArgumentTypes(string0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = "*#Q])0C8.w-O";
      try { 
        Utility.typeOfSignature("*#Q])0C8.w-O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Q])0C8.w-O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1648, false, '9');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Utility.searchOpcode("U!0R%fh64r/\"U");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Utility");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Exceptions: ", stringArray0);
      Utility.clearBit(162, 162);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"!^");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[2];
      mockPrintStream0.flush();
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)49;
      mockPrintStream1.write(byteArray0, (int) (byte)41, 224);
      mockPrintStream1.print(charArray0);
      Utility.printArray((PrintStream) mockPrintStream1, (Object[]) stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("\"!^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"!^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.setBit(141, 3289);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = ";<_LYChQAt`K";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      char char0 = 'h';
      Utility.isJavaIdentifierPart('h');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `nop'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "Unreachable default case reached!";
      stringArray0[0] = "Unreachable default case reached!";
      stringArray0[1] = "Sr6jv";
      Utility.methodTypeToSignature("Sr6jv", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iadd", "iadd", "i2c", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("(b{3L~", "\t\t%", true);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("(b{3L~", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2RSqI^.=rE{5tyi";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Utility.accessToString((-3078), true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-17);
      ConstantPool constantPool0 = null;
      int int0 = 95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, 60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-108);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("\t\t#", false);
      int int0 = (-1595);
      Utility.clearBit((-1595), (-2323));
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t\t#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = "nI";
      boolean boolean0 = false;
      Utility.decode("nI", false);
      try { 
        Utility.methodSignatureArgumentTypes("nI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      syntheticRepository0.findClass("18^??r,");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      byteSequence0.readFully(byteArray0, (int) (byte)0, (int) (byte)0);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("interface", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = " [";
      Utility.replace(" [", " [", " [");
      String string1 = "<";
      boolean boolean0 = false;
      int int0 = 0;
      LocalVariable[] localVariableArray0 = null;
      Constant[] constantArray0 = new Constant[2];
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("iload_2");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = "dn";
      // Undeclared exception!
      Utility.replace("dn", "", "|()V6yOhPL?L9<");
  }
}
