/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:49:22 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "[-s 0t U3(eG<X.;rS";
      int int0 = (-356);
      try { 
        Parser.parse("[-s 0t U3(eG<X.;rS", (-356));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-s 0t U3(eG<X.;rS`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "4^k&q3`W\"/cY?{0}";
      try { 
        Parser.parse("4^k&q3`W\"/cY?{0}", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `?{0}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int0 = 114;
      Regexp regexp2 = Parser.parse("N;", 114);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[1] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[2] = regexp4;
      Regexp regexp5 = Parser.parse("Lisu", (-6651));
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[3] = regexp6;
      Regexp regexp7 = new Regexp(regexp6);
      regexpArray0[4] = regexp7;
      Regexp regexp8 = Parser.parse("Q{2,DcM&g@9Tr", (-6651));
      regexpArray0[5] = regexp8;
      int int1 = (-1268);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("`", 2677);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      try { 
        Parser.parse("65_Q,(6_bi*jxEU", (-248));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `65_Q,(6_bi*jxEU`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "92[U4\\W??5 y";
      int int0 = 1815;
      Parser.parse("92[U4W??5 y", 1815);
      Regexp[] regexpArray0 = new Regexp[8];
      int int1 = (-1064);
      try { 
        Parser.parse("92[U4W??5 y", (-1064));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[U4W??5 y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser.parse(",P8}bs%{56a@:xI", (-2083));
      Parser parser0 = new Parser(",P8}bs%{56a@:xI", (-2083));
      try { 
        Parser.parse("[(ZBDD", 5869);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[(ZBDD`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "\\0";
      int int0 = (-1367);
      Parser.parse("\u0000", (-1367));
      int int1 = 92;
      Parser parser0 = new Parser("\u0000", 92);
      String string1 = "\\Pj";
      int int2 = 3713;
      Parser.parse("Pj", 3713);
      String string2 = "?>!W";
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("8PGgQQ", 7008);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("8PGgQQ", 73);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("8PGgQQ", 73);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("@?wz^H['\"~P/0~O$", 46);
      regexpArray0[6] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-94), 2535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      int int0 = (-644);
      Regexp regexp3 = Parser.parse("^b", (-644));
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      try { 
        Parser.parse("n[mVOk`4{?vUT'6", (-644));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[mVOk`4{?vUT'6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "!|v|(p t;)2~;\"6/<J2";
      int int0 = 114;
      Parser parser0 = new Parser("!|v|(p t;)2~;\"6/<J2", 114);
      int int1 = (-1451);
      Parser.parse("!|v|(p t;)2~;\"6/<J2", (-1451));
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = new Parser("`jo;EN{01ZJ", 3545);
      Regexp regexp0 = Parser.parse("`jo;EN{01ZJ", 3545);
      Regexp regexp1 = Parser.parse("invalid repeat count", 97);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      Regexp regexp3 = Parser.parse("Lisu", 97);
      regexpArray0[4] = regexp3;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1813), 3854);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "c<-c\\0@pwrbw";
      int int0 = 328;
      Parser parser0 = new Parser("c<-c\u0000@pwrbw", 328);
      Parser.parse("c<-c\u0000@pwrbw", 328);
      Parser.parse("c<-c\u0000@pwrbw", 328);
      int int1 = 5;
      Parser.parse("com.google.re2j.Utils", 5);
      Parser.parse("c<-c\u0000@pwrbw", 328);
      Parser.parse("c<-c\u0000@pwrbw", 328);
      int int2 = 1297;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1297);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 3671);
      Regexp regexp0 = Parser.parse("Ppk:]", 3671);
      Regexp regexp1 = Parser.parse("p?E", 3671);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Parser.subarray(regexpArray0, 3671, 3671);
      Regexp[] regexpArray1 = new Regexp[8];
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp2;
      regexpArray1[2] = regexp2;
      regexpArray1[3] = regexp2;
      regexpArray1[4] = regexp2;
      regexpArray1[5] = regexp2;
      regexpArray1[6] = regexp1;
      regexpArray1[7] = regexp0;
      Parser.subarray(regexpArray1, 3671, 3671);
      try { 
        Parser.parse("[-", (-1463));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parser parser0 = new Parser("X3fs5{75z9|p!MR", 8053);
      Parser.parse("X3fs5{75z9|p!MR", 49);
      Parser.parse("X3fs5{75z9|p!MR", 51);
      Parser.parse("X3fs5{75z9|p!MR", 1581);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-628), (-2903));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "g\\14P>I rcB(h_x";
      int int0 = 5;
      Parser parser0 = new Parser("g\fP>I rcB(h_x", 5);
      Parser.parse("g\fP>I rcB(h_x", 66639);
      try { 
        Parser.parse("g\fP>I rcB(h_x", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `g\fP>I rcB(h_x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-156);
      Regexp regexp0 = Parser.parse("s+>?eBB1+N<iE%jn", (-156));
      String string0 = "Po";
      Regexp regexp1 = Parser.parse("Po", (-156));
      int int1 = 98;
      Parser.parse("Syriac", 98);
      int int2 = 116;
      Regexp regexp2 = Parser.parse("i\u0004@o_i6n!4", 116);
      Regexp[] regexpArray0 = new Regexp[4];
      regexp0.reinit();
      regexpArray0[0] = regexp0;
      regexp2.min = int2;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp2;
      regexp3.reinit();
      regexpArray0[3] = regexp1;
      Parser.subarray(regexpArray0, int1, int1);
      String string1 = "\\\"";
      Parser parser0 = new Parser(string1, int2);
      regexp2.flags = int0;
      String string2 = null;
      int int3 = (-3329);
      // Undeclared exception!
      try { 
        Parser.parse(string2, int3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "4\\66i\"jG_@tR@{y";
      Regexp regexp0 = Parser.parse("46i\"jG_@tR@{y", 996);
      regexp0.name = "46i\"jG_@tR@{y";
      int int0 = 486;
      regexp0.max = 486;
      Regexp regexp1 = Parser.parse("46i\"jG_@tR@{y", 996);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 996, 996);
      regexp0.equals(regexp0);
      int int1 = 228;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 5199, 228);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("7j\u0005'<4fib:&6!", (-132));
      int int0 = 9;
      regexp5.toString();
      regexp5.cap = int0;
      regexp5.reinit();
      regexp4.max = int0;
      regexpArray0[4] = regexp5;
      int int1 = 700;
      Parser.subarray(regexpArray0, int1, int1);
      String string0 = "";
      Parser parser0 = new Parser(string0, int1);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "0-s^0";
      Parser parser0 = new Parser("0-s^0", 1237);
      Parser.parse("0-s^0", 4251);
      try { 
        Parser.parse("BXQXL01(l?[}-", 1237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[}-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 91;
      Parser parser0 = new Parser("Bopomofo", 91);
      String string0 = "\\n";
      Parser.parse("\n", (-624));
      Parser.parse("Bopomofo", (-47));
      Parser.parse("Bopomofo", 91);
      int int1 = 2039;
      Parser.parse("Bopomofo", 2039);
      Parser.subarray((Regexp[]) null, 91, 91);
      int int2 = 123;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 123, 1165);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "%JXt_7J";
      Parser parser0 = new Parser("%JXt_7J", (-479));
      Regexp[] regexpArray0 = new Regexp[5];
      String string1 = "\\3";
      int int0 = 120;
      Regexp regexp0 = Parser.parse("\u0003", 120);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse(string0, int0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexpArray0[1]);
      regexpArray0[2] = regexp2;
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "cZeB%Px8wSPNZ[Kg0\\";
      int int0 = 628;
      try { 
        Parser.parse("cZeB%Px8wSPNZ[Kg0", 628);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Kg0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse(".+*?()|[]{}^$", 11);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("k]J9B*emaKf<luyt", (-4474));
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp5;
      int int0 = (-3748);
      try { 
        Parser.parse(".+*?()|[]{}^$", (-3748));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("yV@AE5u_8$tN-{_", 2736);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp1);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = Parser.parse("rJOI{1", 2736);
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 64, 43798);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "\\p{";
      int int0 = 3272;
      Regexp regexp0 = Parser.parse("p{", 3272);
      int int1 = 1;
      regexp0.min = int1;
      String string1 = "";
      regexp0.name = string1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Parser.subarray(regexpArray0, int0, int0);
      int int2 = (-295);
      int int3 = 120;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-719);
      Parser parser0 = new Parser("[:alpha:]", (-719));
      Regexp regexp0 = Parser.parse("[:alpha:]", (-719));
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp1 = Parser.parse("[:alpha:]", (-719));
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[0] = regexp2;
      int[] intArray0 = new int[1];
      intArray0[0] = (-719);
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      regexp1.op = regexp_Op0;
      regexp0.runes = intArray0;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      regexp0.max = (-719);
      regexp0.name = "`MnNjwg}U>4hSz5@J@~";
      Regexp regexp3 = Parser.parse("com.google.re2j.Parser$StringIterator", (-898));
      regexp3.equals(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp1.op = regexp_Op2;
      regexpArray0[1] = regexp3;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-898), (-898));
      regexp1.runes = intArray0;
      Parser.parse("D", (-1584));
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-1584), 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parser parser0 = new Parser("|", (-2330));
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("|", (-2330));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("|", 124);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("[:GW47M5", (-2330));
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp7);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 124, 1392);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Egyptian_Hieroglyphs";
      int int0 = 1503;
      Parser parser0 = new Parser("Egyptian_Hieroglyphs", 1503);
      int int1 = 1355;
      Parser.parse("Egyptian_Hieroglyphs", 1355);
      int int2 = 1504;
      try { 
        Parser.parse("2'3\u0003ww=nj[", 1504);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 8305;
      Parser.parse("ww%9GG~\f``J|", 8305);
      Parser.parse("ww%9GG~\f``J|", 8305);
      Parser parser0 = new Parser("ww%9GG~\f``J|", 150);
      String string0 = "66wGHp#R.W0 V9sQ~";
      Parser.parse("66wGHp#R.W0 V9sQ~", (-1290));
      Parser.parse("Any", 150);
      Parser.parse("ww%9GG~\f``J|", (-405));
      Parser.parse("ww%9GG~\f``J|", 8305);
      int int1 = (-1545);
      Parser.parse("ww%9GG~\f``J|", (-1545));
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, (-701), (-701));
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 139, 786431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      try { 
        Parser.parse("(?(7XGm{", 127984);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p^alpha:]", 208);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "0-s^0";
      Parser parser0 = new Parser("0-s^0", 1237);
      Parser.parse("0-s^0", 4251);
      try { 
        Parser.parse("BXQXL01(l?[^}-G", 1237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `}-G`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3805;
      Regexp regexp0 = Parser.parse("PPPFF}]", 3805);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int1 = 975;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      String string0 = "(?s:.)";
      Regexp regexp4 = Parser.parse("(?s:.)", 878);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("(?s:.)", 1888);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("regexp/syntax: internal error", 1888);
      Regexp regexp8 = new Regexp(regexp7);
      regexpArray0[7] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-4431), 1805);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "invalid nested repetition operator";
      int int0 = 7677;
      Parser parser0 = new Parser("invalid nested repetition operator", 7677);
      try { 
        Parser.parse("(?i:", 7677);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp regexp0 = Parser.parse("tgU3|q*'|kB}0", 105);
      Parser parser0 = new Parser("l7$'", 105);
      Regexp regexp1 = Parser.parse("l7$'", 105);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-778);
      intArray0[1] = (-1659);
      intArray0[2] = (-3616);
      intArray0[3] = 91;
      intArray0[4] = (-432);
      intArray0[5] = 66;
      intArray0[6] = 41;
      intArray0[7] = 3086;
      regexp0.runes = intArray0;
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      String string0 = "}*itQ]G:Rd0k\\b/l";
      Regexp regexp3 = Parser.parse("}*itQ]G:Rd0k\b/l", (-40));
      regexpArray0[3] = regexp3;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1505, 1726);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-547);
      try { 
        Parser.parse("(?-m", (-547));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "HB}UW\\wXtt1EM5i_ TP";
      int int0 = 115;
      Parser parser0 = new Parser("HB}UWwXtt1EM5i_ TP", 115);
      Parser.parse("SsM", 863);
      Parser.parse("(?-m:$)", 117);
      Parser.parse("HB}UWwXtt1EM5i_ TP", 115);
      Parser.parse("HB}UWwXtt1EM5i_ TP", 115);
      Parser.parse("VW|)", 115);
      Parser.parse("HB}UWwXtt1EM5i_ TP", 42);
      int int1 = 42;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1125;
      Parser.parse("2/=FZuy:Z%ekz7N?D", 1125);
      int int1 = 2;
      Parser parser0 = new Parser("Osmanya", 2);
      String string0 = "";
      Parser.parse("", 1125);
      Parser.parse("White_Space", 1125);
      String string1 = "b)h `$^ P7";
      try { 
        Parser.parse("b)h `$^ P7", 4229);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Parser parser0 = new Parser("`,lTfI+", 8412);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("PCh59sQ$kZFIy.D\"S6", 8412);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("`,lTfI+", 127);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("invalid escape sequence", 1417);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op2 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp7 = new Regexp(regexp_Op2);
      regexpArray0[6] = regexp7;
      Regexp.Op regexp_Op3 = Regexp.Op.STAR;
      Regexp regexp8 = new Regexp(regexp_Op3);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = Parser.parse(" -OFJc'-1au;H&", 127);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 755, (-2166));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 37;
      Regexp regexp0 = Parser.parse("x", 37);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertEquals(0, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp[] regexpArray0 = null;
      int int0 = 112;
      Regexp[] regexpArray1 = Parser.subarray((Regexp[]) null, 112, 112);
      int int1 = 8049;
      Parser.subarray(regexpArray1, 8049, 8049);
      String string0 = "xr";
      Parser.parse("xr", 112);
      String string1 = ")f<]^l`I";
      Parser parser0 = new Parser(")f<]^l`I", 8049);
      Parser.parse("(?:)", 8049);
      Parser.parse(")f<]^l`I", 55);
      String string2 = ";'IDR?r";
      Parser.parse(";'IDR?r", 8049);
      Parser.parse("xr", 18);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      int int0 = 11493;
      Regexp regexp2 = Parser.parse("x{", 11493);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[1] = regexp3;
      String string0 = "[:^graph:]";
      Regexp regexp4 = Parser.parse(string0, int0);
      assertFalse(regexp4.equals((Object)regexp3));
      
      regexpArray0[2] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp5;
      int int1 = 12;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int1, int1);
      assertEquals(0, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Parser.subarray((Regexp[]) null, (-2379), (-2379));
      Parser.parse("[V]^", 66463);
      Parser.parse("[V]^", 1114111);
      Parser parser0 = new Parser("[V]^", (-2379));
      Parser.parse("[V]^", (-203));
      Parser.parse("[V]^", 17);
      Parser.parse("pcQ|B", 66463);
      Parser.parse("[V]^", (-2379));
      Parser.parse("[V]^", 66463);
      Parser.parse("", (-2379));
      Parser.parse("", 4266);
      Parser.parse("invalid or unsupported Perl syntax", (-4349));
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 17, 4266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1024;
      Regexp regexp0 = Parser.parse("K^}|KC45e", 1024);
      Regexp regexp1 = Parser.parse("com.google.re2j.Parser$1", 124);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[3] = regexp2;
      regexp2.max = 123;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 123, 95);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Parser parser0 = new Parser("[^x00-x{10FFFF}]", 1260);
      Parser.parse("[^x00-x{10FFFF}]", (-111));
      int int0 = (-183);
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", (-183));
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      regexp0.op = regexp_Op0;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      regexp0.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexp0.toString();
      regexpArray0[1] = regexp0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-183);
      intArray0[1] = 1260;
      intArray0[2] = 1260;
      intArray0[3] = (-183);
      intArray0[4] = (-183);
      intArray0[5] = 1260;
      intArray0[6] = 1260;
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1938, 873);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1688;
      Parser parser0 = new Parser("[::]", 1688);
      int int1 = 98;
      Parser.parse("[::]", 98);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("[::]", (-431));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("[::]", (-431));
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.name = "[::]";
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      try { 
        Parser.parse("(?P<", (-431));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "8H B6fS|EZ#7R(e|L";
      int int0 = (-2507);
      try { 
        Parser.parse("8H B6fS|EZ#7R(e|L", (-2507));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `8H B6fS|EZ#7R(e|L`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("w", (-1547));
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("w", 6104);
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      Regexp regexp6 = new Regexp(regexp_Op2);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 6104, 14);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      int int0 = 2056;
      Regexp regexp1 = Parser.parse("{", 2056);
      regexpArray0[1] = regexp1;
      try { 
        Parser.parse("=kI[\"VT:R@}.ev!", 2056);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[\"VT:R@}.ev!`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A", 3676);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3676, 2900);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Parser parser0 = new Parser("Van7M/P8I", 4157);
      Parser.parse("~&%'n+&R|V?1s", 4212);
      int int0 = (-1844);
      Parser.parse("Van7M/P8I", (-1844));
      Parser.parse("Van7M/P8I", 4157);
      Parser.parse("Bengali", 3302);
      Parser.parse("P", 4157);
      Regexp[] regexpArray0 = new Regexp[0];
      int int1 = (-1140);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "n";
      int int0 = 465;
      Parser parser0 = new Parser("n", 465);
      int int1 = 65121;
      Parser.parse("n", 65121);
      Parser.parse("n", 465);
      String string1 = "G9nYAPrK*";
      Regexp regexp0 = Parser.parse("G9nYAPrK*", 465);
      Parser.parse("cQLZx", 11);
      Regexp regexp1 = Parser.parse("pppp", 11);
      Regexp regexp2 = Parser.parse("G9nYAPrK*", 11);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp2;
      int int2 = 66;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1715, 66);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("invalid character class range", (-404));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("c]dZ#>*,2(a)WT|W", 3134);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("c]dZ#>*,2(a)WT|W", 92);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp7 = new Regexp(regexp_Op2);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp0);
      int[] intArray0 = new int[1];
      intArray0[0] = 92;
      regexp3.runes = intArray0;
      regexpArray0[7] = regexp8;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-3511), (-404));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 90);
      Parser.parse("Any", 1);
      Parser.parse("\t", 1);
      Parser parser0 = new Parser("p::]", 90);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 10712, 117);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-996);
      Parser parser0 = new Parser("Inscriptional_Parthian", (-996));
      Parser.parse("|jJN<", 65097);
      Parser.parse("Mn", (-996));
      Parser.parse("Inscriptional_Parthian", (-996));
      Parser.parse("Inscriptional_Parthian", 123);
      Parser.parse("Inscriptional_Parthian", (-996));
      int int1 = 2031;
      Parser.parse("Yy8|^GzzAFbOEn8$", 2031);
      Regexp[] regexpArray0 = null;
      Regexp[] regexpArray1 = Parser.subarray((Regexp[]) null, (-996), (-996));
      Parser.subarray(regexpArray1, (-996), (-996));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-996));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "invalid nested repetition operator";
      int int0 = 7677;
      Parser parser0 = new Parser("invalid nested repetition operator", 7677);
      try { 
        Parser.parse("(?i:", 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 91;
      Parser.parse("Ow#g]j", 91);
      Regexp regexp0 = Parser.parse("Ye?x\"hV5|Bs]|", 0);
      String string0 = "\\b";
      Parser parser0 = new Parser(string0, int0);
      String string1 = "Wp'rb]l:(u}qXyv;";
      Parser.parse(string1, int0);
      String string2 = "Eq1[p!+Q<_-";
      int int1 = 2;
      Parser.parse(string2, int1);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp1;
      int int2 = 1215;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Parser parser0 = new Parser("Pph:]", 97);
      Parser.parse("Pph:]", (-2091));
      String string0 = "MaKO(SiN=-76";
      int int0 = (-1899);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `MaKO(SiN=-76`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Parser parser0 = new Parser("j", 46);
      Parser.parse("j", 5);
      Parser.parse("j", 46);
      String string0 = "0x";
      int int0 = 105;
      Parser.parse("0x", 105);
      Parser.parse("", (-505));
      Regexp regexp0 = Parser.parse(":p", 3133);
      regexp0.toString();
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp1 = Parser.parse("", 3133);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int1 = 27;
      Parser.subarray(regexpArray0, 27, 27);
      Parser.parse("[:]bN", 105);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-505), 3133);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "\\p\\pp";
      int int0 = 65528;
      Parser parser0 = new Parser("ppp", 65528);
      Parser.parse("ppp", 65528);
      String string1 = "J/>@}AI.@7I_9JjX";
      int int1 = (-2971);
      Parser.parse(string1, int1);
      int int2 = (-859);
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "WU[\"}l':O-C2D";
      int int0 = 64288;
      try { 
        Parser.parse("WU[\"}l':O-C2D", 64288);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `O-C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "Wl`GE2cEY\\2Z";
      int int0 = (-976);
      Parser.parse("Wl`GE2cEY\u0002Z", (-976));
      Regexp[] regexpArray0 = null;
      int int1 = (-3089);
      Parser.subarray(regexpArray0, int1, int1);
      int int2 = 16;
      Parser parser0 = new Parser(string0, int2);
      String string1 = "lp";
      Parser.parse(string1, int2);
      int int3 = (-159);
      try { 
        Parser.parse(string0, int3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "jXsE'gH0uQSrF[]bN";
      int int0 = (-568);
      try { 
        Parser.parse("jXsE'gH0uQSrF[]bN", (-568));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]bN`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "\\x";
      int int0 = (-1895);
      Parser parser0 = new Parser("x", (-1895));
      try { 
        Parser.parse("%8^lzf'[", (-1895));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 1;
      Regexp regexp0 = Parser.parse("Han", 1);
      regexp0.name = "tk#q";
      Regexp regexp1 = Parser.parse("EpK", 1);
      Parser parser0 = new Parser("Han", 80);
      regexp1.max = 62;
      Parser.parse("invalid character class", 80);
      Parser.parse(".[hsU]Ga\"_>>GL\r", 80);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexp1.max = 80;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp1.op = regexp_Op0;
      regexpArray0[5] = regexp0;
      regexp1.name = "tk#q";
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2714, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 57;
      Parser.parse("!~c_r/rv,u#sPv.\"", 57);
      int int1 = 55;
      Parser parser0 = new Parser("!~c_r/rv,u#sPv.\"", 55);
      try { 
        Parser.parse("YUB;&p#kde{+7y`gqQ", (-775));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 2610;
      int[] intArray0 = new int[1];
      intArray0[0] = 2610;
      regexp0.runes = intArray0;
      regexp0.max = 2610;
      regexp0.reinit();
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp0.min = 94;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.name = "invalid escape sequence";
      regexp1.subs = regexpArray0;
      regexpArray0[1] = regexp1;
      Parser.subarray(regexpArray0, (-2093), (-2093));
      String string0 = "";
      int int1 = (-5351);
      Parser parser0 = new Parser("", (-5351));
      Parser.parse("", 1544);
      Parser.parse("", 94);
      String string1 = "_(0hy|T5A&!cV}$KP0i";
      try { 
        Parser.parse("_(0hy|T5A&!cV}$KP0i", (-5351));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `_(0hy|T5A&!cV}$KP0i`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "\\d";
      Regexp regexp0 = Parser.parse("d", 4304);
      Regexp regexp1 = Parser.parse("d", 4304);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 4304, 4304);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 1, 4304);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      int int0 = 531;
      Regexp regexp0 = Parser.parse("w`AMH8n^ bNpt", 531);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.name = "G@eVkDa\"";
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      regexp2.min = (-2147);
      regexp1.max = 51;
      regexp2.reinit();
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 531, 531);
      Parser parser0 = new Parser("w`AMH8n^ bNpt", 531);
      String string0 = "\\p";
      Parser.parse("p", 531);
      Parser.parse("p", 531);
      Parser.parse("p", 708);
      int int1 = 46;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = null;
      int int0 = 692;
      Parser parser0 = new Parser((String) null, 692);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      String string1 = "[::]";
      Regexp regexp3 = Parser.parse("[::]", 692);
      regexpArray0[2] = regexp3;
      int int1 = 1776;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1776);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Parser parser0 = new Parser("[:h:]", 1145);
      Parser.parse("[:h:]", 256);
      Parser.parse("[:h:]", 1145);
      Parser.parse("[:^xdigit:]", 1145);
      Parser.parse("[:h:]", (-3147));
      Parser.parse("[:h:]", 2);
      String string0 = "QZGC,";
      Parser.parse("QZGC,", 1145);
      Parser.parse("[:h:]", 4250);
      try { 
        Parser.parse("*_Tk", 1145);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Parser parser0 = new Parser("P;!kk=>CZ<wrA", (-1976));
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("(zy)w\"gc7hyw", 156);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp4);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op2 = Regexp.Op.END_TEXT;
      Regexp regexp7 = new Regexp(regexp_Op2);
      regexpArray0[6] = regexp7;
      Regexp.Op regexp_Op3 = Regexp.Op.STAR;
      Regexp regexp8 = new Regexp(regexp_Op3);
      Regexp regexp9 = new Regexp(regexp8);
      regexpArray0[7] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 9674, 156);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 849;
      Parser.parse("WL<yq%nbPjsf", 849);
      String string0 = "xYefv43,vo";
      int int1 = 917504;
      Parser parser0 = new Parser(string0, int1);
      String string1 = "MgL^~N_8'#'Q|";
      Parser.parse(string1, int0);
      String string2 = "q8b*g4dkH8(Cal";
      try { 
        Parser.parse(string2, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `q8b*g4dkH8(Cal`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("#G!^Wft0k3o>o.9XF`", 69631);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("#G!^Wft0k3o>o.9XF`", 1672);
      regexpArray0[6] = regexp6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 69631, 1672);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", (-1067));
      regexp0.min = (-1067);
      Regexp regexp1 = Parser.parse("^x00-x{10FFFF}", (-1067));
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1067), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "Sinhala";
      int int0 = 30;
      Parser.parse("Sinhala", 30);
      Parser.parse("Sinhala", 30);
      Parser.parse("Sinhala", 30);
      String string1 = "\\PP^graph:]";
      Parser parser0 = new Parser("PP^graph:]", 30);
      Parser.parse("[::", 2423);
      Parser.parse("Sinhala", (-2412));
      Parser.parse("PP^graph:]", 1900);
      int int1 = 5;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 78;
      Parser parser0 = new Parser("P", 78);
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "\\C";
      Regexp regexp0 = Parser.parse("C", 841);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse(string0, int0);
      regexpArray0[3] = regexp3;
      int int1 = (-852);
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 109;
      try { 
        Parser.parse("[:", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Parser parser0 = new Parser("s&rh c%p:>?27MIe5^o", (-390));
      Parser.parse("s&rh c%p:>?27MIe5^o", (-1031));
      Parser.parse("C", (-1325));
      Parser.parse("Lo", 448);
      Parser.parse("s&rh c%p:>?27MIe5^o", (-797));
      Parser.parse(" $^5LI7IK", 4121);
      Parser.parse("s&rh c%p:>?27MIe5^o", 2096);
      Parser.parse("s&rh c%p:>?27MIe5^o", 8);
      Parser.parse("s&rh c%p:>?27MIe5^o", (-26));
      Regexp[] regexpArray0 = new Regexp[0];
      int int0 = 1812;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1812, 1542);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = "\\pP^graph:]";
      int int0 = 124;
      Parser parser0 = new Parser("pP^graph:]", 124);
      Regexp regexp0 = Parser.parse("pP^graph:]", 124);
      int int1 = 6;
      Parser.parse(string0, int1);
      String string1 = "";
      Parser.parse(string1, int0);
      Regexp regexp1 = Parser.parse(string1, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Parser parser0 = new Parser("", (-457));
      Parser.parse("", 8072);
      Parser.parse("[:raph:]", 2);
      Regexp regexp0 = Parser.parse("^g", 2330);
      Regexp regexp1 = Parser.parse("", 715);
      Parser.parse("Ugaritic", (-457));
      Regexp regexp2 = Parser.parse("5b4GAQ]w{_}l^", 55296);
      Regexp regexp3 = Parser.parse("[:ph:]", 55296);
      Regexp regexp4 = Parser.parse("^g", 715);
      assertTrue(regexp4.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp5;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexp1.subs = regexpArray0;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp4;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 55, 55);
      assertEquals(0, regexpArray1.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:^graph:]", 7890);
      Parser parser0 = new Parser("[:^graph:]", 1054);
      Parser.parse("[:^graph:]", (-4147));
      Parser.parse("invalid repeat count", 7890);
      Parser.parse("[:^graph:]", 7890);
      Parser.parse("[:^graph:]", 8);
      Parser.parse("L<~>j<*", 7890);
      Parser.parse("[:^graph:]", 381);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-4147), 381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "invalid nested repetition operator";
      int int0 = 345;
      Regexp regexp0 = Parser.parse("invalid nested repetition operator", 345);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1561), 345);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("", 0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("com.google.re2j.Parser$Stack", 0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("com.google.re2j.Parser$Stack", 0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("com.google.re2j.Parser$Stack", 0);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("", (-3223));
      regexpArray0[7] = regexp7;
      Regexp.Op regexp_Op3 = Regexp.Op.LITERAL;
      Regexp regexp8 = new Regexp(regexp_Op3);
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, (-3223));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      String string0 = "Z +UnR`_}JPe\\j";
      Regexp regexp0 = Parser.parse("Z +UnR`_}JPej", 0);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      String string1 = "!29#*dS(!L}&";
      int int0 = 43;
      regexp1.subs = regexpArray0;
      Regexp regexp2 = Parser.parse(string1, int0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexpArray0[0]);
      regexpArray0[5] = regexp5;
      int int1 = 4968;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `!29#*dS(!L}&`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexpArray0[0] = regexp1;
      String string0 = "~,1Lnh?v(`Z1G~T1P!0";
      try { 
        Parser.parse("~,1Lnh?v(`Z1G~T1P!0", 7149);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `~,1Lnh?v(`Z1G~T1P!0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Parser parser0 = new Parser("Pattern_White_Space", 112);
      Parser.parse("Pattern_White_Space", 428);
      Parser.parse("Pattern_White_Space", (-1442));
      Parser.parse("Pattern_White_Space", 112);
      Parser.parse("Pattern_White_Space", 112);
      Parser.parse("missing closing )", 69807);
      Parser.parse("[:x00-x{10FFFF}]", 112);
      Parser.parse("A?Z,Snd&{8\"9hoBB.|", 4208);
      Parser.parse("Thai", 112);
      Parser.parse("a`}M2{", 55);
      Parser.parse("<3OK<YfMQf;Qk", (-2820));
      Parser.parse("Pattern_White_Space", (-2820));
      Parser.parse("<3OK<YfMQf;Qk", 0);
      Parser.parse("", (-2820));
      Parser.parse("Pph:]", (-4745));
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = (-220);
      try { 
        Parser.parse(":+|z6$n)r!Xwa0`", (-220));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = "\\p:r:]";
      int int0 = 2437;
      Regexp regexp0 = Parser.parse("p:r:]", 2437);
      regexpArray0[0] = regexp0;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      String string0 = "WOe2JhLQ'<\\{@)";
      int int0 = (-1437733547);
      Parser parser0 = new Parser("WOe2JhLQ'<{@)", (-1437733547));
      try { 
        Parser.parse("WOe2JhLQ'<{@)", (-1437733547));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Parser parser0 = new Parser("P7u$7h", 62);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("P7u$7h", (-3437));
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("P7u$7h", 62);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("P7u$7h", 45);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("P7u$7h", 52);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-23), 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Regexp[] regexpArray0 = null;
      int int0 = (-802);
      int int1 = 8;
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, (-802), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = "`l&MfWY_{k:-";
      Parser parser0 = new Parser("`l&MfWY_{k:-", 2256);
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("w{=862y5/+usp|w<", 2256);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexp1.max = 98;
      Regexp regexp2 = Parser.parse("`l&MfWY_{k:-", 5);
      regexpArray0[1] = regexp2;
      int int0 = 12977;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 5, 12977);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = "%0eg *h\\7wZ);_@_GS";
      int int0 = 63;
      Parser parser0 = new Parser("%0eg *h\u0007wZ);_@_GS", 63);
      Parser.parse("qtiJdE1D4}B3{Jfu83", 63);
      try { 
        Parser.parse("%0eg *h\u0007wZ);_@_GS", 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
