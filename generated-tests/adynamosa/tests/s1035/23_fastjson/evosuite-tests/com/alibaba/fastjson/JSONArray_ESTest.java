/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 08:48:32 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.Predicate;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<ParameterizedTypeImpl, Integer> concurrentHashMap0 = new ConcurrentHashMap<ParameterizedTypeImpl, Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll(924, (Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray3.getJSONObject(795);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(1, (Collection<?>) jSONArray0);
      jSONArray0.spliterator();
      jSONArray3.getShortValue(268);
      jSONArray4.getBigInteger(120);
      jSONArray1.getDate(795);
      jSONArray4.getBigInteger(255);
      jSONArray3.isEmpty();
      jSONArray3.getByteValue(255);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = mock(ParameterizedTypeImpl.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(parameterizedTypeImpl0).getRawType();
      concurrentHashMap0.put(parameterizedTypeImpl0, (Integer) 795);
      jSONArray1.getFloat(2280);
      jSONArray4.clone();
      jSONArray4.retainAll(jSONArray2);
      jSONArray0.get((byte)0);
      assertEquals(3700, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) jSONArray1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-8);
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.IgnoreAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.InitStringFieldAsEmpty;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InitStringFieldAsEmpty;
      featureArray0[3] = feature3;
      JSON.parse(byteArray0, featureArray0);
      jSONArray2.getJSONArray(0);
      int int0 = jSONArray2.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-100);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.set(4445, (Object) null);
      jSONArray0.getObject(4445, (Type) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      LinkedList<Field> linkedList0 = new LinkedList<Field>();
      jSONArray0.containsAll(linkedList0);
      linkedList0.pollFirst();
      jSONArray0.getFloatValue(2561);
      jSONArray0.toArray();
      Float float0 = new Float((float) 795);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      jSONArray1.getDoubleValue((byte)0);
      linkedList0.add((Field) null);
      jSONArray1.getLong(0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, float0);
      jSONArray2.getShortValue(2970);
      jSONArray0.getShortValue(795);
      jSONArray1.clone();
      JSONArray jSONArray3 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.retainAll(jSONArray2);
      assertEquals(8892, jSONArray1.size());
      assertEquals(8892, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      ConcurrentHashMap<ParameterizedTypeImpl, Integer> concurrentHashMap0 = new ConcurrentHashMap<ParameterizedTypeImpl, Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, concurrentHashMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(924, (Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray2.getJSONObject(795);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSONArray0.getJSONObject(1);
      jSONArray0.getJSONArray(1);
      Class<Annotation> class0 = Annotation.class;
      jSONArray1.toJavaList(class0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      ConcurrentHashMap<ParameterizedTypeImpl, Integer> concurrentHashMap0 = new ConcurrentHashMap<ParameterizedTypeImpl, Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, concurrentHashMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(924, (Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray2.getJSONObject(795);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSONArray2.getShortValue(268);
      jSONArray3.getBigInteger(120);
      Class<Field> class0 = Field.class;
      jSONArray2.getObject(120, class0);
      jSONArray1.getDate(795);
      Class<InputStream> class1 = InputStream.class;
      jSONArray1.toJavaList(class1);
      JSONArray jSONArray4 = jSONArray1.fluentClear();
      jSONArray4.getRelatedArray();
      JSON.parseArray("");
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(886);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 886, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      ConcurrentHashMap<ParameterizedTypeImpl, Integer> concurrentHashMap0 = new ConcurrentHashMap<ParameterizedTypeImpl, Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, concurrentHashMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(924, (Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray2.getJSONObject(795);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSONArray2.add(1, (Object) fileSystemHandling0);
      jSONArray2.getShortValue(0);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray4 = jSONArray2.fluentRemoveAll(linkedHashSet0);
      jSONArray4.getBigInteger((short)0);
      Class<Field> class0 = Field.class;
      jSONArray1.getObject(2213, class0);
      jSONArray1.getDate(795);
      // Undeclared exception!
      try { 
        jSONArray3.getBigInteger((-1900));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray1 = jSONArray0.fluentSet(795, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray3.getJSONArray(795);
      jSONArray0.getJSONObject(1);
      jSONArray3.getBoolean(795);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray0.getRelatedArray();
      jSONArray0.getBigDecimal(1);
      jSONArray0.getByteValue(847);
      jSONArray3.getBooleanValue(1);
      jSONArray0.getFloatValue(47);
      JSONArray jSONArray4 = jSONArray3.fluentAdd(795, (Object) null);
      jSONArray4.getTimestamp(57);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      linkedList0.add((InputStream) null);
      JSONArray jSONArray5 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray2.addAll(1821, (Collection<?>) jSONArray5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1821, Size: 1593
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = new JSONArray();
      Integer integer0 = new Integer(0);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray0.isEmpty();
      jSONArray1.fluentRetainAll(jSONArray0);
      int int0 = 102;
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 963;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2415);
      JSONArray jSONArray1 = new JSONArray(1);
      Integer integer0 = new Integer(0);
      jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray0.isEmpty();
      jSONArray1.fluentRetainAll(jSONArray0);
      String[] stringArray0 = new String[0];
      jSONArray1.toArray(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(795, (Object) null);
      JSONArray jSONArray2 = new JSONArray(795);
      Class<Field> class0 = Field.class;
      jSONArray2.toJavaList(class0);
      jSONArray0.containsAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray3.getBoolean(795);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.contains((Object) null);
      jSONArray3.getInteger(1);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) null);
      jSONArray4.getJSONArray(113);
      jSONArray0.getDate(1);
      jSONArray2.addAll(1219, (Collection<?>) jSONArray3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)54;
      jSONArray4.set(1, jSONArray1);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jSONArray4.getTimestamp(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [null,{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachKey((long) 1, (Consumer<? super String>) consumer1);
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      jSONArray0.equals((Object) null);
      JSONArray jSONArray1 = new JSONArray((byte)110);
      Class<Field> class0 = Field.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.containsAll(jSONArray1);
      jSONArray0.getFloatValue(4471);
      jSONArray0.toArray();
      Float float0 = new Float((float) (byte)110);
      jSONArray0.getJSONObject((byte)110);
      assertEquals(4472, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      ConcurrentHashMap<JSONArray, String> concurrentHashMap0 = new ConcurrentHashMap<JSONArray, String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(920, concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      jSONArray1.fluentAddAll(920, (Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(920);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : unicode-1-1-utf-8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachKey((long) 1, (Consumer<? super String>) consumer1);
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      Class<SerializerFeature> class0 = SerializerFeature.class;
      List<SerializerFeature> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((int) (byte)110, (Collection<?>) list0);
      jSONArray0.getShortValue((byte)110);
      MockDate mockDate0 = new MockDate(56320, 904, (-1789), 795, 56320, 1);
      jSONArray1.fluentRemove(0);
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = new JSONArray(67);
      jSONArray2.fluentRemoveAll(list0);
      assertEquals(8943, jSONArray0.size());
      assertTrue(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 2430;
      JSONArray jSONArray0 = new JSONArray(2430);
      Object object0 = JSON.toJSON((Object) jSONArray0);
      Integer integer0 = new Integer(0);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, object0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(0);
      jSONArray2.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRetainAll(jSONArray2);
      EvoSuiteFile evoSuiteFile0 = null;
      jSONArray1.set(1, jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 795, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      concurrentHashMap0.values();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachKey((long) 1, (Consumer<? super String>) consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      jSONArray0.getObject(4471, (Type) null);
      Class<Field> class0 = Field.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) class0);
      jSONArray1.getDoubleValue((byte)110);
      jSONArray0.getBooleanValue((byte)110);
      jSONArray1.getString(795);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-5102), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -5102
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2439, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(924, (Collection<?>) jSONArray2);
      Class<Object> class0 = Object.class;
      jSONArray3.toJavaList(class0);
      jSONArray2.getIntValue(1);
      jSONArray1.getShortValue(1);
      jSONArray0.getJSONObject(841);
      Object object0 = new Object();
      jSONArray3.getInteger(795);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      jSONArray3.indexOf(linkedList0);
      jSONArray1.getFloatValue(0);
      long long0 = jSONArray1.getLongValue(2439);
      assertEquals(4880, jSONArray1.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachKey((long) 1, (Consumer<? super String>) consumer1);
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      Type type0 = null;
      jSONArray0.getObject(4471, (Type) null);
      jSONArray0.getBigDecimal(1324);
      jSONArray0.getByteValue(912);
      jSONArray0.add(912, (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.retainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(912);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 912, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sub");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      int int0 = 924;
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray0.getJSONObject(1);
      jSONArray3.getBoolean(795);
      jSONArray0.contains((Object) null);
      jSONArray0.getRelatedArray();
      jSONArray0.getByte(1);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) null);
      jSONArray4.getJSONArray(113);
      jSONArray0.getByteValue(795);
      jSONArray0.add((int) (byte)0, (Object) jSONArray4);
      // Undeclared exception!
      try { 
        jSONArray1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sub");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray3.getBoolean(795);
      jSONArray0.contains((Object) null);
      jSONArray0.getByte(1);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) null);
      jSONArray4.getJSONArray(113);
      jSONArray0.getDate(1);
      jSONArray2.addAll(1219, (Collection<?>) jSONArray3);
      jSONArray4.getTimestamp(58);
      assertEquals(3702, jSONArray4.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sub");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray0.getJSONObject(1);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      JSON.toJSONBytes((Object) serializerFeature0, serializeConfig0, serializeFilterArray0, 11, serializerFeatureArray0);
      jSONArray3.getBoolean(795);
      jSONArray0.contains((Object) null);
      jSONArray0.getRelatedArray();
      jSONArray0.getByte(1);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) null);
      jSONArray4.getJSONArray(113);
      Class<Field> class1 = Field.class;
      jSONArray0.getObject(795, class1);
      jSONArray0.getDate(1);
      // Undeclared exception!
      try { 
        jSONArray4.addAll(1, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      Integer integer0 = new Integer(0);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray0.isEmpty();
      jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.set(102, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray2.getBigDecimal(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b.a8");
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2439, (Object) null);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray4 = jSONArray1.fluentAddAll(924, (Collection<?>) jSONArray2);
      jSONArray3.getShortValue(1);
      jSONArray2.getBigInteger(1);
      jSONArray4.getInteger(2439);
      JSONArray jSONArray5 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray5.getDate((short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sub");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray0.getJSONObject(1);
      jSONArray3.getBoolean(795);
      jSONArray0.contains((Object) null);
      jSONArray0.getRelatedArray();
      jSONArray0.getByte(1);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) null);
      jSONArray4.getJSONArray(113);
      Class<Field> class0 = Field.class;
      jSONArray0.getObject(795, class0);
      jSONArray0.getDate(1);
      jSONArray2.addAll(1219, (Collection<?>) jSONArray3);
      assertEquals(3702, jSONArray3.size());
      assertEquals(3702, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer(1);
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)JSON.toJavaObject((JSON) jSONArray0, class0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(290, (Object) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SerializeConfig serializeConfig0 = new SerializeConfig(1, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      jSONArray2.fluentRemoveAll(linkedList1);
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[4] = serializerFeature3;
      JSON.toJSON((Object) serializerFeature2);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONArray1.set(0, linkedList2);
      jSONArray1.getBigDecimal(1);
      jSONArray2.listIterator();
      jSONArray0.addAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getByteValue((-1481));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<ParameterizedTypeImpl, Integer> concurrentHashMap0 = new ConcurrentHashMap<ParameterizedTypeImpl, Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, concurrentHashMap0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentAddAll(924, (Collection<?>) jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray3.getJSONObject(795);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(1, (Collection<?>) jSONArray0);
      jSONArray3.getShortValue(268);
      jSONArray4.getBigInteger(120);
      jSONArray1.getDate(795);
      jSONArray4.getBigInteger(255);
      jSONArray3.isEmpty();
      jSONArray3.getByteValue(255);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getFloat(905);
      JSONArray jSONArray5 = (JSONArray)jSONArray0.clone();
      jSONArray5.remove(1);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray2.addAll((Collection<?>) linkedList0);
      assertEquals(3700, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachKey((long) 1, (Consumer<? super String>) consumer1);
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      jSONArray0.getObject(4471, (Type) null);
      jSONArray0.getString(0);
      Class<Field> class0 = Field.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      List<Field> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.containsAll(list0);
      jSONArray0.getFloatValue(301);
      jSONArray0.toArray();
      jSONArray0.getFloat(0);
      assertEquals(4472, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer(1);
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)JSON.toJavaObject((JSON) jSONArray0, class0);
      jSONArray0.fluentSet(290, (Object) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SerializeConfig serializeConfig0 = new SerializeConfig(1, true);
      JSONArray jSONArray2 = jSONArray0.fluentSet(1, integer0);
      jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray0.isEmpty();
      jSONArray2.getLong(1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1506, (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1506, Size: 291
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      jSONArray1.fluentSet(1, serializerFeature0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(414);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 414, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValuesToLong(0L, toLongFunction0, 1, longBinaryOperator0);
      ParserConfig.getFieldFromCache("b#bd)K^-D7", concurrentHashMap0);
      int int0 = (-1);
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      jSONArray0.set((-1), serializerFeature0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-860), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullStringAsEmpty;
      jSONArray1.fluentSet(1, serializerFeature0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(414);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 414, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachKey((long) 1, (Consumer<? super String>) consumer1);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      jSONArray0.set(4471, concurrentHashMap0);
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray1 = JSON.toJavaObject((JSON) jSONArray0, class0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(4471, jSONArray1);
      // Undeclared exception!
      jSONArray2.getLong(4471);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "";
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((long) 795, (Consumer<? super Field>) consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      Object object0 = new Object();
      jSONArray0.set(4471, object0);
      jSONArray0.set(1, object0);
      jSONArray0.getJSONObject(1);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(4471);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.Object@5f31ee66
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeys((-8109300701639721088L), biFunction0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((long) 795, (Consumer<? super Field>) consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      Object object0 = new Object();
      jSONArray0.set(4471, object0);
      int int0 = 1;
      jSONArray0.set(1, object0);
      jSONArray0.getJSONObject(1);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.Object@3bd6bd55
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4471;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((long) 795, (Consumer<? super Field>) consumer0);
      Object object0 = new Object();
      jSONArray0.set(4471, object0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "()W$%dNt!g";
      stringArray0[6] = "";
      stringArray0[8] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(4471);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.Object@4e22ad3b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      Integer integer0 = new Integer(0);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = new JSONArray(1);
      jSONArray2.set(113, jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[]]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer(1);
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)JSON.toJavaObject((JSON) jSONArray0, class0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(290, (Object) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SerializeConfig serializeConfig0 = new SerializeConfig(1, true);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSON((Object) serializerFeature3);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      jSONArray1.set(0, linkedList2);
      jSONArray2.getObject(0, (Type) class0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(4738);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4738, Size: 291
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      Consumer<Field> consumer0 = (Consumer<Field>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.set(262, (Object) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray0.getBigDecimal(120);
      jSONArray1.listIterator();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4471;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.lastIndexOf((Object) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray1);
      jSONArray0.getJSONObject(1);
      jSONArray2.getBoolean(795);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray1.getBigDecimal(1000);
      jSONArray0.listIterator();
      JSONArray jSONArray3 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray3.getDate(795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 795, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentSet(934, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.getInteger(0);
      JSONArray jSONArray3 = jSONArray1.fluentRetainAll(jSONArray2);
      jSONArray0.getBooleanValue(934);
      jSONArray2.retainAll(jSONArray1);
      jSONArray3.getSqlDate(149);
      jSONArray3.indexOf((Object) null);
      jSONArray3.fluentRemove(1);
      assertEquals(934, jSONArray3.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((long) 795, (Consumer<? super Field>) consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      Object object0 = new Object();
      jSONArray0.set(4471, object0);
      int int0 = 1;
      jSONArray0.set(1, object0);
      jSONArray0.getJSONObject(1);
      jSONArray0.getRelatedArray();
      jSONArray0.fluentAdd((Object) "9S1``R`'j~%_");
      jSONArray0.getBigInteger(85);
      Class<Field> class0 = Field.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 4471;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((long) 795, (Consumer<? super Field>) consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      Object object0 = new Object();
      jSONArray0.set(4471, object0);
      Type type0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(4471);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((long) 795, (Consumer<? super Field>) consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      Object object0 = new Object();
      jSONArray0.set(4471, object0);
      jSONArray0.getObject(2670, (Type) null);
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      jSONArray1.getByte(489);
      assertEquals(925, jSONArray0.size());
      
      jSONArray1.getJSONArray(489);
      assertEquals(925, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray0.getJSONObject(1);
      jSONArray3.getBoolean(795);
      jSONArray0.contains((Object) null);
      jSONArray0.getRelatedArray();
      jSONArray2.getDoubleValue(113);
      jSONArray1.getDate(1);
      JSONArray jSONArray4 = jSONArray2.fluentRemove((Object) null);
      jSONArray4.getString(1);
      assertEquals(1849, jSONArray2.size());
      assertEquals(1849, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = (byte)39;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      Integer integer0 = new Integer(0);
      jSONArray0.toJSONString();
      jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) integer0);
      jSONArray2.set(113, jSONArray3);
      int int0 = 85;
      jSONArray2.getJSONObject(85);
      jSONArray0.getRelatedArray();
      jSONArray0.fluentAdd((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(113);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      Integer integer0 = new Integer(0);
      jSONArray1.toJSONString();
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONObject(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONArray cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), (Object) null);
      int int0 = 93;
      jSONArray0.getLong(1);
      Object object0 = new Object();
      jSONArray0.fluentRemove((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      // Undeclared exception!
      try { 
        jSONArray1.getObject((-1), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      JSONArray jSONArray1 = jSONArray0.fluentSet(4471, (Object) null);
      jSONArray1.getLong(4471);
      Object object0 = new Object();
      jSONArray0.fluentRemove((Object) null);
      jSONArray1.fluentRemove((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.getObject(258, (Type) class0);
      jSONArray0.getInteger(257);
      float float0 = jSONArray1.getFloatValue(1);
      assertEquals(4470, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      Consumer<Field> consumer0 = (Consumer<Field>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.set(262, (Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSONArray0.getDouble(0);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.toJavaList(class0);
      short short0 = jSONArray1.getShortValue(1);
      assertEquals(263, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer(121);
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(290, linkedList0);
      jSONArray0.getLong(93);
      Object object0 = new Object();
      jSONArray0.fluentRemove((Object) jSONArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)14;
      Feature[] featureArray0 = new Feature[8];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowArbitraryCommas;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.AllowComment;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowSingleQuotes;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.CustomMapDeserializer;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.IgnoreAutoType;
      featureArray0[7] = feature7;
      JSON.parse(byteArray0, featureArray0);
      jSONArray0.getObject(90, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(290);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      int int0 = 1553;
      jSONArray0.set(1553, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1553, (Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4453, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray0.getDouble(4453);
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.toJavaList(class0);
      assertEquals(4454, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ToIntBiFunction<Object, Field> toIntBiFunction0 = (ToIntBiFunction<Object, Field>) mock(ToIntBiFunction.class, new ViolatedAssumptionAnswer());
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceToInt((-3056L), toIntBiFunction0, 1, intBinaryOperator0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[2];
      jSONArray0.DEFAULT_TYPE_KEY = jSONArray0.DEFAULT_TYPE_KEY;
      stringArray0[1] = "1.2.46";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Z";
      stringArray1[1] = "1.2.46";
      stringArray1[2] = "1.2.46";
      stringArray1[3] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray1);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.getLongValue(1);
      jSONArray0.getString(0);
      jSONArray0.getBoolean(1);
      double double0 = jSONArray0.getDoubleValue(0);
      assertEquals(4472, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b.a8");
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2439, (Object) null);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OCJ1,PjKmO~KBasD3]4");
      jSONArray1.fluentAddAll(924, (Collection<?>) jSONArray2);
      jSONArray3.getShortValue(1);
      jSONArray3.getJSONObject(841);
      jSONArray3.getBoolean(4461);
      double double0 = jSONArray2.getDoubleValue(795);
      assertEquals(4880, jSONArray2.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Z";
      stringArray1[1] = "1.2.46";
      stringArray1[2] = "1.2.46";
      stringArray1[3] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray1);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.getJSONObject(337);
      jSONArray0.getRelatedArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.getBigInteger(1);
      Class<Field> class1 = Field.class;
      jSONArray0.getObject(2440, class1);
      jSONArray1.getDate(1);
      assertEquals(4473, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ToIntBiFunction<Object, Field> toIntBiFunction0 = (ToIntBiFunction<Object, Field>) mock(ToIntBiFunction.class, new ViolatedAssumptionAnswer());
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceToInt((-3056L), toIntBiFunction0, 1, intBinaryOperator0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Z";
      stringArray1[1] = "1.2.46";
      stringArray1[2] = "1.2.46";
      stringArray1[3] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray1);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.getLongValue(1);
      jSONArray0.getString(0);
      jSONArray0.getRelatedArray();
      jSONArray0.getBigInteger(4471);
      Class<Field> class1 = Field.class;
      jSONArray0.getObject(0, class1);
      assertEquals(4472, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      jSONArray0.getObject(4471, (Type) null);
      jSONArray0.getInteger(4471);
      float float0 = jSONArray0.getFloatValue(279);
      assertEquals(4472, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Field> consumer0 = (Consumer<Field>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((-1L), consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray1.set(0, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getObject(1, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer(1);
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)JSON.toJavaObject((JSON) jSONArray0, class0);
      jSONArray0.fluentSet(290, (Object) null);
      jSONArray1.getLong(93);
      Object object0 = new Object();
      jSONArray1.fluentRemove(object0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.toArray((ArrayList<JSONObject>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Z";
      stringArray1[1] = "1.2.46";
      stringArray1[2] = "1.2.46";
      stringArray1[3] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray1);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.getLongValue(1);
      jSONArray0.getString(0);
      jSONArray0.getRelatedArray();
      jSONArray0.getBigInteger(4471);
      assertEquals(4472, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONArray0.containsAll(linkedList0);
      Integer integer0 = new Integer(1);
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)JSON.toJavaObject((JSON) jSONArray0, class0);
      jSONArray0.fluentSet(290, (Object) null);
      jSONArray1.getLong(93);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentRemove(object0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSONArray2.getDouble(1);
      Class<JSONObject> class1 = JSONObject.class;
      jSONArray2.toJavaList(class1);
      assertEquals(291, jSONArray1.size());
      assertEquals(291, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentSet(934, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray0.getInteger(0);
      jSONArray1.getShort(183);
      jSONArray1.fluentRetainAll(jSONArray2);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray0.getBigDecimal(934);
      jSONArray2.listIterator();
      assertEquals(935, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(886);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(886, (Object) fileSystemHandling0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 886, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b.a8");
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(2439, (Object) null);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OCJ1,PjKmO~KBasD3]4");
      jSONArray1.fluentAddAll(924, (Collection<?>) jSONArray2);
      jSONArray3.getJSONObject(841);
      jSONArray3.getBoolean(4461);
      double double0 = jSONArray2.getDoubleValue(795);
      assertEquals(4880, jSONArray2.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray2.getLongValue(1);
      // Undeclared exception!
      try { 
        jSONArray1.getString(2676);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2676, Size: 925
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray1 = (JSONArray)JSON.toJavaObject((JSON) jSONArray0, class0);
      Integer integer0 = new Integer(1);
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      JSON.toJavaObject((JSON) jSONArray1, class2);
      jSONArray1.fluentSet(795, class1);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.getShort(1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jSONArray2.listIterator();
      assertEquals(796, jSONArray1.size());
      assertEquals(796, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      jSONArray0.getJSONObject(4471);
      jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 795, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-244), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -244, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      assertTrue(jSONArray1.isEmpty());
      
      Integer integer0 = new Integer(0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray1.isEmpty();
      jSONArray2.getString(0);
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      jSONArray1.getByte(489);
      jSONArray1.getBooleanValue(489);
      boolean boolean0 = jSONArray1.retainAll(jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<JSONArray> list0 = jSONArray0.toJavaList((Class<JSONArray>) null);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", concurrentHashMap0);
      // Undeclared exception!
      try { 
        jSONArray1.set((-422), list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue(0L, consumer0);
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      jSONArray0.getObject(4471, (Type) null);
      jSONArray0.getString(0);
      assertEquals(4472, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = jSONArray0.contains((Object) null);
      assertFalse(boolean0);
      
      jSONArray0.indexOf((Object) null);
      jSONArray0.getRelatedArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream(906);
      boolean boolean1 = jSONArray0.add((Object) pipedInputStream0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      jSONArray1.fluentRetainAll(jSONArray0);
      int int0 = (-207);
      jSONArray0.getInteger(0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(3073);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3073, Size: 925
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<JSONArray> list0 = jSONArray0.toJavaList((Class<JSONArray>) null);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(795, (Object) null);
      Integer integer0 = new Integer(1);
      jSONArray2.fluentSet(795, integer0);
      int int0 = 6568;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", treeMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.getObject(922, (Type) class0);
      assertEquals(4472, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      jSONArray1.getByte(489);
      byte byte0 = jSONArray0.getByteValue(911);
      assertEquals(925, jSONArray0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3708);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      JSONArray jSONArray2 = (JSONArray)JSON.toJavaObject((JSON) jSONArray1, class0);
      JSONArray jSONArray3 = jSONArray1.fluentSet(959, jSONArray2);
      jSONArray0.getShort(255);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jSONArray1.fluentRetainAll(jSONArray3);
      assertFalse(jSONArray2.isEmpty());
      assertEquals(960, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4474, (Object) null);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      jSONArray0.containsAll(linkedList0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parse("", featureArray0);
      jSONArray0.remove((Object) null);
      jSONArray0.remove(4431);
      jSONArray0.toArray();
      JSONArray[] jSONArrayArray0 = new JSONArray[5];
      jSONArrayArray0[0] = jSONArray0;
      jSONArrayArray0[1] = jSONArray0;
      jSONArrayArray0[2] = jSONArray0;
      jSONArrayArray0[3] = jSONArray0;
      jSONArrayArray0[4] = jSONArray0;
      jSONArray0.toArray(jSONArrayArray0);
      assertEquals(4473, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "1.2.46";
      stringArray0[7] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      jSONArray0.contains(list0);
      int int0 = jSONArray0.indexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1224736769);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "`{5mw9CP)7!-zdB|";
      stringArray0[2] = "1.2.46";
      stringArray0[4] = "KN,h>@X%abV~";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "1.2.46";
      stringArray0[7] = "1.2.46";
      stringArray0[8] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-4958), (Type) class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3047);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1981), pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(795);
      jSONArray0.fluentRetainAll(jSONArray1);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1141048066);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      linkedList0.add((InputStream) pushbackInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.addAll((-2479), (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2479, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.get((-1490));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.equals(fileSystemHandling0);
      SerializeConfig serializeConfig0 = null;
      try {
        serializeConfig0 = new SerializeConfig((-4188), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IdentityHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        JSON.parse("_j!x(EYbV_uYoZ K)8", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : _j!x(EYbV_uYoZ K)8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      Integer integer0 = new Integer(6);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-37), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -37, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, bigInteger0);
      jSONArray1.set(1, linkedHashSet0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray1.iterator();
      // Undeclared exception!
      try { 
        jSONArray1.removeIf((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-64));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      float float0 = new Integer((-1));
      // Undeclared exception!
      try { 
        jSONArray0.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1224736769);
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      jSONArray0.contains(integer0);
      int int0 = jSONArray0.indexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4447);
      Class<JSONObject> class0 = JSONObject.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-208), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -208, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      jSONArray0.set(4471, (Object) null);
      jSONArray0.getIntValue(1);
      jSONArray0.getString(0);
      assertEquals(4472, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(5169);
      Collection<Object> collection0 = jSONObject0.values();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(collection0);
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1171));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.toArray();
      assertTrue(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-200));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = JSON.VERSION;
      int int0 = 157;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(157, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 157, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      ConcurrentSkipListMap<String, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, String>();
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(48, class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-2513));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", concurrentSkipListMap0);
      jSONArray0.setRelatedArray((Object) null);
      jSONArray0.fluentSet(447, "");
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSON.parse("", parserConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(597);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 597, Size: 448
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1866;
      int int1 = 4432;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(4432);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4432, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-794));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "1.2.46";
      stringArray0[7] = "1.2.46";
      stringArray0[8] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.MapSortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      jSONArray0.clone();
      SerializerFeature serializerFeature5 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONString((Object) jSONArray0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.toArray(stringArray0);
      jSONArray0.remove((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(909);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 909, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((int) 39, (Type) class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)40;
      JSON.parse(byteArray0, (Feature[]) null);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.removeAll(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "");
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-383));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-3047));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-1880));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1880
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(927);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 927, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(2284, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2284, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(935);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 935, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) fileSystemHandling0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      JSON.toJSON((Object) jSONArray1, parserConfig0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.offerLast(jSONArray0);
      jSONArray0.retainAll(linkedList0);
      int int0 = (-686);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2229);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      linkedHashSet0.add(jSONArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        JSON.parse("*dB_>X_Go<J", 2229);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : *dB_>X_Go<J
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      int int0 = 9;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 795
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3708);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      Object object0 = JSON.toJavaObject((JSON) jSONArray1, class0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(959, object0);
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray3.toJavaList(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.DisableCircularReferenceDetect;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[7] = serializerFeature7;
      JSON.toJSONBytes((Object) jSONArray0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1, jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(1);
      JSONArray jSONArray4 = new JSONArray(jSONArray3);
      jSONArray4.add(1, (Object) jSONArray0);
      assertEquals(2, jSONArray1.size());
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1917);
      String string0 = null;
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        jSONArray0.subList(0, (-164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-164)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getString(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "|W$y}N6");
      JSON.toJSON((Object) jSONArray1);
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2139;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[6] = serializerFeature6;
      SerializerFeature serializerFeature7 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[7] = serializerFeature7;
      SerializerFeature serializerFeature8 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[8] = serializerFeature8;
      JSON.toJSONBytes((Object) "FY", serializeConfig0, serializerFeatureArray0);
      jSONArray0.equals("1.2.46");
      SerializerFeature[] serializerFeatureArray1 = new SerializerFeature[1];
      SerializerFeature serializerFeature9 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray1[0] = serializerFeature9;
      JSON.toJSONBytes((Object) jSONArray0, 344, serializerFeatureArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getString(2139);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2139, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 106;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.subList(795, (-139));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(795) > toIndex(-139)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 106;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-587));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(775, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-3719));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      String string0 = ":]2=Li ";
      Feature[] featureArray0 = new Feature[7];
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.UseObjectArray;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableSpecialKeyDetect;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseBigDecimal;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.SupportArrayToBean;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.SupportNonPublicField;
      featureArray0[6] = feature6;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 717, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "CzoDb=:P)Tt5c";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getIncludes();
      boolean boolean0 = jSONArray0.containsAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      Class<JSONArray> class0 = JSONArray.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("n]I4=9", concurrentSkipListMap0);
      int int0 = (-1);
      FieldInfo fieldInfo0 = new FieldInfo("1.2.46", class0, class0, parameterizedTypeImpl0, (Field) null, 8, 116, (-1));
      Class<String> class1 = String.class;
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getBeanClass();
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(2430);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2430, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      int int0 = 686;
      Integer integer0 = new Integer(686);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONArray0.getString(690);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 690, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-641);
      Integer integer0 = new Integer((-641));
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-641), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      BigInteger bigInteger0 = BigInteger.ZERO;
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 1);
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      jSONArray0.fluentAddAll(collection0);
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(795);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1487));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSON.parseArray((String) null);
      JSONArray jSONArray0 = new JSONArray(1);
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        JSON.parseObject("dfh+s&:(", (Type) null, (Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : dfh+s&:(
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1800));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      jSONArray2.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getShort((-1563));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.clone();
      jSONArray0.set(746, (Object) null);
      assertEquals(747, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3137;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-2393));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-2031));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(795);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      int int0 = jSONArray0.lastIndexOf(object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(1, 192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 192
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1017);
      jSONArray0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      long long0 = new Integer(1);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1180));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 2430;
      JSONArray jSONArray0 = new JSONArray(2430);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-11), (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.stream();
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(924, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1, (Collection<?>) jSONArray2);
      jSONArray0.getJSONObject(1);
      jSONArray3.getBoolean(795);
      // Undeclared exception!
      try { 
        jSONArray3.getDoubleValue(2626);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2626, Size: 1850
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-1655));
      jSONArray0.setRelatedArray(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-1655));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Integer integer0 = new Integer(1);
      jSONArray0.setComponentType(class1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 2430;
      JSONArray jSONArray0 = new JSONArray(2430);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(29, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 106, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object object0 = null;
      Class<JSONArray> class0 = JSONArray.class;
      JSON.parseArray("", class0);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType(class1);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      Charset.defaultCharset();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) null, 1, serializerFeatureArray0);
      jSONArray0.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray0.size();
      jSONArray0.retainAll(jSONArray1);
      jSONArray0.listIterator();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getInteger("0q66\u0001`");
      Class<Integer> class0 = Integer.class;
      Type type0 = FieldInfo.getFieldType(class0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.46", type0, parserConfig0, 1, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      assertTrue(jSONArray1.isEmpty());
      
      float float0 = new Integer(0);
      jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray1.isEmpty();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.setComponentType((Type) null);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2430);
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0);
      assertTrue(jSONArray1.isEmpty());
      
      Integer integer0 = new Integer(0);
      jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray1.isEmpty();
      jSONArray1.fluentRemove((Object) integer0);
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(329, jSONArray1);
      JSON.parseObject((String) null);
      jSONArray2.toJSONString();
      int int0 = (-3539);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(329);
      jSONArray0.set(329, jSONObject0);
      ParserConfig.getGlobalInstance();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.NonStringKeyAsString;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableSpecialKeyDetect;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreAutoType;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        jSONArray0.remove((-3564));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType((Type) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(580);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 580, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(902);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 198, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((Object) "1.2.46");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JSON.DEFAULT_GENERATE_FEATURE = 795;
      ParserConfig parserConfig0 = new ParserConfig();
      linkedHashSet0.spliterator();
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(1960);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1960, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "1.2.46";
      stringArray0[7] = "1.2.46";
      stringArray0[8] = "";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.MapSortField;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONString((Object) jSONArray0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      boolean boolean0 = jSONArray0.remove((Object) jSONArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      Class<Integer> class0 = Integer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 0, parserConfig0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentAdd(0, (Object) null);
      String string0 = "k";
      Class<Integer> class0 = Integer.class;
      String string1 = "0mn";
      Class<String> class1 = String.class;
      String string2 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 2430;
      JSONArray jSONArray0 = new JSONArray(2430);
      int int1 = 0;
      JSON.toJSON((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(2430);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2430, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      ParserConfig parserConfig0 = new ParserConfig(false);
      ParserConfig.global = parserConfig0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Class<String> class0 = String.class;
      parserConfig0.checkAutoType((String) null, (Class<?>) class0, (int) (byte) (-1));
      Feature[] featureArray0 = new Feature[0];
      JSON.parseObject((InputStream) byteArrayInputStream0, charset0, (Type) null, featureArray0);
      Class<Object> class1 = Object.class;
      jSONArray0.toJavaList(class1);
      int int0 = (-202);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-202));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3137;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3137);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3137, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JSON.parseObject("", class0);
      jSONArray0.add((Object) null);
      jSONArray0.clear();
      jSONArray0.getRelatedArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(114, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
