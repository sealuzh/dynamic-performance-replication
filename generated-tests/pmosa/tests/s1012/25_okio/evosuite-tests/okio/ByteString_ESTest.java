/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:08:28 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)7;
      byte byte0 = (byte)28;
      byteArray0[5] = (byte)28;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 4898);
      ByteString byteString1 = ByteString.encodeUtf8("");
      byteString1.EMPTY.indexOf(byteArray0, (int) (byte)28);
      byteString0.internalArray();
      byteString0.indexOf(byteString1);
      String string0 = "sP7.AIm^!OgPMk";
      Charset.defaultCharset();
      byteString0.EMPTY.base64();
      // Undeclared exception!
      try { 
        Charset.forName("p#n,VZsoxWkOk)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p#n,VZsoxWkOk)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64(":/.{,]Hh#roXaTbt(g$");
      assertNull(byteString1);
      
      int int0 = byteString0.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("]_fZgS6'4/L/jbl\bL", 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=76ffcd4af0]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteArray0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[text=\\r]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)97;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.utf8();
      int int0 = byteString0.lastIndexOf(byteString1, (-691));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)51;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte) (-88);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-88);
      byteArray1[7] = (byte) (-88);
      int int1 = byteString1.indexOf(byteArray1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.lastIndexOf(byteArray0, 65533);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-66);
      byteArray0[3] = (byte) (-66);
      byte byte2 = (byte) (-38);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1238));
      byteArrayInputStream0.skip(0L);
      ByteString byteString0 = ByteString.read(byteArrayInputStream0, (byte)0);
      ByteString byteString1 = byteString0.EMPTY.sha1();
      byteString1.lastIndexOf(byteArray0, 1556);
      // Undeclared exception!
      try { 
        byteString1.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byte byte0 = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.EMPTY.lastIndexOf(byteString0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)73;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.lastIndexOf(byteArray0, (int) (byte) (-20));
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.getByte((byte) (-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("unit == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: u
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("N7UA2F@1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: N
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("fD6kY%kuE@Fi{R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: k
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(77);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("]_fZgS6'4/L/jbl\bL", 0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((-3250));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("]_fZgS6'4/L/jbl\bL", 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      boolean boolean1 = byteString0.EMPTY.equals("");
      assertFalse(boolean1 == boolean0);
      
      byte byte0 = byteString0.getByte(0);
      assertEquals((byte)118, byte0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)15, 3610);
      try { 
        ByteString.read(byteArrayInputStream0, 9);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = ByteString.codePointIndexToCharIndex("]_fZgS6'4/L/jbl\bL", 11);
      assertEquals(11, int0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha512();
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-16);
      int int1 = byteString0.lastIndexOf(byteArray1, 11);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(3323L);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 14);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      ByteString byteString1 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 106, (-3241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=106 byteCount=-3241
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toByteArray();
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", 53);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)74);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)52;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha256();
      byteString1.EMPTY.hmacSha1(byteString0);
      byteString0.base64();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.substring(152);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString1.hex();
      assertEquals("00", string0);
      
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toAsciiUppercase();
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      String string0 = byteString1.toString();
      assertEquals("[hex=6646c4ee88088444486268c0a24ca4a8e660a2ae02806486486a86264aa46aa6]", string0);
      
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.encodeString("[size=0]", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.encodeString("okio.ByteString", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean0 = byteString0.rangeEquals((int) (byte) (-121), byteString1, (int) (byte) (-16), 453);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString0.base64Url();
      assertEquals("Dw==", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toByteArray();
      ByteString byteString1 = byteString0.substring(10);
      assertEquals(6, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)31;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)11;
      byteString0.endsWith(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString0.toAsciiUppercase();
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)123;
      ByteString byteString1 = new ByteString(byteArray1);
      byteString0.compareTo(byteString1);
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte)28, (int) (byte)123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(3)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "V?i,+8{>";
      ByteString byteString0 = ByteString.encodeUtf8("V?i,+8{>");
      byteString0.toByteArray();
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0, 4);
      ByteString byteString1 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      byteString1.write(outputStream0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)15;
      ByteString byteString1 = new ByteString(byteArray1);
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=66666666666666666666666666666666]", string0);
      
      String string1 = byteString1.toString();
      assertEquals("[hex=64]", string1);
      
      ByteString byteString2 = byteString0.md5();
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("[size=0]", charset0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("f.'kY%kE@i{R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text= ]", string0);
      
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(7);
      int int0 = byteString1.indexOf(byteString0, 26);
      assertEquals((-1), int0);
      
      byteString0.sha512();
      int int1 = byteString1.size();
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString1.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      String string0 = byteString0.toString();
      assertEquals("[hex=66666666666666666666666666666666]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte) (-120);
      byteArray1[6] = (byte)102;
      int int0 = byteString0.lastIndexOf(byteArray1, (int) (byte) (-120));
      assertEquals((-1), int0);
      
      ByteString byteString1 = new ByteString(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = new ByteString(byteArray1);
      byteString2.hmacSha256(byteString0);
      byteString1.equals(byteString0);
      String string0 = byteString1.toString();
      assertEquals("[hex=48640066068844]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.hex();
      assertEquals("4486888828888888208888882248828880048848482824880820228808088800", string0);
      
      Buffer buffer1 = new Buffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Inflater inflater1 = new Inflater();
      InflaterSource inflaterSource1 = new InflaterSource((BufferedSource) buffer1, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      HashingSource.sha1(buffer1);
      ByteString byteString1 = hashingSource1.hash();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)85;
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals((-1), int0);
      assertFalse(byteString1.equals((Object)byteString2));
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      byteString0.lastIndexOf(byteArray0, 550);
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.equals(byteString2);
      byteString0.toString();
      ByteString.decodeBase64("[hex=0f]");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte)15;
      byteArray1[5] = (byte)15;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray1, (int) (byte) (-112), 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=-112 byteCount=39
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)115;
      byteArray1[3] = (byte) (-122);
      byteArray0[0] = (byte)103;
      byteArray1[5] = (byte)19;
      byteArray1[6] = (byte) (-65);
      byteArray0[0] = (byte)126;
      byteArray1[8] = (byte)69;
      ByteString byteString1 = new ByteString(byteArray1);
      ByteString byteString2 = byteString1.toAsciiLowercase();
      int int0 = byteString0.indexOf(byteString1, 11);
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
      assertArrayEquals(new byte[] {(byte)0, (byte)115, (byte)0, (byte) (-122), (byte)0, (byte)19, (byte) (-65), (byte)0, (byte)69}, byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.rangeEquals((-167), byteString1, (int) (byte)25, (int) (byte)25);
      byteString1.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString0.substring(8230);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte)11;
      byteArray1[1] = (byte)11;
      byte byte1 = (byte)28;
      byteString0.endsWith(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[2] = (byte)28;
      ByteString byteString1 = new ByteString(byteArray1);
      byteString1.compareTo(byteString0);
      int int0 = 3216;
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte)28, 3216);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(3)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[17];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      boolean boolean0 = byteString1.endsWith(byteString0);
      boolean boolean1 = byteString1.equals(byteString0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=6088888808620804680486408868802288880004088442806860408820084802]", string0);
  }
}
