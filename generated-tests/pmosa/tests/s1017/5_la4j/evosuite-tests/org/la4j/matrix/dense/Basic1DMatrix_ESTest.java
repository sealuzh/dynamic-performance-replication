/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:11:08 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-381L));
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 0, mockRandom0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(2871, 0, 373.6611292491565);
      assertEquals(2871, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(39, 48, 48);
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(39, 6, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(17, 17, 1924.072);
      basic1DMatrix0.rotate();
      basic1DMatrix0.removeFirstColumn();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(17, (-1012), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(9, 0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("matrix");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 9;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      Matrix matrix0 = ooPlaceKroneckerProduct0.applyCommon(basic1DMatrix0, basic1DMatrix0);
      int int1 = 857;
      int int2 = 0;
      double double0 = 0.0;
      Matrix matrix1 = matrix0.multiply(double0);
      Matrix matrix2 = basic1DMatrix0.insert(matrix0, int1, int2);
      int int3 = 0;
      int int4 = (-681);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = null;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix1, rowMajorSparseMatrix0);
      int int5 = 7;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) long0;
      Matrix.from1DArray(int0, int5, doubleArray0);
      ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      basic1DMatrix0.sliceTopLeft(int3, int4);
      Matrix matrix3 = null;
      Basic1DMatrix.block(matrix2, matrix0, matrix3, matrix3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.swapRows(0, 0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("org.la4j.matrix.dense.Basic1DMatrix");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      basic1DMatrix0.hadamardProduct(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows((-1821), 1831);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1821
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 649.9628259878299;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-4848.12227);
      doubleArray2[6] = 1742.6422135973298;
      doubleArray2[7] = (-1.0);
      doubleArray0[1] = doubleArray2;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapRows(983, 0);
      basic1DMatrix0.swapRows(0, 0);
      assertEquals(2, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40;
      doubleArray0[1] = (double) 40;
      doubleArray0[2] = (double) 870;
      doubleArray0[3] = (double) 870;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(40, 870, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(40, 870);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 0, doubleArray0);
      basic1DMatrix0.setAll(0.0);
      Basic1DMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      int int2 = (-1880);
      mockRandom0.nextLong();
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        mockRandom0.ints((long) 0, (-1880), (-1880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 8;
      int int1 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(8, 0);
      int int2 = 0;
      basic1DMatrix0.getRow(0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.constant(8, 8, 0.0);
      Locale locale0 = Locale.FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      numberFormat0.setParseIntegerOnly(true);
      numberFormat0.format((long) 8);
      basic1DMatrix1.mkString(numberFormat0);
      int int3 = (-2742);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      basic1DMatrix1.toDenseMatrix();
      basic1DMatrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero((-2742), 8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(4, 4);
      basic1DMatrix0.diagonalProduct();
      basic1DMatrix0.toBinary();
      basic1DMatrix0.divide(256.0);
      basic1DMatrix0.swapRows(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-654);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-654);
      // Undeclared exception!
      try { 
        Basic1DMatrix.from1DArray((-654), (-1577), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -654x-1577
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(0, mockRandom0);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.equals((Object) "");
      String string0 = "f(U1SB<{";
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      ooPlaceMatrixHadamardProduct0.applySymmetric((DenseMatrix) basic1DMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply((DenseMatrix) basic1DMatrix0, (DenseMatrix) basic1DMatrix0);
      basic1DMatrix0.multiply(matrix0);
      basic1DMatrix0.getColumn((-2867));
      DecimalFormat decimalFormat0 = new DecimalFormat("f(U1SB<{");
      decimalFormat0.setNegativePrefix("f(U1SB<{");
      basic1DMatrix0.subtract((double) (-2867));
      decimalFormat0.setMaximumFractionDigits(0);
      basic1DMatrix0.iteratorOfColumn(0);
      basic1DMatrix0.mkString((NumberFormat) decimalFormat0);
      basic1DMatrix0.toArray();
      Basic1DMatrix.diagonal(403, 0.0);
      int int0 = (-526);
      int int1 = 1;
      // Undeclared exception!
      try { 
        Basic1DMatrix.zero((-526), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix.unit(16, 16);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns(9970, 9965);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(16, (-1227.05241044));
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      basic1DMatrix1.mkString(numberFormat0, "u fZVAW!TdNGbaZNczF", "u fZVAW!TdNGbaZNczF");
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, (-1663.5618313318855));
      DenseMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      basic1DMatrix0.rank();
      basic1DMatrix0.toRowMajorSparseMatrix();
      basic1DMatrix0.max();
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.blankOfShape(0, 0);
      Matrix matrix1 = basic1DMatrix0.copyOfShape(0, 2);
      assertEquals(0, matrix1.rows());
      assertEquals(2, matrix1.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, (-1663.5618313318855));
      DenseMatrix denseMatrix0 = DenseMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      basic1DMatrix0.rank();
      denseMatrix0.toRowMajorSparseMatrix();
      denseMatrix0.max();
      int int1 = 32;
      Matrix matrix0 = basic1DMatrix0.hadamardProduct(denseMatrix0);
      Matrix matrix1 = basic1DMatrix0.blankOfShape(32, 32);
      basic1DMatrix0.copyOfShape(32, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      matrix0.toMatrixMarket(numberFormat0);
      int int2 = 18;
      matrix1.swapColumns(24, 18);
      DenseMatrix.fromCSV("");
      int int3 = 17;
      matrix1.copyOfShape(47, 17);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = basic1DMatrix0.hadamardProduct(rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(rowMajorSparseMatrix0, basic1DMatrix0, matrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 2, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, rowMajorSparseMatrix0, basic1DMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(9);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, matrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(matrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.set(12, 12, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(9);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      BasicVector basicVector0 = (BasicVector)DenseVector.fromArray(doubleArray0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)basicVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic2DMatrix0, rowMajorSparseMatrix0, cRSMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(9);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      basic1DMatrix0.toRowMajorSparseMatrix();
      basic1DMatrix0.swapColumns(9, 9);
      Basic1DMatrix.zero(1, 1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 71;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from1DArray(9, 71, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix1.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      basic1DMatrix0.shuffle();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic1DMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(0.0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, rowMajorSparseMatrix0, matrix0, basic1DMatrix0);
      // Undeclared exception!
      try { 
        basic1DMatrix1.hadamardProduct((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(9);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 1, 1);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(rowMajorSparseMatrix0, matrix0, matrix1, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(9);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, basic1DMatrix0, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix.identity(8);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(1);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic1DMatrix0.toRowMajorSparseMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.rank();
      rowMajorSparseMatrix0.eachNonZero(matrixProcedure0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct1.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      Basic1DMatrix.block(basic1DMatrix0, matrix0, rowMajorSparseMatrix0, matrix0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.identity((-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -37x-37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      basic1DMatrix0.swapRows(1247, 1247);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(43, 1, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
