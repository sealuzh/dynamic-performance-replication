/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:23:40 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.time.Clock;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(10);
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(10, "<,>g$af)u/v7", "<,>g$af)u/v7", "", (String[]) null);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1206);
      classWriter0.newFloat(1206);
      // Undeclared exception!
      try { 
        classWriter0.newClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2719);
      Item item0 = classWriter0.newClassItem("java/lang/Object");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1507));
      classWriter0.version = 192;
      classWriter0.visitAnnotation("[HN", false);
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2021);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@e7ecf27
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      classWriter0.newDouble((-1238.998841871138));
      int int0 = classWriter0.newNameType("x3Fx=@", "x3Fx=@");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.newField("szd]7R)h", "szd]7R)h", "szd]7R)h");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      // Undeclared exception!
      try { 
        classWriter0.newMethod("", "", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1477);
      int int0 = Edge.EXCEPTION;
      String string0 = null;
      // Undeclared exception!
      try { 
        classWriter0.visitField(99, (String) null, "The strings must not be null", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.FileFileFilter";
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(4, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.FileFileFilter", (-3318));
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2116));
      classWriter0.newConst("");
      classWriter0.visitSource("", "");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-2116), (-2116));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(10);
      classWriter0.visitOuterClass("", "", "<,>g$af)u/v7");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1969);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, "xP  u(`9L{", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Item item0 = classWriter0.newMethodItem("PHz(KA[~", "PHz(KA[~", "PHz(KA[~", true);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@9
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      ClassWriter classWriter0 = new ClassWriter(2708);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean("long");
      Boolean.logicalOr(false, true);
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 192;
      ClassWriter classWriter0 = new ClassWriter(192);
      Item item0 = classWriter0.key3;
      Boolean boolean0 = Boolean.valueOf(true);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "Dprecate<d", "Dprecate<d", boolean0);
      classWriter0.lastField = fieldWriter0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classWriter0.visitAnnotation("Dprecate<d", true);
      String string0 = "km'4vj}bx2'IM:sP+uv";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("w", "Dprecate<d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'w.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      byte[] byteArray0 = classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newConst(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@7858de2e
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Integer integer0 = new Integer(11);
      Integer.toUnsignedLong(0);
      Item item0 = classWriter0.newConstItem(integer0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1404);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      classWriter0.visitOuterClass("short", "rQs>HIU", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newMethodItem("", "rQs>HIU", "", true);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(32, 183);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SourceFile";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[1] = "SourceFile";
      stringArray0[3] = "SourceFile";
      stringArray0[4] = "SourceFile";
      stringArray0[5] = "SourceFile";
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      classWriter0.threshold = 392;
      Item item0 = classWriter0.newDouble((-17));
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newFloat((-1.0F));
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item2 = classWriter0.newFloat((-1.0F));
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t!n%mFCrW]**Vvk");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("F4d/(]&LFqbjuCmAp", "nT8$`%M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'F4d/(]&LFqbjuCmAp.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-240);
      ClassWriter classWriter0 = new ClassWriter((-240));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newLong(4294967295L);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "";
      Item item1 = classWriter0.newLong(4294967295L);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = "";
      String string2 = "Thv]p|";
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit(101, 101, "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-128));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+iMY";
      classWriter0.visit((-128), (-128), "|4V/5Gs", "SourceFile", "+iMY", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      assertNotNull(type0);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(0, Type.VOID);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Item item0 = classWriter0.newConstItem(float0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3110);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeVisibleParameterAnnotations", "x0%OjH6Psw?=[", (String) null, double0);
      assertNotNull(fieldWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldWriter fieldWriter1 = fieldWriter0.next;
      assertNull(fieldWriter1);
      
      classWriter0.lastField = null;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      fieldWriter0.next = null;
      Item item0 = classWriter0.newClassItem("R+AWL#r?zCNX Xu");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      classWriter0.visit((-107), (byte)54, "", "", (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter1 = new ClassWriter(192);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter1.key3;
      assertNotNull(item0);
      
      int int0 = (-646);
      ClassWriter classWriter2 = new ClassWriter((byte) (-122));
      assertNotNull(classWriter2);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertFalse(classWriter0.equals((Object)classWriter2));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter2);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = 100;
      // Undeclared exception!
      try { 
        classWriter2.getMergedType(192, (-1291));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4180));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      classWriter0.visitOuterClass("$ON?NEQ8S3", (String) null, "z$c6I");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = 14;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.addType(stringArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(220);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      stringArray0[1] = "9+tVEiwyea2DXJG3T=";
      stringArray0[2] = "";
      classWriter0.visit(2, (-573), "9+tVEiwyea2DXJG3T=", "", "O~*n~@", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "char";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(220, (String) null, "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = Frame.UNINITIALIZED;
      assertEquals(25165824, int0);
      
      int int1 = Type.SHORT;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = Double.MIN_EXPONENT;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1022), int2);
      
      int int3 = Edge.NORMAL;
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)39;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)122, (byte)45, (byte)36, (byte)39}, byteArray0);
      assertFalse(boolean1);
      
      ClassWriter classWriter0 = new ClassWriter(262144);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Attribute attribute0 = new Attribute("");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      classWriter0.invalidFrames = true;
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)0;
      attribute0.value = byteArray1;
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ClassWriter classWriter1 = new ClassWriter(1668);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int4 = Frame.CHAR;
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(16777227, int4);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(46);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("LocalVariableTable", "LocalVariableTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1696);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass((String) null, "", "", 1696);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Short short0 = new Short((short)547);
      assertNotNull(short0);
      assertEquals((short)547, (short)short0);
      
      int int0 = classWriter0.newConst(short0);
      assertEquals(3, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-2870);
      ClassWriter classWriter0 = new ClassWriter((-2870));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = Frame.ARRAY_OF;
      assertFalse(int1 == int0);
      assertEquals(268435456, int1);
      
      Item item0 = classWriter0.key;
      assertNotNull(item0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.ClassWriter");
      assertFalse(boolean0);
      
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      
      Item item1 = classWriter0.newConstItem(byte1);
      assertNotNull(item1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = Double.MIN_EXPONENT;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1022), int2);
      
      Item item2 = classWriter0.newLong(1025L);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("1:/p2obq+JbjkX]{'DE", "wheel.asm.ClassWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '1:/p2obq+JbjkX]{'DE.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1696);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass((String) null, "", "", 1696);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitOuterClass("", (String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter(15);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("\u00008-sHCz", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newInteger(662);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newLong((-1557L));
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.BASE_VALUE;
      assertEquals(1048575, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = Edge.EXCEPTION;
      assertEquals(Integer.MAX_VALUE, int0);
      
      ClassWriter classWriter0 = new ClassWriter(100);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("InnerClasses", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(1612);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      classWriter0.firstMethod = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "rgBb#`\"7yxwtL{G;$j";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1612, "Synthetic", "Synthetic", "", stringArray0);
      assertNotNull(methodVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newClassItem("");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("ex\"M", (String) null, "ex\"M", 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bny<}ZPS? .fKwf");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bny<}ZPS? .fKwf");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ClassWriter classWriter0 = new ClassWriter(21);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = classWriter0.newConst(double0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1566));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*$2uXw0LY?(krD<";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "*$2uXw0LY?(krD<";
      stringArray0[4] = "*$2uXw0LY?(krD<";
      String string0 = "";
      classWriter0.visit((-498), (-369), "*$2uXw0LY?(krD<", "", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter((-1214));
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter1.getMergedType((-369), 187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(48);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = classWriter0.addType("s.Xm`dT$ut+$[W");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = Frame.VALUE;
      assertFalse(int1 == int0);
      assertEquals(16777215, int1);
      
      int int2 = classWriter0.addType("whee.a.ClaWriter");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3565);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.firstField = null;
      Item item0 = classWriter0.newInteger(3565);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newInteger(3565);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newInteger(3565);
      assertNotNull(item2);
      assertSame(item2, item0);
      assertSame(item2, item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(101);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Double.MIN_EXPONENT;
      assertEquals((-1022), int0);
      
      ClassWriter classWriter0 = new ClassWriter((-1022));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = classWriter0.addType("java/lang/Object");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter((-12));
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = Frame.CHAR;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16777227, int2);
      
      byte[] byteArray0 = classWriter1.toByteArray();
      assertNotNull(byteArray0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classWriter1, classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Item item0 = classWriter0.newDouble(1);
      assertNotNull(item0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newDouble(1);
      assertNotNull(item1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      assertSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-729));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(19, "", "", "", "");
      assertNotNull(fieldVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldVisitor fieldVisitor1 = classWriter0.visitField(12, "", "", "value ", "");
      assertNotNull(fieldVisitor1);
      assertFalse(fieldVisitor1.equals((Object)fieldVisitor0));
      assertNotSame(fieldVisitor1, fieldVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.threshold = 38;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Long long0 = new Long(2235L);
      assertNotNull(long0);
      assertEquals(2235L, (long)long0);
      
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newFloat(38);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      System.setCurrentTimeMillis(3516L);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.thisName = "double";
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("RWba|p?h", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newLong((-1373L));
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item[] itemArray0 = new Item[1];
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      itemArray0[0] = item0;
      classWriter0.typeTable = itemArray0;
      item0.strVal2 = "qOv\"4lM1";
      item0.set(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addType("qOv\"4lM1");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newInteger(1);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newDouble((-341.1));
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item3 = classWriter0.newDouble((-341.1));
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item1));
      assertNotSame(item3, item0);
      assertSame(item3, item2);
      assertNotSame(item3, item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.newClass("qOv\"4lM1");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter((-2541));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visit(16777228, 1974, "", (String) null, "", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassWriter classWriter0 = new ClassWriter(15);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("L*b!", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newInteger(25);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newLong((-1557L));
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.CHAR;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(48);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "s.Xm`dT$ut+$[W";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-120);
      int int0 = classWriter0.addType("s.Xm`dT$ut+$[W");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)78, (byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = classWriter0.addType("s.Xm`dT$ut+$[W");
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = null;
      int int0 = 15;
      ClassWriter classWriter0 = new ClassWriter(15);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = "L*b!";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "L*b!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4039));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      classWriter0.lastField = null;
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitOuterClass("Deprecated", "Deprecated", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(39, "iIBsL", "~ut7", "Deprecated", (String[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassWriter classWriter0 = new ClassWriter(3);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("X)Zx", "X)Zx", "{*Z'eKI6l4Ux8fi7O3o", 20);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("{*Z'eKI6l4Ux8fi7O3o", "{*Z'eKI6l4Ux8fi7O3o", "{*Z'eKI6l4Ux8fi7O3o", 20);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addUninitializedType("The array of names must not be null", 20);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.addType("X)Zx");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2870));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.UNINITIALIZED;
      assertEquals(25165824, int0);
      
      int int1 = Type.SHORT;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = Frame.BYTE;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16777226, int2);
      
      int int3 = classWriter0.addUninitializedType("wheel.asm.ClassWriter", 16777226);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.getObjectType("wheel.asm.ClassWriter");
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      
      int int4 = classWriter0.newConst(type0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(2, int4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      Float float0 = new Float((float) 4);
      assertNotNull(float0);
      assertEquals(4.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassWriter classWriter0 = new ClassWriter(13);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Type type0 = Type.FLOAT_TYPE;
      assertNotNull(type0);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      
      Item item0 = classWriter0.newDouble(0.0F);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newConst(type0);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals(4, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      
      int int1 = Float.BYTES;
      assertTrue(int1 == int0);
      assertEquals(4, int1);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.FileFileFilter");
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(464, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addUninitializedType("org.apache.commons.io.filefilter.FileFileFilter", (-3318));
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-2870));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.SHORT;
      assertEquals(4, int0);
      
      int int1 = Double.MIN_EXPONENT;
      assertFalse(int1 == int0);
      assertEquals((-1022), int1);
      
      int int2 = Edge.NORMAL;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      Item item0 = classWriter0.newFieldItem("wheel.asm.ClassWriter", "%UkDM'YyOBw\"i)#2<%", "%UkDM'YyOBw\"i)#2<%");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newFieldItem("wheel.asm.ClassWriter", "%UkDM'YyOBw\"i)#2<%", "%UkDM'YyOBw\"i)#2<%");
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      assertNull(methodWriter0);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-1022), 135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2859));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Character.SIZE;
      assertEquals(16, int0);
      
      int int1 = classWriter0.addUninitializedType("/g*6", 16);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newInteger((-3734));
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitInnerClass((String) null, "", "SourceDebugExtension", 16);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = classWriter0.addUninitializedType("/g*6", 16);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("$Ac()G");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2870));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = "<tD0WfjVhOhwc3vfX";
      int int0 = Frame.UNINITIALIZED;
      assertEquals(25165824, int0);
      
      int int1 = Type.SHORT;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      String string1 = "%UkDM'+yOBw\"i)u2<%";
      Item item0 = classWriter0.newMethodItem("<tD0WfjVhOhwc3vfX", "<tD0WfjVhOhwc3vfX", "%UkDM'+yOBw\"i)u2<%", true);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int2 = Double.MIN_EXPONENT;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1022), int2);
      
      Item item1 = classWriter0.newMethodItem("<tD0WfjVhOhwc3vfX", "<tD0WfjVhOhwc3vfX", "%UkDM'+yOBw\"i)u2<%", true);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("%UkDM'+yOBw\"i)u2<%", "%UkDM'+yOBw\"i)u2<%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '%UkDM'+yOBw\"i)u2<%.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2870));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.NULL;
      assertEquals(16777221, int0);
      
      int int1 = Frame.BYTE;
      assertFalse(int1 == int0);
      assertEquals(16777226, int1);
      
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("wheel.asm.ClassWriter", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("n}[Wfm");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = Frame.UNINITIALIZED;
      assertEquals(25165824, int0);
      
      int int1 = Type.SHORT;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = Double.MIN_EXPONENT;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1022), int2);
      
      int int3 = Edge.NORMAL;
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)39;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)123, (byte)45, (byte)36, (byte)39}, byteArray0);
      assertFalse(boolean1);
      
      ClassWriter classWriter0 = new ClassWriter(25165824);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Attribute attribute0 = new Attribute("");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)0;
      attribute0.value = byteArray1;
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ClassWriter classWriter1 = new ClassWriter(1668);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitAttribute(attribute0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotSame(classWriter0, classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int4 = Frame.CHAR;
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(16777227, int4);
      
      byte[] byteArray2 = classWriter0.toByteArray();
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter1.getMergedType(0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2870));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.DIM;
      assertEquals((-268435456), int0);
      
      int int1 = Double.MIN_EXPONENT;
      assertFalse(int1 == int0);
      assertEquals((-1022), int1);
      
      Item item0 = classWriter0.newInteger(1);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.ClassWriter");
      assertFalse(boolean0);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.ClassWriter");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("java/lang/Object", string1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      try { 
        Float.valueOf("org.apache.commons.io.filefilter.FileFileFilter");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
