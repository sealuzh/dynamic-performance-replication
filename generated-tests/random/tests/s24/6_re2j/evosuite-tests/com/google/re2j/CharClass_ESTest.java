/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:35:54 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3335;
      intArray0[1] = 66640;
      intArray0[2] = 392;
      intArray0[3] = (-2288);
      intArray0[4] = 2879;
      intArray0[5] = (-6484);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][3];
      int[] intArray1 = new int[7];
      intArray1[0] = 1566;
      intArray1[1] = 1623;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 243;
      intArray1[5] = 1024;
      intArray1[6] = 1078;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1078;
      intArray2[1] = 1566;
      intArray2[2] = 1078;
      intArray2[3] = 243;
      intArray2[4] = 3320;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 1623;
      intArray3[5] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1078;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 1566;
      intArray5[1] = 3320;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = 3320;
      intArray6[1] = (-4897197);
      intArray6[2] = 1566;
      intArray6[3] = (-329);
      intArray6[4] = 1566;
      intArray6[5] = 1623;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      
      intArray7[0] = (-4897197);
      intArray7[1] = 1566;
      intArray7[2] = (-657);
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 1078);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2070;
      intArray0[1] = 987;
      intArray0[2] = 8509;
      intArray0[3] = 4838;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2070, 987, 8509, 4838}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4838;
      intArray1[1] = 987;
      intArray1[2] = 8509;
      intArray1[3] = 3314;
      intArray1[4] = 8509;
      intArray1[5] = 2070;
      intArray1[6] = 4838;
      intArray1[7] = 987;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 4837, 988, 1114111}, intArray0);
      assertArrayEquals(new int[] {4838, 987, 8509, 3314, 8509, 2070, 4838, 987}, intArray1);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[][] intArray2 = new int[5][8];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray2, 4837);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertArrayEquals(new int[] {0, 4837, 988, 1114111}, intArray0);
      assertArrayEquals(new int[] {4838, 987, 8509, 3314, 8509, 2070, 4838, 987}, intArray1);
      assertNotNull(charClass2);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass3 = charClass2.appendNegatedTable(intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertArrayEquals(new int[] {0, 4837, 1, 1114111}, intArray0);
      assertArrayEquals(new int[] {4838, 987, 8509, 3314, 8509, 2070, 4838, 987}, intArray1);
      assertNotNull(charClass3);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertArrayEquals(new int[] {4838, 987, 8509, 3314, 8509, 2070, 4838, 987}, intArray1);
      assertNotNull(charClass4);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertArrayEquals(new int[] {0, 1114111, 1, 1114111}, intArray0);
      assertArrayEquals(new int[] {4838, 987, 8509, 3314, 8509, 2070, 4838, 987}, intArray1);
      assertNotNull(charClass5);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1413);
      intArray0[1] = (-3065);
      intArray0[2] = (-1711943);
      intArray0[3] = 1876;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1711943));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-1413), (-3065), (-1711943), 1876}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-1413), (-3065), (-1711943), 1876}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-1413), (-3065), (-1711943), 1876}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-1413), (-3065), (-1711943), 1876}, intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass5 = charClass4.appendFoldedRange((-1714752), (-94));
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertArrayEquals(new int[] {(-1413), (-3065), (-1711943), 1876}, intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass6 = charClass5.appendNegatedClass(intArray2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertArrayEquals(new int[] {(-1413), (-3065), (-1711943), 1876}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(6, 6);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-670), 1114111);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[7][1];
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 6;
      intArray2[1] = (-670);
      intArray2[2] = (-670);
      intArray2[3] = (-670);
      intArray2[4] = 6;
      intArray2[5] = (-670);
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 3203;
      intArray0[2] = (-936);
      intArray0[3] = (-32207180);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1, 3203, (-936), (-32207180)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 3203, (-32207179), 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 3203, (-32207179), 1114111}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-1138));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 3203, (-32207179), 1114111}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, (-936));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 3203, (-32207179), 1114111}, intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {0, 3203, (-32207179), 1114111}, intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-32207180);
      intArray2[1] = 3203;
      intArray2[2] = 1114111;
      intArray2[3] = 3203;
      intArray2[4] = (-936);
      intArray2[5] = (-936);
      intArray2[6] = 1;
      intArray2[7] = (-1138);
      CharClass charClass6 = charClass5.appendClass(intArray2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 3203, (-32207179), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-32207180), 3203, 1114111, 3203, (-936), (-936), 1, (-1138)}, intArray2);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2711;
      intArray0[1] = 599;
      intArray0[2] = 1506;
      intArray0[3] = 2112;
      intArray0[4] = 1114111;
      intArray0[5] = 857;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2711, 599, 1506, 2112, 1114111, 857}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2710, 600, 1505, 2113, 1114110}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange(1506, 1278);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 2710, 600, 1505, 2113, 1114110}, intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 2710, 600, 1505, 2113, 1114110}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass3.appendFoldedRange(1114111, 4824);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {0, 2710, 600, 1505, 2113, 1114110}, intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 2710, 600, 1505, 2113, 1114110}, intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      CharClass charClass6 = charClass5.appendTableWithSign(intArray1, 599);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {0, 2710, 600, 1505, 2113, 1114110}, intArray0);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass7 = charClass5.appendLiteral(0, 120379);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 2710, 600, 1505, 2113, 1114110}, intArray0);
      assertNotNull(charClass7);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3210);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1727;
      intArray0[1] = (-1972);
      intArray0[2] = 66640;
      intArray0[3] = 307;
      intArray0[4] = (-1378);
      intArray0[5] = (-777);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1727, (-1972), 66640, 307, (-1378), (-777)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1727, (-1972), 66640, 307, (-1378), (-777)}, intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange((-301), (-544));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1727, (-1972), 66640, 307, (-1378), (-777)}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-424));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {1727, (-1972), 66640, 307, (-1378), (-777)}, intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {1727, (-1972), 66640, 307, (-1378), (-777)}, intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {1727, (-1972), 66640, 307, (-1378), (-777)}, intArray0);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 9;
      intArray0[1] = (-1574);
      intArray0[2] = 2622;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {9, (-1574), 2622}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 9);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {9, (-1574), 2622}, intArray0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass2 = charClass1.appendLiteral(3187, 3187);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {9, (-1574), 2622}, intArray0);
      assertNotNull(charClass2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {9, (-1574), 2622}, intArray0);
      assertNotNull(charClass3);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int[] intArray2 = charClass3.toArray();
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {9, (-1574), 2622}, intArray0);
      assertArrayEquals(new int[] {9, (-1574), 2622, 3187, 3187}, intArray2);
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3309;
      intArray0[1] = 3244;
      intArray0[2] = 735;
      intArray0[3] = 1668;
      intArray0[4] = 1267;
      intArray0[5] = (-2090);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {3309, 3244, 735, 1668, 1267, (-2090)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-836));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {3309, 3244, 0, 3308, (-2089), 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {3309, 3244, 0, 3308, (-2089), 1114111}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {3309, 3244, 0, 3308, (-2089), 1114111}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {3309, 3244, 0, 3308, (-2089), 1114111}, intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[][] intArray2 = new int[3][8];
      intArray2[0] = intArray0;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 735;
      intArray3[1] = (-836);
      intArray3[2] = (-2090);
      intArray3[3] = 1267;
      intArray3[4] = 1267;
      intArray3[5] = (-2090);
      intArray3[6] = (-836);
      intArray3[7] = (-2090);
      intArray3[8] = (-964);
      intArray2[1] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      
      intArray4[0] = (-2090);
      intArray4[1] = 1668;
      intArray4[2] = 1267;
      intArray4[3] = 3309;
      intArray4[4] = 1267;
      intArray2[2] = intArray4;
      CharClass charClass5 = charClass0.appendNegatedTable(intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {3309, 3244, 0, 3308, (-2089), 1114111}, intArray0);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray4));
      
      CharClass charClass6 = charClass1.cleanClass();
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertArrayEquals(new int[] {(-2089), 1114111, 0, 3308, 3309, 3244}, intArray0);
      assertNotNull(charClass6);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray4));
      
      CharClass charClass7 = charClass3.appendLiteral(1668, (-2891));
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertArrayEquals(new int[] {(-2089), 1114111, 0, 3308, 3309, 3244}, intArray0);
      assertNotNull(charClass7);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray4));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2340;
      intArray0[1] = (-1140);
      intArray0[2] = 8544;
      intArray0[3] = 128640;
      intArray0[4] = 45;
      intArray0[5] = (-622);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2340, (-1140), 8544, 128640, 45, (-622)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {45, (-622), 2340, (-1140), 8544, 128640}, intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[0][6];
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {45, (-622), 2340, (-1140), 8544, 128640}, intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 44, (-621), 2339, (-1139), 8543}, intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-622));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 44, (-621), 2339, (-1139), 8543}, intArray0);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1283;
      intArray2[1] = 8544;
      intArray2[2] = 8544;
      intArray2[3] = (-1140);
      intArray2[4] = 2340;
      // Undeclared exception!
      try { 
        charClass4.appendNegatedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 366;
      intArray0[1] = 0;
      intArray0[2] = 1751;
      int int0 = (-2627);
      intArray0[3] = (-2627);
      intArray0[4] = 420;
      intArray0[5] = 2028;
      intArray0[6] = 974;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(2496, 2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2496;
      intArray0[1] = 2496;
      intArray0[2] = 2;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 707;
      intArray0[1] = 2;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass3.appendLiteral(2, 2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals("[]", string0);
      
      int[][] intArray1 = new int[0][6];
      CharClass charClass6 = charClass5.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertArrayEquals(new int[] {707, 2}, intArray0);
      assertNotNull(charClass6);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[][] intArray2 = new int[5][9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(213, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1969;
      intArray0[1] = 213;
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 1969);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1969, 213}, intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass3.appendFoldedRange(441, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {1969, 213}, intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass4.appendTableWithSign(intArray1, 3281);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(2396, 2396);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[][] intArray0 = new int[7][5];
      int[] intArray1 = new int[6];
      intArray1[0] = 2396;
      intArray1[1] = 2396;
      intArray1[2] = 2396;
      intArray1[3] = 2396;
      intArray1[4] = 2396;
      intArray1[5] = 2396;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2396;
      intArray2[1] = 2396;
      intArray2[2] = 2;
      intArray2[3] = 2396;
      intArray2[4] = 2396;
      intArray2[5] = 2396;
      intArray2[6] = 2396;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 2;
      intArray3[1] = 2396;
      intArray3[2] = 2396;
      intArray3[3] = 2396;
      intArray3[4] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 2;
      intArray4[1] = 93;
      intArray4[2] = 2396;
      intArray4[3] = (-203);
      intArray4[4] = 2801;
      intArray4[5] = 2396;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 2801;
      intArray5[1] = (-203);
      intArray5[2] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 2801;
      intArray6[1] = 2396;
      intArray6[2] = 2801;
      intArray6[3] = 2;
      intArray6[4] = 93;
      intArray6[5] = (-203);
      intArray6[6] = (-203);
      intArray6[7] = 93;
      intArray6[8] = 93;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 2801;
      intArray7[1] = 2396;
      intArray7[2] = 2;
      intArray7[3] = 2;
      intArray7[4] = 93;
      intArray7[5] = (-203);
      intArray7[6] = 2;
      intArray7[7] = 2396;
      intArray7[8] = 93;
      intArray0[6] = intArray7;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray0, 1513);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertNotNull(charClass4);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1139);
      intArray0[1] = 0;
      intArray0[2] = 46;
      intArray0[3] = (-892);
      intArray0[4] = 1425;
      intArray0[5] = 0;
      intArray0[6] = (-443);
      intArray0[7] = 0;
      intArray0[8] = (-1021);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[4][4];
      int[] intArray2 = new int[9];
      intArray2[0] = (-1139);
      intArray2[1] = 0;
      intArray2[2] = 1425;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 3626;
      intArray2[7] = 0;
      intArray2[8] = 117;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray0, (-1021));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 2954;
      intArray0[1] = (-236);
      intArray0[2] = 674;
      intArray0[3] = (-347);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      CharClass charClass4 = charClass3.appendLiteral((-4752), 116);
      CharClass charClass5 = charClass4.negateClass();
      CharClass charClass6 = charClass5.appendLiteral(1001, (-232));
      assertSame(charClass4, charClass6);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange((-1), 3979);
      int[] intArray0 = new int[3];
      intArray0[0] = 3979;
      intArray0[1] = 3979;
      intArray0[2] = (-2608);
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[7];
      int int0 = 1093;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 1059;
      intArray0[1] = 32;
      charClass0.toString();
      intArray0[2] = 2897;
      intArray0[3] = 1329;
      intArray0[4] = 145;
      intArray0[5] = 67;
      int int0 = 2886;
      intArray0[6] = 2886;
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-1));
      charClass1.negateClass();
      intArray0[7] = (-574);
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.cleanClass();
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      // Undeclared exception!
      charClass4.appendFoldedRange(145, 2888);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1526);
      CharClass.charClassToString(intArray0, (-1526));
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      int[] intArray2 = charClass1.toArray();
      CharClass charClass2 = charClass1.appendFoldedClass(intArray2);
      int[] intArray3 = new int[7];
      intArray3[0] = (-1526);
      intArray3[1] = (-1526);
      intArray3[2] = (-1526);
      intArray3[3] = (-1526);
      intArray3[4] = (-1526);
      intArray3[5] = (-1526);
      intArray3[6] = (-1526);
      CharClass.charClassToString(intArray3, (-787));
      CharClass charClass3 = charClass2.appendLiteral((-1526), 2886);
      assertSame(charClass1, charClass3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 2150;
      intArray0[1] = 1103;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 2150);
      CharClass charClass2 = charClass1.appendLiteral(715, 1823);
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      charClass1.appendFoldedRange(1103, 4);
      charClass3.appendFoldedRange(2203, 2);
      CharClass charClass4 = charClass0.cleanClass();
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass0.appendRange(463, 463);
      charClass2.toString();
      CharClass charClass3 = charClass1.appendRange(2602, 585);
      int[][] intArray0 = new int[6][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 2602;
      intArray1[1] = 2602;
      intArray1[2] = 585;
      intArray1[3] = 585;
      intArray1[4] = (-254);
      intArray1[5] = 2602;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 2602;
      intArray2[1] = (-254);
      intArray2[2] = 2602;
      intArray2[3] = 2602;
      intArray2[4] = 463;
      intArray2[5] = 463;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2602;
      intArray3[1] = 439;
      intArray3[2] = 2635;
      intArray3[3] = 463;
      intArray3[4] = (-254);
      intArray3[5] = 2602;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 463;
      intArray4[1] = 463;
      intArray4[2] = 2602;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 2635;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray0, 4253);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
