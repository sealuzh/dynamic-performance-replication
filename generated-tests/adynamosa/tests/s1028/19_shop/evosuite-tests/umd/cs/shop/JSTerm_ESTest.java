/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 21:24:33 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(iFL]t-eL5PeH>!A");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = (-3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(iks\"]Fq]--eL5PeH>!A");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) stringReader0);
      jSTerm0.isVariable();
      SystemInUtil.addInputLine(") ");
      String string0 = "ED";
      SystemInUtil.addInputLine("ED");
      jSTerm0.cloneT();
      jSTerm0.toStr();
      JSJshopVars.plus = (-3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zcG");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.plus = 2295;
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isGround();
      SystemInUtil.addInputLine("nil");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.toStr();
      StringReader stringReader0 = new StringReader("G.k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      System.setCurrentTimeMillis(2295);
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution3);
      System.setCurrentTimeMillis(2295);
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution3);
      System.setCurrentTimeMillis(2295);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zcG");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      jSTerm1.equals(jSTerm1);
      assertEquals(2, jSTerm1.size());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      System.setCurrentTimeMillis(3760L);
      jSSubstitution0.add((Object) jSSubstitution4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.call();
      assertNotSame(jSTerm0, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      StringReader stringReader0 = new StringReader("(*.KiYW}Ij_qJrKH/");
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator.identity();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("T??Ul");
      JSTerm jSTerm2 = new JSTerm();
      SystemInUtil.addInputLine("expecting");
      jSTerm1.equals(jSTerm2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isGround();
      System.setCurrentTimeMillis((-1424L));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      String string0 = "expecting";
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator.identity();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zM");
      JSJshopVars.lessT = (-1446);
      jSTerm0.isVariable();
      UnaryOperator.identity();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.toString();
      jSTerm1.isEval();
      jSTerm1.setSize(85);
      jSTerm0.addAll((Collection) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.leftBrac = (-3);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StringReader stringReader0 = new StringReader(" ExpectiMg word as terk");
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zG");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.setSize(93);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("x5/. -j9K");
      StringReader stringReader1 = new StringReader("rkT<zG");
      stringReader1.close();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution3);
      try { 
        stringReader1.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zG");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.setSize(93);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rkT<zG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.add((Object) streamTokenizer0);
      jSTerm1.addElement((Object) null);
      UnaryOperator.identity();
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("(rk]<zKe^MgBR)Jlr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSTerm0.remove((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(`;/&!Z7$9WB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "expecting");
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.isVariable();
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("call");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.print();
      assertEquals(1, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.addElement(object0);
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) null);
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zG");
      StringReader stringReader0 = new StringReader("rkT<zG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("rkF<zK");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) jSTerm0);
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[rkT<zG, [%%%]]", jSTerm2.toString());
      
      JSTerm jSTerm3 = new JSTerm();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(rkT<zG %%% )", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 32;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.toStr();
      jSTerm1.makeVariable();
      jSTerm1.toStr();
      StringReader stringReader1 = new StringReader("b6r:Cm`|u");
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm2.call();
      jSTerm1.call();
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) "expecting");
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-4263L));
      StringReader stringReader0 = new StringReader("(E:wi~c'M4dFi-");
      StringReader stringReader1 = new StringReader("rkf");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.standardizerTerm();
      StringReader stringReader1 = new StringReader("rkT<zG");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zG");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm1.call();
      jSTerm4.containsAll(jSSubstitution1);
      StringReader stringReader0 = new StringReader("rkT<zG");
      StringReader stringReader1 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSTerm1.makeEval(true);
      StringReader stringReader2 = new StringReader("expecting");
      jSTerm1.print();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer0.parseNumbers();
      stringReader2.skip(0L);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) "expecting");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ex}pecting");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      boolean boolean0 = jSTerm0.isGround();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-1L));
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(13, stringBuffer0.length());
      
      StringReader stringReader0 = new StringReader("]1Aw\"]");
      StringReader stringReader1 = new StringReader("ex}pecting");
      jSTerm1.print();
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean1 = jSTerm2.equals(jSTerm1);
      assertFalse(boolean1 == boolean0);
      
      jSTerm1.isVariable();
      jSTerm1.call();
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm3 = jSTerm0.call();
      assertTrue(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) "expecting");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zG");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.call();
      Reader reader0 = null;
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "expecting";
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) "expecting");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) "expecting");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "8e}-PA9e0*M");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function1 = unaryOperator1.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends JSSubstitution>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "8e}-PA9e0*M");
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      System.setCurrentTimeMillis(107);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      boolean boolean1 = jSTerm2.isGround();
      jSTerm1.makeEval(true);
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean2 == boolean1);
      
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution2.fail());
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      StringReader stringReader0 = new StringReader("?1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      System.setCurrentTimeMillis(0L);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(") ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.parseList(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      System.setCurrentTimeMillis(0L);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) unaryOperator0);
      jSSubstitution0.ensureCapacity(311);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.toStr();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSSubstitution0.add((Object) unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      StringReader stringReader0 = new StringReader("?1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis(0L);
      boolean boolean1 = jSTerm2.isEmpty();
      assertTrue(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity(311);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution4 = jSTerm1.matches((JSPredicateForm) jSTerm2);
      JSSubstitution jSSubstitution5 = jSTerm3.matches(jSTerm2, jSSubstitution4);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm1.call();
      boolean boolean2 = jSTerm2.isGround();
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution5));
      
      boolean boolean3 = jSTerm6.equals(jSTerm4);
      assertTrue(jSTerm4.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm4.isFunction());
      assertEquals("[?%%%0]", jSTerm4.toString());
      assertFalse(jSTerm6.isEmpty());
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.isGround();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-1L));
      jSTerm1.toStr();
      jSTerm1.makeVariable();
      StringReader stringReader0 = new StringReader("]1A~w\"]");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.ensureCapacity(182);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      jSTerm2.call();
      assertTrue(jSTerm1.isVariable());
      assertTrue(jSTerm2.isVariable());
      
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      System.setCurrentTimeMillis(0L);
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.ensureCapacity(311);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm1.call();
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(jSTerm1.isFunction());
      assertEquals(10, jSTerm3.capacity());
      assertTrue(boolean0);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm2));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      jSTerm0.print();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm1.makeVariable();
      jSTerm1.toStr();
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.firstElement();
      jSSubstitution1.add((Object) "Expecting");
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.print();
      jSTerm1.print();
      jSTerm2.cloneT();
      jSTerm1.isGround();
      jSTerm2.cloneT();
      jSTerm3.call();
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm3.isVariable());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.iterator();
      jSTerm0.add((Object) "Expecting variable name in term");
      System.setCurrentTimeMillis(1L);
      jSTerm0.toStr();
      StringReader stringReader1 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      jSTerm0.print();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm1.makeVariable();
      jSTerm1.toStr();
      jSTerm0.equals(jSTerm2);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.firstElement();
      jSSubstitution1.add((Object) "Expecting");
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm3);
      jSTerm3.print();
      jSTerm1.print();
      assertTrue(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isEval();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.matches(jSTerm2, (JSSubstitution) null);
      jSTerm3.matches(jSTerm1, (JSSubstitution) null);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "rkT<zcG");
      jSTerm0.isVariable();
      UnaryOperator.identity();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.plus = 34;
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      SystemInUtil.addInputLine("hPQ[-,K^U");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.toStr();
      StringReader stringReader0 = new StringReader("G.k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StringReader stringReader1 = new StringReader("Xx-(l2|-GPM6");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      System.setCurrentTimeMillis((-2554L));
      System.setCurrentTimeMillis((-2554L));
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution4);
      System.setCurrentTimeMillis(643L);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSSubstitution> function1 = unaryOperator1.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends JSSubstitution>) function1);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      
      Function.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      System.setCurrentTimeMillis(107);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm2.isGround();
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean1 == boolean0);
      
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.iterator();
      jSTerm0.add((Object) "rkf");
      System.setCurrentTimeMillis(5139L);
      jSTerm0.toStr();
      jSTerm0.makeVariable();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.equals(jSTerm1);
      jSTerm0.toStr();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      
      Function.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      System.setCurrentTimeMillis(107);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm2.isGround();
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.iterator();
      jSTerm0.add((Object) "rkf");
      System.setCurrentTimeMillis(5139L);
      jSTerm0.toStr();
      jSTerm0.makeVariable();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      assertTrue(jSTerm0.isVariable());
      
      System.setCurrentTimeMillis(815L);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.isVariable();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm1.makeVariable();
      jSTerm1.toStr();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertEquals(32, streamTokenizer0.ttype);
      assertTrue(boolean0);
      
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.iterator();
      jSTerm0.add((Object) "rkf");
      System.setCurrentTimeMillis(5139L);
      jSTerm0.toStr();
      jSTerm0.makeVariable();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0, (JSSubstitution) null);
      assertTrue(jSTerm0.isVariable());
      
      jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 464;
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      jSTerm2.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      jSTerm2.isEval();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm3);
      assertTrue(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.toStr();
      jSTerm1.makeVariable();
      jSTerm1.toStr();
      JSJshopVars.colon = 69;
      streamTokenizer0.ttype = 43;
      jSTerm0.stream();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      assertTrue(jSTerm1.isVariable());
      
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isGround();
      jSTerm0.matches(jSTerm1);
      int int0 = 107;
      // Undeclared exception!
      try { 
        jSTerm1.remove((-1078419071));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1078419071
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      jSTerm0.iterator();
      jSTerm0.add((Object) "rkf");
      System.setCurrentTimeMillis(5139L);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(6, stringBuffer0.length());
      
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.toStr();
      jSTerm3.makeVariable();
      jSTerm0.toStr();
      jSTerm0.equals(jSTerm3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      jSTerm0.matches(jSTerm4, jSSubstitution1);
      jSTerm3.matches(jSTerm4);
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      unaryOperator0.apply(jSSubstitution0);
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("?1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm3);
      assertFalse(boolean0);
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.remove(107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 107
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("(rkT<zK e^MgBRZJlr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "%oD1wH9Y0ft=<U**>");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("?1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("3CjZV12BW-(ViO4B2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("%aQ}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals("[%aQ]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm1.cloneT();
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.retainAll(jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      String string0 = "%%%";
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.equalT = 37;
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches(jSTerm3);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm4 = jSTerm3.call();
      assertFalse(jSTerm4.isFunction());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      assertFalse(jSSubstitution2.fail());
      
      JSTerm jSTerm5 = jSTerm3.cloneT();
      assertFalse(jSTerm5.isVariable());
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm3);
      assertTrue(jSSubstitution3.fail());
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("Expecting ", stringBuffer0.toString());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      boolean boolean0 = jSTerm2.isConstant();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "expecting");
      jSTerm0.add((Object) "expecting");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = (-392);
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("list ");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.whiteSpace = (-357);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeEval(false);
      jSTerm1.makeFunction();
      jSTerm1.toStr();
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("L+ne : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceil");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.makeEval(false);
      jSTerm0.isVariable();
      jSTerm1.makeConstant();
      jSTerm0.print();
      jSTerm0.makeFunction();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ah2{Vn*a{|qE*x:1F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-1L));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.wordChars(0, 2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.retainAll(jSTerm1);
      jSTerm1.makeConstant();
      jSTerm0.call();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "Expecting variable name in term";
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm1.makeVariable();
      jSTerm1.toStr();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.equals(jSTerm4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      jSTerm1.cloneT();
      jSTerm1.matches(jSTerm3);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 0;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceil");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      stringReader0.reset();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeEval(true);
      jSTerm1.makeFunction();
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSJshopVars.exclamation = (-2);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.isFunction();
      jSTerm0.makeEval(false);
      jSTerm0.isVariable();
      jSTerm0.isEval();
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-1615), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 95;
      jSTerm0.makeFunction();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 2870;
      jSTerm0.makeConstant();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm1.setElementAt(jSTerm0, 2870);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2870 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("T#~3'e]fov=6'i}'d&t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(42, 0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.equals(jSTerm1);
      JSJshopVars.dot = 2;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.setSize(0);
      JSJshopVars.percent = (-1);
      jSTerm0.isConstant();
      jSTerm0.isConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSJshopVars.interrogation = 1299;
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",x4R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!eairGf/)'P`/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = (-392);
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      jSTerm0.iterator();
      jSTerm0.clear();
      int int0 = 3161;
      jSTerm0.ensureCapacity(3161);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
