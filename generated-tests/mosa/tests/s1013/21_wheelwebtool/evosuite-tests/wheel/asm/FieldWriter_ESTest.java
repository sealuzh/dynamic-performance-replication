/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:25:48 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "R\"I5c)^=d^^8BE#b", "`L^}9gO]", "FS&zxMnbfOoN})9d5U<", (Object) null);
      fieldWriter0.visitAnnotation("FS&zxMnbfOoN})9d5U<", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "-j7q{E01rEoEzNsyJQ(", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "", "", "", (Object) null);
      ClassWriter classWriter1 = new ClassWriter(1);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("_WJ6$fR/a>YfOj");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32768), "T\"0^", "lI?ryL[lH\"^S", "T\"0^", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter1.pool;
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("_WJ6$fR/a>YfOj", true);
      fieldWriter0.put(byteVector0);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("lI?ryL[lH\"^S", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", (String) null, "-j7q{E01rEoEzNsyJQ(");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1153));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "#zlM@C%X|yLJzj4`Zu", "#zlM@C%X|yLJzj4`Zu", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", (Object) null);
      ClassWriter classWriter1 = new ClassWriter(1);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1153));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "2jX8fwwXG", "aV{6NRV", "2jX8fwwXG", "2jX8fwwXG");
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 0, "", "", "", "");
      int int0 = fieldWriter1.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", "org.apache.commons.io.filefilter.DirectoryFileFilter", (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "", "K", "-j7q{E01rEoEzNsyJQ(", "K");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32768), "T\"0^", "lI?ryL[lH\"^S", "T\"0^", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("lI?ryL[lH\"^S");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-22));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "`L^}9gO]", "", (Object) null);
      fieldWriter0.visitAnnotation("", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2510);
      byte[] byteArray0 = classWriter0.toByteArray();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "Sensitive", "", "Sensitive");
      fieldWriter0.visitAnnotation("The array of prefixes must not be null", false);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(1, 1877);
      ByteVector byteVector2 = byteVector1.putByte(512);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.put(byteVector2);
      Attribute attribute0 = new Attribute("Sensitive");
      ClassReader classReader0 = new ClassReader(byteArray0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32768), "T\"0^", "lI?ryL[lH\"^S", "T\"0^", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("lI?ryL[lH\"^S");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "Synthetic";
      stringArray0[2] = "Synthetic";
      stringArray0[3] = "Synthetic";
      classWriter0.visit(73, 0, "Synthetic", "Synthetic", "Synthetic", stringArray0);
      classWriter0.newClass("`L^}9gO]");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-831), "org.apache.commons.io.filefilter.DirectoryFileFilter", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "", "", "", (Object) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Synthetic";
      stringArray0[1] = "-X,T?oiYAMs73-g";
      stringArray0[2] = "-X,T?oiYAMs73-g";
      stringArray0[3] = "";
      stringArray0[4] = "";
      classWriter0.visit(65535, (-3008), "", "", "-X,T?oiYAMs73-g", stringArray0);
      ClassWriter classWriter1 = new ClassWriter(1);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }
}
