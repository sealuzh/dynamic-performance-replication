/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:55:47 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7211;
      intArray0[1] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = CharClass.charClassToString(intArray0, (-1071));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4410;
      intArray0[1] = 0;
      intArray0[2] = 3523;
      intArray0[3] = 0;
      intArray0[4] = (-1212);
      intArray0[5] = 1070;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1070);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      int int0 = 93;
      intArray0[1] = 93;
      intArray0[2] = (-820);
      intArray0[3] = 65;
      intArray0[4] = (-3344);
      intArray0[5] = 3632;
      intArray0[6] = 1574;
      intArray0[7] = 1009;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, (-820), 65, (-3344), 3632, 1574, 1009}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {(-3344), 3632, 7211, 93, 1574, 1009, 7211, 93}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange(0, 65);
      assertArrayEquals(new int[] {(-3344), 3632, 7211, 93, 1574, 1009, 7211, 93}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[][] intArray0 = new int[3][2];
      CharClass charClass0 = new CharClass(intArray0[0]);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(120571, (-1405));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[2];
      intArray1[0] = 93;
      intArray1[1] = (-1405);
      String string0 = CharClass.charClassToString(intArray1, (-1405));
      assertArrayEquals(new int[] {93, (-1405)}, intArray1);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2497;
      intArray0[1] = 1197;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 2496, 1, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 2496, 1, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 2496, 1, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass3.appendLiteral(1197, 16);
      assertArrayEquals(new int[] {0, 2496, 1, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      charClass4.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 2475;
      int int1 = 986;
      CharClass charClass1 = charClass0.appendFoldedRange(2475, 986);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 120171;
      intArray0[2] = 2338;
      intArray0[3] = 762;
      intArray0[4] = (-2959);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1, 120171, 2338, 762, (-2959)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = 12991;
      intArray0[2] = 1010;
      intArray0[3] = 3384;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 12991, 1010, 3384}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 1010);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange(0, (-1623));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass6 = charClass5.appendFoldedRange(12991, 0);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[] intArray2 = charClass1.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertArrayEquals(new int[] {0, (-1623), 91, 12991, 12991, 0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray2.length);
      
      CharClass charClass7 = charClass1.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass8 = charClass1.appendFoldedRange(753, (-339));
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
      
      CharClass charClass9 = charClass5.cleanClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertNotNull(charClass9);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 7077;
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(7077, 5516);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int[] intArray0 = new int[9];
      int int2 = (-3559);
      intArray0[0] = (-3559);
      intArray0[1] = 1;
      intArray0[2] = (-107);
      intArray0[3] = 64;
      intArray0[4] = 0;
      intArray0[5] = 64;
      intArray0[6] = 64;
      intArray0[7] = 64;
      intArray0[8] = 0;
      String string0 = CharClass.charClassToString(intArray0, 1);
      assertArrayEquals(new int[] {(-3559), 1, (-107), 64, 0, 64, 64, 64, 0}, intArray0);
      assertNotNull(string0);
      assertEquals("[0xfffff219-0x1]", string0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(0, intArray1.length);
      
      CharClass charClass2 = charClass1.appendLiteral((-809), 1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
      
      CharClass charClass3 = charClass2.appendFoldedRange((-152), 64);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotNull(charClass3);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1254);
      intArray0[0] = 0;
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 352;
      intArray0[2] = (-1254);
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[10];
      intArray0[0] = (-1254);
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      intArray0[2] = 352;
      intArray0[3] = (-196);
      intArray0[4] = (-196);
      intArray0[5] = 119970;
      int[][] intArray1 = new int[0][5];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-1254), 0, 352, (-196), (-196), 119970, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(10, intArray0.length);
      
      String string0 = charClass3.toString();
      assertArrayEquals(new int[] {(-1254), 0, 352, (-196), (-196), 119970, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(string0);
      assertEquals("[0xfffffb1a-0x10ffff]", string0);
      assertEquals(10, intArray0.length);
      
      String string1 = charClass3.toString();
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new int[] {(-1254), 0, 352, (-196), (-196), 119970, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(string1);
      assertEquals("[0xfffffb1a-0x10ffff]", string1);
      assertEquals(10, intArray0.length);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertArrayEquals(new int[] {(-1254), 0, 352, (-196), (-196), 119970, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(10, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2454;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray2 = charClass0.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass1.appendFoldedRange(93, 2721);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[22];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(22, intArray0.length);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      assertEquals(22, intArray0.length);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass3 = charClass1.appendTable(intArray1);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(22, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = charClass0.toArray();
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      
      CharClass charClass4 = charClass1.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(22, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass2);
      assertNotNull(charClass5);
      assertEquals(22, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass6 = charClass2.appendTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass5));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass4));
      assertNotSame(intArray0, intArray2);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass4);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass4);
      assertNotNull(charClass6);
      assertEquals(22, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[22];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(22, intArray0.length);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      assertEquals("[0x0]", string0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 12194;
      CharClass charClass1 = charClass0.appendRange(3125, 12194);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 12194);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      assertEquals("[0xc35-0x2fa2]", string0);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendFoldedRange(2, 2);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      int[][] intArray0 = new int[7][7];
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 226);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2497;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(2497, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      assertEquals("[0x9c1 0x9c1-0x0 0x0]", string0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      String string1 = charClass2.toString();
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertNotNull(string1);
      assertEquals("[0x9c1 0x9c1-0x0 0x0 0x9c1-0x0]", string1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-107);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-107));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 65046;
      intArray0[2] = 1418;
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-2512));
      assertArrayEquals(new int[] {0, 65046, 1418, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotNull(string0);
      assertEquals("[0x1-0x10ffff]", string0);
      
      intArray0[3] = 2362;
      CharClass charClass4 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 65046, 1418, 2362}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2362;
      intArray2[1] = 1418;
      intArray2[2] = 1418;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass5 = charClass2.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      assertEquals(4, intArray1.length);
      
      CharClass charClass6 = charClass4.appendTableWithSign(intArray1, 0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {0, 65046, 1418, 2362}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = (-2);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 32, 0, (-2)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 32, 0, (-2)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      String string0 = charClass1.toString();
      assertArrayEquals(new int[] {0, 32, 0, (-2)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      assertEquals("[0x0-0x20 0x0-0xfffffffe 0x0-0xfffffffe]", string0);
      assertEquals(4, intArray0.length);
      
      String string1 = charClass0.toString();
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new int[] {0, 32, 0, (-2)}, intArray0);
      assertSame(charClass0, charClass1);
      assertNotNull(string1);
      assertEquals("[0x0-0x20 0x0-0xfffffffe 0x0-0xfffffffe]", string1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 32, 0, (-2)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 32, 0, (-2)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, (-12537493));
      assertArrayEquals(new int[] {0, 32, 0, (-2)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      int int0 = 8330;
      CharClass charClass3 = charClass2.appendLiteral(8330, 8330);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[0];
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      String string0 = charClass4.toString();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertNotNull(string0);
      assertEquals("[0x208a]", string0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 8330;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 8330);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      intArray0[1] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = charClass1.appendLiteral((-3999), 93);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass4 = new CharClass(intArray0);
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass6 = charClass1.appendNegatedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass4));
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass4);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass7 = charClass5.appendNegatedClass(intArray0);
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass6));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass1));
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 1114111}, intArray0);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass0);
      assertNotSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertNotNull(charClass7);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = 12991;
      intArray0[2] = 1010;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 12991, 1010, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[1][2];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 91);
      assertArrayEquals(new int[] {91, 12991, 1010, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass2 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 90, 1, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass1.appendLiteral(2, 91);
      assertArrayEquals(new int[] {0, 90, 1, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {0, 90, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 352;
      intArray0[3] = (-196);
      intArray0[4] = 3125;
      intArray0[5] = 119970;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 117;
      intArray0[1] = 1567;
      intArray0[2] = (-1336);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {117, 1567, (-1336)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange((-1336), 0);
      assertArrayEquals(new int[] {117, 1567, (-1336)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      
      CharClass charClass2 = charClass1.appendLiteral((-557), 0);
      assertArrayEquals(new int[] {117, 1567, (-1336)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(3, intArray0.length);
      
      String string0 = charClass1.toString();
      assertArrayEquals(new int[] {117, 1567, (-1336)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(string0);
      assertEquals("[0x75-0x61f 0xfffffac8 0x0]", string0);
      assertEquals(3, intArray0.length);
      
      String string1 = CharClass.charClassToString(intArray0, (-3082));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {117, 1567, (-1336)}, intArray0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals(3, intArray0.length);
      
      String string2 = charClass1.toString();
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {117, 1567, (-1336)}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(string2);
      assertEquals("[0x75-0x61f 0xfffffac8 0x0]", string2);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[][] intArray0 = new int[7][2];
      CharClass charClass0 = new CharClass(intArray0[2]);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = 12991;
      intArray0[2] = 1010;
      intArray0[3] = 3384;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 12991, 1010, 3384}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 1010);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange(0, (-1623));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass6 = charClass5.appendFoldedRange(3384, 2498);
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[] intArray2 = charClass1.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertArrayEquals(new int[] {0, (-1623), 91, 12991}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      
      CharClass charClass7 = charClass1.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass8 = charClass1.appendFoldedRange(753, (-339));
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {91, 12991, 91, 12991}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass8);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1567;
      intArray0[1] = 0;
      intArray0[2] = 101;
      CharClass charClass1 = charClass0.appendRange(2884, (-3011));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      assertEquals("[0xb44-0xfffff43d 0x0]", string0);
      
      String string1 = CharClass.charClassToString(intArray0, (-756));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {1567, 0, 101}, intArray0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[28];
      intArray0[0] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(28, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(28, intArray0.length);
      
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange(1, 1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass3);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass4);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass5 = charClass1.appendClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass5);
      assertEquals(28, intArray0.length);
      
      CharClass charClass6 = charClass4.appendFoldedClass(intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass6);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
      
      CharClass charClass7 = charClass6.appendLiteral(1, 2043);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass7);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
      
      CharClass charClass8 = new CharClass(intArray2);
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertNotNull(charClass8);
      assertEquals(6, intArray2.length);
      
      CharClass charClass9 = charClass7.appendTable(intArray1);
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass6.equals((Object)charClass8));
      assertFalse(charClass7.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass8);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertNotSame(charClass4, charClass8);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass8);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass9);
      assertNotSame(charClass7, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass9);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
      
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-3999);
      intArray3[1] = (-3999);
      intArray3[2] = (-3999);
      intArray3[3] = 1;
      intArray3[4] = 1;
      intArray3[5] = 2043;
      intArray3[6] = 2043;
      intArray3[7] = 1;
      intArray3[8] = (-3999);
      CharClass charClass10 = charClass7.cleanClass();
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass6.equals((Object)charClass8));
      assertFalse(charClass7.equals((Object)charClass8));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass8);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass5);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass8);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass10);
      assertNotSame(charClass4, charClass8);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass8);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass9);
      assertNotSame(charClass7, charClass8);
      assertSame(charClass7, charClass10);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass10);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
      
      CharClass charClass11 = charClass9.appendClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass11.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass6.equals((Object)charClass8));
      assertFalse(charClass7.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertNotSame(charClass2, charClass8);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass10);
      assertNotSame(charClass4, charClass8);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      assertNotSame(charClass11, charClass8);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass8);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass9);
      assertNotSame(charClass7, charClass8);
      assertSame(charClass7, charClass10);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass11);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass11);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[][] intArray0 = new int[7][7];
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[5][2];
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      intArray0[1] = 93;
      intArray0[2] = 7211;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, 7211, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[5][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-4294));
      assertArrayEquals(new int[] {7211, 93, 7211, 0, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      
      CharClass charClass2 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 7210, 94, 7210, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = charClass2.appendLiteral(93, 64);
      assertArrayEquals(new int[] {0, 7210, 93, 7210, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 2979);
      assertArrayEquals(new int[] {0, 7210, 0, 1114111, 0, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      int int0 = (-956);
      intArray0[0] = (-956);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-706));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2497;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      String string0 = charClass1.toString();
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      assertEquals("[0x9c1-0x0 0x0]", string0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      String string1 = charClass2.toString();
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(string1);
      assertEquals("[0x0-0x9c0 0x1-0x10ffff]", string1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {2497, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      charClass0.appendFoldedRange(167, 1491);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[22];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(22, intArray0.length);
      
      int[][] intArray1 = new int[6][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[5] = intArray3;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1576;
      intArray0[1] = 0;
      int int0 = 119970;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[0] = 1;
      intArray0[1] = 1114111;
      intArray0[3] = 0;
      intArray0[4] = 64;
      intArray0[5] = 43462;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(22, intArray0.length);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(22, intArray0.length);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      
      String string0 = charClass0.toString();
      assertFalse(charClass0.equals((Object)charClass2));
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotNull(string0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(4, (-13349196));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-13347860);
      intArray0[1] = 119946;
      intArray0[2] = 4;
      intArray0[3] = (-13349196);
      intArray0[4] = 4;
      intArray0[5] = 4;
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {(-13347860), 119946, 4, (-13349196), 4, 4}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass1.appendLiteral(604, 4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      charClass2.appendFoldedRange((-13349196), 1802);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(615, 615);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass1.toArray();
      assertArrayEquals(new int[] {615, 615}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[0][2];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 7211);
      assertArrayEquals(new int[] {7211, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass2 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 7210, 1, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = charClass0.appendLiteral((-437), 3038);
      assertArrayEquals(new int[] {0, 7210, 1, 1114111, (-437), (-437), 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 7211);
      assertArrayEquals(new int[] {0, 7210, 0, 1114111, (-437), (-437), 0, 0}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      
      CharClass charClass5 = charClass2.appendTableWithSign(intArray1, (-1758));
      assertArrayEquals(new int[] {0, 7210, 0, 1114111, (-437), (-437), 0, 0}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 91;
      intArray2[1] = (-468);
      intArray2[2] = 2028;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = (-949);
      intArray2[6] = (-2778);
      intArray2[7] = (-2409);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-2778);
      intArray3[1] = (-8383);
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 2028;
      intArray3[5] = 2028;
      intArray3[6] = (-468);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-2778);
      intArray4[1] = (-2409);
      intArray4[2] = (-468);
      intArray4[3] = 0;
      intArray4[4] = 2028;
      intArray4[5] = 2028;
      intArray4[6] = (-2409);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = (-2778);
      intArray5[1] = 2028;
      intArray5[2] = 2028;
      intArray5[3] = (-2778);
      intArray5[4] = (-949);
      intArray5[5] = (-2778);
      intArray5[6] = 1688;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = (-8383);
      intArray6[1] = (-949);
      intArray6[2] = (-8383);
      intArray6[3] = 0;
      intArray6[4] = (-2778);
      intArray6[5] = 91;
      intArray6[6] = 91;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      
      intArray7[0] = (-2409);
      intArray7[1] = (-2409);
      intArray7[2] = 0;
      intArray7[3] = 2028;
      intArray7[4] = 2028;
      intArray7[5] = (-2409);
      intArray7[6] = 2028;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      intArray0[1] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2497;
      intArray0[1] = 1197;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1197;
      intArray1[1] = 3384;
      intArray1[2] = 3384;
      intArray1[3] = 3384;
      CharClass charClass0 = new CharClass(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotNull(charClass0);
      assertEquals(4, intArray1.length);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1178);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      int[][] intArray2 = new int[0][3];
      CharClass charClass2 = charClass1.appendTableWithSign(intArray2, 3384);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(0, intArray2.length);
      
      CharClass charClass3 = charClass0.appendRange((-1656), 1197);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass6 = charClass4.appendFoldedRange(3633, (-3559));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      int[] intArray3 = charClass5.toArray();
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1656), 3384, 3633, (-3559)}, intArray3);
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertNotNull(intArray3);
      assertEquals(4, intArray3.length);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass7 = charClass5.appendNegatedTable(intArray2);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass7);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(0, intArray2.length);
      
      CharClass charClass8 = charClass2.appendFoldedRange(435, (-1623));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2497, 1197, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1197, 3384, 3384, 3384}, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass8);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-775);
      intArray0[1] = (-3806);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 171;
      intArray0[6] = 552;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-775), (-3806), 0, 0, 1, 171, 552}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      int[][] intArray1 = new int[2][8];
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 552;
      intArray2[1] = (-3806);
      intArray2[2] = 0;
      intArray2[3] = 552;
      intArray2[4] = 171;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-515));
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-775), (-3806), 0, 0, 1, 0, 1114111}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(7, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[12];
      int int0 = 91;
      intArray0[0] = 91;
      int int1 = 12991;
      intArray0[1] = 12991;
      intArray0[2] = 1010;
      intArray0[3] = 3384;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(12, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(12, intArray0.length);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 1010);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(12, intArray0.length);
      assertEquals(7, intArray1.length);
      
      CharClass charClass3 = new CharClass();
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(7077, 5516);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(7077, 5516);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7077;
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass4 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(7, intArray1.length);
      
      intArray0[1] = 7077;
      intArray0[2] = 5516;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[2] = 901;
      intArray1[1] = 64;
      intArray1[2] = 901;
      intArray1[3] = 0;
      intArray1[4] = 7211;
      intArray1[5] = 0;
      intArray1[6] = 7211;
      intArray1[7] = 0;
      intArray1[8] = 0;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray2 = charClass0.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 91;
      intArray0[0] = 91;
      intArray0[1] = 12991;
      intArray0[2] = 1010;
      intArray0[3] = 3384;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 12991, 1010, 3384}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(3384, (-2839));
      assertArrayEquals(new int[] {91, 12991, 1010, 3384}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 1010);
      assertArrayEquals(new int[] {91, 12991, 1010, 3384}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 352;
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 352, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[8][4];
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 1093;
      intArray2[2] = 352;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 352;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 352;
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1650;
      intArray0[1] = 0;
      intArray0[2] = 1479;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1650, 0, 1479}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {1650, 0, 1479}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange(1479, 1650);
      assertArrayEquals(new int[] {1650, 0, 1650}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange(1650, (-795));
      assertArrayEquals(new int[] {1650, 0, 1650}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 101);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 101;
      intArray0[3] = 101;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 101;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      intArray0[1] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[3][2];
      CharClass charClass1 = charClass0.appendRange(7211, 7211);
      assertArrayEquals(new int[] {7211, 93, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 7211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[4];
      intArray1[0] = (-985);
      intArray1[1] = 66639;
      intArray1[2] = (-813);
      intArray1[3] = (-3370);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      // Undeclared exception!
      charClass2.appendTableWithSign(intArray0, (-938871));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 735;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {735}, intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[0][9];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {735}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1254);
      intArray0[1] = 0;
      intArray0[2] = 352;
      intArray0[3] = (-196);
      intArray0[4] = 3125;
      intArray0[5] = 119970;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotSame(charClass1, charClass0);
      assertNotNull(string0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[0] = 1;
      intArray0[1] = 1114111;
      intArray0[2] = (-107);
      intArray0[3] = 0;
      intArray0[4] = 64;
      intArray0[5] = 43464;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(22, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange((-107), 43464);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(22, intArray0.length);
      
      CharClass charClass2 = charClass0.appendLiteral(1, 1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(22, intArray0.length);
      
      int[] intArray1 = charClass1.toArray();
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(22, intArray0.length);
      assertEquals(22, intArray1.length);
      
      CharClass charClass3 = charClass2.appendLiteral(120571, 1);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(22, intArray0.length);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = null;
      String string0 = CharClass.charClassToString((int[]) null, 0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      int int1 = 0;
      CharClass charClass1 = charClass0.appendRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int int2 = 93;
      int int3 = 2486;
      // Undeclared exception!
      charClass2.appendFoldedRange(93, 2486);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 7211;
      intArray0[0] = 7211;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(7211, 7211);
      assertArrayEquals(new int[] {7211, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertArrayEquals(new int[] {7211, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-531);
      intArray0[1] = 2368;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {(-531), 2368}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {(-531), 2368}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-531), 2368}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2543;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 0;
      intArray3[1] = 2368;
      intArray1[4] = intArray3;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2181;
      intArray0[1] = 1;
      intArray0[2] = (-1060);
      intArray0[3] = 10690;
      intArray0[4] = 55;
      intArray0[5] = 0;
      intArray0[6] = (-1057);
      intArray0[7] = 11921;
      intArray0[8] = (-561);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2181, 1, (-1060), 10690, 55, 0, (-1057), 11921, (-561)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      
      int[][] intArray1 = new int[6][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {2181, 1, (-1060), 10690, 55, 0, (-1057), 11921, (-561)}, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(9, intArray0.length);
      assertEquals(6, intArray1.length);
      
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 3165);
      assertArrayEquals(new int[] {2181, 1, (-1060), 10690, 55, 0, (-1057), 11921, (-561)}, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass2);
      assertEquals(9, intArray0.length);
      assertEquals(6, intArray1.length);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {2181, 1, (-1060), 10690, 55, 0, (-1057), 11921, (-561)}, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass3);
      assertEquals(9, intArray0.length);
      assertEquals(6, intArray1.length);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertArrayEquals(new int[] {2181, 1, (-1060), 10690, 55, 0, (-1057), 11921, (-561)}, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotNull(charClass4);
      assertEquals(9, intArray0.length);
      assertEquals(6, intArray1.length);
      
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertArrayEquals(new int[] {2181, 1, (-1060), 10690, 55, 0, (-1057), 11921, (-561)}, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotNull(charClass5);
      assertEquals(9, intArray0.length);
      assertEquals(6, intArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass6 = charClass5.appendClassWithSign(intArray2, (-561));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2181, 1, (-1060), 10690, 55, 0, (-1057), 11921, (-561)}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotNull(charClass6);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(2497, 2497);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange(2497, 2497);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string0 = charClass2.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(string0);
      assertEquals("[0x9c1]", string0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      
      String string1 = charClass0.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotNull(string1);
      assertEquals("[0x0-0x9c0 0x9c2-0x10ffff]", string1);
      
      CharClass charClass5 = charClass2.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-181);
      int int0 = 2140;
      intArray0[1] = 2140;
      intArray0[2] = (-4496);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-181), 2140, (-4496)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange((-4496), 2140);
      assertArrayEquals(new int[] {(-181), (-4496), 2140}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2497;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[28];
      intArray0[1] = 1;
      intArray0[0] = 1114078;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(28, intArray0.length);
      
      int[] intArray1 = charClass0.toArray();
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(28, intArray0.length);
      assertEquals(28, intArray1.length);
      
      int[][] intArray2 = new int[3][3];
      intArray2[0] = intArray1;
      intArray2[1] = intArray0;
      intArray2[2] = intArray1;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray2);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(28, intArray0.length);
      assertEquals(3, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      
      int int1 = 1353;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass2.appendFoldedRange(93, 2462);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2497;
      intArray0[1] = 1197;
      intArray0[2] = (-3178);
      intArray0[3] = (-2073);
      intArray0[4] = 8254;
      intArray0[5] = 32;
      intArray0[6] = 770;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2497, 1197, (-3178), (-2073), 8254, 32, 770, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {2497, 1197, (-3178), (-2073), 8254, 32, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {2497, 1197, (-3178), (-2073), 8254, 32, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass3 = charClass2.appendLiteral(1197, 0);
      assertArrayEquals(new int[] {2497, 1197, (-3178), (-2073), 8254, 32, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass3.appendTable(intArray1);
      assertArrayEquals(new int[] {2497, 1197, (-3178), (-2073), 8254, 32, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {2497, 1197, (-3178), (-2073), 8254, 32, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass6 = charClass5.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {2497, 1197, (-3178), (-2073), 8254, 32, 0, 1114111}, intArray0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(385, 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange(1, (-1034));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      charClass0.appendFoldedRange((-1906), 3948);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[0];
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass5 = charClass2.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-880);
      intArray0[0] = (-880);
      intArray0[1] = 0;
      int int1 = 334;
      intArray0[2] = 334;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-880), 0, 334}, intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 7211;
      intArray0[0] = 7211;
      intArray0[1] = 93;
      intArray0[2] = 7211;
      intArray0[3] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {7211, 93, 7211, 65, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 7211, 93, 7211, 65, 7211, 65}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 7211, 93, 7211, 65, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = new CharClass();
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int[] intArray0 = new int[28];
      intArray0[0] = 1;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(28, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(28, intArray0.length);
      
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange(1, 1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass3);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass4);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass5 = charClass1.appendClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotNull(charClass5);
      assertEquals(28, intArray0.length);
      
      CharClass charClass6 = charClass4.appendFoldedClass(intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass6);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
      
      CharClass charClass7 = charClass6.appendLiteral(1, 2043);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass7);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
      
      CharClass charClass8 = new CharClass(intArray2);
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertNotNull(charClass8);
      assertEquals(6, intArray2.length);
      
      CharClass charClass9 = charClass7.appendTable(intArray1);
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass4.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass6.equals((Object)charClass8));
      assertFalse(charClass7.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray2);
      assertSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass9);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass8);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass8);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass9);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass6);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass9);
      assertEquals(28, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray2.length);
      
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-3999);
      intArray3[1] = (-3999);
      intArray3[2] = (-3999);
      intArray3[3] = 1;
      intArray3[4] = 1;
      intArray3[5] = 2043;
      intArray3[6] = 2043;
      intArray3[7] = 1;
      intArray3[8] = (-3999);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1679;
      intArray0[0] = 1679;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1679}, intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {1679}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[0] = 1;
      intArray0[1] = 1114111;
      intArray0[3] = 1114111;
      intArray0[4] = 0;
      intArray0[5] = 43464;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      assertEquals(22, intArray0.length);
      
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 9674;
      CharClass charClass1 = charClass0.appendLiteral(9674, 9674);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(9674, 9674);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5494;
      intArray0[1] = 978;
      intArray0[2] = (-2504);
      intArray0[3] = 1495;
      intArray0[4] = 93;
      intArray0[5] = 2145;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {5494, 978, (-2504), 1495, 93, 2145}, intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[3][5];
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 978;
      intArray2[1] = 0;
      int int0 = (-1861);
      intArray2[2] = (-1861);
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {5494, 978, (-2504), 1495, 93, 2145}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      
      CharClass charClass2 = charClass1.appendLiteral(5494, 978);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {5494, 978, (-2504), 1495, 93, 2145}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      
      String string0 = CharClass.charClassToString(intArray2, 0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {978, 0, (-1861)}, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(3, intArray2.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 117;
      intArray0[1] = 1567;
      intArray0[2] = (-1336);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2497;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      charClass1.toString();
      CharClass charClass2 = charClass1.negateClass();
      charClass2.toString();
      CharClass charClass3 = charClass0.cleanClass();
      assertSame(charClass0, charClass3);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2858);
      intArray0[1] = 1816;
      intArray0[2] = (-1792);
      int int0 = (-3399);
      intArray0[3] = (-3399);
      intArray0[4] = 537;
      intArray0[5] = 1657;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendRange(0, (-2104));
      CharClass charClass3 = charClass2.appendFoldedRange((-2858), 233);
      int[][] intArray1 = new int[8][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      charClass3.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = new CharClass();
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1114111;
      intArray0[2] = (-107);
      intArray0[3] = 0;
      intArray0[4] = 64;
      intArray0[5] = 43464;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = charClass0.toArray();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7211;
      int int0 = 93;
      intArray0[1] = 93;
      intArray0[2] = 7211;
      intArray0[3] = 65;
      intArray0[4] = 7211;
      intArray0[5] = 3632;
      intArray0[6] = 1574;
      intArray0[7] = 1009;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      int[] intArray0 = new int[22];
      intArray0[0] = 1;
      intArray0[1] = 1114111;
      intArray0[2] = (-107);
      intArray0[3] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = new CharClass();
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, 0);
      CharClass charClass2 = new CharClass();
      charClass1.appendFoldedRange(93, 2715);
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
