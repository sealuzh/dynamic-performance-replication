/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 16:35:10 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.zone.ZoneRulesException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.intValue();
      jSONScanner0.scanString('P');
      jSONScanner0.scanLong('z');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4sn");
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '\\';
      charArray0[2] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 38);
      jSONReaderScanner0.scanFieldLong(charArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1148, "3j?R M4sn");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      jSONReaderScanner0.scanLong('\\');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]v9[nRn>^Fh\"H*%{");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-255), "J`yjs~Q*aW");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = 'E';
      charArray0[2] = 'w';
      charArray0[3] = 'G';
      jSONScanner0.scanFieldDouble(charArray0);
      int int0 = JSONLexer.NOT_MATCH;
      jSONScanner0.scanFieldFloatArray(charArray0);
      int int1 = jSONScanner0.intValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'Q');
      jSONScanner0.longValue();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`44.6o2b");
      BigDecimal bigDecimal0 = new BigDecimal(111);
      jSONScanner0.next();
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = 'D';
      charArray0[4] = 'N';
      charArray0[5] = '$';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.nextToken((-527));
      int int0 = jSONScanner0.pos();
      assertEquals(3, jSONScanner0.token());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3b?R )4n");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDate('\\');
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanNullOrNew();
      assertEquals(8, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.scanFieldLong(charArray0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(472, "TODO : ");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      jSONReaderScanner0.scanLong('/');
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      jSONScanner0.next();
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.nextToken(4);
      int int0 = jSONScanner0.pos();
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'w';
      charArray0[2] = 'k';
      charArray0[3] = '5';
      charArray0[4] = 'q';
      charArray0[5] = 'R';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError(string0, objectArray0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wP)\u001A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3R?)4n");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('Y');
      jSONScanner0.nextToken(2);
      jSONScanner0.scanFieldInt(charArray0);
      String string0 = jSONScanner0.numberString();
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.IOUtils$1");
      BigDecimal bigDecimal0 = new BigDecimal((-736));
      jSONScanner0.next();
      jSONScanner0.scanBoolean('o');
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.util.IOUtils$1", 4);
      jSONScanner1.bytesValue();
      jSONScanner1.nextToken(3);
      assertEquals('o', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4sn");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = new BigDecimal(7);
      jSONScanner0.nextToken(7);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) symbolTable0;
      objectArray0[1] = (Object) "Yog";
      objectArray0[2] = (Object) symbolTable0;
      objectArray0[3] = (Object) "Yog";
      jSONScanner0.lexError("Yog", objectArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ~pos 0, json : f~<\\uwP)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Oh GN-. aWIRH");
      SymbolTable symbolTable0 = new SymbolTable(31);
      SymbolTable symbolTable1 = new SymbolTable(838);
      jSONScanner0.scanSymbol(symbolTable1);
      BigDecimal bigDecimal0 = new BigDecimal(838);
      jSONScanner0.nextToken((-1020));
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      BigDecimal bigDecimal0 = new BigDecimal(117);
      jSONScanner0.next();
      jSONScanner0.nextToken(4);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(36);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.nextToken(20);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'C';
      charArray0[2] = '=';
      charArray0[3] = '6';
      charArray0[4] = 'q';
      charArray0[5] = '`';
      charArray0[6] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.nextToken(1400);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      BigDecimal bigDecimal0 = new BigDecimal(117);
      jSONScanner0.nextToken(120);
      jSONScanner0.scanFieldStringArray((char[]) null, 120, symbolTable0);
      assertEquals(1, jSONScanner0.pos());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(string0, 78);
      jSONReaderScanner0.indexOf('j', 31);
      assertEquals(78, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3b?R )4n");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":=[*Lf!Uc", 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      MockDate mockDate0 = new MockDate('9', 0, (-1), (-1), '9', '9');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 1018);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      jSONReaderScanner0.nextToken(6);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3b?R )4n");
      char[] charArray0 = new char[5];
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("=R{.8a[W2;EqZw", (-2));
      jSONScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(82);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '\"');
      int int0 = 1000;
      SymbolTable symbolTable1 = new SymbolTable(1000);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'a)#<OC");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'a)#<OC", 0);
      SymbolTable symbolTable0 = new SymbolTable(112);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "x";
      JSONScanner jSONScanner0 = new JSONScanner("x");
      int int0 = 1000;
      SymbolTable symbolTable0 = new SymbolTable(1000);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('^');
      SymbolTable symbolTable0 = new SymbolTable(1000);
      int int0 = JSONLexer.UNKNOWN;
      jSONScanner0.isRef();
      char[] charArray0 = null;
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-992), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFloat('V');
      jSONScanner0.scanISO8601DateIfMatch();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-1));
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanDate('V');
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 75);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4KObxgsTr5Rq/");
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '9';
      charArray0[2] = 'k';
      charArray0[3] = 'G';
      charArray0[4] = '%';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('^');
      SymbolTable symbolTable0 = new SymbolTable(1000);
      jSONScanner0.intValue();
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'l");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2448, (-1365));
      jSONReaderScanner0.token();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString(']');
      assertEquals((-1365), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B};'S>C+CM<");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDecimal(')');
      jSONScanner0.next();
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.intValue();
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{g;xNph1&b.!");
      jSONScanner0.scanIdent();
      jSONScanner0.isBlankInput();
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.intValue();
      assertEquals(2, jSONScanner0.pos());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I0:=");
      jSONScanner0.scanIdent();
      jSONScanner0.nextTokenWithColon();
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f|e\u0002P)");
      BigDecimal bigDecimal0 = new BigDecimal(117);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.nextToken(18);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(1000);
      jSONScanner0.nextToken();
      jSONScanner0.nextToken(231);
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '9';
      charArray0[2] = 'P';
      jSONScanner0.scanFieldBoolean(charArray0);
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, symbolTable0, '&');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      char char0 = 'i';
      jSONScanner0.scanFloat('i');
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@7~t&3]+");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.setToken(0);
      jSONScanner0.nextIdent();
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals('~', jSONScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 81);
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanFloat('V');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.scanBoolean('M');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oVWEpbLO(,CN|[H");
      SymbolTable symbolTable0 = new SymbolTable(55);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.nextIdent();
      jSONScanner0.charAt(0);
      jSONScanner0.pos();
      boolean boolean0 = jSONScanner0.isEnabled(0, 9);
      assertEquals(18, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0", 83);
      jSONScanner0.scanString('A');
      jSONScanner0.scanUUID('A');
      jSONScanner0.scanUUID('9');
      jSONScanner0.scanType((String) null);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat('G');
      SymbolTable symbolTable0 = new SymbolTable(1000);
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j; f4n");
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = '\\';
      charArray0[2] = 'F';
      charArray0[3] = 'G';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, '\\');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      BigDecimal bigDecimal0 = new BigDecimal(117);
      jSONScanner0.nextToken(10);
      assertEquals('<', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ne");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      jSONScanner0.scanDouble('`');
      SymbolTable symbolTable0 = new SymbolTable(16);
      symbolTable0.addSymbol(string0, 4, 0, 4, false);
      JSONScanner jSONScanner1 = new JSONScanner(string0, 102);
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0, 'z');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wP)\u001A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      jSONScanner0.scanFloat('I');
      jSONScanner0.scanBoolean('1');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I0:=");
      jSONScanner0.scanIdent();
      jSONScanner0.isBlankInput();
      jSONScanner0.intValue();
      jSONScanner0.nextTokenWithColon((-1168));
      jSONScanner0.scanISO8601DateIfMatch();
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B};'S>C+CM<");
      jSONScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDecimal(')');
      jSONScanner0.bytesValue();
      jSONScanner0.next();
      jSONScanner0.nextToken(13);
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.charAt(13);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(1000);
      jSONScanner0.scanDecimal('!');
      jSONScanner0.bytesValue();
      jSONScanner0.next();
      jSONScanner0.nextToken(3);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I0:=");
      SymbolTable symbolTable0 = new SymbolTable(3993);
      BigDecimal bigDecimal0 = new BigDecimal(106);
      jSONScanner0.scanSymbol(symbolTable0, ':');
      int int0 = jSONScanner0.pos();
      assertEquals('=', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      jSONScanner0.isEOF();
      jSONScanner0.matchStat = 1963;
      jSONScanner0.longValue();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 1963);
      SymbolTable symbolTable0 = new SymbolTable(1963);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("k?f&@");
      jSONScanner1.scanDecimal('_');
      jSONScanner1.bytesValue();
      jSONScanner1.scanFieldSymbol(charArray0);
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@7~t&3]+");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.np = (-749);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I0:=");
      jSONScanner0.scanIdent();
      jSONScanner0.isBlankInput();
      jSONScanner0.intValue();
      assertEquals(18, jSONScanner0.token());
      
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(1000);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      BigDecimal bigDecimal0 = new BigDecimal(1000);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '%');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.scanDecimal('!');
      jSONScanner0.bytesValue();
      jSONScanner0.next();
      jSONScanner0.nextToken(3);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner("#miQzS9");
      jSONScanner1.isRef();
      JSONScanner jSONScanner2 = new JSONScanner(")", 10);
      jSONScanner2.nextIdent();
      jSONScanner2.intValue();
      assertEquals(11, jSONScanner2.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#miQzS9");
      jSONReaderScanner0.scanInt('w');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 113);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 113);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanBoolean('N');
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      BigDecimal bigDecimal0 = new BigDecimal(117);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "9{!qGQeiW~-xXqxa;z";
      JSONScanner jSONScanner0 = new JSONScanner("9{!qGQeiW~-xXqxa;z", 1);
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("true", (-1113524894));
      // Undeclared exception!
      try { 
        jSONScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@7~t&3]+");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(19);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      jSONScanner0.setToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.np = 45;
      jSONScanner0.nextToken();
      jSONScanner0.isEOF();
      jSONScanner0.nextToken(116);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      jSONScanner0.nextToken();
      jSONScanner0.isRef();
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      assertEquals(18, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3j?R M4n");
      int int0 = jSONReaderScanner0.scanInt('K');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(116);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'A');
      int int0 = 31;
      SymbolTable symbolTable1 = new SymbolTable(84);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(618, 4073, 4073, symbolTable1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]~[nRn>^Fh\"H*%{");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[22];
      Locale locale0 = Locale.CHINA;
      jSONScanner0.setLocale(locale0);
      charArray0[0] = '^';
      charArray0[1] = 'm';
      charArray0[2] = 'y';
      charArray0[3] = 'B';
      charArray0[4] = '9';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = new BigDecimal(872);
      jSONScanner0.nextToken(12);
      assertEquals('[', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanInt('E');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      int int0 = jSONReaderScanner0.indexOf('\u0000', 95);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]~[nRn>^Fh\"H*%{");
      jSONScanner0.scanString();
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2]~[nRn>^
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95);
      jSONReaderScanner0.scanFieldInt(charArray0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, 'z');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]~[nRn>^Fh\"H*%{");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("END");
      jSONReaderScanner0.scanInt('9');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      jSONReaderScanner0.scanInt('O');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]~[nRn>^Fh\"H*%{");
      jSONScanner0.nextIdent();
      jSONScanner0.doubleValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 95;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.scanFieldUUID(charArray1);
      SymbolTable symbolTable0 = new SymbolTable(95);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a<DG;YE%|%APZPu.");
      jSONReaderScanner0.next();
      int int0 = 120;
      jSONReaderScanner0.nextToken(120);
      jSONReaderScanner0.scanDouble('O');
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanUUID('O');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("krr2wkL", (-365));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(jt \"ISd:|5K/", 5527);
      jSONScanner0.nextToken(1306);
      jSONScanner0.info();
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanBoolean('_');
      jSONScanner0.scanDouble('.');
      jSONScanner0.scanLong('O');
      char[] charArray1 = new char[4];
      charArray1[0] = 'O';
      charArray1[1] = 'f';
      charArray1[2] = 't';
      charArray1[3] = 'O';
      jSONScanner0.scanFieldDouble(charArray1);
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.config(feature0, true);
      assertEquals(10, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.bytesValue();
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[3];
      charArray1[0] = 'j';
      charArray1[1] = '0';
      charArray1[2] = '?';
      jSONScanner0.scanFieldSymbol(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3IO0z");
      jSONScanner0.isRef();
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.scanString('7');
      jSONScanner0.nextToken();
      jSONScanner0.decimalValue(false);
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('.');
      jSONScanner0.indexOf('1', 8192);
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      jSONScanner0.scanDate('{');
      jSONScanner0.nextIdent();
      jSONScanner0.putChar('{');
      jSONScanner0.intValue();
      BigDecimal bigDecimal0 = new BigDecimal((-23));
      assertEquals((short) (-23), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wP)\u001A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.scanFieldUUID(charArray1);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.indexOf('N', 95);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(21, "XfA~rTZ0$Dh", 0, 0, 46, 0, 0, 0, 21, 21);
      jSONScanner0.setTimeZone(simpleTimeZone0);
      int int0 = jSONScanner0.scanInt('h');
      assertEquals(25, jSONScanner0.token());
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"_M&\"v+");
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(')');
      JSONScanner jSONScanner1 = new JSONScanner("\"_M&\"v+");
      jSONScanner1.bytesValue();
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ");
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match N - \u001A, info : pos 1, json :  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B};'S>C+CM<");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDecimal(')');
      jSONScanner0.bytesValue();
      jSONScanner0.next();
      jSONScanner0.nextToken(13);
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 31;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = ')';
      charArray0[2] = '%';
      charArray0[3] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 31);
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanFloat('Q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, ')');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"_M&\"v+");
      jSONScanner0.resetStringPosition();
      char[] charArray0 = new char[12];
      jSONScanner0.scanString('S');
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      jSONScanner0.scanType((String) null);
      char[] charArray0 = new char[10];
      charArray0[0] = '9';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '/';
      charArray0[6] = '}';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 120);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tr{e");
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[4] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1eBx", 110);
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = new BigDecimal(1817);
      jSONScanner0.scanDecimal('R');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2980));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x3D<{NX");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.scanDouble(',');
      jSONScanner0.nextTokenWithChar(',');
      assertEquals(1, jSONScanner0.token());
      
      jSONScanner0.info();
      assertEquals('W', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"_M&\"v+");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      JSONScanner jSONScanner1 = new JSONScanner("\"_M&\"v+");
      jSONScanner1.close();
      jSONScanner0.scanString('=');
      jSONScanner1.scanFloat('=');
      jSONScanner1.nextToken();
      jSONScanner0.isEOF();
      assertEquals(4, jSONScanner0.token());
      
      jSONScanner1.stringDefaultValue();
      assertEquals(0, jSONScanner1.pos());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B5S8A");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("B5S8A", 0);
      int int0 = jSONScanner0.getFeatures();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('.');
      jSONScanner0.indexOf('1', 8192);
      assertEquals(3, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid");
      jSONScanner0.scanIdent();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      jSONScanner0.scanDate('}');
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 3, info : pos 0, json : 3j?R M4n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,Co<|[");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tD'+hcGZ");
      jSONScanner0.stringDefaultValue = "N4pg";
      jSONScanner0.hasSpecial = false;
      jSONScanner0.scanDate('|');
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      char[] charArray0 = new char[0];
      jSONScanner0.features = (-4010);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '.');
      jSONScanner0.scanFieldDecimal(charArray0);
      MockDate mockDate0 = new MockDate((-1), 'j', (-1));
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken();
      MockDate mockDate0 = new MockDate((-2), 'j', (-2));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" 9(Nv");
      jSONScanner0.scanFloat('\u0016');
      jSONScanner0.putChar('A');
      System.setCurrentTimeMillis((-9223372036854775754L));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8du");
      jSONScanner0.nextIdent();
      jSONScanner0.lexError("8du", (Object[]) null);
      jSONScanner0.floatValue();
      jSONScanner0.floatValue();
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]~[nRn>^Fh\"H*%{");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(')');
      jSONScanner0.bytesValue();
      jSONScanner0.scanLong(')');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B};'S>C+CM<");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(')');
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.scanDouble('Q');
      boolean boolean0 = jSONScanner0.scanBoolean('\"');
      assertTrue(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.nextIdent();
      Class<String> class0 = String.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'U');
      Object[] objectArray0 = new Object[5];
      jSONScanner0.matchStat = 100;
      jSONScanner0.skipWhitespace();
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "1.2.46";
      objectArray0[2] = (Object) "1.2.46";
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) "1.2.46";
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.floatValue();
      jSONScanner0.floatValue();
      jSONScanner0.isEOF();
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanBoolean('N');
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      jSONScanner0.scanIdent();
      jSONScanner0.stringDefaultValue = "";
      jSONScanner0.nextIdent();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      BigDecimal bigDecimal0 = new BigDecimal(117);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'Q');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wP)\u001A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 2378;
      JSONScanner jSONScanner0 = new JSONScanner("ident", 2378);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("s+//8~^SO+3", 103);
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '|';
      charArray0[2] = '0';
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[1];
      jSONScanner0.scanFieldSymbol(charArray1);
      SymbolTable symbolTable0 = new SymbolTable(125);
      jSONScanner0.scanFieldStringArray(charArray1, 77, symbolTable0);
      jSONScanner0.nextIdent();
      jSONScanner0.skipComment();
      charArray1[0] = '|';
      jSONScanner0.scanFieldIntArray(charArray1);
      jSONScanner0.charArrayCompare(charArray1);
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      jSONScanner0.tokenName();
      jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '2';
      charArray0[2] = 'p';
      charArray0[3] = 'G';
      charArray0[4] = '_';
      jSONScanner0.scanFieldDate(charArray0);
      char char0 = jSONScanner0.getCurrent();
      assertEquals('3', char0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]~[nRn>^Fh\"H*%{");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2]~[nRn>^Fh\"H*%{");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate(')');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ket");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat('|');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V", 1770);
      jSONReaderScanner0.hasSpecial = false;
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '0';
      charArray0[2] = 'W';
      charArray0[3] = 'M';
      charArray0[4] = '%';
      charArray0[5] = '2';
      charArray0[6] = 'S';
      charArray0[7] = 'e';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. V
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('j');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'z';
      charArray0[2] = '2';
      charArray0[3] = 'y';
      charArray0[4] = 'T';
      charArray0[5] = ')';
      charArray0[6] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 97, 97);
      jSONReaderScanner0.scanBoolean(')');
      jSONReaderScanner0.scanUUID('(');
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2]~[nRn>^Fh\"H*%{");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(')');
      jSONScanner0.next();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('r');
      jSONReaderScanner0.scanDate('a');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1010);
      jSONReaderScanner0.scanFieldInt(charArray0);
      int int0 = 106;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kb?~ut&q2");
      jSONScanner0.stringDefaultValue = "true";
      jSONScanner0.scanNumber();
      jSONScanner0.pos();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(78, "SxH@");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - k, info : pos 0, json : kb?~ut&q2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 127);
      jSONScanner0.nextToken();
      JSONScanner jSONScanner1 = new JSONScanner("CustomMapDeserializer");
      jSONScanner1.scanDecimal('m');
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Du");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-GJKG)");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('+');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      JSONScanner jSONScanner1 = new JSONScanner("1.2.46");
      jSONScanner0.scanDecimal('u');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Agz~Y:7wm|");
      SymbolTable symbolTable0 = new SymbolTable(43);
      SymbolTable symbolTable1 = new SymbolTable(77);
      jSONScanner0.scanDecimal('R');
      jSONScanner0.scanSymbolUnQuoted(symbolTable1);
      jSONScanner0.scanDecimal('q');
      assertEquals('~', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3j?R M4n");
      jSONScanner0.scanDecimal('+');
      jSONScanner0.scanFloat('J');
      char[] charArray0 = new char[5];
      jSONScanner0.matchField2(charArray0);
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = '+';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8du");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '#';
      charArray0[2] = '+';
      charArray0[3] = 'u';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(123);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      jSONScanner0.scanDate('}');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GNV>N>");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_", 9);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("cu");
      linkedList0.add("_");
      linkedList0.spliterator();
      linkedList0.pollLast();
      char char0 = 'P';
      jSONScanner0.scanStringArray(linkedList0, 'P');
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-4038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.nextToken();
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]+");
      jSONScanner0.nextIdent();
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.intValue();
      jSONScanner0.scanIdent();
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'Q';
      charArray0[0] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 20);
      char char1 = 'X';
      jSONReaderScanner0.scanDecimal('X');
      jSONReaderScanner0.info();
      System.setCurrentTimeMillis(20);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      Feature feature0 = Feature.UseBigDecimal;
      jSONReaderScanner0.config(feature0, true);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      jSONReaderScanner0.setTimeZone(timeZone0);
      int int0 = (-906);
      int int1 = (-147);
      int int2 = 102;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      jSONScanner0.scanFloat('[');
      jSONScanner0.np = 369;
      jSONScanner0.longValue();
      jSONScanner0.nextToken();
      assertEquals('G', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new");
      jSONScanner0.scanUUID('!');
      jSONScanner0.close();
      jSONScanner0.nextToken();
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-5302));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - p, info : pos 6, json : error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e");
      jSONScanner0.features = 3169;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      Date date0 = jSONScanner0.scanDate('`');
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K!!wRACk8");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '8');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("89q!~Vt;&0&v");
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'P';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3(y*?oBc1W&o$E%*0|b");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal(')');
      jSONScanner0.scanDate('1');
      jSONScanner0.indexOf('1', 3161);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanDate('b');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.info();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner.checkDate('s', 's', 's', 's', 's', 's', 's', 0);
      jSONScanner0.scanUUID('s');
      jSONScanner0.scanFalse();
      JSONScanner jSONScanner1 = new JSONScanner("false", (-1));
      jSONScanner1.scanDecimal('s');
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayLanguage(locale1);
      jSONScanner1.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      jSONScanner0.isEOF();
      jSONScanner0.nextToken(116);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.close();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"-\", pos 1, json : -GJKEG)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      jSONScanner0.isRef();
      assertEquals(6, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 117);
      SymbolTable symbolTable0 = new SymbolTable(20);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      JSONScanner jSONScanner1 = new JSONScanner(string0);
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      int int0 = (-123008);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"F;CE=kiqu'\"%");
      jSONScanner0.token = 805;
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.pos();
      assertEquals(4, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 117);
      char[] charArray0 = new char[6];
      jSONScanner0.scanNumber();
      charArray0[0] = ')';
      jSONScanner0.scanUUID(')');
      charArray0[1] = '@';
      SymbolTable symbolTable0 = new SymbolTable(127);
      jSONScanner0.scanFieldStringArray(charArray0, 117, symbolTable0);
      charArray0[2] = '$';
      jSONScanner0.scanDecimal('l');
      charArray0[3] = 'B';
      charArray0[4] = 'S';
      charArray0[5] = 'u';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.getLocale();
      jSONScanner0.nextToken();
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.getFeatures();
      jSONScanner0.indexOf('3', 12);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = 'N';
      charArray0[2] = 'l';
      charArray0[3] = 'U';
      charArray0[4] = ')';
      charArray0[5] = '<';
      charArray0[6] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3822);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      JSONScanner jSONScanner1 = new JSONScanner("TODO");
      jSONScanner0.nextToken();
      jSONScanner1.nextToken();
      jSONScanner1.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("", 0);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y->fc8");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      charArray0[0] = 'j';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      long long1 = jSONReaderScanner0.longValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal('%');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3(y*?oBc1W&o$E%*0|b");
      assertEquals(0, jSONScanner0.matchStat);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal(')');
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '/';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = ')';
      charArray0[7] = ')';
      charArray0[8] = ')';
      jSONScanner0.scanFieldStringArray(charArray0, (-230), (SymbolTable) null);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("P");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal('A');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanDecimal('!');
      jSONScanner0.scanDouble('8');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 110;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ldent", 110);
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanDate('_');
      char char0 = '#';
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        ZoneId.of("ldent", map0);
        fail("Expecting exception: ZoneRulesException");
      
      } catch(ZoneRulesException e) {
         //
         // Unknown time-zone ID: ldent
         //
         verifyException("java.time.zone.ZoneRulesProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '8');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3(y*?oBc1W&o$E%*0|b");
      jSONScanner0.nextIdent();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Xoa+math ");
      jSONScanner0.scanIdent();
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f lse");
      jSONScanner0.scanUUID('s');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(1582);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '4');
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      assertEquals('t', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '}';
      charArray0[2] = 'r';
      charArray0[3] = 'L';
      charArray0[4] = '`';
      charArray0[5] = 'S';
      charArray0[6] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 821);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      JSONScanner jSONScanner1 = new JSONScanner("'fO");
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanIdent();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "J\"[@j*&QmLl0Xl:e");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      jSONScanner0.scanDecimal('v');
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xS)I:mf#{L?M\"~C`y?");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. S
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'[3R?k", 837);
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      SymbolTable symbolTable0 = new SymbolTable(5160);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDecimal('2');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      jSONScanner0.scanIdent();
      assertTrue(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '#';
      charArray0[2] = '1';
      charArray0[3] = 'Y';
      charArray0[4] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 920);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.getCurrent();
      SymbolTable symbolTable0 = new SymbolTable(70);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 920, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      jSONScanner0.scanIdent();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "notmath ");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      jSONScanner0.scanDecimal('N');
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@type");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Xoa+math ");
      assertEquals(989, jSONScanner0.getFeatures());
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      JSONScanner jSONScanner1 = new JSONScanner("Xoa+math ", 0);
      boolean boolean0 = jSONScanner1.isEnabled((-1709), (-1709));
      assertEquals(0, jSONScanner1.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-GJKEG)");
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils");
      jSONScanner0.scanIdent();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.longValue();
      JSONLexerBase.isWhitespace('$');
      jSONScanner0.scanType("false");
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      boolean boolean0 = jSONScanner0.isEnabled(45, (-1709));
      assertEquals(6, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.ASMUtils");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fals}e");
      jSONScanner0.scanUUID('s');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 2135);
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'T';
      charArray0[2] = 'W';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 2);
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '*';
      charArray0[2] = '}';
      charArray0[3] = '@';
      charArray0[4] = '9';
      charArray0[5] = '}';
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ovn8");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanUUID('I');
      float float0 = jSONScanner0.scanFloat('Q');
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("", objectArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 735, 45380);
      Locale locale0 = Locale.FRANCE;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      int int0 = 3108;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 3108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      JSONScanner jSONScanner1 = new JSONScanner(string0);
      JSONScanner jSONScanner2 = new JSONScanner("{`d'2u]", 0);
      jSONScanner2.nextIdent();
      jSONScanner0.scanBoolean('\\');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "eql+";
      JSONScanner jSONScanner0 = new JSONScanner("eql+");
      jSONScanner0.nextIdent();
      jSONScanner0.skipWhitespace();
      jSONScanner0.np = 95;
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.compatibleWithFieldName");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      jSONScanner0.tokenName();
      jSONScanner0.indexOf('R', 1943);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oVWEpbLO(,CN|[H");
      jSONScanner0.nextIdent();
      jSONScanner0.charAt(1024);
      jSONScanner0.pos();
      boolean boolean0 = jSONScanner0.isEnabled(0, 9);
      assertEquals(16, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{p]N_5>D.TK2*2r");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 101);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(9);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '3');
      assertEquals(101, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ident");
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanIdent();
      jSONScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8du");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONLexerBase.isWhitespace('7');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1095));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 6, info : pos 0, json : 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("l[@qKNH'n}c(O");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8du");
      jSONScanner0.nextIdent();
      float float0 = jSONScanner0.floatValue();
      assertEquals('d', jSONScanner0.getCurrent());
      assertEquals(8.0F, float0, 0.01F);
      
      jSONScanner0.lexError("eof", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      jSONScanner0.nextIdent();
      jSONScanner0.scanBoolean('q');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(7);
      jSONScanner0.scanFieldStringArray(charArray0, 7, symbolTable0);
      jSONScanner0.scanIdent();
      jSONScanner0.longValue();
      jSONScanner0.setLocale((Locale) null);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[11];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '#';
      charArray0[2] = '3';
      charArray0[3] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1691, 1691);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.charAt(1691);
      jSONReaderScanner0.indexOf('h', 19);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1691);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.longValue();
      jSONScanner0.scanNumber();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanLong('9');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";");
      jSONScanner0.nextToken((-5));
      char[] charArray0 = new char[4];
      jSONScanner0.scanString('[');
      charArray0[0] = 'J';
      charArray0[1] = 'R';
      charArray0[2] = '9';
      charArray0[3] = '%';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$");
      jSONScanner0.tokenName();
      jSONScanner0.scanIdent();
      jSONScanner0.longValue();
      jSONScanner0.scanDate('R');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      int int0 = 175;
      jSONScanner0.nextToken((-638));
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.nextIdent();
      assertEquals('t', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '#';
      charArray0[2] = '\'';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanIdent();
      jSONScanner0.longValue();
      Class<String> class1 = String.class;
      jSONScanner0.scanEnum(class1, (SymbolTable) null, '#');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new");
      jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.token());
      
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      jSONScanner0.isRef();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextIdent();
      assertEquals(23, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("mpdU}ytp EPaSO<tu", 0);
      long long0 = jSONScanner1.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanUUID('s');
      jSONScanner0.scanFalse();
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CqM3(>j;bI|OG?13yd^");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals('(', jSONScanner0.getCurrent());
      assertEquals(25793L, long0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":_");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-719), (-719), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 111);
      jSONReaderScanner0.putChar('0');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(111, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AllowISO8601DateFormat");
      jSONScanner0.scanIdent();
      JSONScanner jSONScanner1 = new JSONScanner("AllowISO8601DateFormat", 0);
      jSONScanner1.nextIdent();
      long long0 = jSONScanner1.longValue();
      assertEquals(18, jSONScanner1.token());
      assertEquals(2367035L, long0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.scanIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(2717955L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.OptionalLong", 59);
      jSONScanner0.scanNumber();
      jSONScanner0.isEnabled(59);
      jSONScanner0.scanDate(',');
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('\\');
      jSONScanner0.putChar('\\');
      jSONScanner0.scanInt('\\');
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$>_{|");
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{e-]c;Y]S[$;qu3L'$N");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.scanDecimal('w');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      Class<Object> class0 = Object.class;
      int int0 = 1800;
      SymbolTable symbolTable0 = new SymbolTable(1800);
      jSONScanner0.scanEnum(class0, symbolTable0, '8');
      jSONScanner0.scanString('d');
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}<Xhm");
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      assertEquals('<', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AllowISO8601DateFormat");
      jSONScanner0.scanIdent();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=j1 YF-%J>'=\"");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.scanBoolean('Q');
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertTrue(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":_");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PD", 48);
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("notmath ");
      jSONScanner0.scanIdent();
      jSONScanner0.nextIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      jSONScanner0.scanIdent();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("&R\"u n_");
      jSONScanner0.nextIdent();
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.intValue();
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~6");
      jSONScanner0.nextIdent();
      jSONScanner0.scanFloat('&');
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = '&';
      charArray0[7] = '&';
      charArray0[8] = '&';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n8");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanUUID('W');
      float float0 = jSONScanner0.scanFloat('Q');
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.longValue();
      jSONScanner0.intValue();
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '5';
      charArray0[2] = ';';
      charArray0[3] = 'U';
      charArray0[4] = '5';
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('8');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'k');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n8");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      float float0 = jSONScanner0.scanFloat('Q');
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8du");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("' 2MKM%jU-'hS1");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'n';
      charArray0[2] = 'z';
      charArray0[3] = 'n';
      charArray0[4] = 'h';
      charArray0[5] = '<';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n8");
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(hx`@i");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      float float0 = jSONScanner0.scanFloat('9');
      assertEquals(0.0F, float0, 0.01F);
      
      JSONScanner jSONScanner1 = new JSONScanner("iyx");
      long long0 = jSONScanner1.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{e-]c;Y]S[$;qu3L'$N");
      jSONScanner0.longValue();
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('O');
      jSONScanner0.next();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      jSONScanner0.scanIdent();
      assertTrue(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("\u0004zC_!t}hB$K'", 0);
      int int0 = jSONScanner1.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eql+");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.nextIdent();
      assertEquals(3, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "f~<\\uwP)";
      JSONScanner jSONScanner0 = new JSONScanner(string0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.scanIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(618L, long0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-955));
      jSONReaderScanner0.isEnabled((-955), 198);
      JSONScanner jSONScanner0 = new JSONScanner("$l)AP0Q}^B$F'hW`g", (-1612416909));
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'A';
      charArray0[2] = '|';
      charArray0[3] = '}';
      jSONScanner0.scanFieldLong(charArray0);
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(127);
      jSONScanner0.scanEnum(class0, symbolTable0, ':');
      assertEquals((-1612416909), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgQLO,CoN|[H");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.info();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(hx`@i");
      jSONScanner0.setToken(0);
      jSONScanner0.nextIdent();
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      assertEquals((-214748364), int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new");
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("(f,\"G_");
      jSONScanner1.nextToken(0);
      jSONScanner1.scanNumber();
      jSONScanner1.scanDecimal('');
      assertEquals(2, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*w");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '<');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1684, 1684);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "null";
      jSONScanner0.lexError(")ymI", objectArray0);
      jSONScanner0.scanIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o");
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '|';
      charArray0[2] = 'm';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanIdent();
      SymbolTable symbolTable0 = new SymbolTable(57);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '\'');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "WriteDateUseDateFormat";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteDateUseDateFormat", 2436);
      jSONReaderScanner0.isEnabled(2436, 2436);
      char[] charArray0 = new char[7];
      jSONReaderScanner0.longValue();
      charArray0[0] = 'Y';
      char char0 = 'i';
      charArray0[1] = 'i';
      jSONReaderScanner0.intValue();
      charArray0[2] = 'M';
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      charArray0[3] = 'A';
      charArray0[4] = '\"';
      charArray0[5] = ']';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. W
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'q';
      charArray0[2] = 'B';
      charArray0[3] = 'c';
      charArray0[4] = '{';
      charArray0[5] = 'v';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 3277);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      char[] charArray0 = new char[6];
      jSONScanner0.matchField(charArray0);
      charArray0[0] = 'Y';
      charArray0[1] = ':';
      charArray0[2] = '_';
      charArray0[3] = '';
      charArray0[4] = '1';
      charArray0[5] = '?';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 185);
      jSONScanner1.nextIdent();
      assertEquals(20, jSONScanner1.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed jsonArray", 42);
      jSONReaderScanner0.isBlankInput();
      assertEquals(42, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.util.Collections$EmptyMap");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.nextIdent();
      assertEquals(4, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldUUID(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~6");
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.scanBoolean('a');
      assertEquals('6', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$^Z8RKY)QT+<Wj", (-1717986916));
      jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1717986916), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanType("type");
      jSONScanner0.skipWhitespace();
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      charArray0[7] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1579);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : [
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~dx}S_?]'Q`t>");
      JSONScanner jSONScanner1 = new JSONScanner("treeset");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ~
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("pdu");
      SymbolTable symbolTable0 = new SymbolTable(1407);
      jSONScanner0.scanSymbol(symbolTable0);
      JSONScanner jSONScanner1 = new JSONScanner("MK", 1407);
      jSONScanner1.longValue();
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon(1407);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - M, info : pos 0, json : MK
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=j1 YF-J%J>'=\"");
      jSONScanner0.scanUUID('N');
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      assertEquals('j', jSONScanner0.getCurrent());
      
      jSONScanner0.scanString();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`");
      SymbolTable symbolTable0 = new SymbolTable(72);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : `pos 0, json : `
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('X');
      int int0 = jSONScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.longValue();
      jSONScanner0.scanDate('+');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=j1 YF-%J>'=\"");
      jSONScanner0.longValue();
      jSONScanner0.scanDate('0');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('0');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 0 - =, info : pos 0, json : =j1 YF-%J>'=\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n8");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.intValue();
      assertEquals(628, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2=S84DZUrGx>#ii#opn");
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      jSONScanner0.scanDecimal('');
      charArray0[1] = '@';
      charArray0[2] = 'y';
      SymbolTable symbolTable0 = new SymbolTable(2771);
      jSONScanner0.scanFieldStringArray(charArray0, 18, symbolTable0);
      char[] charArray1 = new char[6];
      charArray1[0] = '@';
      charArray1[1] = '';
      charArray1[2] = '@';
      charArray1[3] = 'y';
      charArray1[4] = '';
      charArray1[5] = '@';
      jSONScanner0.scanFieldDecimal(charArray1);
      jSONScanner0.nextToken();
      assertEquals('=', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(hx`@i");
      jSONScanner0.nextIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(10, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.intValue();
      assertEquals(63649, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '=';
      charArray0[2] = 'n';
      charArray0[3] = 'T';
      charArray0[4] = 'N';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.stringVal();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.intValue();
      char[] charArray0 = new char[0];
      int int0 = 57;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner jSONScanner1 = new JSONScanner("Set");
      jSONScanner1.nextIdent();
      assertEquals('\u001A', jSONScanner1.getCurrent());
      
      JSONScanner jSONScanner2 = new JSONScanner("false");
      jSONScanner2.scanISO8601DateIfMatch();
      JSONScanner jSONScanner3 = new JSONScanner("Set", 0);
      jSONScanner3.close();
      assertEquals(0, jSONScanner3.getFeatures());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      jSONScanner0.scanBoolean('$');
      jSONScanner0.isEnabled((-779));
      SymbolTable symbolTable0 = new SymbolTable(47);
      jSONScanner0.scanSymbol(symbolTable0);
      int int0 = jSONScanner0.token();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(91);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      float float0 = jSONScanner0.scanFloat('>');
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'G';
      charArray0[2] = '}';
      charArray0[3] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, 41);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      char[] charArray1 = new char[6];
      charArray1[0] = 'G';
      charArray1[1] = 'A';
      charArray1[2] = 'G';
      charArray1[3] = '}';
      charArray1[4] = '}';
      charArray1[5] = 'a';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      jSONReaderScanner0.scanStringArray(list0, 'y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oEpbgLO(,Co|[H");
      jSONScanner0.longValue();
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      jSONScanner0.matchStat = 3600;
      charArray0[1] = 'l';
      charArray0[2] = '\\';
      charArray0[3] = '6';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.getCalendar();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, (-1655));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.scanUUID('!');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      boolean boolean0 = jSONScanner0.scanBoolean('H');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2251);
      char[] charArray1 = new char[4];
      charArray1[0] = ')';
      charArray1[1] = '\\';
      charArray1[2] = '\\';
      charArray1[3] = '\\';
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1684, 1684);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.sub_chars(1684, 76);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar(':');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=j1 YF-%J>'=\"");
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      jSONScanner0.tokenName();
      jSONScanner0.scanBoolean('v');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=j1 YF-%J>'=\"");
      jSONScanner0.scanUUID('N');
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner jSONScanner1 = new JSONScanner("false");
      JSONScanner jSONScanner2 = new JSONScanner("false");
      jSONScanner2.scanDecimal('<');
      jSONScanner2.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'P';
      charArray0[2] = 'K';
      charArray0[3] = 'o';
      charArray0[2] = 'N';
      charArray0[5] = 'Z';
      JSONLexerBase.isWhitespace('Z');
      jSONScanner1.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "=j1 YF-%J>'=\"";
      JSONScanner jSONScanner0 = new JSONScanner("=j1 YF-%J>'=\"");
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. =
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.nextIdent();
      jSONScanner0.scanString('%');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : pos 1, json : ,oWEpbgLO(,CoN|[H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 3968);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(1271);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '&');
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.scanBoolean('$');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      jSONScanner0.intValue();
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0", 83);
      jSONScanner0.scanString('A');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8[KIcEW", 120);
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      charArray0[0] = '@';
      charArray0[1] = 'b';
      charArray0[2] = '{';
      charArray0[3] = '`';
      charArray0[4] = '<';
      charArray0[5] = 'e';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      System.setCurrentTimeMillis(1144L);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanBoolean('y');
      char[] charArray0 = new char[0];
      jSONScanner0.intValue();
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k6ejQofwJe,W}T,''");
      jSONScanner0.subString(5, 5);
      jSONScanner0.scanFloat('A');
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanDouble('A');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match A - k, info : pos 0, json : k6ejQofwJe,W}T,''
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[17];
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextIdent();
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      jSONScanner0.scanIdent();
      long long0 = jSONScanner0.longValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(3469L, long0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.features = 956;
      jSONScanner0.scanBoolean('{');
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Xf");
      jSONScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(59);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[11];
      JSONScanner jSONScanner0 = new JSONScanner("=j1 YF-%J>'=\"");
      jSONScanner0.nextIdent();
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('j', jSONScanner0.getCurrent());
      
      jSONScanner0.close();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*k.[H");
      char char0 = 'a';
      int int0 = (-1496);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : *pos 0, json : *k.[H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[11];
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.putChar('(');
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(1492, (-644));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.", 101);
      Feature feature0 = Feature.UseBigDecimal;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanUUID('9');
      assertEquals(229, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0", 83);
      String string0 = jSONScanner0.scanString('A');
      assertNull(string0);
      
      jSONScanner0.scanUUID('9');
      assertEquals(83, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[1];
      jSONScanner0.setToken((-484));
      charArray0[0] = 'Q';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanUUID('X');
      jSONScanner0.longValue();
      jSONScanner0.getTimeZone();
      assertEquals((-484), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",oWEpbgLO(,CoN|[H");
      jSONScanner0.nextIdent();
      jSONScanner0.scanDate('/');
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0");
      jSONScanner0.np = 110;
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('=');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match = - 0, info : pos 0, json : 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k6ejQofwJe,W}T,''", 19);
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(19, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k6ejQofwJe,W}T,''", 19);
      jSONScanner0.nextToken();
      jSONScanner0.longValue();
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = 'C';
      SymbolTable symbolTable0 = new SymbolTable(78);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'H');
      charArray0[2] = '>';
      jSONScanner0.matchField2(charArray0);
      assertEquals('6', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      jSONReaderScanner0.np = 106;
      TimeZone timeZone0 = TimeZone.getTimeZone("YK>");
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.bytesValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tk;_+*)e6");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("tk;_+*)e6", (-2544));
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      Collection<String> collection0 = new LinkedList<String>();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.scanInt(')');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - T, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'b';
      charArray0[2] = 'S';
      charArray0[3] = 's';
      charArray0[4] = 'Q';
      charArray0[5] = 'L';
      charArray0[6] = '@';
      charArray0[7] = '.';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 7);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('X');
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 't';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 262);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.setToken((-1099));
      assertEquals((-1099), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("U");
      jSONScanner0.scanType("[[O3`.cE;!EfS+s");
      jSONScanner0.skipWhitespace();
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.info();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(91);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1837));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = "R4";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R4");
      jSONReaderScanner0.resetStringPosition();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'Q';
      charArray0[2] = '1';
      charArray0[3] = 'Y';
      charArray0[4] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 920);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('?', char0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[11];
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanType("[[O3`.cE;!EfS+s");
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      char[] charArray0 = new char[11];
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.putChar('(');
      jSONScanner0.nextIdent();
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(20, jSONScanner0.token());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '~');
      jSONScanner0.bp = 4764;
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = ';';
      charArray0[2] = 'P';
      charArray0[3] = '|';
      charArray0[4] = ' ';
      jSONScanner0.scanFieldUUID(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.", 101);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('9');
      assertEquals(101, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextIdent();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, (-1132092732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":D1");
      jSONScanner0.longValue();
      jSONScanner0.longValue();
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'j';
      charArray0[2] = '<';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'n');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (-2));
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanNumber();
      char[] charArray1 = new char[8];
      charArray1[0] = 'T';
      charArray1[1] = 'D';
      charArray1[2] = '6';
      charArray1[3] = 'm';
      charArray1[4] = 'A';
      charArray1[5] = 'P';
      jSONScanner0.nextToken((-2));
      charArray1[6] = ']';
      char char0 = 'R';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2233);
      char[] charArray1 = new char[8];
      charArray1[0] = ')';
      jSONReaderScanner0.scanNumber();
      charArray1[1] = 'o';
      charArray1[2] = 'K';
      charArray1[3] = '-';
      jSONReaderScanner0.longValue();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, 'K');
      charArray1[5] = 'G';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      jSONReaderScanner0.scanFieldLong(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      jSONReaderScanner0.np = 1154;
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1010);
      int int0 = 106;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      char[] charArray0 = new char[11];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      jSONReaderScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",-");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      jSONScanner0.timeZone = (TimeZone) simpleTimeZone0;
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("");
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = 'd';
      charArray0[2] = 'q';
      charArray0[3] = 'S';
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'U';
      charArray0[2] = 'H';
      charArray0[3] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.next();
      jSONScanner0.scanLong('H');
      jSONScanner0.scanFieldLong(charArray0);
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.config(feature0, false);
      jSONScanner0.isEnabled(1500, (-2));
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8[KIcEW", 120);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'b';
      charArray0[2] = '{';
      charArray0[3] = 'U';
      charArray0[4] = '<';
      charArray0[5] = 'e';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.nextToken(1901);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",-");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'K';
      charArray0[2] = 'o';
      charArray0[3] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      jSONReaderScanner0.longValue();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, '2');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.charAt(145);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2233);
      JSONScanner jSONScanner0 = new JSONScanner("rk");
      jSONScanner0.nextIdent();
      char[] charArray1 = new char[4];
      charArray1[0] = ')';
      charArray1[1] = '\\';
      charArray1[2] = '\\';
      charArray1[3] = '\\';
      jSONScanner0.charArrayCompare(charArray1);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'q';
      charArray0[2] = '[';
      charArray0[3] = '7';
      charArray0[4] = '2';
      charArray0[5] = 'u';
      charArray0[6] = '5';
      charArray0[7] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanType("");
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.close();
      Locale locale0 = Locale.CHINA;
      jSONReaderScanner0.setLocale(locale0);
      int int0 = jSONReaderScanner0.scanType(", info : ");
      assertEquals((-2), int0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.next();
      JSONScanner.checkDate('/', '+', 'p', 'K', 'p', 'X', 6, 6);
      float float0 = jSONScanner0.scanFloat('a');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'b';
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[4] = (Object) "java.time.ZoneRegion";
      objectArray0[5] = (Object) '.';
      Object object1 = new Object();
      objectArray0[6] = object1;
      SymbolTable symbolTable0 = new SymbolTable(1305);
      JSONScanner.charArrayCompare("java.time.ZoneRegion", 102, charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZoneRegion", 46);
      int int0 = jSONScanner0.getFeatures();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'q';
      charArray0[2] = '[';
      charArray0[3] = '7';
      charArray0[4] = '2';
      charArray0[5] = 'u';
      charArray0[6] = '5';
      charArray0[7] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanType("");
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('B', (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 110);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanBoolean('y');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",-");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      jSONScanner0.timeZone = (TimeZone) simpleTimeZone0;
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '\\';
      charArray0[2] = 'Q';
      charArray0[3] = 'W';
      charArray0[4] = 'p';
      jSONScanner0.scanDouble('G');
      jSONScanner0.scanDouble('\\');
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'b';
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      jSONReaderScanner0.indexOf('|', 117);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 110);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner("nx-b\"[zU)e3pA/", 1667);
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      jSONScanner0.matchField2(charArray0);
      Object object1 = new Object();
      jSONScanner0.scanDecimal('>');
      Object[] objectArray0 = new Object[8];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSONScanner0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) '>';
      objectArray0[5] = (Object) "nx-b\"[zU)e3pA/";
      objectArray0[6] = (Object) '>';
      objectArray0[7] = (Object) jSONScanner0;
      jSONScanner0.lexError("illegal.char", objectArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2233);
      char[] charArray1 = new char[8];
      charArray1[0] = ')';
      charArray1[1] = 'o';
      charArray1[2] = 'K';
      charArray1[3] = '-';
      jSONReaderScanner0.longValue();
      charArray1[4] = '/';
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, 'K');
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.charAt(2233);
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[8];
      charArray1[0] = ')';
      charArray1[1] = 'o';
      charArray1[2] = 'K';
      charArray1[3] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 106);
      jSONReaderScanner0.indexOf('d', 106);
      JSONScanner jSONScanner0 = new JSONScanner("Dn7E;");
      jSONScanner0.scanFieldInt(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1614);
      jSONReaderScanner1.scanFieldFloatArray2(charArray1);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("@j");
      jSONScanner1.scanFloat('k');
      jSONScanner0.scanDate('Q');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      char[] charArray0 = new char[11];
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextIdent();
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 110);
      Class<String> class0 = String.class;
      jSONScanner0.scanBoolean('y');
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      boolean boolean0 = false;
      char char0 = 'n';
      jSONReaderScanner0.scanDecimal('n');
      char char1 = '[';
      jSONReaderScanner0.scanString('[');
      Locale locale0 = Locale.US;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.features = 117;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2233);
      char[] charArray1 = new char[8];
      charArray1[0] = ')';
      charArray1[2] = 'K';
      charArray1[3] = '-';
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      charArray1[4] = '/';
      SymbolTable symbolTable0 = new SymbolTable(1570);
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanFieldStringArray(charArray1, 1570, symbolTable0);
      jSONScanner0.scanDouble('o');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 1613);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'n';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '';
      charArray0[5] = ':';
      charArray0[6] = 'W';
      charArray0[7] = 'g';
      charArray0[8] = 'D';
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(1613, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 95);
      jSONReaderScanner0.setToken(3727);
      JSONScanner jSONScanner0 = new JSONScanner("%</C%TZ");
      char[] charArray0 = new char[4];
      char char0 = '3';
      charArray0[0] = '3';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = 'a';
      int int0 = 13;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PDu");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = (-1932);
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", (-1932));
      Locale locale0 = Locale.FRANCE;
      locale0.clone();
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = '4';
      charArray0[0] = '4';
      int int0 = 117;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117);
      boolean boolean0 = false;
      char char1 = 'n';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('n');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2233);
      char[] charArray1 = new char[8];
      charArray1[0] = ')';
      charArray1[1] = 'o';
      charArray1[2] = 'K';
      charArray1[3] = '-';
      jSONReaderScanner0.longValue();
      charArray1[4] = '/';
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, 'K');
      charArray1[5] = 'G';
      jSONReaderScanner0.longValue();
      charArray1[6] = '\"';
      charArray1[7] = 'p';
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.charAt(2233);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tk;_+*)e6", 0);
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("tk;_+*)e6", (-2544));
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2544), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = 'q';
      charArray0[2] = '[';
      charArray0[3] = '7';
      charArray0[4] = '2';
      charArray0[5] = 'u';
      charArray0[6] = '5';
      charArray0[7] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanType("");
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.scanType(", info : ");
      jSONReaderScanner0.tokenName();
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.next();
      boolean boolean0 = JSONScanner.checkDate('/', '+', 'p', 'K', 'p', 'X', 6, 6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      char char0 = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'n';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'k';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 110);
      Class<String> class0 = String.class;
      boolean boolean0 = jSONScanner0.scanBoolean('y');
      assertFalse(boolean0);
      
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(110, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZoneRegion");
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '^';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSONScanner0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSONScanner0;
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) "java.time.ZoneRegion";
      objectArray0[5] = (Object) '.';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.sp = 110;
      Object object1 = new Object();
      objectArray0[6] = object1;
      jSONScanner0.lexError("java.time.ZoneRegion", objectArray0);
      charArray0[2] = 'u';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JSONLexerBase.isWhitespace('y');
      JSONScanner jSONScanner0 = new JSONScanner("<Pa,7\"nVA5A157", 0);
      jSONScanner0.subString(0, 0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 336);
      int int0 = 106;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",-");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      jSONScanner0.timeZone = (TimeZone) simpleTimeZone0;
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '\\';
      charArray0[2] = 'Q';
      charArray0[3] = 'W';
      charArray0[4] = 'p';
      charArray0[5] = 'H';
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(16, jSONScanner0.token());
  }
}
