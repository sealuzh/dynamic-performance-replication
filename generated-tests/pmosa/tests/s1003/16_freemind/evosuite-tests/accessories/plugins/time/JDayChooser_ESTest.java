/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:27:06 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.mindmapmode.actions.ChangeArrowLinkEndPoints;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Time;
import java.time.Month;
import java.util.Date;
import java.util.Locale;
import javax.help.BackAction;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.DocumentListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1182, true);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JTable jTable0 = new JTable(396, 396);
      Color color0 = jTable0.getSelectionForeground();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jTable0, 3832, 396, 396, 0, 396, 3832, 0, 63719, false, 396, 0, 63719, 63719);
      jDayChooser0.getToolTipText((MouseEvent) mouseWheelEvent0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Dimension dimension0 = jDayChooser0.getMaximumSize();
      dimension0.clone();
      jDayChooser0.setSize(dimension0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getLocale();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, Integer.MAX_VALUE, 1859L, 65552, 0, 'r', Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("", '\"', '\"');
      jDayChooser0.drawDays();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1820), false, jDayChooser0);
      Month month0 = Month.JANUARY;
      focusEvent0.setSource(month0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getPropertyChangeListeners();
      boolean boolean0 = true;
      jDayChooser0.getActionMap();
      int int0 = 0;
      jDayChooser0.createVolatileImage(0, 0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.drawDays();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StringContent stringContent0 = new StringContent((-847));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      defaultStyledDocument0.addDocumentListener((DocumentListener) null);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Style style0 = styleContext0.addStyle("ve=J_", styleContext_NamedStyle0);
      Font font0 = defaultStyledDocument0.getFont(style0);
      jDayChooser0.setFont(font0);
      jDayChooser0.init();
      jDayChooser0.setWeekOfYearVisible(false);
      JTable jTable0 = new JTable(10, 0);
      Color color0 = jTable0.getGridColor();
      Color color1 = color0.brighter();
      jDayChooser0.setSundayForeground(color1);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-834), "`V|[({mmor7*a$n_", (-834), 335);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 743;
      floatArray0[1] = (float) (-134);
      floatArray0[2] = (float) 743;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 743;
      floatArray0[5] = (float) (-134);
      Color.RGBtoHSB(743, 0, (-134), floatArray0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9VT";
      stringArray0[1] = "?p*F'[L;e5]v)";
      stringArray0[2] = "ukDc%@<Y4DR+/&3g;4";
      stringArray0[3] = "org.apache.batik.css.engine.value.StringMap";
      stringArray0[4] = "??";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      jDayChooser0.days = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 40, 40, 40, 'x');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("/7GrX]1Rp55jd <9b", false, false);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getLocale();
      jDayChooser0.firePropertyChange("fz", 597.75397F, (float) 787);
      jDayChooser0.setMonth(787);
      jDayChooser0.getTransferHandler();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.init();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      imageCapabilities0.clone();
      jDayChooser0.createVolatileImage(787, 787, imageCapabilities0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setFocus();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Object[][]) null, (Object[]) null);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      ListSelectionModel listSelectionModel0 = defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, listSelectionModel0);
      jTable0.getSelectedRows();
      defaultTableColumnModel0.getSelectionModel();
      Color color0 = jTable0.getSelectionForeground();
      jDayChooser1.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      boolean boolean0 = jDayChooser2.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getFont();
      jDayChooser0.setFont((Font) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDebugGraphicsOptions(2756);
      jDayChooser0.getDecorationBackgroundColor();
      Insets insets0 = jDayChooser0.getInsets();
      jDayChooser0.getInsets(insets0);
      jDayChooser0.init();
      Locale locale0 = Locale.FRENCH;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2756, false, jDayChooser0);
      jDayChooser0.setMaxDayCharacters(205);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-29));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocus();
      jDayChooser0.setDebugGraphicsOptions(31);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 31, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setWeekOfYearVisible(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.paintImmediately(128, 128, 1498, 128);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getDayPanel();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 90, "'T@PFBf(1PSkJ02k@");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDebugGraphicsOptions(2756);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2756, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getSelectedDay();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(90, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-447), (-1996L), (-447), (-2991), 'E');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2245));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.defaultMaxSelectableDate = date0;
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 21, (-534L), 8, (-2105), 'o');
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser2.setWeekOfYearVisible(false);
      assertFalse(jDayChooser2.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-2187));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 9, 9, 26, 39, '<');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSundayForeground();
      assertEquals(2, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(26);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 341, (-2187), (-2187), 33, '*');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, (-1L), (-966), (-966), 'x');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 238, (-1L), (-2494), 34, 'x');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(537);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 46, 537, 40, 40, 'H');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(537);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1540), (-949L), 40, 40, '9');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1073741827, 0L, (-1431655763), 37, '9');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(537);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 537, 537, 38, '^');
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-593));
      jDayChooser0.setYear(0);
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 40, 35, 'g');
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-966), 40, 34, (-966), 'g');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-579));
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.magenta;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 1L, 40, 36, ':');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFont((Font) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.maxDayCharacters = 11;
      jDayChooser0.getDayPanel();
      jDayChooser0.isDecorationBackgroundVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      jDayChooser_DecoratorButton0.getPreferredSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getGraphics();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser_DecoratorButton0.getDebugGraphicsOptions();
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      ActionEvent actionEvent0 = new ActionEvent(systemColor0, 11, "day", 11);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.SystemColor cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-829));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-829), (-829), 37, 37, '4');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-829), 1L, (-829), 37, '4');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.initDecorations();
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
