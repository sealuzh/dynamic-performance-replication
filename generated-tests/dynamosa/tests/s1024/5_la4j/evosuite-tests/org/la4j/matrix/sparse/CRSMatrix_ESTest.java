/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 13:48:06 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(7, vectorFunction0);
      //  // Unstable assertion: assertEquals((-1021.9283728775), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      //  // Unstable assertion: assertEquals(1.0, cRSMatrix0.density(), 0.01);
      //  // Unstable assertion: assertEquals(0.6666666666666666, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double double0 = cRSMatrix0.minInRow(0);
      //  // Unstable assertion: assertEquals(1.0, cRSMatrix0.density(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
      //  // Unstable assertion: assertEquals(1677.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(21, 13, 1.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertEquals(21, doubleArray0.length);
      assertEquals(273, cRSMatrix0.cardinality());
      assertEquals(0.9, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(21, 13, 1.0, (Random) mockRandom0);
      double double0 = cRSMatrix0.sum();
      assertEquals(273, cRSMatrix0.cardinality());
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.copyOfShape(320, 783);
      assertEquals(320, matrix0.rows());
      assertEquals(783, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      cRSMatrix0.swapColumns(0, 3);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastRow();
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(0.25, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll(1);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      Matrix matrix0 = cRSMatrix0.copyOfShape(2, 0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blankOfRows(2446);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(4696, 1692, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(32, 24, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2650, 2650);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1338, 155);
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(1338, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Vector vector0 = cRSMatrix0.getColumn(64);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("  ");
      assertEquals(1, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 549;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(549.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-1039), (-1039), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1039x-1039
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, 0, 240);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(1, 1, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(211, (-35));
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.setAll((-52.0));
      assertEquals((-52.0), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-1737), 1000, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1737' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(271);
      cRSMatrix0.set(0, 121, (-2528.884219961406));
      assertEquals((-2528.884219961406), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(211, (-35));
      cRSMatrix0.set(191, 171, 2744.6317124084);
      assertEquals(212, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(2, (double) 939, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(497, 0, 100.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '497' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-3420));
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-3420), (double) (-3420), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3420x-3420
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, Double.NEGATIVE_INFINITY, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(10, (-3900), 1.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 10x-3900
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 2, (Random) null);
      sparseMatrix0.nonZeroIteratorOfRow(0);
      assertEquals(0, sparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-294));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1338, 155);
      boolean boolean0 = cRSMatrix0.nonZeroAt(155, (-817));
      assertEquals(155, cRSMatrix0.columns());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-1213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1213
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.maxInRow(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-2080));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2080
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.iteratorOfRow(0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-1856));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1856
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Matrix matrix0 = cRSMatrix0.to(matrixFactory0);
      assertEquals(0.0, matrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(1, (-1344), 26.28753058264244);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1344' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(903, 903);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(0, 903, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '903' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      double double0 = cRSMatrix0.getOrElse(1, 0, 0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4630, 4630, 4630);
      Vector vector0 = cRSMatrix0.getColumn(4630);
      assertEquals(4630, cRSMatrix0.columns());
      assertEquals(4630, vector0.length());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Vector vector0 = cRSMatrix0.getColumn((-5905));
      assertEquals(3, vector0.length());
      assertEquals(3, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(211, 0, doubleArray0);
      assertEquals(211, cRSMatrix0.rows());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1621), (-1621), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1621x-1621
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 939, doubleArray0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(939, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(1, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, 0.0, (Random) null);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) sparseMatrix0).eachInRow((-1972), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1972
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(155, 0);
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, (-2637.872616));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.copyOfShape(0, 0);
      assertEquals(0, matrix0.columns());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.blankOfShape(243, 0);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(243, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(0, 1883);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1883, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-141), (-141), (-141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -141x-141
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2548), (-2548));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2548x-2548
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(21, 13, 1.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(640, 640);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix1.to(matrixFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-6903), (-6903), 100.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-6903' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(225);
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-209L));
      // Undeclared exception!
      CRSMatrix.random(549, 549, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-193), 3, 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, 0.0, (Random) mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 24);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(3470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1287, 1287);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1570, 228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1570
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[0];
      CRSMatrix cRSMatrix0 = new CRSMatrix(1430, 32, 1430, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(257);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 257
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 2, (Random) null);
      // Undeclared exception!
      try { 
        ((CRSMatrix) sparseMatrix0).iteratorOfRow(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(240);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1073741825
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-1922), 481, (-1922));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1922' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("0j8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(13, 4, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow((-26), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(21, 13, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(24, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(266, 11.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(266, 11.0);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((byte) (-31), 191.4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2650, 2650);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(32, (-1284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-1284
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(206, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(2603, (-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2603x-899
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-27), (-27), (-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -27x-27
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix((-3437), (-1369));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3437x-1369
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(2112, 2219, Integer.MAX_VALUE, (double[]) null, (int[]) null, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 4686528.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(271);
      // Undeclared exception!
      cRSMatrix0.multiply((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(265, 265);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(4257, byteArray0.length);
      assertEquals(265.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2881);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(7, vectorFunction0);
      assertEquals(3.469812212076368E-4, cRSMatrix1.density(), 0.01);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3423, 6083);
      Matrix matrix0 = cRSMatrix0.rotate();
      assertEquals(0.0, matrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n7 7 0\n");
      assertEquals(7, sparseMatrix0.columns());
      assertEquals(7, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1344, 1287);
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1287, 1287);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 757.392234, (-1.0), (-1.0), (double)24).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(7, vectorFunction0);
      double double0 = cRSMatrix0.maxInRow(7);
      assertEquals(757.392234, cRSMatrix0.max(), 0.01);
      assertEquals(757.392234, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(271);
      double double0 = cRSMatrix0.min();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(271, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(271);
      double double0 = cRSMatrix0.max();
      assertEquals(271, cRSMatrix0.cardinality());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      double double0 = cRSMatrix0.max();
      //  // Unstable assertion: assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(21);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(21, 13, 1.0, (Random) mockRandom0);
      cRSMatrix0.setAll(13);
      assertEquals(13.0, cRSMatrix0.max(), 0.01);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(24, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int0 = cRSMatrix0.rank();
      //  // Unstable assertion: assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(995, 995, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(266, 11.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(11.0, cRSMatrix0.max(), 0.01);
      assertEquals(266, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4419);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfColumns(1128);
      assertEquals(4419, cRSMatrix0.cardinality());
      assertEquals(2.2629554197782303E-4, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1128, cRSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(271, 271, 271);
      // Undeclared exception!
      cRSMatrix0.setAll(271);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.setAll(0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.swapColumns(0, 1);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(271);
      int[] intArray0 = new int[4];
      intArray0[1] = 121;
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(271, cRSMatrix0.cardinality());
      assertEquals(10, cRSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(24);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '25' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      Matrix matrix0 = cRSMatrix0.sliceBottomRight(7, 7);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) sparseMatrix0).eachInRow(1, vectorProcedure0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(4, sparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(222);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      CRSMatrix.randomSymmetric(211, 0.7, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1, (double) 1, (Random) mockRandom0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, 2, (double) 2, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 2, (double) 1, (Random) mockRandom0);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      double double0 = matrix0.min();
      //  // Unstable assertion: assertEquals(2, matrix0.rows());
      //  // Unstable assertion: assertFalse(matrix0.equals((Object)cRSMatrix0));
      //  // Unstable assertion: assertEquals((-3772.8), double0, 0.01);
      //  // Unstable assertion: assertEquals(2, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("7N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(0, (-3961), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, denseMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1402, 1402, 1394);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2, 1402);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, sparseMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1808, 2290);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(2);
      assertEquals(2290, compressedVector0.length());
      assertEquals(1808, cRSMatrix0.rows());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
  }
}
