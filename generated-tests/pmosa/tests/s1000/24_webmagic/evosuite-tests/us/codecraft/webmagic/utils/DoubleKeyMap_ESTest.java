/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:10:04 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Object object0 = new Object();
      Object object1 = new Object();
      doubleKeyMap0.get(object0, object1);
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(map0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Integer>(class0);
      doubleKeyMap2.remove((Integer) null, (Object) null);
      Integer integer0 = new Integer(0);
      doubleKeyMap2.remove(integer0);
      Map<Integer, Object> map1 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(object0, map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0);
      Integer integer0 = new Integer(1056);
      doubleKeyMap0.put(integer0, "<>N", integer0);
      Integer integer1 = new Integer(1056);
      doubleKeyMap0.get(integer1, "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Map<String, Object>, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Integer, Map<String, Object>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      doubleKeyMap0.put((Integer) null, "<pio", (Integer) null);
      doubleKeyMap0.remove((Integer) null, "");
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Map<String, Map<String, Object>>> hashMap1 = new HashMap<String, Map<String, Map<String, Object>>>();
      DoubleKeyMap<String, String, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<String, Object>>(hashMap1);
      doubleKeyMap1.remove("");
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>();
      Object object0 = new Object();
      doubleKeyMap2.remove(object0);
      Integer integer0 = new Integer(449);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Integer integer1 = new Integer(1);
      doubleKeyMap2.put((Object) hashMap1, (Object) hashMap2, integer1);
      HashMap<Integer, Map<String, String>> hashMap3 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap3 = new DoubleKeyMap<Integer, String, String>(hashMap3);
      Map<String, String> map0 = doubleKeyMap3.get(integer1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Object>>();
      doubleKeyMap0.remove("");
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      doubleKeyMap1.put((Object) doubleKeyMap0, (Object) "", integer0);
      doubleKeyMap1.remove((Object) "");
      Integer integer1 = new Integer(1);
      doubleKeyMap1.put((Object) doubleKeyMap0, (Object) "", integer1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<String, Object>, String> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Object, Map<String, Object>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
