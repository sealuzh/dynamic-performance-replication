/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:28:19 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      doubleKeyMap0.remove(object0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(class0);
      Integer integer0 = new Integer((-1));
      doubleKeyMap1.get(integer0, (Object) "");
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>(class1);
      doubleKeyMap2.remove(integer0, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>();
      Map<Integer, Map<String, String>> map0 = doubleKeyMap3.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap4 = new DoubleKeyMap<Integer, String, String>(map0, class1);
      Integer integer1 = new Integer((-757));
      String string0 = doubleKeyMap4.remove(integer1, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Map<Integer, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>(map0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      doubleKeyMap1.remove(integer1);
      doubleKeyMap1.get(integer0, integer0);
      doubleKeyMap0.remove((Object) integer0, (Object) doubleKeyMap1);
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      Map<String, Map<Object, String>> map1 = doubleKeyMap2.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap3 = new DoubleKeyMap<String, Object, String>(map1, class0);
      doubleKeyMap3.remove((String) null);
      HashMap<Object, Map<Integer, String>> hashMap1 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap4 = new DoubleKeyMap<Object, Integer, String>(hashMap1);
      Object object0 = new Object();
      Integer integer2 = new Integer((-1));
      doubleKeyMap4.remove(object0, integer2);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap5 = new DoubleKeyMap<Object, String, Integer>(class0);
      doubleKeyMap5.remove((Object) integer0, "@iW");
      DoubleKeyMap<Object, String, String> doubleKeyMap6 = new DoubleKeyMap<Object, String, String>(class0);
      Map<String, Map<Object, Object>> map2 = doubleKeyMap6.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap7 = new DoubleKeyMap<String, Object, Object>(map2, class0);
      doubleKeyMap7.remove((String) null);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap8 = new DoubleKeyMap<Object, Integer, Integer>(class1);
      Object object1 = new Object();
      doubleKeyMap8.put(object1, integer0, integer2);
      Map<Object, Map<Object, Integer>> map3 = doubleKeyMap8.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap9 = new DoubleKeyMap<Object, Object, Integer>(map3);
      doubleKeyMap9.remove((Object) null);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap10 = new DoubleKeyMap<Object, Object, Object>();
      Object object2 = new Object();
      doubleKeyMap10.put((Object) map1, object2, (Object) "@iW");
      Integer integer3 = doubleKeyMap5.remove((Object) map1, "@iW");
      assertNull(integer3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<String, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      Object object0 = new Object();
      doubleKeyMap1.put(object0, "", "rq8T");
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Integer integer0 = new Integer((-1722));
      doubleKeyMap2.put("DIIMD|S9i7", (Object) doubleKeyMap1, (Object) integer0);
      Map<Integer, Map<Integer, Integer>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap3 = new DoubleKeyMap<Integer, Integer, Integer>(map1);
      doubleKeyMap3.get(integer0, integer0);
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap4 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer1 = new Integer((-1722));
      doubleKeyMap4.put(integer1, "rq8T", (Object) integer0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap5 = new DoubleKeyMap<Object, Object, Integer>(class0);
      doubleKeyMap5.remove((Object) null, (Object) doubleKeyMap4);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Object object1 = new Object();
      doubleKeyMap2.get("", object1);
      Object object2 = new Object();
      doubleKeyMap2.remove("DIIMD|S9i7", object2);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<String, String>> hashMap1 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap1, class0);
      doubleKeyMap0.put((Object) null, (String) null, (String) null);
      doubleKeyMap0.get((Object) null, "jr:w");
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(class0);
      doubleKeyMap1.newMap();
      HashMap<String, Map<Object, Object>> hashMap3 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap3);
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap2.remove("R", (Object) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(class0);
      Map<String, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      Object object0 = new Object();
      doubleKeyMap1.put(object0, "", "rq8T");
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(map0, class0);
      Integer integer0 = new Integer((-1722));
      doubleKeyMap2.put("DIIMD|S9i7", (Object) doubleKeyMap1, (Object) integer0);
      Map<Integer, Map<Integer, Integer>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap3 = new DoubleKeyMap<Integer, Integer, Integer>(map1);
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap4 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer1 = new Integer((-1722));
      doubleKeyMap4.put(integer1, "rq8T", (Object) integer0);
      doubleKeyMap3.remove(integer0, integer0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap5 = new DoubleKeyMap<Object, Object, Integer>(class0);
      doubleKeyMap5.remove((Object) null, (Object) doubleKeyMap4);
      Integer integer2 = new Integer(0);
      Object object1 = new Object();
      doubleKeyMap4.put(integer1, "", object1);
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer2));
  }
}
