/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:27:51 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(1);
      MockRandom mockRandom0 = new MockRandom(697L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(1, mockRandom0);
      assertEquals(1, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix.zero(1, 0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix.randomSymmetric(0, mockRandom0);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (-4154.628783599783);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 1456.2668626048;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        Basic1DMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(9, 9);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-848.8567840445548);
      doubleArray2[1] = (double) 9;
      doubleArray2[2] = (double) 9;
      doubleArray2[3] = (double) 9;
      doubleArray2[4] = (double) 9;
      doubleArray2[5] = (double) 9;
      doubleArray2[6] = (double) 9;
      doubleArray2[7] = (double) 9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 9;
      doubleArray3[1] = (-848.8567840445548);
      doubleArray3[2] = (double) 9;
      doubleArray0[2] = doubleArray3;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(3, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 5;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(5, 8);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      basic1DMatrix0.divide(1.0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)66;
      mockRandom0.nextBytes(byteArray0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(8, mockRandom0);
      mockRandom0.ints();
      int int1 = (-3032);
      // Undeclared exception!
      try { 
        basic1DMatrix1.power((-3032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -3032.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 39;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(39, 39, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(39, 356);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, (-19.83));
      basic1DMatrix0.toArray();
      assertEquals(1, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, 3152.87345467);
      basic1DMatrix0.swapRows(3022, 9996);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Basic1DMatrix.diagonal(3, 1779.6712888);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextLong();
      MockRandom mockRandom1 = new MockRandom(0L);
      mockRandom1.longs((-1751L), 0L);
      MockRandom mockRandom2 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(3, 3, mockRandom2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic1DMatrix0.update(matrixFunction0);
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, (-4243.192));
      Matrix matrix0 = Matrix.zero(1, 1343);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(2, 2);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(2, 2);
      Matrix matrix1 = basic1DMatrix0.subtract(matrix0);
      int int1 = 62;
      int int2 = (-1);
      double[] doubleArray0 = new double[2];
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      doubleArray0[0] = (-35.7319861014121);
      doubleArray0[1] = 1.0;
      Basic1DMatrix.unit(18, 62);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix1, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(1);
      Matrix matrix0 = Matrix.zero(2000, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, matrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      basic1DMatrix0.swapRows(3167, 3167);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byte byte1 = (byte) (-26);
      byteArray0[4] = (byte) (-26);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic1DMatrix.identity((byte)0);
      basic1DMatrix0.toBinary();
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      basic1DMatrix0.toMatrixMarket(numberFormat0);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 9);
      int int1 = 1755;
      Matrix matrix0 = basic1DMatrix0.copyOfShape(9, 1755);
      // Undeclared exception!
      try { 
        basic1DMatrix0.subtract(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x9 does not equal to 9x1755.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(2, 2);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(2, 2);
      basic1DMatrix0.subtract(matrix0);
      matrix0.multiply((double) 2);
      int int0 = 62;
      Basic1DMatrix.zero(2, 62);
      // Undeclared exception!
      try { 
        matrix0.getRow(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns((-1977), (-1977));
      int int0 = 4;
      byte byte0 = (byte) (-26);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)33;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(1);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(3, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns((-1977), (-1977));
      basic1DMatrix0.swapRows((-1), (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2287.2195126141;
      basic1DMatrix0.swapColumns(47, (-1));
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfShape(9, (-1977));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic1DMatrix.constant(410, 16, 410);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)72;
      byte byte2 = (byte)33;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(0, (byte)0);
      Basic1DMatrix.identity((byte)0);
      byte[] byteArray1 = basic1DMatrix1.toBinary();
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.fromBinary(byteArray1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero((int) (byte)0, (int) (byte)0);
      Basic1DMatrix basic1DMatrix3 = Basic1DMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, basic1DMatrix1, basic1DMatrix2);
      // Undeclared exception!
      try { 
        basic1DMatrix3.set((byte)33, 4, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '33' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 9;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      int int1 = 1755;
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.identity(9);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic1DMatrix0.update(matrixFunction0);
      int int2 = 18;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.zero(9, 1755);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix1, basic1DMatrix1, basic1DMatrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(2, 2);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(2, 2);
      Matrix matrix1 = basic1DMatrix0.subtract(matrix0);
      int int0 = (-1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(3654, 9);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix1, basic1DMatrix1, matrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-25);
      int int1 = 18;
      int int2 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(18, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 72
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(2, 2);
      Matrix matrix0 = basic1DMatrix0.copyOfShape(2, 2);
      Matrix matrix1 = basic1DMatrix0.subtract(matrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      matrix1.setAll(2.0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.unit(18, 2456);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix1, matrix1, basic1DMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, (-1314.1));
      Matrix matrix0 = basic1DMatrix0.copyOfShape(1, 1);
      Matrix matrix1 = basic1DMatrix0.subtract(matrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      basic1DMatrix0.update(matrixFunction0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(matrix1, basic1DMatrix0, matrix1, matrix1);
      Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, matrix0, matrix1);
      basic1DMatrix1.insert(matrix1);
      int int1 = (-1561);
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfShape((-1561), (-425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1561x-425
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(1, (-1314.1));
      Matrix matrix0 = Matrix.zero(691, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1384
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(2, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2, (-3410.0));
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, columnMajorSparseMatrix0, basic1DMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
