/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 18:36:49 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("istoUpperCase", (Collection) linkedList0);
      jSONObject1.toString((-342));
      jSONObject1.isNull("istoUpperCase");
      jSONObject0.optDouble("istoUpperCase");
      jSONObject0.optString("istoUpperCase");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.isNull(">.wt:W=k?wxO");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ">/]r~cc&'u.%i");
      jSONObject0.optJSONArray(">/]r~cc&'u.%i");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject1.toString((-6));
      JSONObject.quote("s(=Vt8kc/|&TWx_");
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      jSONObject1.toString();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", (long) 15);
      jSONObject0.toString(15);
      jSONObject0.getString("");
      jSONObject0.optJSONObject("1QG72\"s^jzC");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("isoptLong");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Collection<Object> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("", collection0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Integer integer0 = new Integer(10);
      JSONObject jSONObject0 = new JSONObject(integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("sho", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("j.,HBm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j.,HBm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 1L;
      Long long1 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long1);
      String string0 = "38p0[l?";
      try { 
        jSONObject0.getLong("P;k5.{d)|d}S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"P;k5.{d)|d}S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = JSONObject.doubleToString(979.7037572945461);
      assertEquals("979.7037572945461", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float((-858.0F));
      JSONObject jSONObject1 = new JSONObject(float0);
      JSONTokener jSONTokener0 = new JSONTokener("'");
      JSONObject jSONObject2 = new JSONObject((Object) jSONTokener0);
      JSONObject.valueToString(float0, 15, 15);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("getsubstring");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getsubstring
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("li", (Object) "li");
      JSONObject.quote("li");
      try { 
        jSONObject0.getJSONArray("li");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"li\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(0.22256236871316903);
      JSONObject.doubleToString(0.22256236871316903);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      String string0 = jSONObject0.toString((-241));
      assertEquals("{}", string0);
      
      double double0 = jSONObject1.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null);
      long long0 = (-4691L);
      long long1 = 0L;
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("l@}8\u0007Q,>Uppc*TE_s", (Map) hashMap0);
      JSONObject.getNames((Object) "l@}8\u0007Q,>Uppc*TE_s");
      JSONObject.testValidity("l@}8\u0007Q,>Uppc*TE_s");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("l@}8\u0007Q,>Uppc*TE_s", (Collection) linkedList0);
      jSONObject1.getJSONArray("l@}8\u0007Q,>Uppc*TE_s");
      boolean boolean0 = jSONObject1.has("l@}8\u0007Q,>Uppc*TE_s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Long.compare(31L, (-1L));
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{G9rNUOew( dJT";
      stringArray0[1] = "M8$D2|VIYy";
      stringArray0[2] = "$~Q$3Z_Shu*6zSyjF_";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      boolean boolean0 = jSONObject0.isNull("$~Q$3Z_Shu*6zSyjF_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-549), (-549));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = new Double(1612.71024389);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      assertEquals(3, jSONObject0.length());
      
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      jSONObject0.put("su", (-4691L));
      String string0 = JSONObject.quote("BjT/`|`Fpb+{]yr");
      jSONObject0.getString("su");
      assertEquals(4, jSONObject0.length());
      
      String string1 = JSONObject.valueToString("_6p+Mn!", 1316, (-8));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      stringArray0[2] = "m=,;";
      stringArray0[3] = "S,On{uD'i [T]1`.";
      stringArray0[4] = "M8$D2|VIYy";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject.quote("islowestOneBit");
      JSONObject jSONObject0 = new JSONObject((Object) "\"islowestOneBit\"");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      jSONObject0.optLong((String) null);
      jSONObject0.accumulate("islowestOneBit", "\"islowestOneBit\"");
      assertEquals(4, jSONObject0.length());
      
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject1 = jSONObject0.put("islowestOneBit", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("islowestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islowestOneBit\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optLong("", 5415L);
      jSONObject0.toString(15);
      jSONObject0.optJSONArray("{\n               \"java.lang.String@0000000004\": [],\n               \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      Object object0 = new Object();
      jSONObject0.putOpt("xLoEb(>\"#%`", object0);
      try { 
        jSONObject0.getInt("D+;'>k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D+;'>k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", 467L);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.toString(307, 1728);
      try { 
        jSONObject1.getString("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = JSONObject.quote("!crOwW/xR&S]Rnaq");
      assertEquals("\"!crOwW/xR&S]Rnaq\"", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("] is not a Boolean.", (Collection) null);
      JSONObject jSONObject3 = jSONObject0.put("d:7U\"Q*", 2379L);
      jSONObject2.put("] is not a Boolean.", (-700L));
      jSONObject3.optString("] is not a Boolean.");
      jSONObject3.optString("] is not a Boolean.");
      jSONObject2.toString(11, 11);
      jSONObject0.getInt("d:7U\"Q*");
      jSONObject1.optString("{\n                      \"java.lang.String@0000000006\": java.lang.Long@0000000007,\n                      \"java.lang.String@0000000002\": java.lang.Long@0000000008\n           }", "] is not a Boolean.");
      JSONObject jSONObject4 = jSONObject2.put("m[A#X l@ng", (-5049L));
      Short short0 = new Short((short)1849);
      JSONObject jSONObject5 = jSONObject4.put("0", (Object) short0);
      jSONObject5.toString((-1829));
      jSONObject3.getString("] is not a Boolean.");
      jSONObject3.optDouble("] is not a Boolean.");
      JSONObject jSONObject6 = jSONObject1.put("QIO#)evr1itQW%(I;W", (Collection) null);
      assertSame(jSONObject6, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("toU", true);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer((-368));
      jSONObject0.optString("");
      JSONObject jSONObject1 = jSONObject0.accumulate("Z6;Mth#d}", "");
      jSONObject1.get("Z6;Mth#d}");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      Double double0 = new Double((-40.6228));
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject1 = jSONObject0.put("getcopyValueOf", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(118);
      StringWriter stringWriter1 = stringWriter0.append('R');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "getcopyValueOf");
      jSONObject1.write(stringWriter2);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.put("BjT/`|`Fpb+{]yr", (-1.0));
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("su", (-4691L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.valueToString("BjT/`|`Fpb+{]yr");
      JSONObject.valueToString("ishashCode", 0, 0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (-4691L));
      JSONObject.valueToString("");
      int int0 = 9;
      jSONObject1.toString(1728, 9);
      try { 
        jSONObject0.getString("\"java.lang.String@0000000004\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000004\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject.quote("]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(658.9);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("$~Q$3Z_Shu*6zSyjF_");
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject1.has((String) null);
      JSONObject jSONObject2 = jSONObject0.accumulate("toL", (Object) null);
      jSONObject2.optJSONArray("$~Q$3Z_Shu*6zSyjF_");
      jSONObject2.names();
      JSONObject jSONObject3 = jSONObject0.put("{G9rNUOew( dJT", 26);
      jSONObject1.optInt((String) null, 26);
      jSONObject3.opt("e9-?Dxz{Gv&[q+dX4");
      boolean boolean0 = jSONObject2.optBoolean("false", false);
      assertEquals(1, jSONObject2.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("91 g&+s&`X-8WD");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "BjT/`|`Fpb+{]yr");
      assertEquals(1, stringArray0.length);
      
      JSONObject.quote("BjT/`|`Fpb+{]yr");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", (Map) hashMap0);
      jSONObject1.optString("wheel.json.JSONObject$Null", "\"BjT/`|`Fpb+{]yr\"");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("istoUpperCase", (Collection) linkedList0);
      jSONObject0.get("istoUpperCase");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "istoUpperCase";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUpperCase\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = (-543.0);
      JSONObject.doubleToString((-543.0));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "iscopyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoString", true);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EBfs9w:rOc&&,!%q";
      stringArray0[1] = "{Y}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject.valueToString("EBfs9w:rOc&&,!%q");
      int int0 = 964;
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.toString(964, 0);
      try { 
        jSONObject0.getString("HEMcA1Ju:kGn<EIZ>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HEMcA1Ju:kGn<EIZ>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      jSONObject0.put("}8yDdH]Rn", (Map) hashMap0);
      jSONObject0.optJSONObject("}8yDdH]Rn");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      HashMap<Boolean, Long> hashMap1 = new HashMap<Boolean, Long>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = Boolean.FALSE;
      Long long0 = new Long(241L);
      hashMap1.put(boolean0, long0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "issplit";
      try { 
        jSONObject0.getBoolean("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"re\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(1857, 1159);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(1858, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      boolean boolean0 = jSONObject1.isNull("0d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)210);
      Short.compare((short)0, (short)210);
      JSONObject.numberToString(short0);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 44, 0);
      JSONTokener jSONTokener0 = new JSONTokener("\"java.lang.Object@0000000002\"");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"java.lang.Object@0000000002\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(974, 32);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("islogicalOr", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      boolean boolean0 = jSONObject1.getBoolean("islogicalOr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(linkedList0, 15, 15);
      try { 
        jSONObject0.getString("isisFinite");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isisFinite\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("BjT/`|`Fpb+{]yr", false);
      jSONObject1.get("BjT/`|`Fpb+{]yr");
      jSONObject1.optLong("BjT/`|`Fpb+{]yr");
      Boolean boolean0 = new Boolean("BjT/`|`Fpb+{]yr");
      jSONObject0.names();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.put("BjT/`|`Fpb+{]yr", false);
      try { 
        jSONObject0.getInt("BjT/`|`Fpb+{]yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BjT/`|`Fpb+{]yr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte byte0 = (byte)97;
      Double double0 = new Double((byte)97);
      Double.max((byte)97, 4445.854039);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.put("va", (-483));
      jSONObject0.optInt("false", 120);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("wheel.json.JSONTokener", "wheel.json.JSONTokener");
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String string0 = jSONObject0.optString("JSONArray initial value should be a string or collection or array.", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("(8v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(8v\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("li", (Object) "li");
      boolean boolean0 = jSONObject0.isNull("li");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "'";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has((String) null);
      jSONObject0.optJSONArray("@pk>%eG");
      jSONObject0.names();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("getreplaceFirst");
      jSONObject0.append("getreplaceFirst", boolean0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("getreplaceFirst");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 1275, 1275);
      assertNotNull(string0);
      
      Byte byte0 = new Byte((byte) (-40));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.has("fEgj'ywVo");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Short short0 = new Short((short)32);
      linkedList0.add((Object) short0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(101);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(object0);
      Long.compare((-1L), (-1L));
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 0);
      jSONObject0.remove("true");
      jSONObject0.optDouble("v9]s*QL2FUW", Double.NaN);
      jSONObject0.remove("true");
      Double double0 = new Double(Double.NaN);
      JSONObject.testValidity("v9]s*QL2FUW");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Short short0 = new Short((short) (-1775));
      JSONObject jSONObject3 = jSONObject1.accumulate("XscPwt$!~9X9qp68]", short0);
      jSONObject3.keys();
      String string0 = jSONObject1.optString("Expected a ':' after a key", "java.lang.Long@00000000050");
      jSONObject3.keys();
      jSONObject1.optInt("wheel.json.JSONObject", 0);
      Double double1 = new Double((-4218.4032847716));
      String string1 = JSONObject.numberToString(double1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Topt", (Object) "Topt");
      JSONObject jSONObject2 = jSONObject0.put("getnotify", 1805);
      double double0 = jSONObject2.getDouble("getnotify");
      assertEquals(1805.0, double0, 0.01);
      
      boolean boolean0 = jSONObject1.optBoolean("BU%Y", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("pa", (Collection) linkedList0);
      Float float0 = new Float(540.9416F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Double double0 = new Double(540.9416F);
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "O,xu";
      JSONObject.getNames((Object) null);
      String string1 = "R";
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("getreverseBytes", (-409));
      jSONObject0.toString((-409));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("7CVz%\"(#rE", jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("?T0c.j.`iF~5;aGhRG", 189L);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "t$LU2ZCs$sB3V#HBa6";
      jSONObject0.optDouble("t$LU2ZCs$sB3V#HBa6");
      JSONObject jSONObject1 = jSONObject0.put("BjT/`|`Fpb+{]yr", 0L);
      Float float0 = new Float((double) (-4691L));
      JSONObject.valueToString(float0);
      jSONObject1.toString(52, 61);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("xyR0ts)I{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of xyR0ts)I{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("\"\"", 2440);
      jSONObject0.toString(2);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "iscopyValueOf");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 766, 766);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(843, (long) 670);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      jSONArray1.getDouble(843);
      jSONArray1.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(845, jSONArray2.length());
      
      String string0 = jSONObject0.optString((String) null);
      assertNotNull(string0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "BjT/`|`Fpb+{]yr";
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("BjT/`|`Fpb+{]yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BjT/`|`Fpb+{]yr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float((-2.5581229343929692));
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("SRq^", 310);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      int int0 = jSONObject1.getInt("SRq^");
      assertEquals(310, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toJSONArray(jSONArray0);
      Short short0 = new Short((short)86);
      Object object0 = new Object();
      JSONObject.valueToString(object0, (short)86, (-241));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long.compare(31L, (-1L));
      Double double0 = new Double(26);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.has("{G9rNUOew( dJT");
      jSONObject0.accumulate("islowestOneBit", "$~Q$3Z_Shu*6zSyjF_");
      jSONObject0.optJSONArray("toL");
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("", 1);
      jSONObject1.optInt("toL", 1);
      jSONObject0.opt("0G3[DcIQ$+MQ|\"");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      JSONObject.doubleToString(0.0);
      try { 
        jSONObject1.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(3);
      jSONObject0.optJSONObject("cv#KPLBQ");
      jSONObject0.putOpt("wheel.json.JSONException", "cv#KPLBQ");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      Object object0 = new Object();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optLong("wheel.json.JSONObject@0000000001");
      Long long0 = new Long((-2820L));
      Long long1 = new Long((-5173L));
      Long.getLong("] is not a Boolean.", long1);
      Long long2 = new Long(1L);
      Long.getLong("BjT/`|`Fpb+{]yr", long2);
      jSONObject0.accumulate("T2KH0w d!MJ@", long0);
      jSONObject1.optBoolean("7BQ0wSwxm|2k+pI6");
      Object object1 = new Object();
      jSONObject1.putOpt("JSON does not allow non-finite numbers.", object1);
      assertEquals(4, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      Double double0 = Double.valueOf((-1.0));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      String string0 = jSONObject0.toString((-4280));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(61);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", (-1L));
      jSONObject0.optJSONObject("");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      JSONObject.valueToString(long0);
      Float float0 = new Float((double) 31L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      jSONObject0.toString(26, 4);
      String string0 = "Expected a ':' after a key";
      try { 
        jSONObject1.getString("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "O,xu");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("R", (Collection) null);
      int int0 = jSONObject0.optInt("R");
      assertEquals(0, int0);
      
      jSONObject2.toString();
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject1, 1327, 1327);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("Uv]IuS%v:: G", (Map) hashMap0);
      jSONObject0.has("Uv]IuS%v:: G");
      jSONObject1.optInt("wheel.json.JSONArray");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer(4269);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.accumulate("{}", jSONObject0);
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("-|Bg\"N?'nTZJN{NH1");
      jSONObject0.remove("-|Bg\"N?'nTZJN{NH1");
      JSONObject.doubleToString(1.0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "O,xu");
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = Integer.valueOf(8);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONArray jSONArray2 = jSONArray1.put(34, (-211));
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("O,xu");
      assertEquals(0L, long0);
      
      JSONArray jSONArray3 = jSONObject1.toJSONArray(jSONArray1);
      assertEquals(35, jSONArray3.length());
      assertNotNull(jSONArray3);
      assertNotSame(jSONArray3, jSONArray2);
      
      boolean boolean0 = jSONObject0.isNull("istrim");
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 34, 552);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".N=R(mFZEU", (-48561817));
      Float float0 = new Float((-1.0));
      jSONObject1.append("] is not a JSONObject.", float0);
      JSONObject jSONObject2 = jSONObject0.put(".N=R(mFZEU", 0L);
      jSONObject0.getInt(".N=R(mFZEU");
      JSONObject jSONObject3 = jSONObject0.put("", (double) 0L);
      jSONObject3.optDouble((String) null, (-169.0));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject4 = new JSONObject("isoptJSONObject", stringArray0);
      JSONObject.getNames(jSONObject4);
      jSONObject0.toString((-1), 9);
      JSONObject.quote("g;uhUp`ReOBp{`");
      jSONObject0.optBoolean("isoptJSONObject", true);
      jSONObject2.toString();
      try { 
        jSONObject0.getJSONArray("?2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-1601));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertEquals(1, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = (byte)97;
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.put("su", (-4691L));
      JSONObject.valueToString("BjT/`|`Fpb+{]yr");
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ishashCode";
      stringArray0[1] = "\"java.lang.String@0000000073\"";
      stringArray0[2] = "";
      stringArray0[3] = "BjT/`|`Fpb+{]yr";
      stringArray0[4] = "su";
      stringArray0[5] = "su";
      stringArray0[6] = "\"java.lang.String@0000000073\"";
      JSONObject jSONObject1 = new JSONObject(float1, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.toString(9, 1728);
      try { 
        jSONObject0.getString("BjT/`|`Fpb+{]yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BjT/`|`Fpb+{]yr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(105);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("BjT/`|`Fpb+{]yr", false);
      jSONObject1.getBoolean("BjT/`|`Fpb+{]yr");
      try { 
        jSONObject0.getInt("BjT/`|`Fpb+{]yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BjT/`|`Fpb+{]yr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clear();
      jSONObject0.remove("(");
      JSONObject jSONObject1 = jSONObject0.put(".Gp}dU5iUPjK)a<O~^", (Collection) linkedList0);
      jSONObject0.toString((-408));
      JSONObject.quote("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000011\": [],\n\"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      jSONObject1.optDouble("] is not a JSONObject.");
      jSONObject1.put(".Gp}dU5iUPjK)a<O~^", (Collection) linkedList0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("isparseBoolean", 50);
      Float.max((-1.0F), (-2788.8F));
      Short short0 = new Short((short)3137);
      JSONObject.valueToString(short0, 4, 3);
      jSONObject0.optBoolean(": ", true);
      jSONObject0.optString("VP5[+?(5f(?uY|(Y2`");
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Short@000000001", "isparseBoolean");
      jSONObject1.optDouble("isparseBoolean");
      int int0 = jSONObject0.optInt("gZ*");
      assertEquals(5, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(2582);
      hashMap0.remove((Object) integer0, (Object) jSONObject0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.put("su", (-4691L));
      jSONObject1.optLong("su");
      Short short0 = new Short((short)2789);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("BjT/`|`Fpb+{]yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of BjT/`|`Fpb+{]yr
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      stringArray0[1] = "c";
      stringArray0[2] = "{x$}WA";
      stringArray0[3] = "JdT2qgRm";
      stringArray0[4] = "";
      stringArray0[5] = "Expected '";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("\"\"", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      String string1 = "";
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N%~XwdF7rJ";
      stringArray0[1] = "N%~XwdF7rJ";
      JSONObject jSONObject0 = new JSONObject("N%~XwdF7rJ", stringArray0);
      jSONObject0.put("N%~XwdF7rJ", 0L);
      jSONObject0.optDouble("N%~XwdF7rJ");
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("getreplaceFirst", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      jSONObject0.toString(1986);
      jSONObject0.putOpt("$~Q$3Z_Shu*6zSyjF_", jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EBfs9w:rOc&&,!%q";
      stringArray0[1] = "{Y}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.quote("R(.%@bg^^S+");
      assertEquals("\"R(.%@bg^^S+\"", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("DZ", (-2312L));
      long long0 = jSONObject1.getLong("DZ");
      assertEquals((-2312L), long0);
      
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      Double double0 = new Double(1849.5793014);
      Short short0 = new Short((short)2);
      hashMap0.put(double0, short0);
      jSONObject0.put("}8yDdH]Rn", (Map) hashMap0);
      jSONObject0.optJSONObject("}8yDdH]Rn");
      jSONObject0.put("}8yDdH]Rn", (-2405.436976549217));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "tj}jks[GvA~>KN";
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt("tj}jks[GvA~>KN");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000064.", 0L);
      String string1 = "H\\xo3E!";
      JSONObject.quote("Hxo3E!");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      try { 
        jSONObject1.getString("tj}jks[GvA~>KN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tj}jks[GvA~>KN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1575);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("t$LU2ZCs$sB3V#HBa6");
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double((-4691L));
      Double double2 = new Double(0.0);
      String string0 = JSONObject.valueToString(jSONObject0, 1275, 1275);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-1443));
      hashMap0.put(object0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONObject$Null cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, (-38), (-38));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject.doubleToString((-55.771423576));
      Object object0 = JSONObject.NULL;
      jSONObject0.append("", object0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("getclear");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getclear\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject0.optLong("");
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject jSONObject2 = new JSONObject();
      try { 
        jSONObject2.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("!x@Fh");
      JSONObject.testValidity(boolean0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("!x@Fh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of !x@Fh
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "IB");
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("isintern", "isintern");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      int int0 = 850;
      jSONObject0.accumulate("{}", hashMap0);
      int int1 = (-3908);
      jSONObject0.toString(850, (-3908));
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      String string0 = "true";
      jSONObject0.remove("toL");
      jSONObject0.optDouble("$~Q$3Z_Shu*6zSyjF_", (double) 45);
      jSONObject0.remove("{G9rNUOew( dJT");
      Double double0 = new Double(26);
      JSONObject.testValidity(double0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("Uv]IuS%v:: G", (Map) hashMap0);
      jSONObject0.remove("] is not a number.");
      jSONObject0.has("Uv]IuS%v:: G");
      jSONObject1.optInt("wheel.json.JSONArray");
      String string0 = jSONObject0.toString();
      String string1 = jSONObject0.toString(0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      Byte byte0 = new Byte((byte)82);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BjT/`|`Fpb+{]yr";
      stringArray0[1] = "BjT/`|`Fpb+{]yr";
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getLong("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("istoString");
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      String string0 = JSONObject.valueToString(jSONObject0, 2754, 1275);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, (-785), (-785));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("", boolean0);
      jSONObject0.toString(64);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject0.accumulate("{\n                                                                \"java.lang.String@0000000009\": java.lang.Boolean@0000000010,\n                                                                \"java.lang.String@0000000004\": [],\n                                                                \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n                                                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", "");
      jSONObject3.remove("toS");
      jSONObject2.toJSONArray((JSONArray) null);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject1.toString(50, 92);
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(3566.619641044);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "2]X4FAN/Q-Xxlp";
      stringArray0[3] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("2]X4FAN/Q-Xxlp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      jSONObject0.optLong((String) null);
      Object object2 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("null", object2);
      jSONObject1.put("' and instead saw '", true);
      JSONObject jSONObject2 = jSONObject1.put("null", (double) 0L);
      jSONObject2.put("null", true);
      jSONObject0.optBoolean("null");
      JSONObject jSONObject3 = jSONObject0.put("getcompare", (Map) hashMap0);
      assertSame(jSONObject3, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONObject$1";
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONObject$1", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put((String) null, 425.39069);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.listIterator();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      try { 
        jSONObject0.getBoolean("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "iscopyValueOf");
      JSONObject.valueToString(jSONObject0, 15, 15);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      Object object0 = new Object();
      jSONObject0.optJSONObject((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = "true";
      Byte.toUnsignedInt((byte)97);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "7.6";
      stringArray0[3] = "7.6";
      stringArray0[4] = "7.6";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Integer integer0 = new Integer((-2107));
      JSONObject.valueToString(integer0);
      jSONObject0.toString(21, (-5257));
      try { 
        jSONObject0.getString("7.6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7.6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt((String) null);
      String string0 = "su";
      jSONObject0.put("tj}jks[GvA~>KN", 0L);
      JSONObject.quote("tj}jks[GvA~>KN");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("\"tj}jks[GvA~>KN\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"tj}jks[GvA~>KN\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Topk", (Object) "Topk");
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.accumulate("Topk", jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "h(=D#:LTz;/l");
      // Undeclared exception!
      jSONObject0.toString(2996, 2996);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Byte byte0 = new Byte((byte)36);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      JSONObject.quote("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ishashCode";
      jSONObject0.put("ishashCode", (-4691L));
      JSONObject.valueToString("");
      int int0 = 1728;
      int int1 = 9;
      try { 
        jSONObject0.getDouble("RW:uXVUL=-XQY0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RW:uXVUL=-XQY0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("c`X.X30\"]e*_1H)>", 2859L);
      jSONObject0.getInt("c`X.X30\"]e*_1H)>");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = JSONObject.quote("<+l1K)P<_\".A");
      assertEquals("\"<+l1K)P<_\\\".A\"", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "'";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.get("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Double double0 = new Double((-2744.7));
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte) (-11));
      jSONObject0.putOpt("\":rj0)EBf9;Tt#o]", byte0);
      jSONObject0.getDouble("\":rj0)EBf9;Tt#o]");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("", (-551.425));
      Long long0 = new Long((-955L));
      JSONObject jSONObject1 = new JSONObject(long0);
      JSONObject jSONObject2 = jSONObject1.put(": ", (Object) "");
      jSONObject0.optLong("istoUnsignedLong");
      Short short0 = new Short((short)40);
      try { 
        jSONObject2.getJSONObject("BjT/`|`Fpb+{]yr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BjT/`|`Fpb+{]yr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      jSONObject1.optJSONArray("] is not a JSONObject.");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1712.2375343);
      JSONObject jSONObject1 = jSONObject0.put("i?U&D_", (Object) double0);
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      jSONObject1.put("i?U&D_", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("i?U&D_");
      assertEquals(0, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Q#fx%+U?bzLe<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-134), (-134));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("W:bHt'uTub$p8*fP", "W:bHt'uTub$p8*fP");
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      JSONObject jSONObject1 = jSONObject0.append(">", byte1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.append("!</}EW iB)u", jSONArray0);
      JSONObject.getNames(jSONObject2);
      Byte.toUnsignedLong((byte)25);
      jSONObject0.optInt("!</}EW iB)u", 9);
      jSONObject1.toString();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      jSONArray1.put(1085, object0);
      JSONObject jSONObject3 = jSONObject0.append("=oo1)", jSONArray1);
      // Undeclared exception!
      jSONObject3.toString(1185);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = JSONObject.quote("Unclosed comment");
      assertEquals("\"Unclosed comment\"", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject.quote((String) null);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("iscopyValueOf", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 531;
      String string0 = "'!2m. bGPq6iyO%Y";
      jSONObject0.remove((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("'!2m. bGPq6iyO%Y");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of '!2m. bGPq6iyO%Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iscopOyValueOf";
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      hashMap0.put(jSONObject0, "iscopOyValueOf");
      JSONObject jSONObject1 = jSONObject0.put("iscopOyValueOf", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("iscopOyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscopOyValueOf\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1L);
      JSONObject jSONObject2 = new JSONObject();
      int int0 = jSONObject1.optInt("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("] is not a JSONObject.", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Integer integer0 = new Integer(1611);
      JSONObject jSONObject1 = new JSONObject(integer0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.accumulate("Xa2^Cq^Z;*#^`g", jSONObject2);
      jSONObject0.toJSONArray((JSONArray) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "isparseLong";
      stringArray0[1] = "isparseLong";
      stringArray0[2] = "isparseLong";
      stringArray0[3] = "isparseLong";
      stringArray0[4] = "isparseLong";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has("JSONObject[");
      jSONObject0.optJSONArray("JSONObject[");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("oZe=jsl5hhN0YE$", (-1245));
      JSONObject jSONObject2 = new JSONObject("JSONObject[", stringArray0);
      jSONObject2.opt("isparseLong");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.put("JSON does not allow non-finite numbers.", (Object) null);
      assertEquals(0, jSONObject3.length());
      
      String string0 = JSONObject.doubleToString(1031);
      assertEquals("1031", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      boolean boolean0 = jSONObject0.isNull(">.wt:W=k?wxO");
      assertTrue(boolean0);
      
      boolean boolean1 = jSONObject0.has(">.wt:W=k?wxO");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject.quote("");
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("va", (-483));
      JSONObject.getNames(jSONObject0);
      jSONObject0.optInt("false", 120);
      jSONObject0.opt("");
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("\n", (Collection) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("Z6;Mth#d}", (Collection) linkedList0);
      jSONObject1.toString((-368));
      boolean boolean1 = jSONObject1.isNull("Z6;Mth#d}");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("Unclosed comment");
      Double.max(0.0, Double.NaN);
      JSONObject.valueToString(jSONObject0, 57, (-89));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getDouble("{\n\"java.lang.String@0000000004\": [\n                         java.lang.Byte@0000000040,\n                         java.lang.Byte@0000000041,\n                         java.lang.Byte@0000000042,\n                         java.lang.Byte@0000000043,\n                         java.lang.Byte@0000000044,\n                         java.lang.Byte@0000000045,\n                         java.lang.Byte@0000000046,\n                         java.lang.Byte@0000000047,\n                         java.lang.Byte@0000000048,\n                         java.lang.Byte@0000000049,\n                         java.lang.Byte@0000000050,\n                         java.lang.Byte@0000000051,\n                         java.lang.Byte@0000000052,\n                         java.lang.Byte@0000000053,\n                         java.lang.Byte@0000000054\n],\n\"java.lang.String@0000000037\": \"java.lang.Class@0000000038\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000004\\\": [\\n                         java.lang.Byte@0000000040,\\n                         java.lang.Byte@0000000041,\\n                         java.lang.Byte@0000000042,\\n                         java.lang.Byte@0000000043,\\n                         java.lang.Byte@0000000044,\\n                         java.lang.Byte@0000000045,\\n                         java.lang.Byte@0000000046,\\n                         java.lang.Byte@0000000047,\\n                         java.lang.Byte@0000000048,\\n                         java.lang.Byte@0000000049,\\n                         java.lang.Byte@0000000050,\\n                         java.lang.Byte@0000000051,\\n                         java.lang.Byte@0000000052,\\n                         java.lang.Byte@0000000053,\\n                         java.lang.Byte@0000000054\\n],\\n\\\"java.lang.String@0000000037\\\": \\\"java.lang.Class@0000000038\\\",\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "t$LU2ZCs$sB3V#HBa6";
      jSONObject0.optDouble("t$LU2ZCs$sB3V#HBa6");
      JSONObject jSONObject1 = jSONObject0.put("BjT/`|`Fpb+{]yr", (-4691L));
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      jSONObject1.put("JnR#rM}2AVS\"kyQX", (Map) hashMap0);
      jSONObject1.toString(52, 61);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("xyR0ts)I{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of xyR0ts)I{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      String string0 = "true";
      stringArray0[1] = "true";
      Byte.toUnsignedInt((byte)94);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.keys();
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Byte byte0 = new Byte((byte)58);
      String string0 = JSONObject.valueToString(byte0, (byte)58, (byte)58);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("-Z@nEX(ZH^>'/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-Z@nEX(ZH^>'/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONObject.quote("istoLowerCase");
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Double double0 = new Double(2274.8382);
      jSONObject0.putOpt("", double0);
      try { 
        jSONObject0.getDouble("istoLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoLowerCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.has((String) null);
      jSONObject0.optJSONArray("isparseLong");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("xe;@}RwXC", 1031);
      jSONObject0.opt("isreverseBytes");
      jSONObject0.put("] is not a number.", (Object) "isreverseBytes");
      String string0 = JSONObject.doubleToString(0L);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      jSONObject0.put("su", (-4691L));
      JSONObject.valueToString("BjT/`|`Fpb+{]yr");
      Float float0 = new Float(0.0F);
      jSONObject0.getString("su");
      int int0 = jSONObject0.optInt("va", 1342);
      assertEquals(4, jSONObject0.length());
      assertEquals(1342, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      jSONObject0.optString((String) null, (String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote((String) null);
      JSONObject.quote("\"\"");
      JSONObject jSONObject1 = jSONObject0.put("\"\"\"\"", (Object) "\"\"\"\"");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      String string0 = "$~Q$3Z_Shu*6zSyjF_";
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      try { 
        jSONObject0.put((String) null, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "pxbA\f-9a?lW'vo");
      JSONObject jSONObject0 = new JSONObject("pxbA\f-9a?lW'vo", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = "true";
      byte byte0 = (byte)97;
      Byte.toUnsignedInt((byte)97);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "7.6";
      stringArray0[3] = "7.6";
      stringArray0[4] = "7.6";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.keys();
      String string1 = " #/Ilhs[I3~&";
      try { 
        jSONObject1.getBoolean(" #/Ilhs[I3~&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" #/Ilhs[I3~&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      String string0 = "true";
      stringArray0[1] = "true";
      Byte.toUnsignedInt((byte)94);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.keys();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("su", (-4691L));
      Object object0 = JSONObject.NULL;
      jSONObject1.optDouble(": ", (double) 0);
      jSONObject1.put("su", object0);
      jSONObject1.optLong("su");
      Short short0 = new Short((short)9);
      try { 
        jSONObject0.getJSONObject("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "iscopOyValueOf";
      stringArray0[1] = "iscopOyValueOf";
      stringArray0[2] = "jEgf1}Dg";
      stringArray0[3] = "iscopOyValueOf";
      stringArray0[4] = "iscopOyValueOf";
      stringArray0[5] = "iscopOyValueOf";
      stringArray0[6] = "iscopOyValueOf";
      stringArray0[7] = "iscopOyValueOf";
      stringArray0[8] = "iscopOyValueOf";
      JSONObject jSONObject0 = new JSONObject("iscopOyValueOf", stringArray0);
      jSONObject0.put("Uh~u", (Object) "iscopOyValueOf");
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = JSONObject.quote("o:cp2 ");
      assertEquals("\"o:cp2 \"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"o:cp2 \"");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"o:cp2 \"";
      stringArray0[1] = "o:cp2 ";
      stringArray0[2] = "o:cp2 ";
      stringArray0[3] = "\"o:cp2 \"";
      stringArray0[4] = "\"o:cp2 \"";
      stringArray0[5] = "\"o:cp2 \"";
      stringArray0[6] = "\"o:cp2 \"";
      stringArray0[7] = "o:cp2 ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = jSONObject1.optString("getcopyValueOf");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("getoptLong", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.append("4~R{P/tJ4(Nca", stringWriter0);
      jSONObject1.optJSONArray("4~R{P/tJ4(Nca");
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.putOpt("toS", "toS");
      jSONObject1.optInt("", 32);
      jSONObject0.optJSONObject("iscopyValueOf");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("su", (-4691L));
      JSONObject.quote("BjT/`|`Fpb+{]yr");
      jSONObject1.optLong((String) null);
      jSONObject0.getString("su");
      jSONObject0.optString("Expected a ':' after a key", "Expected a ':' after a key");
      jSONObject1.put("BjT/`|`Fpb+{]yr", (-2304.102711));
      assertEquals(5, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Ya~cE`9`IZU-mSwV", "Ya~cE`9`IZU-mSwV");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("BjT/`|`Fpb+{]yr");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      String string0 = "S3.,OXl*#kw[aj";
      JSONTokener jSONTokener0 = new JSONTokener("S3.,OXl*#kw[aj");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of S3.,OXl*#kw[aj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "'";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has((String) null);
      jSONObject0.optJSONArray("@pk>%eG");
      jSONObject0.names();
      jSONObject0.put(",:]}/\"[{;=#", 4373);
      Object object1 = jSONObject0.opt(",\n");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String string0 = jSONObject0.optString("/+;T}", "true");
      assertEquals("true", string0);
      
      Byte byte1 = new Byte((byte) (-39));
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      double double0 = jSONObject0.optDouble("] is not a Boolean.", (-374.1965));
      assertEquals((-374.1965), double0, 0.01);
      
      jSONObject1.keys();
      int int0 = jSONObject1.optInt("isdoubleToString", (int) (byte)87);
      assertEquals(87, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(128);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("isquote", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("isquote", false);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("istoJSONArray");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.getBoolean("tri");
      Long long0 = new Long(0L);
      jSONObject0.put("weYt~^WN}FR{", (Object) long0);
      jSONObject0.getLong("weYt~^WN}FR{");
      JSONObject.quote("weYt~^WN}FR{");
      try { 
        Long.parseUnsignedLong("weYt~^WN}FR{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"weYt~^WN}FR{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("7CVz%\"(#rE", (-30756608));
      String string0 = "0.0";
      jSONObject0.put("0.0", (Collection) null);
      try { 
        jSONObject1.getJSONObject("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(531, 531);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      long long0 = jSONObject1.optLong((String) null);
      assertEquals(0L, long0);
      
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(532, jSONArray2.length());
      
      boolean boolean0 = jSONObject1.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Integer integer0 = new Integer(1611);
      JSONObject jSONObject1 = new JSONObject(integer0);
      JSONTokener jSONTokener0 = new JSONTokener("}nY6NFhy#tx`pSPv?");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }nY6NFhy#tx`pSPv?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("EAr-", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      boolean boolean0 = jSONObject0.optBoolean("(c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("iscopyValueOf", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("iscopyValueOf", "islowestOneBit");
      jSONObject2.optJSONArray("Expected a ',' or '}'");
      try { 
        jSONObject1.getJSONObject("iscopyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscopyValueOf\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONTokener";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("wheel.json.JSONTokener", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("'|eG`l}sC&Vf=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'|eG`l}sC&Vf=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optInt("KC@f");
      JSONObject jSONObject1 = jSONObject0.put("KC@f", (-1061));
      JSONObject.valueToString(jSONObject0);
      jSONObject0.length();
      boolean boolean0 = jSONObject1.optBoolean("KC@f", true);
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      stringArray0[1] = "c";
      stringArray0[2] = "{x$}WA";
      stringArray0[3] = "JdT2qgRm";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String string0 = jSONObject0.optString("JdT2qgRm", "Y!(_)/aYYZ*PR/`} ");
      assertEquals("Y!(_)/aYYZ*PR/`} ", string0);
      
      Byte byte0 = new Byte((byte)87);
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      double double0 = jSONObject1.optDouble("oclBK_:", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      jSONObject1.keys();
      int int0 = jSONObject0.optInt("oclBK_:", 74);
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) "");
      JSONObject jSONObject1 = jSONObject0.put("O1_/x9S(l(}^md~", 0.0);
      Float float0 = new Float((-1.0F));
      JSONObject.valueToString("_WOXsCNNA19");
      jSONObject0.put("", (double) (-1.0F));
      Float float1 = new Float((double) (-1.0F));
      String string0 = "eq";
      hashMap0.put(float1, "eq");
      try { 
        jSONObject1.get("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Integer integer0 = new Integer(1611);
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null, (String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double double0 = new Double(3566.619641044);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      Object object0 = new Object();
      JSONObject.valueToString(jSONArray0, (-241), (-241));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Long.compare(31L, (-1L));
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{G9rNUOew( dJT";
      JSONObject.valueToString("$~Q$3Z_Shu*6zSyjF_", (-62473106), (-62473106));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("3dF0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3dF0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Float float0 = new Float((-310.02663381228));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Integer integer0 = new Integer(88);
      JSONObject.getNames((Object) integer0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("8=]jp V%p^1mqiN!");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 8=]jp V%p^1mqiN!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Long.compare((-746L), (-746L));
      Double double0 = new Double(0);
      JSONObject.testValidity("{G9rNUOew( dJT");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.has("pne\"F>._fUxhZ~isz");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("P/a1f", object0);
      jSONObject1.optJSONArray("$2o}:uvis)");
      jSONObject1.names();
      try { 
        jSONObject1.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      Long long0 = new Long(241L);
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject2 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getBoolean("issplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      JSONObject jSONObject1 = jSONObject0.put("su", (-4691L));
      Object object0 = JSONObject.NULL;
      jSONObject1.optDouble("su", (double) 0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject1.optLong("su");
      Short short0 = new Short((short)9);
      try { 
        jSONObject0.getJSONObject("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "{Y}";
      stringArray0[2] = "";
      stringArray0[4] = "";
      JSONObject.valueToString(stringArray0[0]);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      assertTrue(hashMap0.isEmpty());
      
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = JSONObject.quote("</qq%uiQ^");
      assertEquals("\"<\\/qq%uiQ^\"", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null);
      jSONObject0.optString((String) null, (String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote((String) null);
      JSONObject.valueToString((Object) null);
      Double double0 = new Double(0L);
      JSONObject.valueToString(double0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      try { 
        jSONObject1.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T";
      stringArray0[2] = "_B?$b'4^U_Cy.";
      stringArray0[3] = "wheel.json.JSONObject$Null";
      stringArray0[4] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      jSONObject0.optJSONArray(stringArray0[1]);
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("GSN4C}/11K0:&F}cbu3", 4373);
      jSONObject0.opt("gethashCode");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      Byte byte0 = new Byte((byte)79);
      hashMap0.put((JSONObject) null, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      String string1 = jSONObject0.optString("QfQsgR");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
      
      jSONObject0.optLong("%g~nk@l>6E@`XcJ!T&T");
      long long0 = jSONObject0.optLong("m_^?MzA{2f}R&THe");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      JSONObject.valueToString((Object) null, 123, (-241));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.optBoolean("BjT/`|`Fpb+{]yr");
      jSONObject0.put("A JSONArray text must start with '['", (double) 0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("issubstring");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString((-1817), 98);
      Integer integer0 = new Integer((-1817));
      JSONObject.numberToString(integer0);
      jSONObject0.length();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.optLong("{}", (long) (-1817));
      JSONObject.doubleToString((-3652.91569620097));
      jSONObject0.optJSONObject("{}");
      JSONObject.doubleToString(0.0);
      jSONObject0.remove("{}");
      Object object0 = jSONObject0.opt("`r,");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("BjT/`|`Fpb+{]yr", 0.0);
      Float float0 = new Float(1.0F);
      Float.max((-2079.7542F), (-3629.19F));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "tj}jks[GvA~>KN";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray(jSONArray0);
      Short short0 = new Short((short)86);
      Object object0 = new Object();
      JSONObject.valueToString((Object) null, 16, 16);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-2419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 23, 23);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^S:4NG", 22);
      jSONObject0.getLong("^S:4NG");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject1 = jSONObject0.put("[", (Object) float0);
      jSONObject1.optDouble("[");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Float float0 = new Float(0.0);
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[3];
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.has("$jkgsowd'6T5(P/");
      jSONObject0.optJSONArray("~I^V3-!2~)/f8");
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("istoString", (-1854));
      jSONObject1.opt("wheel.json.JSONObject$Null");
      jSONObject2.putOpt("^}Me_Lv", (Object) null);
      try { 
        jSONObject2.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(object0);
      Long.compare((-1L), (-1L));
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 0);
      jSONObject0.optInt("] is not a Boolean.", 2886);
      Double double0 = new Double(2886);
      JSONObject.valueToString(double0);
      Float float0 = new Float((double) 2886);
      Byte byte0 = new Byte((byte)21);
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      jSONObject1.toString(0, 818);
      String string0 = "Expected a ':' after a key";
      String string1 = "getmax";
      try { 
        jSONObject0.getString("getmax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getmax\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EBfs9w:rOc&&,!%q";
      stringArray0[5] = "{Y}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject.valueToString("EBfs9w:rOc&&,!%q");
      JSONObject.valueToString("");
      Float float0 = new Float((double) 964);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.toString((-1), 2445);
      try { 
        jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      Short short0 = new Short((short) (-2176));
      JSONObject jSONObject1 = new JSONObject(short0);
      try { 
        jSONObject1.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "IB";
      JSONObject jSONObject0 = new JSONObject((Object) "IB");
      // Undeclared exception!
      jSONObject0.toString(4046);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 3207, 3207);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      String string0 = "Wv@)HZ%C5v|D_:";
      JSONObject jSONObject1 = jSONObject0.put("Wv@)HZ%C5v|D_:", (Object) "Wv@)HZ%C5v|D_:");
      String string1 = "P+Lu1rU";
      jSONObject1.put("P+Lu1rU", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}");
      stringWriter1.flush();
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      stringWriter0.write(charArray0);
      stringWriter1.append('*');
      jSONObject0.optBoolean("ZW8R&lQ%.^WW1Srftbt", true);
      // Undeclared exception!
      jSONObject1.write(stringWriter1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("iscopyValueOf", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("iscopyValueOf", "islowestOneBit");
      jSONObject1.optJSONArray("Expected a ',' or '}'");
      long long0 = jSONObject1.optLong("islowestOneBit");
      assertEquals(0L, long0);
      
      Double double0 = new Double(3336.772078230794);
      jSONObject1.accumulate("iscopyValueOf", double0);
      boolean boolean0 = jSONObject0.optBoolean("R4n'79H<.Q$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1712.2375343);
      JSONObject jSONObject1 = jSONObject0.put("i?U&D_", (Object) double0);
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      Byte byte0 = new Byte((byte) (-21));
      hashMap0.put(jSONObject0, byte0);
      jSONObject1.put("i?U&D_", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("i?U&D_");
      JSONObject jSONObject3 = jSONObject1.put(".l=_Q:/->uo", 0L);
      assertNotSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      Double double0 = new Double(3566.619641044);
      Double.max(Double.NaN, Double.NaN);
      JSONObject.valueToString(double0, (-89), 88);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONObject.quote("islowestOneBit");
      JSONObject jSONObject0 = new JSONObject((Object) "\"islowestOneBit\"");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      jSONObject0.optLong("\"islowestOneBit\"");
      JSONObject jSONObject1 = jSONObject0.accumulate("islowestOneBit", "\"islowestOneBit\"");
      boolean boolean0 = jSONObject1.optBoolean("islowestOneBit");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("li", (Object) "li");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.append("li", "li");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[li] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("% ZcBiF4`");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("R");
      jSONObject0.optLong((String) null, (long) 0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      jSONObject0.optInt("islowestOneBit", 26);
      JSONObject.valueToString(long0);
      Float float0 = new Float((double) 31L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "islowestOneBit";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      jSONObject1.put("Expected a ':' after a key", 4336.334968928067);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject2 = jSONObject1.put("R)_&VO7i*BhZ", (Map) hashMap0);
      try { 
        jSONObject2.get("islowestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islowestOneBit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("+,=Qw\")e?({Y", object0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      jSONObject0.put("oHw;*IBa", (Map) hashMap0);
      jSONObject1.names();
      boolean boolean0 = jSONObject0.isNull("+,=Qw\")e?({Y");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Float float0 = new Float(0.0);
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      int int0 = 64;
      jSONObject0.toString(64, 52);
      String string0 = "] is not a JSONObject.";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a JSONObject.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      double double0 = new Integer((-368));
      jSONObject0.optString("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.toString(2927);
      jSONObject0.put("", (Object) "{}");
      Long long0 = new Long(1520L);
      JSONObject jSONObject1 = jSONObject0.accumulate("D9", long0);
      JSONObject.getNames(jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      Float.sum(1.0F, 1518.9362F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.optInt("KC@f");
      assertEquals(0, int0);
      
      JSONObject.valueToString(jSONObject0);
      int int1 = jSONObject0.length();
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optBoolean("");
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      jSONObject1.names();
      JSONArray jSONArray0 = jSONObject1.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      stringArray0[1] = "c";
      stringArray0[2] = "{x$}WA";
      stringArray0[3] = "JdT2qgRm";
      stringArray0[4] = "";
      stringArray0[5] = "Expected '";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("JdT2qgRm", 1L);
      assertEquals(1L, long0);
      
      long long1 = jSONObject0.optLong("{x$}WA");
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      jSONObject0.names();
      jSONObject0.optJSONArray("p\"@t6\"mBEzu2{Z.");
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("muL", object1);
      JSONArray jSONArray1 = (JSONArray)jSONObject1.opt("muL");
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      stringArray0[2] = "m=,;";
      stringArray0[3] = "S,On{uD'i [T]1`.";
      stringArray0[4] = "M8$D2|VIYy";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      double double1 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put(" at character ", (Map) null);
      String string0 = JSONObject.doubleToString(1277.3334);
      assertEquals("1277.3334", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("_zA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_zA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(15);
      JSONObject jSONObject1 = new JSONObject("{\n               \"java.lang.String@0000000004\": [],\n               \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      jSONObject0.optBoolean("{\n               \"java.lang.String@0000000004\": [],\n               \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
      
      jSONObject1.optBoolean((String) null, false);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "IB");
      jSONObject0.toString(15);
      JSONObject jSONObject1 = new JSONObject("{\n               \"java.lang.String@0000000004\": [\n                              java.lang.Byte@0000000014,\n                              java.lang.Byte@0000000015\n               ],\n               \"java.lang.String@0000000011\": \"java.lang.Class@0000000012\",\n               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Double double0 = new Double(1297.91398);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(3);
      jSONObject0.optJSONObject("cv#KPLBQ");
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n   \"java.lang.String@0000000004\": [],\n   \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\",\n   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-791), (-791));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("\t", "\t");
      jSONObject1.optInt("\t");
      jSONObject0.length();
      Byte byte0 = new Byte((byte) (-51));
      JSONObject jSONObject2 = jSONObject0.append("\t", byte0);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", (-3946L));
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getInt("isvalueOf");
      double double0 = jSONObject0.optDouble("flo", (-178.049));
      assertEquals((-178.049), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("getoptLong");
      assertEquals("\"getoptLong\"", string0);
      
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("iscopyValueOf", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("iscopyValueOf", "islowestOneBit");
      jSONObject1.toString(3);
      assertEquals(1, jSONObject0.length());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iscopyValueOf";
      stringArray0[1] = "islowestOneBit";
      stringArray0[2] = "iscopyValueOf";
      JSONObject jSONObject2 = new JSONObject("islowestOneBit", stringArray0);
      jSONObject2.optJSONObject("islowestOneBit");
      Short short0 = new Short((short)128);
      JSONObject jSONObject3 = new JSONObject(short0);
      assertEquals(1, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      Double double0 = new Double((-1034.80396541866));
      String string0 = JSONObject.valueToString(hashMap0, 1275, 123);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Long.compare(31L, (-1L));
      Long.compare(26, (-698L));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.append("$~Q$3Z_Shu*6zSyjF_", "$~Q$3Z_Shu*6zSyjF_");
      jSONObject0.optInt("Z<\"kwa\"$KIb^[mwe|@", 1);
      jSONObject0.toString(1986);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(15);
      jSONObject0.optDouble("");
      String string0 = "wheel.json.JSONArray";
      jSONObject0.has("wheel.json.JSONArray");
      try { 
        jSONObject0.get("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.toString(15);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("gettoUnsignedLong");
      jSONObject0.put("gettoUnsignedLong", 1L);
      jSONObject0.optLong("gettoUnsignedLong");
      Short short0 = new Short((short)2850);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Z-X%2$Q@:w}$VFa\"0 ";
      stringArray0[4] = "JSON does not allow non-finite numbers.";
      stringArray0[5] = "000";
      stringArray0[6] = "";
      stringArray0[7] = " o`y6;2]oPQHp#z'+k)";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getJSONObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.remove((Object) "");
      JSONObject jSONObject1 = jSONObject0.put("O1_/x9S(l(}^md~", 0.0);
      Float float0 = new Float((-1.0F));
      hashMap0.put(float0, "_WOXsCNNA19");
      jSONObject1.put("O1_/x9S(l(}^md~", 0.0);
      Float float1 = new Float(0.0);
      hashMap0.put(float1, "O1_/x9S(l(}^md~");
      jSONObject0.get("O1_/x9S(l(}^md~");
      jSONObject0.getDouble("O1_/x9S(l(}^md~");
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("{", (-1.0));
      Long long0 = new Long(1L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EBfs9w:rOc&&,!%q";
      stringArray0[1] = "{Y}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      long long0 = jSONObject0.optLong("\"\"", (-1825L));
      assertEquals((-1825L), long0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer.sum(16, 6);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", (-2082L));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "\\u";
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      jSONObject0.remove(string0);
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 1578, 1578);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("`iscopOyValueOf", (Object) "`iscopOyValueOf");
      try { 
        jSONObject0.getJSONObject("`iscopOyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`iscopOyValueOf\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONObject.getNames((Object) "O,xu");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Float float0 = new Float(0.0);
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[2] = "isparseLong";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.has("isreverseBytes");
      jSONObject0.optJSONArray("isparseLong");
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("GSN4C}/11K0:&F}cbu3", 4373);
      jSONObject1.opt("wheel.json.JSONObject$Null");
      jSONObject2.optLong((String) null);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      jSONObject2.put("wheel.json.JSONObject$Null", (Map) hashMap0);
      assertEquals(2, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optDouble("isfloatToIntBits", (double) 3);
      jSONObject0.toString(3);
      jSONObject0.optJSONObject("cv#KPLBQ");
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONException", "cv#KPLBQ");
      jSONObject1.names();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("\t", (Collection) linkedList0);
      jSONObject0.toString((-255));
      Long long0 = new Long((-255));
      Byte byte0 = new Byte((byte)25);
      jSONObject0.append("\t", byte0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Float float0 = new Float(0.0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean("] is not a JSONArray.");
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.put("Expected a ',' or ']'", 2129L);
      String string0 = "isjoin";
      try { 
        jSONObject0.getJSONArray("isjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Long long0 = new Long(31L);
      Long.compare(267L, 0L);
      Short short0 = new Short((short) (-1475));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$~Q$3Z_Shu*6zSyjF_";
      stringArray0[1] = "^d$";
      stringArray0[2] = "^d$";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 12);
      JSONObject.valueToString("^d$");
      Float float0 = new Float((-1578.005732811937));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      jSONObject0.toString((int) (short) (-1475), 4);
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3770, 3770);
      jSONObject0.put("{}", 0L);
      Long long0 = new Long(1993L);
      try { 
        jSONObject0.append("{}", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("X*", (Collection) linkedList0);
      Float float0 = new Float((-1286.4465F));
      jSONObject1.append("X*", float0);
      jSONObject0.isNull("X*");
      jSONObject1.optJSONArray("X*");
      boolean boolean0 = jSONObject1.optBoolean("X*");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      Double double0 = new Double((byte)94);
      JSONObject jSONObject0 = new JSONObject(double0);
      Long.compare((byte)94, 0L);
      jSONObject0.optInt("2#K7UOgMNz", (-409));
      jSONObject0.toString((-409));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString();
      jSONObject0.optDouble((String) null, 0.0);
      Double double0 = new Double((-44.575444));
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(double0, "{}", biFunction0);
      Short short0 = new Short((short) (-223));
      try { 
        jSONObject0.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = "{^r 3s\\5_-yAP[8";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^r 3s\u0005_-yAP[8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {^r 3s\u0005_-yAP[8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "{~`v/S\\V[c3RAH??y";
      JSONTokener jSONTokener0 = new JSONTokener("{~`v/SV[c3RAH??y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {~`v/SV[c3RAH??y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      jSONObject0.optLong((String) null);
      Object object2 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("null", object2);
      jSONObject1.put("' and instead saw '", true);
      jSONObject1.put("null", (double) 0L);
      jSONObject0.optBoolean("null");
      jSONObject0.put("getcompare", (Map) hashMap0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      stringArray0[1] = "c";
      stringArray0[2] = "{x$}WA";
      stringArray0[3] = "JdT2qgRm";
      Long long0 = new Long((-1896L));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Collection) linkedList0);
      jSONObject1.optInt("{}");
      jSONObject1.putOpt("isnotify", "JdT2qgRm");
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("nXh^V 2ieQ", (Collection) linkedList0);
      jSONObject1.accumulate("nXh^V 2ieQ", (Object) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(3);
      jSONObject0.accumulate("VG5gyEeb'98,W", "");
      jSONObject0.optBoolean("VG5gyEeb'98,W");
      JSONObject jSONObject1 = jSONObject0.put("!pYCWD<7_*0HXq@w/mo", (Object) "VG5gyEeb'98,W");
      jSONObject1.optLong("!pYCWD<7_*0HXq@w/mo", (long) 3);
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Long.compare(31L, (-1L));
      Double double0 = new Double(26);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "hjeZ{0-/|{7X";
      jSONObject0.append("Qt; EavPjvth", (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("toL");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of toL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[5] = "'";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{<;mrbO62j6v`@)7wDt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {<;mrbO62j6v`@)7wDt
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, (-791), (-791));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("PHp]hfU6,M", (Collection) linkedList0);
      String string0 = JSONObject.valueToString("PHp]hfU6,M", 15, 15);
      Double double0 = new Double((-3581.607));
      jSONObject1.putOpt((String) null, double0);
      String string1 = jSONObject1.optString("", "\"java.lang.String@0000000003\"");
      //  // Unstable assertion: assertEquals(1, jSONObject0.length());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Topk", (Object) "Topk");
      jSONObject0.optString("Topk");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"'Am(Z", (Collection) linkedList0);
      jSONObject1.toString((-368));
      jSONObject0.isNull("fT>@:!id0gA-s]:lZ$");
      jSONObject1.optString("\"'Am(Z", "");
      try { 
        jSONObject0.append((String) null, "fT>@:!id0gA-s]:lZ$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-12));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Long long0 = Long.valueOf((long) (byte) (-12));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = "";
      String string1 = "JSONArray[";
      try { 
        Long.parseUnsignedLong("JSONArray[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JSONArray[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.has((String) null);
      jSONObject0.optJSONArray("isparseLong");
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("xe;@}RwXC", 1031);
      assertEquals(1, jSONObject0.length());
      
      Integer integer0 = new Integer(60);
      JSONObject.valueToString(integer0, 60, 1031);
      boolean boolean0 = jSONObject1.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "V6lM";
      stringArray0[2] = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "\\u";
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      jSONObject0.optDouble((String) null, 0.0);
      jSONObject0.append(string0, jSONTokener0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      try { 
        jSONObject1.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "`iscopOyValueOf";
      JSONObject jSONObject1 = jSONObject0.put("`iscopOyValueOf", (Object) "`iscopOyValueOf");
      try { 
        jSONObject1.getLong("`iscopOyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`iscopOyValueOf\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      Byte.toUnsignedInt((byte)45);
      Byte byte0 = new Byte((byte)4);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Z";
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      jSONObject0.keys();
      try { 
        jSONObject1.getBoolean(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("\n", (Collection) linkedList1);
      jSONObject0.append("gethashCode", "gethashCode");
      jSONObject1.isNull("\n");
      jSONObject1.remove("\n");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      stringArray0[1] = "oclBK_:";
      stringArray0[2] = "{x$}WA";
      stringArray0[3] = "JdT2qgRm";
      stringArray0[4] = "";
      stringArray0[5] = "Expected '";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optLong("\"\"", 1L);
      JSONObject.doubleToString(1L);
      Object object1 = jSONObject0.remove("oclBK_:");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "BjT/`|`Fpb+{]yr");
      jSONObject0.optDouble("tj}jks[GvA~>KN");
      jSONObject0.optInt("BjT/`|`Fpb+{]yr");
      jSONObject0.put("su", (-4691L));
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.valueToString("BjT/`|`Fpb+{]yr");
      String string1 = JSONObject.valueToString("ishashCode", 0, 0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      jSONObject0.put("div", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(531, 531);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject1.optLong((String) null);
      jSONObject1.toJSONArray(jSONArray1);
      jSONObject0.toString(531);
      jSONObject1.optLong("wV8=wO)ENI\"Wi@9O", 0L);
      try { 
        jSONObject1.getInt("wV8=wO)ENI\"Wi@9O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wV8=wO)ENI\\\"Wi@9O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
