/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:44:43 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import java.util.Hashtable;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.JColorChooser;
import javax.swing.JTree;
import javax.swing.SwingConstants;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoAscii;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoLong;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoLongs;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.setGPSInDegrees(2.034241327735564, 2.034241327735564);
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffOutputSet0.getDirectories();
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      System.setCurrentTimeMillis(1299L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateRootDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffOutputSet0.getGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImageFileHeader((BinaryOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)26, (byte)26, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      MockFile mockFile0 = new MockFile("YaISck:rH+CLpz<VMx", "YaISck:rH+CLpz<VMx");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(3366, 3366, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      bufferedImage0.createGraphics();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(4, (byte)5, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      bufferedImage0.createGraphics();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      MockFile mockFile0 = new MockFile("Inialid/unknown D.4 ,ontrol code ");
      MockFile mockFile1 = new MockFile(".aISck:rH+CLpz<VMx", ".aISck:rH+CLpz<VMx");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD2;
      TagInfoAscii tagInfoAscii0 = new TagInfoAscii("Inialid/unknown D.4 ,ontrol code ", 40965, 0, tiffDirectoryType0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Inialid/unknown D.4 ,ontrol code ";
      stringArray0[1] = ".aISck:rH+CLpz<VMx";
      stringArray0[2] = ".aISck:rH+CLpz<VMx";
      tiffOutputDirectory0.add(tagInfoAscii0, stringArray0);
      try { 
        tiffImageWriterLossy0.write(binaryOutputStream0, tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set has Interoperability Directory Offset field, but no Interoperability Directory
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addExifDirectory();
      try { 
        tiffImageWriterLossy0.write(filterOutputStream0, tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(15, (byte)26, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      hashtable0.put("0000100", tiffOutputSet0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: 0000100
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      MockFile mockFile0 = new MockFile("Invalid/unknown T.4 control code ");
      MockFile mockFile1 = new MockFile(mockFile0, "YaISck:rH+CLpz<VMx");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      mockFile1.setReadOnly();
      tiffOutputSet0.getOrCreateRootDirectory();
      mockFile0.createNewFile();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD0;
      TagInfoAscii tagInfoAscii0 = new TagInfoAscii("Invalid/unknown T.4 control code ", (-18), (-18), tiffDirectoryType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet(byteOrder0);
      tiffOutputSet1.dump();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet1.addInteroperabilityDirectory();
      tiffImageWriterLossy0.write(mockPrintStream0, tiffOutputSet0);
      TiffImageWriterBase.imageDataPaddingLength(40965);
      tiffOutputSet0.addDirectory(tiffOutputDirectory0);
      int int0 = SwingConstants.WEST;
      TiffImageWriterBase.imageDataPaddingLength(1478);
      tiffImageWriterLossy0.write(mockPrintStream0, tiffOutputSet0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addGPSDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffOutputSet0.addInteroperabilityDirectory();
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateExifDirectory();
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      ByteOrder.nativeOrder();
      tiffOutputSet1.addDirectory(tiffOutputSummary0.rootDirectory);
      TiffOutputSummary tiffOutputSummary1 = new TiffOutputSummary(tiffOutputSummary0.byteOrder, tiffOutputSummary0.rootDirectory, tiffOutputSummary0.directoryTypeMap);
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set has Exif Directory Offset field, but no Exif Directory
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      String string0 = JColorChooser.SELECTION_MODEL_PROPERTY;
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffOutputDirectory0.setNextDirectory((TiffOutputDirectory) null);
      tiffOutputSet0.addInteroperabilityDirectory();
      int[] intArray0 = new int[4];
      intArray0[3] = 6;
      ImageBuilder imageBuilder0 = new ImageBuilder(4, 6, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      MockPrintStream mockPrintStream0 = new MockPrintStream("selectionModel");
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0, tiffOutputSet0.byteOrder);
      tiffImageWriterLossy1.writeImageFileHeader(binaryOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/Invalid/unknown T.4 control code ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "selectionModel");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy();
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.ResolveAttribute;
      Double double0 = new Double(34662);
      hashtable0.put("XMP_XML", tiffOutputSummary0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)26, (byte)26, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("EXIF", imageBuilder0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.common.ImageBuilder cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid/unknown T.4 control code ");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Invalid/unknown T.4 control code ");
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_EXIF_IFD;
      TagInfoLong tagInfoLong0 = new TagInfoLong("Invalid/unknown T.4 control code ", 0, tiffDirectoryType0, false);
      tiffOutputDirectory0.add(tagInfoLong0, (-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/Invalid");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TagInfoLong tagInfoLong1 = new TagInfoLong("Invalid/unknown T.4 control code ", 24, tiffDirectoryType0, false);
      tiffOutputDirectory0.add(tagInfoLong0, 2243);
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      try { 
        tiffImageWriterLossy0.write(mockPrintStream1, tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tag (0 (0x0: Invalid/unknown T.4 control code ): ) appears twice in directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      byte[] byteArray0 = new byte[0];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(73);
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD2;
      TagInfoLongs tagInfoLongs0 = new TagInfoLongs("FORMAT", 73, (-2976), tiffDirectoryType0, false);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffOutputDirectory tiffOutputDirectory0 = new TiffOutputDirectory(2311, byteOrder0);
      int[] intArray0 = new int[0];
      tiffOutputDirectory0.add(tagInfoLongs0, intArray0);
      TiffImageWriterBase.imageDataPaddingLength(2306);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addDirectory(tiffOutputDirectory0);
      TiffImageWriterBase.imageDataPaddingLength(765);
      try { 
        tiffImageWriterLossy0.write(byteArrayOutputStream0, tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing directory: 0.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      int[] intArray0 = new int[4];
      intArray0[3] = 6;
      ImageBuilder imageBuilder0 = new ImageBuilder(4, 6, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Double double0 = new Double(34662);
      hashtable0.put("COMPRESSION", double0);
      try { 
        tiffImageWriterLossy1.writeImage(bufferedImage0, pipedOutputStream1, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      String string0 = JTree.CELL_EDITOR_PROPERTY;
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffOutputSet0.addInteroperabilityDirectory();
      ImageBuilder imageBuilder0 = new ImageBuilder(4, 6, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      DebugGraphics.logStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/Invalid");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      tiffOutputSet0.getGPSDirectory();
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      hashtable1.put("COMPRESSION", pipedOutputStream0);
      hashtable1.put("cellEditor", tiffImageWriterLossy1);
      try { 
        tiffImageWriterLossy1.writeImage(bufferedImage0, pipedOutputStream0, hashtable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: java.io.PipedOutputStream@2f3da933
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      String string0 = JColorChooser.SELECTION_MODEL_PROPERTY;
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      tiffOutputDirectory0.setNextDirectory((TiffOutputDirectory) null);
      tiffOutputSet0.addInteroperabilityDirectory();
      int[] intArray0 = new int[4];
      intArray0[3] = (-4);
      ImageBuilder imageBuilder0 = new ImageBuilder(4, 6, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      MockPrintStream mockPrintStream0 = new MockPrintStream("selectionModel");
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream0, tiffOutputSet0.byteOrder);
      tiffImageWriterLossy1.writeImageFileHeader(binaryOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image/Invalid/unknown T.4 control code ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "selectionModel");
      mockPrintStream0.println((-4));
      ImageBuilder imageBuilder1 = new ImageBuilder(4, 34662, true);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy();
      tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      bufferedImage0.getSource();
      Long long0 = new Long((-4));
      hashtable0.put("FORMAT", long0);
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      System.setCurrentTimeMillis(6);
      System.setCurrentTimeMillis((-1L));
      tiffImageWriterLossy2.writeImage(bufferedImage0, binaryOutputStream0, hashtable0);
  }
}
