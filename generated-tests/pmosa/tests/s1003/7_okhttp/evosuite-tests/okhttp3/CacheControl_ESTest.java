/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:50:56 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.set("-(#boCpbsL)hWbdAIG", "3loI@z4b!IGD%UjP");
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      cacheControl0.isPublic();
      cacheControl0.minFreshSeconds();
      cacheControl0.minFreshSeconds();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(1660, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxAge(1660, timeUnit1);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      TimeUnit timeUnit2 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.maxStale(1660, timeUnit2);
      assertSame(cacheControl_Builder4, cacheControl_Builder5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(2179, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noStore();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder5.maxAge(2179, timeUnit1);
      assertSame(cacheControl_Builder6, cacheControl_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl0.headerValue = "";
      Headers.Builder headers_Builder0 = new Headers.Builder();
      cacheControl0.FORCE_CACHE.toString();
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.toString();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl2.FORCE_CACHE.toString();
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      cacheControl3.FORCE_NETWORK.headerValue = "namesAndValues == null";
      cacheControl2.FORCE_CACHE.headerValue = "vnZSCKOZ8,7A-[~$&]";
      cacheControl0.onlyIfCached();
      CacheControl cacheControl4 = CacheControl.parse(headers0);
      cacheControl1.headerValue = "only-if-cached, ";
      cacheControl4.FORCE_NETWORK.headerValue = "nV~pn|P{IK&a!\"J";
      cacheControl4.headerValue = "vnZSCKOZ8,7A-[~$&]";
      cacheControl0.maxStaleSeconds();
      cacheControl1.sMaxAgeSeconds();
      cacheControl4.minFreshSeconds();
      CacheControl cacheControl5 = CacheControl.parse(headers0);
      cacheControl5.toString();
      cacheControl5.sMaxAgeSeconds();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxAge((-1811), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxAge < 0: -1811
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("public", "public");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      int int0 = MockThread.MAX_PRIORITY;
      String string0 = cacheControl0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxStale(0, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      cacheControl_Builder1.noTransform();
      cacheControl_Builder2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      cacheControl_Builder3.noTransform();
      cacheControl_Builder3.noStore();
      cacheControl_Builder3.maxStale(0, timeUnit0);
      cacheControl_Builder1.noTransform();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder1);
      cacheControl0.mustRevalidate();
      boolean boolean0 = cacheControl0.isPrivate();
      boolean boolean1 = cacheControl0.mustRevalidate();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertTrue(boolean1 == boolean0);
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.isPublic());
      assertTrue(cacheControl0.noTransform());
      assertTrue(cacheControl0.noStore());
      assertTrue(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.noStore();
      // Undeclared exception!
      try { 
        Headers.of((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // namesAndValues == null
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.onlyIfCached();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      cacheControl_Builder2.noStore();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      cacheControl_Builder3.maxStale(Integer.MAX_VALUE, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add(">nW?AmKuZ:Ddive.yLp", "");
      cacheControl_Builder2.noTransform();
      Headers headers0 = new Headers(headers_Builder1);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl0.noCache();
      cacheControl0.maxAgeSeconds();
      String string0 = cacheControl0.toString();
      assertNotNull(string0);
      assertEquals("no-cache, no-store, max-stale=2147483647, only-if-cached, no-transform", string0);
      
      cacheControl1.noCache();
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      String[] stringArray0 = new String[8];
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("fU?z<<E;amw{2");
      Headers.Builder headers_Builder2 = headers_Builder1.set("fU?z<<E;amw{2", "fU?z<<E;amw{2");
      Headers headers0 = new Headers(headers_Builder2);
      CacheControl.parse(headers0);
      stringArray0[0] = "fU?z<<E;amw{2";
      stringArray0[1] = "name is empty";
      stringArray0[2] = "s6a";
      stringArray0[3] = "Unexpected char %#04x at %d in header name: %s";
      stringArray0[4] = "name is empty";
      stringArray0[5] = "";
      stringArray0[6] = "5I4!tjqPU`rP";
      stringArray0[7] = "name == null";
      Headers headers1 = Headers.of(stringArray0);
      CacheControl cacheControl1 = CacheControl.parse(headers1);
      String string0 = cacheControl0.FORCE_NETWORK.toString();
      assertEquals("nV~pn|P{IK&a!\"J", string0);
      
      cacheControl0.noTransform();
      int int0 = cacheControl1.minFreshSeconds();
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), int0);
      assertFalse(cacheControl1.noCache());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("Cache-Control", "[usize=");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.onlyIfCached());
      assertFalse(cacheControl0.noStore());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder0);
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.headerValue = "vnZSCKOZ8,7A-[~$&]";
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("no-transform", "vnZSCKOZ8,7A-[~$&]");
      Headers.Builder headers_Builder2 = headers_Builder1.set("vnZSCKOZ8,7A-[~$&]", "no-transform");
      Headers headers0 = new Headers(headers_Builder2);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      Headers.Builder headers_Builder3 = new Headers.Builder();
      headers_Builder3.addLenient("vnZSCKOZ8,7A-[~$&]", "vnZSCKOZ8,7A-[~$&]");
      cacheControl0.onlyIfCached();
      cacheControl1.mustRevalidate();
      boolean boolean0 = cacheControl1.mustRevalidate();
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(boolean0);
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.isPublic());
      
      CacheControl cacheControl2 = CacheControl.FORCE_CACHE;
      cacheControl2.onlyIfCached();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      cacheControl_Builder1.noCache();
      CacheControl cacheControl3 = cacheControl_Builder1.build();
      assertEquals((-1), cacheControl3.sMaxAgeSeconds());
      assertFalse(cacheControl3.isPrivate());
      assertEquals((-1), cacheControl3.minFreshSeconds());
      assertEquals((-1), cacheControl3.maxAgeSeconds());
      assertFalse(cacheControl3.isPublic());
      assertFalse(cacheControl3.mustRevalidate());
      assertEquals((-1), cacheControl3.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noStore();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder0.noTransform();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.noCache();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder0.maxStale(1060, timeUnit0);
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient("public");
      Headers.Builder headers_Builder2 = headers_Builder1.add("Pragma", "publi1Oc");
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder4.noTransform();
      Headers headers0 = new Headers(headers_Builder2);
      CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      cacheControl0.noCache();
      int int0 = MockThread.MAX_PRIORITY;
      int int1 = (-23);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        cacheControl_Builder5.maxStale((-23), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -23
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder1.maxStale(1060, timeUnit0);
      CacheControl cacheControl0 = cacheControl_Builder3.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("Cache-Control", "[size=");
      cacheControl_Builder2.noTransform();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noCache());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      
      CacheControl cacheControl2 = cacheControl_Builder0.build();
      cacheControl2.noCache();
      int int0 = MockThread.MAX_PRIORITY;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      cacheControl_Builder2.minFresh(10, timeUnit1);
      System.setCurrentTimeMillis(10);
      int int1 = cacheControl0.maxAgeSeconds();
      assertEquals((-1), int1);
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertEquals(0, cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noTransform();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder0.maxStale(1060, timeUnit0);
      cacheControl_Builder3.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("Cache-Control", "GJcHo)]P(&p)(,");
      cacheControl_Builder2.noTransform();
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      CacheControl cacheControl1 = cacheControl_Builder0.build();
      cacheControl0.noCache();
      int int0 = MockThread.MIN_PRIORITY;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      cacheControl_Builder2.minFresh(59, timeUnit1);
      System.setCurrentTimeMillis(1);
      cacheControl1.maxAgeSeconds();
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noTransform();
      assertSame(cacheControl_Builder3, cacheControl_Builder4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("Cache-Control", "4EqwCOV_1i=BI('lo_h");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.isPrivate());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.mustRevalidate());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
  }
}
