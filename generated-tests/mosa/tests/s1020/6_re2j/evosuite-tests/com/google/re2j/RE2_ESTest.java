/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:47:20 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = RE2.match("'}p;X6,_M`u/,{h", "'}p;X6,_M`u/,{h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("Othwaer_ID_Continu");
      int[] intArray0 = rE2_0.findSubmatchIndex("Othwaer_ID_Continu");
      assertArrayEquals(new int[] {0, 18}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("A$#-]");
      List<int[]> list0 = rE2_0.findAllIndex("A$#-]", 897);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", 37);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("F");
      String string0 = rE2_0.replaceAll("F", "F");
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("\fX!0WM+,tHJ");
      String string0 = rE2_0.replaceFirst("\fX!0WM+,tHJ", "\fX!0WM+,tHJ");
      assertEquals("\fX!0WM+,tHJ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("S1RU@kJ2Ys");
      String string0 = rE2_0.replaceFirst("S1RU@kJ2Ys", "S1RU@kJ2Ys");
      assertEquals("S1RU@kJ2Ys", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("|");
      String string0 = rE2_0.replaceAll("|", "|");
      assertEquals("|||", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("8");
      assertNotNull(rE2_0);
      assertEquals("8", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertEquals("8", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-3387));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("!A");
      assertNotNull(rE2_0);
      assertEquals("!A", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("!A", 37);
      assertNotNull(list0);
      assertEquals("!A", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("|,GEAy");
      assertNotNull(rE2_0);
      assertEquals("|,GEAy", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("|,GEAy", 121);
      assertNotNull(list0);
      assertEquals("|,GEAy", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = RE2.match("UTF-8", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("zydG_a0yfz");
      assertNotNull(rE2_0);
      assertEquals("zydG_a0yfz", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("zydG_a0yfz", 8);
      assertNotNull(list0);
      assertEquals("zydG_a0yfz", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("@}5%Q9");
      assertNotNull(rE2_0);
      assertEquals("@}5%Q9", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("UTF-8", 64);
      assertNull(list0);
      assertEquals("@}5%Q9", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("Mongolian");
      assertNotNull(rE2_0);
      assertEquals("Mongolian", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
      assertEquals("Mongolian", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("com.google.re2j.Unicode");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.Unicode", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("com.google.re2j.Unicode", 3);
      assertNotNull(list0);
      assertEquals("com.google.re2j.Unicode", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("pf7dt4;");
      assertNotNull(rE2_0);
      assertEquals("pf7dt4;", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
      assertEquals("pf7dt4;", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[1];
      boolean boolean0 = rE2_0.match("", 256, 0, 0, intArray0, 256);
      assertFalse(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("!");
      assertNotNull(rE2_0);
      assertEquals("!", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 256);
      assertNull(list0);
      assertEquals("!", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Javanese");
      assertNotNull(rE2_0);
      assertEquals("Javanese", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
      assertEquals("Javanese", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 1634);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("pW<g*N");
      assertNotNull(rE2_0);
      assertEquals("pW<g*N", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("pW<g*N");
      assertNull(intArray0);
      assertEquals("pW<g*N", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.RE2");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        rE2_0.match("", 256, 256, 256, intArray0, 256);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("Kannada");
      assertNotNull(rE2_0);
      assertEquals("Kannada", rE2_0.toString());
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("Kannada", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("\fX!0WMLH");
      assertNotNull(rE2_0);
      assertEquals("\fX!0WMLH", rE2_0.toString());
      
      String string0 = rE2_0.find("\fX!0WMLH");
      assertEquals("\fX!0WMLH", string0);
      assertNotNull(string0);
      assertEquals("\fX!0WMLH", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = RE2.quoteMeta("spmQaiLmx|95f_sBbs");
      assertEquals("spmQaiLmx\\|95f_sBbs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Lyz@8chR; RML");
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[4];
      boolean boolean0 = rE2_0.match("Lyz@8chR; RML", (-3409), (-3409), (-3409), intArray0, 0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("Othwaer_ID_Continu");
      assertNotNull(rE2_0);
      assertEquals("Othwaer_ID_Continu", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("Othwaer_ID_Continu");
      assertNotNull(intArray0);
      assertEquals("Othwaer_ID_Continu", rE2_0.toString());
      assertArrayEquals(new int[] {0, 18}, intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("\n");
      assertNotNull(rE2_0);
      assertEquals("\n", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("\n");
      assertNotNull(stringArray0);
      assertEquals("\n", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.find("");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[5];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-2940));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("V");
      assertNotNull(rE2_0);
      assertEquals("V", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-10782));
      assertNull(list0);
      assertEquals("V", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("ijV KI$(SRf)Uk1j");
      assertNotNull(rE2_0);
      assertEquals("ijV KI$(SRf)Uk1j", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("ijV KI$(SRf)Uk1j", (-1769));
      assertNull(list0);
      assertEquals("ijV KI$(SRf)Uk1j", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", 10);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-3));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("zydG_a0yfz");
      assertNotNull(rE2_0);
      assertEquals("zydG_a0yfz", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("zydG_a0yfz");
      assertNotNull(stringArray0);
      assertEquals("zydG_a0yfz", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      RE2 rE2_0 = RE2.compilePOSIX("Han");
      assertNotNull(rE2_0);
      assertEquals("Han", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 10);
      assertNull(list0);
      assertEquals("Han", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[12];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 4);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = new RE2("Rz>=@BP+d@`");
      assertNotNull(rE2_0);
      assertEquals("Rz>=@BP+d@`", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("Rz>=@BP+d@`", 1568);
      assertNull(list0);
      assertEquals("Rz>=@BP+d@`", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("`");
      assertNotNull(rE2_0);
      assertEquals("`", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("");
      assertNull(intArray0);
      assertEquals("`", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(?-m:$)");
      assertNotNull(rE2_0);
      assertEquals("(?-m:$)", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("(?-m:$)", (-2716));
      assertNotNull(list0);
      assertEquals("(?-m:$)", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[2];
      boolean boolean0 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|Q");
      assertNotNull(rE2_0);
      assertEquals("|Q", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("|Q", "|Q");
      assertEquals("|Q||Q", string0);
      assertNotNull(string0);
      assertEquals("|Q", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("", 0, 0, 0, (int[]) null, 0);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
  }
}
