/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:16:56 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.net.URI;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R=8&%CQ/f`</9iH\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R=8&%CQ/f`</9iH\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", high = ", ", high = ", ", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.format(67, 67, false, 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii67", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.format((-2878), (-2878), false, 'l');
      assertEquals("-2878", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.format(1693, 1693, true, '\"');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("NewObject", (String[]) null);
      assertEquals("()LNewObject;", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-1));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(">b<_X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>b<_X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.methodSignatureArgumentTypes("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("& k4k'[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("BQlG)[c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("t0WV;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `t0WV;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = Utility.clearBit(1043, 0);
      assertEquals(1042, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray0;
      Utility.printArray(objectArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3490), (-3490));
      MockPrintStream mockPrintStream0 = new MockPrintStream("{[B@6daebea5}");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-38), (int) (byte) (-38));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[2] = (byte)81;
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null}", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-264), (int) (byte)47);
      assertEquals("0:    laload\n1:    nop\n2:    fastore\n", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.compactClassName("I5p;k]n`T");
      assertEquals("I5p;k]n`T", string0);
      
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.classOrInterface((-582));
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("34", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)82;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-929));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)93;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 7);
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)39;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 233, false);
      assertEquals("0:    <illegal opcode>\n1:    pop2\n2:    i2d\n3:    swap\n4:    dload_1\n", string0);
      
      short short0 = Utility.searchOpcode("HP#L%<thfa'Q");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SourceFile");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.getSignature("K%f!Onu!r-_");
      assertEquals("LK%f!Onu!r-_;", string0);
      
      String string1 = Utility.methodSignatureReturnType("LK%f!Onu!r-_;");
      assertEquals("K%f!Onu!r-_", string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"$l$8b$I$A$A$A$A$A$A$A\", \"$l$8b$I$A$A$A$A$A$A$A\", \"$l$8b$I$A$A$A$A$A$A$A\"}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 174;
      Utility.accessToString(174, true);
      try { 
        Utility.methodSignatureReturnType("private protected static transient", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private protected static transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.clearBit(40, 957);
      try { 
        Utility.typeOfSignature("5C|O~aXs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5C|O~aXs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{null, null}", string0);
      
      byte[] byteArray0 = new byte[5];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.signatureToString("I{CTvTu2!");
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = Utility.decode("t..BdDQ5Z", false);
      Utility.encode(byteArray0, false);
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = Utility.typeOfSignature("LRQ%Z5Ur]/ml|BY'9/");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[8] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.compactClassName("ldiv");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3597), (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$bb$A$A$A$A$A$A", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("bb 00 00 00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.signatureToString("[Fx&0mdHwP_{S`U\"c]K");
      assertEquals("float[]", string0);
      
      String string1 = Utility.replace("e>", "compiled from\t\t", "T");
      assertEquals("e>", string1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$V$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $V$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = Member.DECLARED;
      Utility.classOrInterface(959);
      byte byte0 = Constants.ATTR_DEPRECATED;
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "double";
      stringArray0[1] = "double";
      String string0 = Utility.methodTypeToSignature("double", stringArray0);
      assertEquals("(DD)D", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("static", false);
      Utility.compactClassName("KLQ,0g#QZ}#?YJ)=>!");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.compactClassName("zi2n#QrsWM:24#C");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3838, (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        Utility.typeOfSignature("& k4k'[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: & k4k'[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.signatureToString("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)37;
      String string0 = Utility.methodTypeToSignature(")\t", stringArray0);
      assertEquals("(LBogus;LInteger;LFloat;LDouble;LLong;LNull;LInitObject;LObject;LNewObject;)L);", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(478, 170);
      byte[] byteArray0 = new byte[6];
      String[] stringArray0 = new String[4];
      stringArray0[0] = " (";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      String string0 = Utility.methodTypeToSignature("V", stringArray0);
      assertEquals("(L(;LV;LV;LV;)LV;", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("The array of names must not be null", false);
      Utility.compactClassName("The array of names must not be null");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, 181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), 187, true);
      assertEquals("0:    ifle\t\t#-24930\n", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), 79);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[)ZkweYW", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [)ZkweYW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)76;
      byteArray0[1] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*w86y+mCfugOcwdHvfF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w86y+mCfugOcwdHvfF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.convertString("'B[VNHXf^\"");
      String string0 = Utility.convertString("'B[VNH\\Xf^\"");
      assertEquals("\\'B[VNH\\\\Xf^\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Utility.convertString("& k4k'[");
      assertEquals("& k4k\\'[", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nd5@P%~d b5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nd5@P%~d b5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-5636), (-5636));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Utility.convertString("?l*kIj}| G5$W6H");
      assertEquals("?l*kIj}| G5$W6H", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      try { 
        Utility.typeOfSignature("H@7v!fzy_86(24A4XY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H@7v!fzy_86(24A4XY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Utility.clearBit((-1), (-1));
      Object object6 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object3;
      objectArray0[1] = object2;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, Integer.MAX_VALUE, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The array of names must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("1U.5apW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1U.5apW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      Object object0 = new Object();
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-49), 54);
      String string1 = Constants.CONSTRUCTOR_NAME;
      try { 
        Utility.typeOfSignature("EVTpp>'zm&,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EVTpp>'zm&,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of names must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of names must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-641), (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    iaload
         // 2:    aload_3
         // 3:    daload
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)76;
      byteArray0[1] = (byte) (-70);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte)76;
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte) (-70);
      byteArray1[8] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 100, (int) (byte)76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byte byte0 = (byte)85;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2458, 990);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      try { 
        Utility.typeOfSignature("@Una6#CN:wE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @Una6#CN:wE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Fieldref;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pattern.quote("Gpa=OjR9G=PS(+*'n");
      String string0 = Utility.methodTypeToSignature("Gpa=OjR9G=PS(+*'n", (String[]) null);
      assertEquals("()LGpa=OjR9G=PS(+*'n;", string0);
      
      byte byte0 = Utility.typeOfSignature("Sx.usv*s");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte) (-89);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("2zeE&Xqe`(o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2zeE&Xqe`(o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K%f!Onu!r-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K%f!Onu!r-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-56), (int) (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iaload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")hJc*EuL+p'*=8~A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )hJc*EuL+p'*=8~A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.typeOfSignature("D5.!Cm=7xtI");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("EnclosingMethod", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EnclosingMethod'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)99;
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "-";
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("C", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.accessToString(2113);
      assertEquals("public volatile strictfp", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte) (-127));
      assertEquals("0:    lor\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 18, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 723, 723, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = Utility.setBit(2874, 2874);
      assertEquals(67111738, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3152), 67111738);
      assertEquals("0:    istore_0\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4829), (-889275714));
      assertEquals("0:    astore_1\n1:    fload_0\n2:    astore_1\n3:    astore_1\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)76, (byte)34, (byte)76, (byte)76}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-63));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UV2K3Wwj8r[]J5b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UV2K3Wwj8r[]J5b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-74)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-85);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 1458);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 698, (int) (byte) (-109), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[9] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), 345);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("<illegal opcode>", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.compactClassName("<illegal opcode>");
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-38), (int) (byte) (-38));
      assertEquals("0:    istore_1\n1:    lmul\n2:    idiv\n3:    idiv\n4:    lsub\n5:    dsub\n6:    ladd\n7:    idiv\n8:    lload_2\n9:    ddiv\n10:   irem\n11:   dadd\n12:   ddiv\n13:   isub\n14:   lsub\n15:   istore_3\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)51);
      assertEquals("0:    baload\n1:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)51, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfSignature("0:    baload\n1:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    baload
         // 1:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (-117));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.getSignature("K%f!Onu!r-_");
      assertEquals("LK%f!Onu!r-_;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), 425);
      assertEquals("0:    monitorenter\n1:    monitorenter\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-62)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CD ");
      assertEquals("char", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("char", "char", true);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-78), (byte) (-99), (byte) (-127), (byte) (-55), (byte)46, (byte) (-121), (byte) (-75), (byte) (-96)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("jsr_w\t\t#-1298300471", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-78), (byte) (-99), (byte) (-127), (byte) (-55), (byte)46, (byte) (-121), (byte) (-75), (byte) (-96)}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.getSignature("L9sRK");
      assertEquals("LL9sRK;", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("L9sRK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9sRK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("4T=:kH/dXhR}\"K#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4T=:kH/dXhR}\"K#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6m:oYJxiu, .\"5YP1ja");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6m:oYJxiu, .\"5YP1ja
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-78), (int) (byte) (-101), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)23;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)23, false);
      assertEquals("0:    fload\t\t%0\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)23, (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("l2f");
      assertEquals((short)137, short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("l2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l2f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-38), (int) (byte) (-38));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureReturnType("J?");
      assertEquals("long", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)35;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)119;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)119, (int) (byte) (-76));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8960. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = Utility.searchOpcode(")r[eD9lq+N[G8A4");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("> ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: > 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Utility.typeOfSignature("JavaClass.debug");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)88);
      assertEquals("0:    pop2\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = Utility.setBit(959, 959);
      assertEquals((-2147482689), int0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("#xjfA;lp/:,^u8K5*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #xjfA;lp/:,^u8K5*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)123;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-112), (byte)123, (byte)0}, byteArray0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-112));
      assertEquals("0:    d2f\n1:    d2f\n2:    lshr\n3:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-112), (byte)123, (byte)0}, byteArray0);
      
      try { 
        Utility.typeOfMethodSignature("0:    d2f\n1:    d2f\n2:    lshr\n3:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    d2f
         // 1:    d2f
         // 2:    lshr
         // 3:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      try { 
        Utility.typeOfSignature("GM8h>b@W?2([");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GM8h>b@W?2([
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2081, (int) (byte)71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.compactClassName("Yd2wnS JBy? ");
      assertEquals("Yd2wnS JBy? ", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[2] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte)83);
      assertEquals("0:    dup_x2\n1:    l2d\n2:    l2d\n3:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-118), (byte) (-118), (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = Utility.replace("impdep2", "impdep2", (String) null);
      assertEquals("null", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-2081), 59, true);
      assertEquals("0:    dload_0\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 102, 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 1935;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(1935, true);
      assertEquals("public private protected static transient native abstract", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected static transient native abstract", "public private protected static transient native abstract", "public private protected static transient native abstract");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static transient native abstract
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{null, null}", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5902, 5902);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)61;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 1192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "D5.!Cm=7xtI";
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-93), 81, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.fillup("R60d", 34, false, 'O');
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOR60d", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)125;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("l$b6$9c_E$a8$b9$7d", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-74), (byte) (-100), (byte)95, (byte)69, (byte) (-88), (byte) (-71), (byte)125}, byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, 1165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, 237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -59
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("double", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)111, (byte)117, (byte)98, (byte)108, (byte)101}, byteArray0);
      
      String string0 = Utility.compactClassName("double");
      assertEquals("double", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "8.Cu~|gm$H*i";
      try { 
        Utility.typeOfSignature("8.Cu~|gm$H*i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8.Cu~|gm$H*i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ooops, what primitive type is ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ooops, what primitive type is '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)89;
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OL)\"1*Z8ryM%/H^3k8,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OL)\"1*Z8ryM%/H^3k8,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-103), (int) (byte) (-103));
      assertEquals("0:    ifeq\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      assertNotNull(stringArray0);
      
      try { 
        Utility.typeOfSignature("X%f!E8On[!r-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X%f!E8On[!r-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-78), (int) (byte) (-108), false);
      assertEquals("0:    lcmp\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      
      short short0 = Utility.searchOpcode("0:    lcmp\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (int) (byte)123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1491), (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_1
         // 1:    if_icmplt\t\t#-24319
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K%f!Onu!r-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K%f!Onu!r-_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1491), (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_2
         // 1:    if_icmplt\t\t#-24319
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[2] = (byte) (-100);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)108, (byte)0, (byte) (-100), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 94, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[Fx&0mdHwP_{S`U\"c]K");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short short0 = Utility.searchOpcode(")r[eD9lq+N[G8A4");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format((short) (-1), (short) (-1), true, 'f');
      assertEquals("-1", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.getSignature(")r[eD9lq+N[G8A4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[eD9lq+N[G8A4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = Utility.decode("Invalid signature: ", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.compactClassName("Invalid signature: ");
      assertEquals("Invalid signature: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-765));
      assertEquals("0:    dstore_2\n1:    fdiv\n2:    fneg\n3:    ladd\n4:    idiv\n5:    lmul\n6:    isub\n7:    lload_2\n8:    drem\n9:    lmul\n10:   dsub\n11:   fdiv\n12:   ladd\n13:   ineg\n14:   lneg\n15:   frem\n16:   lsub\n17:   astore\t\t%32\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfSignature("0:    dstore_2\n1:    fdiv\n2:    fneg\n3:    ladd\n4:    idiv\n5:    lmul\n6:    isub\n7:    lload_2\n8:    drem\n9:    lmul\n10:   dsub\n11:   fdiv\n12:   ladd\n13:   ineg\n14:   lneg\n15:   frem\n16:   lsub\n17:   astore\t\t%32\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dstore_2
         // 1:    fdiv
         // 2:    fneg
         // 3:    ladd
         // 4:    idiv
         // 5:    lmul
         // 6:    isub
         // 7:    lload_2
         // 8:    drem
         // 9:    lmul
         // 10:   dsub
         // 11:   fdiv
         // 12:   ladd
         // 13:   ineg
         // 14:   lneg
         // 15:   frem
         // 16:   lsub
         // 17:   astore\t\t%32
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte byte0 = Constants.ITEM_InitObject;
      assertEquals((byte)6, byte0);
      
      try { 
        Utility.typeOfSignature("A$6pz6J-US?w,0d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A$6pz6J-US?w,0d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-85);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte)35, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)103;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-724), (int) (byte)103);
      assertEquals("0:    nop\n1:    dsub\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)103}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)91;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 1, (int) (byte)91, true);
      assertEquals("1:    dup_x2\n2:    dup_x2\n3:    dup_x2\n4:    fstore_3\n5:    dup_x2\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)70, (byte)91}, byteArray0);
      
      short short0 = Utility.searchOpcode("2\" .RPX:D0}TzqSP");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-38), true);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-38), (byte)0}, byteArray0);
      
      boolean boolean0 = Utility.isSet((byte)0, (byte) (-38));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "l2f";
      String string1 = Utility.methodTypeToSignature("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    nop\n", stringArray0);
      assertEquals("(Ll2f;)L0:;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = Utility.setBit(959, 959);
      assertEquals((-2147482689), int0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 959, (int) (byte) (-106), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-70);
      String string0 = Utility.convertString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      try { 
        Utility.typeOfSignature("PK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3{8Y{2F(k&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3{8Y{2F(k&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X%3!OnO!r-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X%3!OnO!r-_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2471), (int) (byte)123);
      assertEquals("0:    lshr\n1:    iaload\n2:    lshr\n3:    lshr\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)123, (byte)46, (byte)123, (byte)123}, byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("CodeException(start_pc = ");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-69)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 137, 560);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = Utility.setBit(959, 959);
      assertEquals((-2147482689), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byte byte0 = (byte)85;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, 691, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "*w86y+mCfugOcwdHvfF";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-120);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-94), (byte) (-120)}, byteArray0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)7;
      byteArray0[5] = (byte) (-125);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-103));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    iconst_4\n3:    nop\n4:    nop\n5:    lxor\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5), (byte)7, (byte)0, (byte)0, (byte) (-125)}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Utility.compactClassName("void");
      assertEquals("void", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MethodParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MethodParameters
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2835, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-118);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), 3620);
      assertEquals("0:    dstore_2\n1:    l2d\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-118)}, byteArray0);
      
      try { 
        Utility.typeOfMethodSignature("&i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)117;
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte)117;
      byteArray1[4] = (byte)117;
      byteArray1[5] = (byte)117;
      byteArray1[6] = (byte)95;
      byteArray1[7] = (byte)117;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)117, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte)117, (byte)117, (byte)117, (byte)117, (byte)95, (byte)117}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)117, 702);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y26&Sb$fb<` rY3w.s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y26&Sb$fb<` rY3w.s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "HarN{>@;7Y^ &e@>lzT";
      boolean boolean0 = true;
      String string1 = Utility.getSignature("HarN{>@;7Y^ &e@>lzT");
      assertEquals("LHarN{>@;7Y^;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "HarN{>@;7Y^ &e@>lzT";
      stringArray0[1] = "void";
      stringArray0[2] = "Warning: Padding byte != 0 in ";
      stringArray0[3] = "%+)(UsyT$<o__Nuh\"`";
      stringArray0[4] = "LHarN{>@;7Y^;";
      stringArray0[5] = "void";
      stringArray0[6] = "Warning: Padding byte != 0 in ";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QuZT&Af!t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QuZT&Af!t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-38), false);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte)0}, byteArray0);
      
      short short0 = Constants.ISTORE_2;
      assertEquals((short)61, short0);
      
      String string1 = Utility.convertString("0:    <illegal opcode>\n1:    nop\n2:    nop\n");
      assertEquals("0:    <illegal opcode>\\n1:    nop\\n2:    nop\\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "/qSr3xhU;S476Xi(d";
      try { 
        Utility.typeOfSignature("/qSr3xhU;S476Xi(d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /qSr3xhU;S476Xi(d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)120;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (-139));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
      
      String string1 = Utility.methodSignatureReturnType("DQT.oC$", false);
      assertEquals("double", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 164);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2i
         // 1:    impdep2
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte) (-66));
      assertEquals("0:    arraylength\n1:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    arraylength\n1:    nop\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    arraylength
         // 1:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-115);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-115));
      assertEquals("0:    nop\n1:    f2d\n", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-39)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), 224);
      assertEquals("0:    i2b\n1:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-39)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 825, 33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.signatureToString("ZVP6o]f$4aa0Ha1N");
      assertEquals("boolean", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U3KNxas%p}>()?+RQC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U3KNxas%p}>()?+RQC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(230, 230);
      assertNotNull(constantNameAndType0);
      assertEquals(230, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(230, constantNameAndType0.getSignatureIndex());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)84;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), (int) (byte) (-80));
      assertEquals("0:    l2f\n1:    l2d\n2:    <illegal opcode>\n3:    areturn\n4:    bastore\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-118), (byte) (-14), (byte) (-80), (byte)84}, byteArray0);
      
      try { 
        Utility.methodSignatureReturnType("byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(478, 170);
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(170, constantNameAndType0.getSignatureIndex());
      assertEquals(478, constantNameAndType0.getNameIndex());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-48);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-48), 65);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-48), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", false);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      try { 
        Utility.methodSignatureReturnType("]@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)86;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-38);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 817, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-89);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 58, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (-3345));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dstore_1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-99);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$f3$ff$ae$f8$b8$9d", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-1), (byte) (-82), (byte) (-8), (byte) (-72), (byte) (-99)}, byteArray0);
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "$f3$ff$ae$f8$b8$9d";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray1 = Utility.decode("{java.lang.Object@14aeda9a, java.lang.Object@418b169e, $f3$ff$ae$f8$b8$9d}", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 29, (int) (byte) (-99));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)68;
      byteArray0[0] = (byte)68;
      byte byte1 = (byte)90;
      byteArray0[1] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 160, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      assertEquals((byte)64, byte0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)86);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(86L, constantLong0.getBytes());
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-4), 121, false);
      assertEquals("0:    fstore_0\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)67, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, 0, (int) (byte)55);
      assertEquals("0:    fstore_0\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)67, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = ObjectStreamConstants.SC_SERIALIZABLE;
      assertEquals((byte)2, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("GPr4\"sVV*K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GPr4\"sVV*K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2750, 3738);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1630, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte)41, (byte)91}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte)91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "[Fx&0mdHwP_{S`U\"c]K";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "[Fx&0mdHwP_{S`U\"c]K";
      objectArray0[1] = (Object) "[Fx&0mdHwP_{S`U\"c]K";
      objectArray0[2] = (Object) "[Fx&0mdHwP_{S`U\"c]K";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte) (-83);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)47, (byte)57, (byte)87, (byte)113, (byte) (-116), (byte)126, (byte) (-83)}, byteArray0);
      
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{[Fx&0mdHwP_{S`U\"c]K, [Fx&0mdHwP_{S`U\"c]K, [Fx&0mdHwP_{S`U\"c]K, null, null}", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.getSignature("K%f!Onu!r-_");
      assertEquals("LK%f!Onu!r-_;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)42;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), 512);
      assertEquals("0:    monitorenter\n1:    astore_1\n2:    monitorenter\n3:    f2l\n4:    aload_0\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)76, (byte) (-62), (byte) (-116), (byte)42}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("P\f");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byteArray0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83));
      assertEquals("0:    lreturn\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, (-1551));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      objectArray0[1] = object0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (int) (byte) (-122));
      assertEquals("0:    i2f\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-122)}, byteArray0);
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("H*vH>7oqA@%WC/!4I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H*vH>7oqA@%WC/!4I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      assertEquals((byte)64, byte0);
      
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QlG)[c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QlG)[c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), 71);
      assertEquals("0:    athrow\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    athrow\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    athrow
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = null;
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (int) (byte)54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 127, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte byte0 = (byte) (-58);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 100, (int) (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-30);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 176);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    <illegal opcode>\n3:    nop\n4:    dcmpg\n5:    <illegal opcode>\n", string2);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)0, (byte) (-30), (byte)0, (byte) (-104), (byte) (-30)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3299, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.signatureToString("M*NE(sN+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M*NE(sN+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-846), 963);
      assertEquals("0:    fconst_0\n1:    if_acmpne\t\t#26113\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-90), (byte)102, (byte)0}, byteArray0);
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1239), (int) (byte) (-60), true);
      assertEquals("0:    wide\t(wide)\n1:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("drem");
      assertEquals((short)115, short0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~GCw");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = Utility.convertString("frem");
      assertEquals("frem", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = Utility.convertString("v0M");
      assertEquals("v0M", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "Nk_tOF=ol}[g@";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("Nk_tOF=ol}[g@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nk_tOF=ol}[g@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3030, (int) (byte)49, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      Constant[] constantArray0 = null;
      byte byte0 = (byte)86;
      byte[] byteArray1 = new byte[11];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)30;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 65, 3094, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)19;
      byteArray0[5] = (byte)19;
      try { 
        Utility.typeOfSignature("+')BW=Xu/OYC@`lPFI%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ')BW=Xu/OYC@`lPFI%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, 2165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 255);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-124));
      assertEquals("0:    iinc\t\t%0\t0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = Utility.signatureToString("Byte code error: ");
      assertEquals("byte", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)45;
      byteArray0[1] = (byte)46;
      byteArray0[6] = (byte)24;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)46, (byte) (-65), (byte)22, (byte)45, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)46, (byte) (-65), (byte)22, (byte)45, (byte)0, (byte)24}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    iaload
         // 2:    athrow
         // 3:    lload\t\t%45
         // 5:    nop
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)8;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 155);
      assertEquals("0:    istore_1\n1:    ixor\n2:    sastore\n3:    dup2_x1\n4:    iconst_5\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-126), (byte)86, (byte)93, (byte)8}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) byteArray0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("hXSgkkI.y$3BMBiS", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 193, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)56;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-96), (byte) (-17), (byte)123, (byte)2, (byte)92, (byte)56}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 40, (int) (byte) (-17), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-113);
      try { 
        Utility.typeOfSignature(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: : 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)79;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, 131);
      assertEquals("3:    fastore\n4:    faload\n5:    iastore\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48, (byte)81, (byte)48, (byte)79}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)42;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5479, (int) (byte)89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)45;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      String string0 = "? super ";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("? super ");
      assertNotNull(constantUtf8_0);
      assertEquals("? super ", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantDouble constantDouble1 = new ConstantDouble((byte) (-21));
      assertNotNull(constantDouble1);
      assertFalse(constantDouble1.equals((Object)constantDouble0));
      assertEquals((-21.0), constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("? super ");
      assertNotNull(constantUtf8_1);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertEquals("? super ", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      
      short short0 = Utility.searchOpcode("? super ");
      assertEquals((short) (-1), short0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? super ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = Utility.convertString("H/n=-,i+AY");
      assertEquals("H/n=-,i+AY", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.typeOfMethodSignature("(}xE]g>#/:S6L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (}xE]g>#/:S6L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)28;
      byteArray0[0] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1630, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Pattern.quote("& k4k'[");
      assertEquals("\\Q& k4k'[\\E", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_2", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-103)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-103)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (int) (byte) (-61));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(')');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("java.lang.Object@6165cae4, java.lang.Object@743adca7, java.lang.Object@3df3ce5b, java.lang.Object@4c730a35, java.lang.Object@30edbb5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.Object@6165cae4, java.lang.Object@743adca7, java.lang.Object@3df3ce5b, java.lang.Object@4c730a35, java.lang.Object@30edbb5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@6165cae4, java.lang.Object@743adca7, java.lang.Object@3df3ce5b, java.lang.Object@4c730a35, java.lang.Object@30edbb5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishr
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 425, (int) (byte)33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-118);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1079), 6);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1175), (int) (byte) (-75));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.getSignature("CONSTANT_String");
      assertEquals("LCONSTANT_String;", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte)58, (byte) (-73)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)40, (byte)79, (byte)58, (byte) (-73)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int int0 = Utility.setBit(959, 959);
      assertEquals((-2147482689), int0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-107);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 959, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = Utility.compactClassName("=^y\"r3-:?c`P", false);
      assertEquals("=^y\"r3-:?c`P", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("=^y\"r3-:?c`P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =^y\"r3-:?c`P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 146, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte byte0 = (byte)4;
      byte[] byteArray0 = new byte[1];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(start_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte) (-38);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-38), false);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("l2f");
      assertEquals((short)137, short0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l2f";
      stringArray0[1] = "l2f";
      stringArray0[2] = "";
      stringArray0[3] = "0:    <illegal opcode>\n1:    nop\n2:    nop\n";
      String string1 = Utility.methodTypeToSignature("0:    <illegal opcode>\n1:    nop\n2:    nop\n", stringArray0);
      assertEquals("(Ll2f;Ll2f;L;L0:;)L0:;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Ll2f;Ll2f;L;L0:;)L0:;");
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "ZVP6o]f$4aa0Ha1N";
      try { 
        Utility.decode("ZVP6o]f$4aa0Ha1N", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-38);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$da$A$A$A$A$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      byte[] byteArray1 = Utility.decode("$da$A$A$A$A$A$A$A$A$A$A$A", false);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string2 = Utility.encode(byteArray1, true);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      assertNotNull(string2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string0));
      
      byte byte1 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte1);
      assertTrue(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{$l$8b$I$A$A$A$A$A$A$A}", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-560));
      assertNotNull(constantMethodType0);
      assertEquals((-560), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 95, 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-73);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$w$b7$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)42, (byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = Constants.CONSTANT_Fieldref;
      assertEquals((byte)9, byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "$w$b7$A$A$A$A";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) byteArray0;
      objectArray0[6] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      try { 
        Utility.decode("<T=6-\"h$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2600), (-35), true);
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)0, (byte)0}, byteArray0);
      
      short short0 = Utility.searchOpcode("l2f");
      assertEquals((short)137, short0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l2f";
      stringArray0[1] = "0:    <illegal opcode>\n1:    nop\n2:    nop\n";
      String string1 = Utility.methodTypeToSignature("0:    <illegal opcode>\n1:    nop\n2:    nop\n", stringArray0);
      assertEquals("(Ll2f;L0:;)L0:;", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.methodSignatureToString("(Ll2f;L0:;)L0:;", "imul", "l2f");
      assertEquals("l2f 0: imul(l2f arg1, 0: arg2)", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 237, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
