/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:08:23 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.timeout();
      buffer1.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (-29958L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)4, 4278190080L, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=4278190080 toIndex=10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      buffer0.outputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(1610612736);
      buffer1.sha1();
      buffer0.clone();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Pipe pipe0 = new Pipe(1919L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.skip((-420L));
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null, (-933L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -933
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      buffer1.writeDecimalLong(1095216660480L);
      assertEquals(23L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(timeout0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf(byteString0, (long) (byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = buffer1.md5();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      buffer1.require(0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      String string0 = buffer0.toString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      
      try { 
        buffer0.require(9223372036854L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("n-ufinWheAG~x\"^wy");
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(outputStream0);
      
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(358L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(outputStream0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(60L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(290L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = (Buffer)buffer0.write((Source) hashingSource0, (-1353L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      long long0 = 1095216660480L;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.write(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      try { 
        buffer0.write((Source) hashingSource0, 7L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 16711680L;
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 16711680L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Timeout timeout0 = buffer0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(timeout0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeShort((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(6314L);
      assertNotNull(pipe0);
      
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      assertNotNull(pipe_PipeSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      assertNotNull(realBufferedSink0);
      
      pipe_PipeSink0.flush();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8("fromIndex=%s toIndex=%s", 790, 790);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 790 > 23
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      long long0 = buffer0.size();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(1095216660461L);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.size();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(3922L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3922L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer0.size();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, long1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertFalse(long1 == long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      try { 
        buffer0.skip(100000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort((-1461));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Integer integer0 = new Integer((-1461));
      assertEquals((-1461), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(1610612736);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      short short0 = buffer1.readShortLe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals((short)0, short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = buffer1.sha256();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeIntLe(1610612736);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = buffer0.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      
      int int0 = ((RealBufferedSink) bufferedSink0).buffer.read(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1, int0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString2 = ((RealBufferedSink) bufferedSink0).buffer.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertNotNull(byteString2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = (Buffer)buffer1.emit();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readByteString((-13L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-13
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)33, (-1050L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1050 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(1610612750);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeInt(2460);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(6L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(671);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer0.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, int0);
      assertSame(buffer0, buffer1);
      
      Buffer buffer2 = new Buffer();
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("already attached to a buffer", 4920, 87);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 87 < 4920
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1095216660480L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(13L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(13L, buffer0.size());
      assertNotNull(inputStream0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer0.size();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, long0);
      
      Buffer buffer1 = ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong(0L);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer0.hashCode();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(7, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString1 = buffer0.hmacSha256(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(7, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=1 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660461L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer1.readLongLe();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7378697629483820390L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(1950L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = buffer0.request(1950L);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(boolean0);
      
      ByteString byteString0 = buffer0.sha1();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong((-104L));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer1.writeDecimalLong((-1L));
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = buffer0.readString(charset0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      try { 
        buffer1.readUtf8LineStrict(1095216660480L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=10 content=66663030303030303030\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(21474836L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      long long0 = buffer0.indexOf((byte)105, 4852L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1095216660466L);
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(13L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      
      buffer1.flush();
      assertEquals(13L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(13L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-841L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Timeout timeout0 = buffer0.timeout();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeShort((-1));
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      buffer0.clear();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2067L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2067 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      buffer0.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2109808495));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte byte0 = buffer0.readByte();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((byte) (-111), byte0);
      assertSame(buffer0, buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      
      Buffer buffer2 = (Buffer)hashingSource0.delegate();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer3 = new Buffer();
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer1.selectPrefix(options0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, options0.size());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-368));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (-1), byteString0, (-1), (-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(boolean0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1), int0);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      Buffer buffer1 = buffer0.writeInt((-1813));
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.writeUtf8((String) null, (-1812), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 40000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2977L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((-2977L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -2977
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer0.timeout();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf(byteString0, (long) (byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = buffer0.request((-2428L));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(boolean0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pipe pipe0 = new Pipe(1919L);
      assertNotNull(pipe0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-2261L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      ByteString byteString0 = buffer0.sha1();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeShort(4);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null, (long) 52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = new Buffer();
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals("ff00000000", string0);
      assertNotNull(string0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Buffer buffer3 = buffer2.writeString("ff00000000", charset0);
      assertEquals(10L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(10L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(100);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      
      ByteString byteString0 = hashingSource0.hash();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      
      long long0 = buffer1.indexOfElement(byteString0, (long) 100);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = ((RealBufferedSink) bufferedSink0).buffer.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(0L, long0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      OutputStream outputStream0 = ((RealBufferedSink) bufferedSink0).buffer.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(outputStream0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer1.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.write(byteArray0);
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(12L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer1.indexOf(byteString0, (long) (byte)0);
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals(10L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(2, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2, options0.size());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-150));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("j", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      
      long long0 = 1527L;
      // Undeclared exception!
      try { 
        Charset.forName("keC7QWGvA<b");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // keC7QWGvA<b
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(694L);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      short short0 = buffer1.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals((short)14646, short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(53);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null, (long) 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeTo((OutputStream) pipedOutputStream0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(3311L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(273);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = buffer1.readByte();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((byte)0, byte0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf(byteString0, (long) (byte)35);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(4, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      boolean boolean0 = buffer0.rangeEquals(6L, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertFalse(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2147483652L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int0 = buffer0.readIntLe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(808478310, int0);
      assertSame(buffer0, buffer1);
      
      ByteString byteString1 = buffer0.snapshot();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(6, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("", string0);
      assertNotNull(string0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      
      boolean boolean0 = buffer0.rangeEquals((-621L), byteString1, 104, 104);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertEquals(32, byteString1.size());
      assertFalse(boolean0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      String string0 = buffer_UnsafeCursor0.buffer.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.md5();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      long long0 = buffer0.size();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, long0);
      
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(outputStream0);
      
      boolean boolean0 = realBufferedSink0.buffer.exhausted();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = buffer0.equals(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = buffer0.sha512();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(64, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(outputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int0);
      
      int int1 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertNotNull(realBufferedSink0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int2 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Buffer buffer3 = buffer_UnsafeCursor0.buffer.writeTo(outputStream0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertNotNull(buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertNotNull(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertNotNull(buffer4);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(1610612736);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2147483647L);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-408L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=10 offset=0 byteCount=-408
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Timeout timeout0 = buffer_UnsafeCursor0.buffer.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(timeout0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer_UnsafeCursor0.offset;
      assertEquals((-1L), long0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(inputStream0);
      
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(1610612736);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.clone();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = buffer2.writeShort(1610612736);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(4L, buffer2.size());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      Buffer buffer4 = buffer0.writeLongLe((-310L));
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      
      ByteString byteString0 = buffer4.sha256();
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(32, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"}|# {xY>SEf");
      assertNotNull(mockPrintStream0);
      
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockPrintStream0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort((-3317));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      short short0 = buffer0.readShortLe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((short)3059, short0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 10000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong((-1165L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer0.readLongLe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(8357555008492797951L, long0);
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = buffer0.writeDecimalLong(8357555008492797951L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(19L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2147483643L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer1.readDecimalLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2147483643L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      String string0 = buffer1.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNull(string0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer1.timeout();
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(outputStream0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      buffer0.flush();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer_UnsafeCursor1, buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.writeString("k!Odam<K=fW]C#d", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      long long0 = buffer0.indexOf((byte)109, (long) (byte)109, (long) (byte)109);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1L), long0);
      
      OutputStream outputStream0 = buffer0.outputStream();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(outputStream0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt((-1));
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int1 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      OutputStream outputStream1 = buffer2.outputStream();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(outputStream1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(outputStream1, outputStream0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(outputStream1.equals((Object)outputStream0));
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int2 = buffer0.select(options0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0, options0.size());
      assertEquals((-1), int2);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Pipe pipe0 = new Pipe(1905L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeLong((-636L));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertEquals(8L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer3.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = buffer2.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(7L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(65533, int0);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer3);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      
      Buffer buffer4 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(realBufferedSource2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer3);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(7L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertNotNull(realBufferedSource3);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer5 = realBufferedSource3.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(7L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertNotNull(buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource3);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer4);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer0);
      assertNotSame(realBufferedSource3, realBufferedSource2);
      assertNotSame(realBufferedSource3, realBufferedSource1);
      assertNotSame(realBufferedSource3, realBufferedSource0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer4);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertTrue(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer5.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer6 = (Buffer)hashingSource0.delegate();
      assertEquals(0L, buffer6.size());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(buffer6);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer4);
      assertSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertFalse(buffer6.equals((Object)buffer3));
      assertTrue(buffer6.equals((Object)buffer5));
      assertFalse(buffer6.equals((Object)buffer1));
      assertTrue(buffer6.equals((Object)buffer4));
      assertFalse(buffer6.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer5));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer4));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer7 = realBufferedSource2.buffer;
      assertTrue(buffer7.exhausted());
      assertEquals(0L, buffer7.completeSegmentByteCount());
      assertEquals(0L, buffer7.size());
      assertNotNull(buffer7);
      assertNotSame(buffer7, buffer1);
      assertNotSame(buffer7, buffer6);
      assertNotSame(buffer7, buffer2);
      assertNotSame(buffer7, buffer4);
      assertNotSame(buffer7, buffer5);
      assertNotSame(buffer7, buffer3);
      assertNotSame(buffer7, buffer0);
      assertTrue(buffer7.equals((Object)buffer4));
      assertFalse(buffer7.equals((Object)buffer1));
      assertTrue(buffer7.equals((Object)buffer5));
      assertTrue(buffer7.equals((Object)buffer0));
      assertFalse(buffer7.equals((Object)buffer2));
      assertFalse(buffer7.equals((Object)buffer3));
      assertTrue(buffer7.equals((Object)buffer6));
      
      try { 
        buffer7.write((Source) buffer1, 1905L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, (-35), (-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read(buffer0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      long long0 = buffer0.readAll((Sink) null);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660461L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      boolean boolean0 = buffer1.rangeEquals(10000L, byteString0, (-3396), (-3396));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(16, byteString0.size());
      assertFalse(boolean0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString1 = buffer1.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer1.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(12L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer1.indexOf(byteString0, (long) (byte)0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2, byteString0.size());
      assertEquals(10L, long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(6, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer1.select(options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6, options0.size());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Pipe pipe0 = new Pipe(1919L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeInt(1383);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer2 = pipe0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      int int0 = buffer_UnsafeCursor0.start;
      assertEquals((-1), int0);
      
      OutputStream outputStream0 = buffer2.outputStream();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(outputStream0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(5, options0.size());
      assertNotNull(options0);
      
      int int1 = buffer1.select(options0);
      assertEquals(5, options0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0, int1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(int1 == int0);
      assertFalse(buffer1.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)104);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.clone();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(15);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, (long) 53);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      
      buffer0.clear();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      long long0 = buffer2.indexOf((byte) (-84), 109521L, 109521L);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Segment segment0 = realBufferedSink0.buffer.writableSegment(16);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(segment0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      String string0 = buffer0.readUtf8();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Buffer buffer1 = buffer0.writeString("", charset0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.writeShortLe(9);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(1610612736);
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        buffer1.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer1, buffer0);
      
      List<Integer> list0 = buffer1.segmentSizes();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor1);
      assertFalse(buffer_UnsafeCursor1.equals((Object)buffer_UnsafeCursor0));
      assertFalse(buffer_UnsafeCursor1.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      
      int int0 = buffer_UnsafeCursor1.start;
      assertEquals((-1), int0);
      
      int int1 = buffer_UnsafeCursor1.start;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Buffer buffer2 = buffer1.writeInt(24);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertNotNull(buffer3);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer2.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer_UnsafeCursor2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor2, buffer_UnsafeCursor0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor2.equals((Object)buffer_UnsafeCursor0));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor2.start);
      assertEquals((-1L), buffer_UnsafeCursor2.offset);
      assertEquals((-1), buffer_UnsafeCursor2.end);
      assertTrue(buffer_UnsafeCursor2.readWrite);
      
      int int2 = buffer_UnsafeCursor2.start;
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('o');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Buffer buffer4 = buffer2.writeTo((OutputStream) printStream0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer1);
      assertSame(buffer4, buffer2);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer5 = realBufferedSource0.buffer;
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertTrue(buffer5.exhausted());
      assertNotNull(buffer5);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertTrue(buffer5.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer0));
      assertTrue(buffer5.equals((Object)buffer3));
      assertTrue(buffer5.equals((Object)buffer2));
      
      int int3 = realBufferedSink0.buffer.hashCode();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor1);
      assertNotSame(buffer_UnsafeCursor0, buffer_UnsafeCursor2);
      assertNotSame(buffer1, buffer3);
      assertSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer5);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer5);
      assertNotSame(buffer2, buffer3);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer4);
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor1));
      assertFalse(buffer_UnsafeCursor0.equals((Object)buffer_UnsafeCursor2));
      assertTrue(buffer1.equals((Object)buffer5));
      assertTrue(buffer1.equals((Object)buffer3));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer5));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = buffer1.equals(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(boolean0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      InputStream inputStream0 = buffer0.inputStream();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(inputStream0);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer0.select(options0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, options0.size());
      assertEquals((-1), int0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1000000000000000L);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      long long0 = buffer_UnsafeCursor0.buffer.readDecimalLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      buffer_UnsafeCursor0.start = 889;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      ByteString byteString0 = buffer1.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals(889, buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(1095216660480L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort((-3317));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xfffffff3
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        buffer0.writeString("", 1017, 1017, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1017 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(1, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"}|# {xY>SEf");
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      Buffer buffer2 = buffer0.copyTo((OutputStream) mockPrintStream0);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      long long0 = buffer0.indexOfElement(byteString1);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, byteString1.size());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString1, byteString0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long1 = buffer0.indexOf(byteString0, 0L);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(0L, long1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertNotSame(byteString0, byteString1);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(long1 == long0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer3 = buffer0.write(byteArray0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer1.read(buffer3, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(53);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort((-55297));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeDecimalLong(2147483647L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(12L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      boolean boolean0 = buffer0.exhausted();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(boolean0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer1, buffer0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      Buffer buffer2 = realBufferedSink0.buffer;
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Buffer buffer3 = new Buffer();
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertNotNull(buffer3);
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      
      Buffer buffer4 = buffer3.writeString("[Vv/jMj^'f", charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(10L, buffer3.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(10L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertNotNull(buffer4);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
      
      Buffer buffer5 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertNotNull(buffer5);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer5, buffer0);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertNotSame(buffer5, buffer3);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      
      Buffer buffer6 = buffer5.clone();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(buffer5.exhausted());
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(0L, buffer5.size());
      assertEquals(0L, buffer6.size());
      assertTrue(buffer6.exhausted());
      assertEquals(0L, buffer6.completeSegmentByteCount());
      assertNotNull(buffer6);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer5);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer6);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer6);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer2);
      assertNotSame(buffer5, buffer3);
      assertNotSame(buffer6, buffer3);
      assertNotSame(buffer6, buffer5);
      assertNotSame(buffer6, buffer1);
      assertNotSame(buffer6, buffer4);
      assertNotSame(buffer6, buffer0);
      assertNotSame(buffer6, buffer2);
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer5));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer4));
      assertTrue(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer3));
      assertFalse(buffer6.equals((Object)buffer3));
      assertTrue(buffer6.equals((Object)buffer5));
      assertTrue(buffer6.equals((Object)buffer1));
      assertFalse(buffer6.equals((Object)buffer4));
      assertTrue(buffer6.equals((Object)buffer0));
      assertTrue(buffer6.equals((Object)buffer2));
      
      // Undeclared exception!
      try { 
        buffer4.indexOfElement((ByteString) null, 8L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = buffer1.sha1();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(hashingSource0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals(10, buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals(0, buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(1919L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertNotNull(hashingSource1);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Buffer buffer1 = buffer0.clone();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      long long0 = buffer0.indexOfElement(byteString0, 1919L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      buffer1.clear();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      
      boolean boolean0 = buffer1.rangeEquals(1L, byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(boolean0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean1 = buffer1.rangeEquals(4L, byteString0, 796, (-3454));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(boolean1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660512L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer1.indexOf((byte)79, 8L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      OutputStream outputStream0 = buffer2.outputStream();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotNull(outputStream0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer3 = buffer2.writeDecimalLong((-1422L));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(5L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      
      Buffer buffer4 = new Buffer();
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      
      // Undeclared exception!
      try { 
        buffer3.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writeString("[E<", (-1576), (-1576), (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1576
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      OutputStream outputStream0 = buffer2.outputStream();
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(outputStream0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      Buffer buffer3 = realBufferedSink0.buffer;
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer2));
      
      Buffer buffer4 = buffer3.writeDecimalLong(100000000000000000L);
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(18L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer4.exhausted());
      assertEquals(18L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(100000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(6L, buffer0.size());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer0.size();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=00\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(405L);
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Timeout timeout0 = buffer0.timeout();
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, 405L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong((-1107L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer0.readLongLe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-5909848611016933377L), long0);
      assertSame(buffer0, buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(realBufferedSource0);
      
      buffer0.clear();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writableSegment(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(18L);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)38, (byte)0, (byte)0, (byte)38, (byte)0}, byteArray0);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)38, (byte)0, (byte)0, (byte)38, (byte)0}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer1.select(options0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, options0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals((-1), int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      buffer_UnsafeCursor0.close();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      OutputStream outputStream0 = buffer1.outputStream();
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(outputStream0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(10L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      String string0 = buffer0.readUtf8Line(1L);
      assertEquals(8L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals("f", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer1.timeout();
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(12L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer1.indexOf(byteString0, (long) (byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(2, byteString0.size());
      assertEquals(10L, long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long1 = buffer2.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(2, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(12L, buffer2.size());
      assertEquals(10L, long1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertTrue(long1 == long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer2.readFully(buffer0, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeLong((-1165L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(7L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(7L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(65533, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeDecimalLong(1000000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(14L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(1095216660480L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 48);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip(10952166L);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(10000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(13L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString[] byteStringArray0 = new ByteString[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(13L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(13, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(1, options0.size());
      assertNotNull(options0);
      
      int int0 = buffer1.selectPrefix(options0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, options0.size());
      assertEquals(0, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      long long0 = buffer0.read(buffer1, 16711680L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort(1610612736);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Integer integer0 = new Integer(1610612736);
      assertEquals(1610612736, (int)integer0);
      assertNotNull(integer0);
      
      Buffer buffer2 = buffer1.clone();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = buffer1.readString(1L, charset0);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("\u0000", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      int int0 = buffer_UnsafeCursor0.seek(4L);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12, int0);
      assertSame(buffer0, buffer1);
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8192, byteString0.size());
      assertNotNull(byteString0);
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      assertSame(buffer0, buffer1);
      
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8192, byteString0.size());
      assertNotNull(hashingSink1);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString byteString1 = hashingSink1.hash();
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8192, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(byteString1, byteString0);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(7, options0.size());
      assertNotNull(options0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      HashingSink hashingSink2 = HashingSink.hmacSha1(buffer1, byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(8192, byteString0.size());
      assertNotNull(hashingSink2);
      assertSame(buffer0, buffer1);
      assertNotSame(hashingSink2, hashingSink1);
      assertNotSame(hashingSink2, hashingSink0);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertFalse(hashingSink2.equals((Object)hashingSink1));
      assertFalse(hashingSink2.equals((Object)hashingSink0));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      int int1 = buffer1.selectPrefix(options0);
      assertEquals(7, options0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(1, int1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertFalse(int1 == int0);
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      long long0 = realBufferedSink0.buffer.indexOf(byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8192, byteString0.size());
      assertEquals(32, byteString1.size());
      assertEquals((-1L), long0);
      assertSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink0, hashingSink2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotSame(hashingSink1, hashingSink2);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSink0.equals((Object)hashingSink2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertFalse(hashingSink1.equals((Object)hashingSink2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(4, buffer_UnsafeCursor0.start);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer1.timeout();
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer1.write(byteArray0);
      assertEquals(12L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(12L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(12L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byte byte0 = buffer2.readByte();
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(11L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals((byte)102, byte0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer1.indexOf(byteString0, (long) (byte)0);
      assertEquals(11L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(11L, buffer1.size());
      assertEquals(2, byteString0.size());
      assertEquals(9L, long0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long1 = buffer2.readHexadecimalUnsignedLong();
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertEquals(64424509440L, long1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      OutputStream outputStream0 = buffer2.outputStream();
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(2L, buffer2.size());
      assertNotNull(outputStream0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long0 = realBufferedSink0.buffer.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      buffer0.size = 3020L;
      assertEquals(3020L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 48);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      assertEquals(3020L, buffer0.completeSegmentByteCount());
      assertEquals(3021L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(buffer1.exhausted());
      assertEquals(3021L, buffer1.size());
      assertEquals(3020L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      
      try { 
        buffer0.readUtf8Line();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)77}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x4d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(1919L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        buffer0.writeString("", 1414, 325, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 325 < 1414
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(2147483647L);
      assertNotNull(pipe0);
      
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      try { 
        buffer1.readUtf8LineStrict(7L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=7 content=66663030303030303030\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer1.timeout();
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = new Buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      long long0 = buffer1.indexOf(byteString0, (long) (byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3, byteString0.size());
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(hashingSink0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertNotNull(bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(20, byteString0.size());
      assertEquals(65533, int0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Inflater inflater0 = new Inflater();
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflater0);
      
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertNotNull(inflaterSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, inflater0.getTotalOut());
      assertEquals(0, inflater0.getRemaining());
      assertFalse(inflater0.needsDictionary());
      assertEquals(0L, inflater0.getBytesRead());
      assertEquals(0L, inflater0.getBytesWritten());
      assertEquals(1, inflater0.getAdler());
      assertEquals(0, inflater0.getTotalIn());
      assertTrue(inflater0.needsInput());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      Buffer buffer1 = buffer0.writeUtf8("n-ufinWheAG~x\"^wy");
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = buffer1.writeIntLe(3274);
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(21L, buffer1.size());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(21L, buffer1.size());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6e
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Pipe pipe0 = new Pipe(1L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-3007));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer buffer2 = buffer0.writeShort(1840700269);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(3L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      
      pipe0.sourceClosed = true;
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(10L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      
      pipe0.sourceClosed = true;
      Buffer buffer3 = buffer0.writeUtf8CodePoint(23);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(3L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      
      buffer1.clear();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = buffer3.sha1();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      BufferedSink bufferedSink1 = bufferedSink0.writeString("fl)VsqU@+k", charset0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, bufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = ((RealBufferedSink) bufferedSink0).buffer.indexOfElement(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertEquals(0L, long0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, bufferedSink1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = realBufferedSink0.buffer.readIntLe();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(694969856, int0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(694969856);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(17L, buffer1.size());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1));
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      long long0 = buffer1.size();
      assertEquals(16L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      int int0 = buffer1.readUtf8CodePoint();
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(102, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      
      boolean boolean0 = buffer0.equals(buffer2);
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(15L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(boolean0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Pipe pipe0 = new Pipe(21L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-17);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha1(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(hashingSource1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource2 = HashingSource.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource3 = HashingSource.hmacSha1(hashingSource1, byteString1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(3, byteString1.size());
      assertNotNull(hashingSource3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource3);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSource3, hashingSource2);
      assertNotSame(hashingSource3, hashingSource1);
      assertNotSame(hashingSource3, hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource3.equals((Object)hashingSource2));
      assertFalse(hashingSource3.equals((Object)hashingSource1));
      assertFalse(hashingSource3.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource3));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(hashingSink0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      ByteString byteString2 = hashingSink0.hash();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(32, byteString2.size());
      assertNotNull(byteString2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(32, byteString2.size());
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte) (-17);
      byteArray1[3] = (byte)104;
      byteArray1[4] = (byte)79;
      byteArray1[6] = (byte)7;
      byteArray1[8] = (byte) (-17);
      BufferedSink bufferedSink1 = realBufferedSink0.write(byteArray1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(bufferedSink1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)104, (byte) (-17), (byte)0, (byte)104, (byte)79, (byte)0, (byte)7, (byte)0, (byte) (-17)}, byteArray1);
      
      Buffer buffer2 = new Buffer();
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      
      long long0 = realBufferedSink0.buffer.size();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(41L, long0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      
      int int0 = realBufferedSink0.buffer.readUtf8CodePoint();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(65533, int0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = realBufferedSink0.buffer.equals(hashingSource3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(3, byteString1.size());
      assertFalse(boolean0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(hashingSource1, hashingSource3);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(hashingSource3, hashingSource2);
      assertNotSame(hashingSource3, hashingSource1);
      assertNotSame(hashingSource3, hashingSource0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(hashingSource1.equals((Object)hashingSource3));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(hashingSource3.equals((Object)hashingSource2));
      assertFalse(hashingSource3.equals((Object)hashingSource1));
      assertFalse(hashingSource3.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-109);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-109)}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      
      BufferedSink bufferedSink1 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, realBufferedSink0);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink1));
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-109)}, byteArray0);
      
      int int0 = realBufferedSink0.buffer.readUtf8CodePoint();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(65533, int0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = null;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, (-2300L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-34), (byte)9}, byteArray0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-34), (byte)9}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(outputStream0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      long long0 = buffer1.indexOfElement(byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals((-1L), long0);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)10, (byte) (-34), (byte)9}, byteArray0);
      
      String string0 = realBufferedSink0.buffer.readUtf8LineStrict((long) (byte)10);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      
      OutputStream outputStream1 = buffer0.outputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(outputStream1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(outputStream1, outputStream0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(outputStream1.equals((Object)outputStream0));
      
      try { 
        buffer1.readFully(buffer0, (long) (byte)10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-17);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha1(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(hashingSource1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource2 = HashingSource.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource3 = HashingSource.hmacSha1(hashingSource1, byteString1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(3, byteString1.size());
      assertNotNull(hashingSource3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource3);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSource3, hashingSource1);
      assertNotSame(hashingSource3, hashingSource0);
      assertNotSame(hashingSource3, hashingSource2);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource3.equals((Object)hashingSource1));
      assertFalse(hashingSource3.equals((Object)hashingSource0));
      assertFalse(hashingSource3.equals((Object)hashingSource2));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource3));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      HashingSource hashingSource4 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource4, hashingSource2);
      assertNotSame(hashingSource4, hashingSource1);
      assertNotSame(hashingSource4, hashingSource0);
      assertNotSame(hashingSource4, hashingSource3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource4.equals((Object)hashingSource2));
      assertFalse(hashingSource4.equals((Object)hashingSource1));
      assertFalse(hashingSource4.equals((Object)hashingSource0));
      assertFalse(hashingSource4.equals((Object)hashingSource3));
      
      ByteString byteString2 = hashingSource4.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString2.size());
      assertNotNull(byteString2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource4, hashingSource2);
      assertNotSame(hashingSource4, hashingSource1);
      assertNotSame(hashingSource4, hashingSource0);
      assertNotSame(hashingSource4, hashingSource3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource4.equals((Object)hashingSource2));
      assertFalse(hashingSource4.equals((Object)hashingSource1));
      assertFalse(hashingSource4.equals((Object)hashingSource0));
      assertFalse(hashingSource4.equals((Object)hashingSource3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      ByteString byteString3 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString3.size());
      assertNotNull(byteString3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource4);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(hashingSource0.equals((Object)hashingSource4));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString3);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString3.size());
      assertNotNull(bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource4);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(hashingSource0.equals((Object)hashingSource4));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(outputStream0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      int int0 = realBufferedSink0.buffer.readInt();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(914326132, int0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(28L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      buffer_UnsafeCursor0.offset = (long) (byte)104;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      
      byteArray1[1] = (byte)121;
      ByteString byteString4 = new ByteString(byteArray1);
      assertEquals(2, byteString4.size());
      assertNotNull(byteString4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0, (byte)121}, byteArray1);
      
      long long0 = buffer2.indexOfElement(byteString4);
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(28L, buffer2.size());
      assertEquals(2, byteString4.size());
      assertEquals((-1L), long0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(104L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertArrayEquals(new byte[] {(byte)0, (byte)121}, byteArray1);
      
      String string0 = ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line(1L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString3.size());
      assertEquals("\uFFFD", string0);
      assertNotNull(string0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource0, hashingSource4);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(hashingSource0, hashingSource1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(hashingSource0.equals((Object)hashingSource4));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte)24, (byte) (-17), (byte)0}, byteArray0);
      
      String string1 = realBufferedSink0.buffer.readUtf8Line();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals("!\uFFFD9\uFFFDl\uFFFD\u0006\uFFFD\uFFFD?\uFFFD\uFFFD\uFFFD\uFFFD\u0001\"n\uFFFD", string1);
      assertNotNull(string1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertFalse(buffer1.equals((Object)buffer2));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(byteString1.equals((Object)byteString0));
      
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.seek(4L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(12, int0);
      assertSame(buffer0, buffer1);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertEquals(4, buffer_UnsafeCursor0.start);
      
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(8192, byteString0.size());
      assertNotNull(byteString0);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertEquals(4, buffer_UnsafeCursor0.start);
      
      ByteString byteString1 = buffer1.sha1();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(16L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertEquals(4, buffer_UnsafeCursor0.start);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1897L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(21L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertEquals(4L, buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals(16, buffer_UnsafeCursor0.end);
      assertEquals(4, buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.seek((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.snapshot(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=17
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.start = 66;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeShort((-3317));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Integer integer0 = new Integer((-3317));
      assertEquals((-3317), (int)integer0);
      assertNotNull(integer0);
      
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff3)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1114037);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Pipe pipe0 = new Pipe(1114037);
      assertNotNull(pipe0);
      
      Buffer buffer2 = pipe0.buffer;
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      Buffer buffer3 = buffer1.writeShort(1114037);
      assertEquals(6L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertEquals(6L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer1, buffer3);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("okio.Base64");
      assertNotNull(mockPrintStream0);
      
      long long0 = realBufferedSink0.buffer.indexOf(byteString0, 71776119061217280L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1, byteString0.size());
      assertEquals((-1L), long0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(71776119061217280L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.equals((Object)buffer0));
      
      long long1 = buffer1.indexOf((byte)11, 1095134887917L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(18L, buffer1.size());
      assertEquals((-1L), long1);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.clone();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = buffer2.hmacSha256(byteString0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(1, byteString0.size());
      assertEquals(32, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer3 = buffer0.writeUtf8("&JU0cu<v.9Nvd\".x3t");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(19L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(19L, buffer3.size());
      assertNotNull(buffer3);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      
      int int0 = buffer3.readIntLe();
      assertEquals(15L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(15L, buffer3.size());
      assertEquals(1434405414, int0);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      
      long long0 = buffer3.readDecimalLong();
      assertEquals(14L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(14L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8("n-ufinWheAG~x\"^wy");
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(17L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(17L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1072L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1072
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = buffer0.size();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long1 = buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Timeout timeout0 = buffer1.timeout();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(timeout0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      buffer0.readFully(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertArrayEquals(new byte[] {(byte)102, (byte)102}, byteArray0);
      
      short short0 = buffer1.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(6L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(6L, buffer1.size());
      assertEquals((short)12336, short0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(7L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=7 content=da39a3ee5e6b4b0d3255bfef95601890afd80709\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4, byteString0.size());
      assertEquals(0L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long1 = buffer_UnsafeCursor0.buffer.indexOf(byteString0, 3L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4, byteString0.size());
      assertEquals((-1L), long1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertFalse(long1 == long0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteString byteString1 = buffer_UnsafeCursor0.buffer.snapshot();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(4, byteString1.size());
      assertNotNull(byteString1);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long2 = buffer1.completeSegmentByteCount();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, long2);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      
      Buffer buffer3 = buffer2.writeLongLe((-1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(12L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(12L, buffer1.size());
      assertEquals(12L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(12L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("dr]$JA.hPZmVgm^I4");
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      int int0 = 1095;
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString((String) null, 1095, 1095, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(1114037);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(4L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(4L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Pipe pipe0 = new Pipe(1114037);
      assertNotNull(pipe0);
      
      Buffer buffer2 = pipe0.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      buffer2.require((-17L));
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      String string0 = buffer0.readUtf8Line();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals("\uDBFF\uDFB5", string0);
      assertNotNull(string0);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertTrue(buffer0.equals((Object)buffer2));
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(1, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      
      Buffer buffer3 = realBufferedSink0.buffer();
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertNotNull(buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      
      long long0 = buffer3.indexOfElement(byteString1);
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(1, byteString1.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertEquals((-1L), long0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertTrue(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteString byteString2 = new ByteString(byteArray1);
      assertEquals(0, byteString2.size());
      assertNotNull(byteString2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("\uDBFF\uDFB5");
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotNull(bufferedSink0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      
      Buffer buffer4 = realBufferedSource0.buffer;
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      
      long long1 = buffer4.indexOfElement(byteString2);
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertEquals((-1L), long1);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(long1 == long0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long long2 = buffer1.indexOf(byteString1, 10000000L);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1, byteString1.size());
      assertEquals((-1L), long2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertTrue(buffer0.equals((Object)buffer4));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer5 = buffer3.write(byteArray1);
      assertEquals(0L, buffer5.completeSegmentByteCount());
      assertEquals(4L, buffer5.size());
      assertFalse(buffer5.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(4L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer5);
      assertNotSame(buffer5, buffer4);
      assertSame(buffer5, buffer3);
      assertNotSame(buffer5, buffer1);
      assertNotSame(buffer5, buffer0);
      assertNotSame(buffer5, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer5);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer3, buffer5);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer4);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(buffer5.equals((Object)buffer4));
      assertFalse(buffer5.equals((Object)buffer1));
      assertFalse(buffer5.equals((Object)buffer0));
      assertFalse(buffer5.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertTrue(buffer2.equals((Object)buffer4));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      assertNotNull(pipe0);
      
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      assertNotNull(pipe_PipeSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      assertNotNull(realBufferedSource0);
      
      Buffer buffer0 = realBufferedSource0.buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(8192);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(3L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      pipe0.sinkClosed = false;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource0);
      assertNotSame(buffer0, buffer1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      HashingSource hashingSource1 = HashingSource.sha1(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(hashingSource1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(3, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      HashingSource hashingSource2 = HashingSource.hmacSha1(buffer0, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(hashingSource2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotSame(hashingSource2, hashingSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      HashingSource hashingSource3 = HashingSource.hmacSha1(hashingSource1, byteString1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(3, byteString1.size());
      assertNotNull(hashingSource3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource1, hashingSource2);
      assertNotSame(hashingSource1, hashingSource3);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(hashingSource3, hashingSource1);
      assertNotSame(hashingSource3, hashingSource2);
      assertNotSame(hashingSource3, hashingSource0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource2));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(hashingSource3.equals((Object)hashingSource1));
      assertFalse(hashingSource3.equals((Object)hashingSource2));
      assertFalse(hashingSource3.equals((Object)hashingSource0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotNull(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource3));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      HashingSource hashingSource4 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource4);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource4, hashingSource1);
      assertNotSame(hashingSource4, hashingSource2);
      assertNotSame(hashingSource4, hashingSource0);
      assertNotSame(hashingSource4, hashingSource3);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource4.equals((Object)hashingSource1));
      assertFalse(hashingSource4.equals((Object)hashingSource2));
      assertFalse(hashingSource4.equals((Object)hashingSource0));
      assertFalse(hashingSource4.equals((Object)hashingSource3));
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      ByteString byteString2 = hashingSource0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString2.size());
      assertNotNull(byteString2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource4);
      assertNotSame(hashingSource0, hashingSource3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource4));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString2);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(3, byteString0.size());
      assertEquals(32, byteString2.size());
      assertNotNull(bufferedSink0);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource4);
      assertNotSame(hashingSource0, hashingSource3);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource4));
      assertFalse(hashingSource0.equals((Object)hashingSource3));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(outputStream0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      int int0 = realBufferedSink0.buffer.readInt();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(463157729, int0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer_UnsafeCursor0);
      assertNotSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      assertEquals(28L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer((byte)24);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(28L, long0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer3 = buffer2.writeDecimalLong((byte)24);
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(26L, buffer2.size());
      assertFalse(buffer3.exhausted());
      assertEquals(26L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotNull(buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((-721L));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16L, buffer1.size());
      assertEquals(16L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(buffer2);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer0));
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      byte byte1 = (byte)116;
      byteArray0[1] = (byte)116;
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong((-296L));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32L, buffer1.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(32L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotNull(buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer3, buffer1);
      assertSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer3.equals((Object)buffer0));
      
      byte byte2 = (byte)43;
      byteArray0[2] = (byte)43;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)116, (byte)43}, byteArray0);
      
      Buffer buffer4 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(3L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertNotNull(buffer4);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertArrayEquals(new byte[] {(byte) (-8), (byte)116, (byte)43}, byteArray0);
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertEquals(3, byteString1.size());
      assertNotNull(byteString1);
      assertNotSame(byteString1, byteString0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte) (-8), (byte)116, (byte)43}, byteArray0);
      
      byte byte3 = buffer4.readByte();
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(2L, buffer4.size());
      assertFalse(buffer4.exhausted());
      assertEquals((byte) (-8), byte3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(byte3 == byte2);
      assertTrue(byte3 == byte0);
      assertFalse(byte3 == byte1);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)116, (byte)43}, byteArray0);
      
      long long0 = buffer2.indexOf(byteString0, 1095216660480L);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(32L, buffer1.size());
      assertEquals(32L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(3, byteString0.size());
      assertEquals((-1L), long0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer4);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer4);
      assertSame(buffer1, buffer3);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer4);
      assertNotSame(byteString0, byteString1);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer4));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer4));
      assertTrue(byteString0.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte) (-8), (byte)116, (byte)43}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Number too large: fffffffffffffd2ff
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(0L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      ByteString byteString0 = buffer0.sha1();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      assertSame(buffer0, buffer1);
      
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeDecimalLong(2147483643L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((-91));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
      assertEquals(10L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(bufferedSink0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      long long0 = buffer1.readAll(bufferedSink0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(10L, long0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      
      buffer1.skip((-91));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)35;
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(4L, buffer1.size());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)0}, byteArray0);
      
      int int0 = buffer1.readIntLe();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertEquals(8960, int0);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)0}, byteArray0);
      
      Charset charset0 = Charset.forName("UTF-8");
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Buffer buffer2 = buffer1.writeString("UTF-8", charset0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertNotNull(buffer2);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)35;
      ByteString byteString0 = new ByteString(byteArray1);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)35}, byteArray1);
      
      boolean boolean1 = buffer2.rangeEquals(8192L, byteString0, 8960, (int) (byte)35);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(5L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(5L, buffer1.size());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(5L, buffer2.size());
      assertEquals(1, byteString0.size());
      assertFalse(boolean1);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer_UnsafeCursor0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(10000000L);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertFalse(buffer1.equals((Object)buffer0));
      
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertEquals(1, byteString1.size());
      assertNotNull(byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Segment segment0 = new Segment();
      assertNotNull(segment0);
      
      Segment segment1 = new Segment();
      assertNotNull(segment1);
      assertFalse(segment1.equals((Object)segment0));
      
      segment0.writeTo(segment1, 29);
      assertNotSame(segment0, segment1);
      assertNotSame(segment1, segment0);
      assertFalse(segment0.equals((Object)segment1));
      assertFalse(segment1.equals((Object)segment0));
      
      buffer0.head = segment0;
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("D^:,B?U");
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)0, (byte)0, (byte)9, (byte)9, (byte)0, (byte)104, (byte)34}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)0, (byte)0, (byte)9, (byte)9, (byte)0, (byte)104, (byte)34}, byteArray0);
      
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0, (long) (byte)9);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(9L, buffer0.size());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(buffer1.exhausted());
      assertEquals(9L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)0, (byte)0, (byte)9, (byte)9, (byte)0, (byte)104, (byte)34}, byteArray0);
      
      // Undeclared exception!
      try { 
        buffer1.getByte((byte)17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=17 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }
}
