/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:45:20 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0);
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<Integer, Integer> map0 = doubleKeyMap1.newMap();
      String string0 = "%g";
      doubleKeyMap0.get(map0, "%g");
      HashMap<Object, Map<String, Integer>> hashMap1 = new HashMap<Object, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Integer, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(class0);
      doubleKeyMap0.get((Object) class0);
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Object object0 = new Object();
      doubleKeyMap1.get(object0);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Integer>(class1);
      Integer integer0 = new Integer(1);
      doubleKeyMap2.remove(integer0);
      Integer integer1 = new Integer((-3438));
      doubleKeyMap2.get(integer1, "wrong proto type map ");
      Class<HashMap> class2 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>(class2);
      Object object1 = new Object();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap3.put(object1, (Map<Object, Object>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(class0);
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0, class1);
      doubleKeyMap1.remove((String) null);
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer0 = new Integer(3417);
      doubleKeyMap2.put(integer0, "R-n!^HhqVan", (Object) integer0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>();
      Integer integer1 = new Integer((-2673));
      Object object0 = new Object();
      Integer integer2 = new Integer((-2673));
      doubleKeyMap3.put(object0, (Object) integer2, (Object) doubleKeyMap0);
      doubleKeyMap3.put((Object) integer1, (Object) integer0, (Object) integer1);
      doubleKeyMap3.remove((Object) null);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap4 = new DoubleKeyMap<Object, Integer, Object>((Map<Object, Map<Integer, Object>>) null, class1);
      Map<Integer, Map<Object, Object>> map1 = doubleKeyMap4.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap5 = new DoubleKeyMap<Integer, Object, Object>(map1);
      doubleKeyMap5.newMap();
      Integer integer3 = new Integer(1);
      doubleKeyMap5.get(integer1, (Object) integer3);
      HashMap<String, Map<Integer, Object>> hashMap1 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap6 = new DoubleKeyMap<String, Integer, Object>(hashMap1);
      Map<Integer, Object> map2 = doubleKeyMap6.get(".&VYm={Z~9");
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string0 = doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      String string0 = null;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put((String) null, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0, class0);
      HashMap<Integer, Map<Map<Integer, Integer>, String>> hashMap2 = new HashMap<Integer, Map<Map<Integer, Integer>, String>>();
      DoubleKeyMap<Integer, Map<Integer, Integer>, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Map<Integer, Integer>, String>(hashMap2);
      Integer integer0 = new Integer((-1));
      HashMap<String, Map<Object, Object>> hashMap3 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap3);
      Map<Map<Integer, Integer>, String> map0 = doubleKeyMap2.newMap();
      hashMap2.put(integer0, map0);
      HashMap<Integer, Integer> hashMap4 = new HashMap<Integer, Integer>();
      doubleKeyMap1.put(integer0, (Map<Integer, Integer>) hashMap4, (String) null);
      // Undeclared exception!
      try { 
        doubleKeyMap0.newMap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Object object0 = new Object();
      doubleKeyMap0.remove(object0, "2");
      DoubleKeyMap<Map<Integer, Integer>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, Integer, Object>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      doubleKeyMap1.remove((Map<Integer, Integer>) hashMap1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      hashMap1.put(integer0, integer1);
      Integer integer2 = new Integer((-862));
      doubleKeyMap1.get((Map<Integer, Integer>) hashMap1, integer2);
      HashMap<Map<Integer, Integer>, Map<Object, String>> hashMap2 = new HashMap<Map<Integer, Integer>, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Integer>, Object, String> doubleKeyMap2 = new DoubleKeyMap<Map<Integer, Integer>, Object, String>(hashMap2, class0);
      hashMap1.keySet();
      doubleKeyMap2.remove((Map<Integer, Integer>) hashMap1);
      Integer integer3 = new Integer((-4097));
      doubleKeyMap2.remove((Map<Integer, Integer>) hashMap1, (Object) integer3);
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap3 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>();
      doubleKeyMap3.remove((Map<Integer, Integer>) hashMap1, "2");
      HashMap<Map<Integer, Integer>, Map<Object, Integer>> hashMap3 = new HashMap<Map<Integer, Integer>, Map<Object, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap4 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap4.newMap();
      hashMap3.put(hashMap1, map0);
      DoubleKeyMap<Map<Integer, Integer>, Object, Integer> doubleKeyMap5 = new DoubleKeyMap<Map<Integer, Integer>, Object, Integer>(hashMap3);
      doubleKeyMap5.get((Map<Integer, Integer>) hashMap1, (Object) doubleKeyMap2);
      DoubleKeyMap<Integer, Object, Map<Integer, Integer>> doubleKeyMap6 = new DoubleKeyMap<Integer, Object, Map<Integer, Integer>>();
      Integer integer4 = new Integer((-1));
      doubleKeyMap6.put(integer2, (Object) integer4, (Map<Integer, Integer>) hashMap1);
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap7 = null;
      try {
        doubleKeyMap7 = new DoubleKeyMap<Object, String, Object>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.put((Map<Integer, Integer>) hashMap0, "[ix+Mzq2&Vt", "A'3");
      doubleKeyMap0.remove((Map<Integer, Integer>) hashMap0, "");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
