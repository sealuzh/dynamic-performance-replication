/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 12:36:47 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner(" b- ");
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.config(feature0, false);
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-4g0VU", 26);
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" %Jc==OYe'`(P'x");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-3378));
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(112);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) jSONReaderScanner0;
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) stringReader0;
      jSONReaderScanner0.lexError(" %Jc==OYe'`(P'x", objectArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-3378), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.setToken(0);
      Feature feature0 = Feature.SupportAutoType;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yyyy-MM-dd HH:mm:ss");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextToken();
      jSONScanner0.setToken(0);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illgal identifier : ");
      jSONReaderScanner0.nextToken((-3081));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = new JSONScanner("", (-850));
      char char0 = 'C';
      jSONScanner0.scanBoolean('C');
      jSONScanner0.nextToken((-850));
      int int0 = (-1981);
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1981));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" b- ");
      jSONScanner0.nextToken();
      jSONScanner0.setToken(0);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nulW");
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('F');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = '+';
      char char0 = '$';
      charArray0[2] = '$';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      char[] charArray1 = new char[3];
      charArray1[0] = '+';
      charArray1[1] = '8';
      charArray1[2] = '_';
      jSONScanner0.scanFieldLong(charArray1);
      Class<Integer> class0 = Integer.class;
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A7.=P0y@mS?$", 1294);
      jSONScanner0.close();
      jSONScanner0.scanDecimal('Z');
      assertEquals(1294, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'H';
      charArray0[2] = 'J';
      charArray0[3] = 'O';
      charArray0[4] = 'E';
      charArray0[5] = 'L';
      charArray0[6] = '.';
      charArray0[7] = 'Y';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.getCurrent();
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken((-953));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-4g0VU!6k3} S");
      char[] charArray0 = new char[6];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      charArray0[0] = 'R';
      charArray0[1] = 'L';
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#~B\"yBT;>!");
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'M';
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Dd VrV8", 685);
      jSONReaderScanner0.setToken(685);
      char char0 = 'M';
      jSONReaderScanner0.scanFloat('M');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      jSONReaderScanner0.setToken((-1443));
      float float0 = jSONReaderScanner0.scanFloat('D');
      assertEquals((-1443), jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ", 3323);
      jSONReaderScanner0.isBlankInput();
      StringReader stringReader0 = new StringReader(" - ");
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OFJ/#q=Y");
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = new JSONScanner("create instance error", 2717);
      jSONScanner0.scanBoolean('C');
      jSONScanner0.nextToken(0);
      int int0 = (-1981);
      jSONScanner0.resetStringPosition();
      int int1 = 574;
      jSONScanner0.charAt(574);
      int int2 = 0;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OFJ/#q=Y");
      jSONReaderScanner0.info();
      String string0 = "create instance error";
      SymbolTable symbolTable0 = new SymbolTable(2092);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">z", 99);
      jSONScanner0.scanNumber();
      jSONScanner0.isBlankInput();
      jSONScanner0.matchStat();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-3E;a?2g<@sty");
      jSONScanner0.nextToken();
      jSONScanner0.setToken(42);
      assertEquals(42, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{4bo-g~0oXM r`f");
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals('4', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-1467));
      jSONReaderScanner0.skipWhitespace();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`R-`k~ ewAsbi.$");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      JSONScanner.checkDate('~', '~', '2', '~', '_', '.', (-100), 3310);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-1467), int0);
      
      jSONReaderScanner0.scanDecimal('1');
      assertEquals((-1467), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-1461));
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'A';
      charArray0[2] = 'T';
      charArray0[3] = ')';
      charArray0[4] = 'x';
      charArray0[5] = '^';
      charArray0[6] = '\"';
      charArray0[7] = 'o';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.isEnabled((-1461), 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'L';
      charArray0[2] = '`';
      charArray0[3] = 'D';
      charArray0[4] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1742, 1677);
      SymbolTable symbolTable0 = new SymbolTable(1677);
      jSONReaderScanner0.nextToken(18);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 18, (-2089), 5195);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 33);
      SymbolTable symbolTable0 = new SymbolTable('Y');
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'Y');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(33, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.resetStringPosition();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+ik", (-2256));
      jSONReaderScanner0.token = (-214748364);
      boolean boolean0 = jSONReaderScanner0.isEnabled(6, 17);
      assertTrue(boolean0);
      assertEquals((-2256), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", json : ", (-1063));
      jSONReaderScanner0.isRef();
      double double0 = jSONReaderScanner0.scanDouble('3');
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1063), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'D';
      charArray0[2] = '0';
      charArray0[3] = 'N';
      charArray0[4] = 'p';
      charArray0[5] = 'd';
      charArray0[6] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17, (-1810));
      jSONReaderScanner0.scanDouble('W');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1810), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'L';
      charArray0[2] = '`';
      charArray0[3] = 'D';
      charArray0[4] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1742, 1677);
      SymbolTable symbolTable0 = new SymbolTable(1677);
      symbolTable0.addSymbol("", 627, 0, 26, true);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'D');
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(1677, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-1467));
      jSONReaderScanner0.scanIdent();
      JSONScanner.checkDate('S', 'S', 'S', '=', 'Y', 'l', 11, 36);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanDecimal('=');
      jSONReaderScanner0.isRef();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.skipWhitespace();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-401), "`R-`k~ ewAsbi.$");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      JSONScanner.checkDate('.', '[', '3', '[', 'm', 'L', 6, (-1338));
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(989, int0);
      
      jSONReaderScanner0.scanDecimal('L');
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDecimal('l');
      float float0 = jSONScanner0.scanFloat('7');
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = jSONScanner0.scanType("null");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~ ");
      jSONScanner0.setToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-603));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ~, info : pos 0, json : ~ 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'D';
      charArray0[2] = '0';
      charArray0[3] = 'N';
      charArray0[4] = 'p';
      charArray0[5] = 'd';
      charArray0[6] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17, (-1810));
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match N - [, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = 122;
      jSONReaderScanner0.setToken(122);
      char char0 = 'M';
      jSONReaderScanner0.scanFloat('M');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Q],]-3<[~^sC_4Fc");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-1467));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('l');
      JSONScanner.checkDate('S', 'S', 'S', '=', 'Y', 'l', 11, 36);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanDecimal('=');
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      jSONReaderScanner0.token();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("uXMt*YG;V.9'r)q");
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken();
      assertEquals('*', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ase", (-1467));
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'l';
      charArray0[2] = 'Y';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner.checkDate('S', 'S', 'S', '=', 'Y', 'l', 11, 36);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanDecimal('=');
      jSONReaderScanner0.isRef();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1443));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8`xZPQ2");
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(46);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'r');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("et");
      SymbolTable symbolTable0 = new SymbolTable(4);
      jSONReaderScanner0.nextToken(4);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.charAt(115);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[1];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      char char0 = '[';
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 68);
      jSONReaderScanner0.scanBoolean('y');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - [, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 112, 112);
      jSONReaderScanner0.scanDouble('&');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      jSONReaderScanner0.locale = null;
      jSONReaderScanner0.scanString(']');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.scanString('m');
      jSONScanner0.setToken(739);
      assertEquals(739, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      jSONReaderScanner0.putChar('X');
      jSONReaderScanner0.integerValue();
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = '9';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N[", 97);
      jSONReaderScanner0.scanFieldInt(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y", 49);
      jSONReaderScanner0.scanDecimal('8');
      jSONReaderScanner0.scanUUID('A');
      assertFalse(jSONReaderScanner0.isEOF());
      
      Locale locale0 = Locale.FRENCH;
      jSONScanner0.setLocale(locale0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZcIyFE?L!lB6uk3T3>");
      jSONScanner0.nextToken();
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZcIyAFE?L!lB6uk3T3>");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      jSONReaderScanner0.bp = 48;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y`)tNEZx>uH");
      jSONScanner0.nextIdent();
      jSONScanner0.setToken(34);
      int int0 = jSONScanner0.scanType("Y`)tNEZx>uH");
      assertEquals(34, jSONScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 95);
      jSONReaderScanner0.scanDecimal('8');
      jSONReaderScanner0.scanUUID('A');
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(95);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 95, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qw", 1521);
      char[] charArray0 = new char[6];
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse", 1068);
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate(']');
      assertEquals(1068, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lty8w$A=");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.putChar('u');
      jSONScanner0.setToken(2552);
      assertEquals(2552, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      jSONReaderScanner0.scanLong('e');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'g';
      charArray0[2] = 'o';
      charArray0[3] = 'g';
      charArray0[4] = '`';
      charArray0[5] = 'k';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#~B\"yBT;>!");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(4);
      jSONReaderScanner0.scanDecimal('^');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "\"";
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      char char0 = 'E';
      jSONScanner0.resetStringPosition();
      char char1 = '/';
      jSONScanner0.skipWhitespace();
      char char2 = 'h';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('E', 'E', 'E', '/', 'h');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.scanDecimal('R');
      jSONScanner0.scanUUID('R');
      jSONScanner0.setToken((-1));
      jSONScanner0.scanLong('&');
      jSONScanner0.skipWhitespace();
      assertEquals('-', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fl se");
      jSONReaderScanner0.scanInt('O');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fl se");
      char char0 = 'W';
      jSONReaderScanner0.scanInt('W');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" b- ");
      jSONScanner0.features = 31;
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier :  pos 0, json :  b- 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      char char0 = 'R';
      SymbolTable symbolTable0 = new SymbolTable(21);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier :  pos 0, json :  - 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UQcU7");
      JSONScanner jSONScanner1 = new JSONScanner("hashCode", 0);
      jSONScanner1.setToken((-1326));
      assertEquals((-1326), jSONScanner1.token());
      
      Feature feature0 = Feature.OrderedField;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'D';
      charArray0[2] = '0';
      charArray0[3] = 'N';
      charArray0[4] = 'p';
      charArray0[5] = 'd';
      charArray0[6] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17, (-1810));
      jSONReaderScanner0.scanDouble('W');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanInt('f');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 49, (-1810));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qw", 1521);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('{');
      assertEquals(1521, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '5';
      charArray0[2] = '\'';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[3] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2611);
      jSONReaderScanner0.scanDate('5');
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 2611);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J}wVWm/,{(d|4^p^");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">%}");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.integerValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("y", 0);
      jSONScanner0.charAt(0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      jSONReaderScanner0.sp = 835;
      jSONReaderScanner0.scanLong(']');
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nu\u0000\u0000\u0000\u0000\u0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      jSONScanner0.nextToken();
      jSONScanner0.setToken(19);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      jSONReaderScanner0.scanLong(']');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      int int0 = Calendar.MAY;
      jSONReaderScanner0.nextToken(18);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y`)tNEZx>uH");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y`)tNEZx>uH", 0);
      jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(31);
      JSONScanner jSONScanner0 = new JSONScanner("f:).&j(=t");
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanString('?');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kk", 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 0);
      jSONReaderScanner0.scanString('L');
      jSONReaderScanner0.scanFloat('L');
      SymbolTable symbolTable0 = new SymbolTable(127);
      jSONReaderScanner0.addSymbol(2308, 8, 1745, symbolTable0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = '0';
      JSONScanner.charArrayCompare("EPX@5Y", 0, charArray0);
      jSONReaderScanner0.getLocale();
      jSONScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 46, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(66);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '$');
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.scanDecimal('<');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 23);
      jSONReaderScanner0.scanDecimal('8');
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('A');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray1);
      assertEquals(23, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1]};,wzQAnK");
      jSONReaderScanner0.scanLong('e');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1]};,wzQAnK", (-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 22);
      jSONReaderScanner0.scanDecimal('8');
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '4';
      JSONScanner jSONScanner0 = new JSONScanner("nulW", '4');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 235, 1136);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextToken(1928);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-123008);
      JSONScanner jSONScanner0 = new JSONScanner(", ", (-123008));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ", 0);
      jSONReaderScanner0.scanLong('A');
      PushbackReader pushbackReader0 = null;
      try {
        pushbackReader0 = new PushbackReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("GM>QMT3i>");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#~B\"yBT;>!");
      SymbolTable symbolTable0 = new SymbolTable(4);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'f');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '{';
      charArray0[5] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      jSONReaderScanner0.token = 1166;
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(78);
      JSONScanner jSONScanner0 = new JSONScanner("nulW");
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanString('?');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanLong('m');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(6950L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5@!x#");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, 'N');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('_');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      char char0 = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'e';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0,,a6s");
      char char1 = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'c';
      charArray0[5] = 'K';
      char char2 = '5';
      charArray0[6] = '5';
      char char3 = '~';
      charArray0[7] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 405);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONReaderScanner0.scanStringArray(set0, ',');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '!';
      charArray0[2] = '-';
      charArray0[3] = 'R';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.sub_chars(12, 12);
      jSONReaderScanner0.scanLong('e');
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y`)tNEZx>uH");
      jSONScanner0.nextIdent();
      JSONScanner jSONScanner1 = new JSONScanner("Y`)tNEZx>uH");
      jSONScanner0.scanType("rt*^H)dqI");
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = '[';
      charArray0[2] = 'l';
      charArray0[3] = '`';
      charArray0[4] = 'U';
      charArray0[5] = '*';
      charArray0[6] = 'V';
      charArray0[7] = '>';
      jSONScanner1.scanFieldBoolean(charArray0);
      jSONScanner0.getCalendar();
      assertEquals(18, jSONScanner0.token());
      
      jSONScanner1.resetStringPosition();
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 75);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDouble('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 95);
      SymbolTable symbolTable0 = new SymbolTable(18);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'f');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-3E;a?2g<@sty");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-3E;a?2g<@sty", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('Z');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'n57dj", 8);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byte byte0 = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 999999);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.isBlankInput();
      jSONScanner0.scanUUID('R');
      jSONScanner0.setToken((-1));
      jSONScanner0.scanLong('R');
      assertEquals((-1), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*I7,1HG", (-1241));
      SymbolTable symbolTable0 = new SymbolTable(103);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : *pos 0, json : *I7,1HG
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "TreeSet";
      int int0 = (-1051);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", (-1051));
      char[] charArray0 = new char[4];
      char char0 = '8';
      SymbolTable symbolTable0 = new SymbolTable(36);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner(" b- ");
      Feature feature0 = Feature.SupportArrayToBean;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('8', '6', ',', '8', 'M');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lse");
      jSONReaderScanner0.scanString('{');
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      int int0 = 23;
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 23);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", (-1874));
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'e';
      charArray0[2] = '/';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(503);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '2');
      assertEquals((-1874), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZcIyFE?L!lB6uk3T3>");
      jSONScanner0.nextToken();
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals('?', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y`)tNEZx>uH");
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y`)tNEZx>uH");
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFloat('F');
      charArray0[0] = '^';
      charArray0[1] = 'w';
      charArray0[2] = 'r';
      charArray0[4] = '.';
      charArray0[5] = '&';
      charArray0[6] = 'O';
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.pos();
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("error parse true", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[4] = '3';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 39, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('/');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{");
      JSONScanner jSONScanner0 = new JSONScanner("{", (-782));
      jSONScanner0.nextToken();
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 26);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nb] ");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-'3;a?2g<@sty");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-'3;a?2g<@sty");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6", 93);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('5');
      jSONReaderScanner0.scanDecimal('U');
      jSONReaderScanner0.bytesValue();
      assertEquals(93, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.scanDouble('V');
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.isEnabled(28, 28);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'j';
      charArray0[2] = 'K';
      charArray0[3] = 'i';
      charArray0[4] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 28, 28);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nulW", 49);
      jSONScanner0.scanStringArray((Collection<String>) null, ']');
      char char0 = 'q';
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, 'n');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A7.=P0y@mS?$", 1294);
      jSONScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(58);
      jSONScanner0.scanSymbol(symbolTable0, 'P');
      jSONScanner0.scanDecimal('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 0, info : pos 5, json : A7.=P0y@mS?$
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char char0 = '#';
      charArray0[0] = '#';
      charArray0[1] = 'M';
      charArray0[2] = '0';
      char char1 = '2';
      charArray0[3] = '2';
      charArray0[4] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.isEnabled(feature0);
      SymbolTable symbolTable0 = new SymbolTable(32);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'B');
      jSONReaderScanner0.scanInt('0');
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 44, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eT_d/NlfNNa2SG");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("eT_d/NlfNNa2SG");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eT_d/NlfNNa2SG");
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J}wVWm/,{(d|4^p^");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J}wVWm/,{(d|4^p^");
      jSONReaderScanner0.scanDate('h');
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_-2");
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"SSk=<4(gc/wc2");
      char char0 = '?';
      // Undeclared exception!
      try { 
        jSONScanner0.scanUUID('?');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-3E;a?gsty");
      jSONScanner0.nextToken();
      jSONScanner0.nextToken();
      jSONScanner0.scanDouble('2');
      assertEquals(3, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 95);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanDate('[');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", (-1874));
      SymbolTable symbolTable0 = new SymbolTable(503);
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.setToken((-3608));
      assertEquals((-3608), jSONScanner0.token());
      
      float float0 = jSONReaderScanner0.scanFloat('j');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BrowsrCompatible");
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = '6';
      charArray0[2] = 'I';
      charArray0[3] = 'C';
      charArray0[4] = 'Y';
      charArray0[5] = '%';
      charArray0[6] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":B({qDTN`:");
      jSONScanner0.nextToken();
      assertEquals('B', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 1521);
      jSONReaderScanner0.scanDate('B');
      JSONScanner jSONScanner0 = new JSONScanner("nulW", (-3910));
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals((-3910), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fls.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i*>fKo2M");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.skipComment();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q7iB65&v[;F-/");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("X2c0eBoSwRzyS8\"2+q},", 71);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")Y]bDrdWlW_oMK)c$");
      jSONReaderScanner0.nextToken(20);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p9-0vsy_?{L", 71);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q7iB65&v[;F-/");
      jSONReaderScanner0.nextToken(20);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("flse");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      jSONReaderScanner0.scanFloat('Z');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONReaderScanner0.scanInt('Z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW", 75);
      jSONReaderScanner0.scanInt('z');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDouble('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#~B\"yBT;>!");
      SymbolTable symbolTable0 = new SymbolTable(4);
      jSONReaderScanner0.nextToken(4);
      assertEquals('~', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '.';
      charArray0[2] = 'C';
      charArray0[3] = '-';
      charArray0[4] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 235, 1136);
      jSONReaderScanner0.nextToken(1136);
      assertEquals('C', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y");
      JSONScanner jSONScanner1 = new JSONScanner("A7.=P0y@mS?$", (-560));
      jSONScanner1.next();
      jSONScanner1.nextToken();
      assertEquals(3, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.scanFloat('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('~');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(4);
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 109, 2480);
      jSONReaderScanner0.nextToken(2480);
      assertEquals(25, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("+GF3 r'F`` NX");
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanType("null");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('_');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(14);
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'H';
      charArray0[2] = 'w';
      charArray0[3] = '}';
      charArray0[4] = '~';
      charArray0[5] = '*';
      charArray0[6] = 'W';
      charArray0[7] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 97, (-1284));
      jSONReaderScanner0.nextToken(14);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanBoolean('c');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*I7,1HG", (-1241));
      SymbolTable symbolTable0 = new SymbolTable(103);
      JSONScanner jSONScanner1 = new JSONScanner("}V", (-28));
      jSONScanner1.nextToken();
      assertEquals('V', jSONScanner1.getCurrent());
      
      jSONScanner0.scanString('A');
      assertEquals((-1241), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Qnf|+rH0m ?p2");
      jSONScanner0.ch = ')';
      jSONScanner0.nextToken();
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = 'n';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = 'n';
      charArray0[7] = ')';
      charArray0[8] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2860);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(2860, charArray0, 43, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanType("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken((-2));
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Class<Object> class0 = Object.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      jSONReaderScanner0.scanString('M');
      jSONReaderScanner0.scanDecimal('a');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(4);
      JSONScanner jSONScanner0 = new JSONScanner("true");
      boolean boolean0 = jSONScanner0.scanBoolean('c');
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nulW");
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'e';
      charArray0[2] = 'i';
      charArray0[3] = 'Q';
      charArray0[4] = '0';
      charArray0[5] = 'J';
      charArray0[6] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1711, 1711);
      jSONReaderScanner0.nextToken((-1190));
      assertEquals('i', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x11g`ape^");
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5@!x#");
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = 'I';
      charArray0[2] = '(';
      charArray0[3] = 'O';
      charArray0[4] = 'N';
      charArray0[5] = 'v';
      charArray0[6] = 'k';
      charArray0[7] = '$';
      charArray0[8] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      JSONScanner jSONScanner0 = new JSONScanner("Nk&qBL4v77Io<\r");
      jSONScanner0.nextToken();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("St|");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 3, json : St|
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      double double0 = jSONReaderScanner0.scanDouble('N');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a03[RlHOZ");
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      jSONScanner0.scanDecimal('A');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanDecimal('}');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nu_lW");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('/');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      float float0 = jSONReaderScanner0.scanFloat('}');
      assertEquals(52.0F, float0, 0.01F);
      
      jSONReaderScanner0.skipWhitespace();
      int int0 = jSONReaderScanner0.scanInt('}');
      assertEquals(52, int0);
      
      JSONScanner jSONScanner0 = new JSONScanner("52WwIhe6X", 22);
      jSONScanner0.scanDouble('r');
      assertEquals(22, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52Wwxhe6X");
      jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt(')');
      jSONReaderScanner0.scanLong('U');
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nu_lW");
      jSONReaderScanner0.scanLong('e');
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      JSONScanner jSONScanner0 = new JSONScanner("nulW");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("7x{lP{* 4%mxT", (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nu_lW");
      jSONReaderScanner0.scanDouble('B');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-640), (-640));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -640
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new");
      assertEquals(989, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = '2';
      charArray0[1] = '-';
      charArray0[2] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192, 0);
      jSONReaderScanner0.charAt(69);
      int int0 = jSONReaderScanner0.scanInt('\"');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeSupport");
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble(')');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TL$$$YQ%[");
      jSONScanner0.nextToken();
      assertEquals('$', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(1157);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5584);
      jSONReaderScanner0.scanFloat('E');
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken((-3240));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";&c,2");
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '_');
      jSONReaderScanner0.scanString('_');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*uJ5");
      jSONScanner0.scanDouble('#');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nW/pVKk9wlSz(&Z~ob");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nW/pVKk9wlSz(&Z~ob");
      jSONReaderScanner0.scanDecimal(',');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(83);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'A');
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("St|");
      jSONScanner0.nextToken();
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SortFeidFastMatch");
      SymbolTable symbolTable0 = new SymbolTable(41);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'i');
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // SortFeidFastMatch
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("scan new error", 93);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.nextToken();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(83);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", 83);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      char char0 = '$';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanEnum(class0, symbolTable0, '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate is not an enum type
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.next();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.scanFloat('z');
      jSONReaderScanner0.nextToken((-953));
      jSONReaderScanner0.floatValue();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nk");
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanString('C');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.scanString('R');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.nextToken(0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("St|");
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '?';
      charArray0[2] = 'A';
      charArray0[3] = '';
      charArray0[4] = '>';
      charArray0[5] = 'L';
      charArray0[6] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.floatValue();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("St|");
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2662);
      jSONReaderScanner0.nextToken(43);
      jSONReaderScanner0.floatValue();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";&c,2");
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '_');
      jSONReaderScanner0.scanString('_');
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      charArray0[6] = '_';
      charArray0[7] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read();
      jSONReaderScanner0.nextToken(19);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 2442);
      jSONReaderScanner1.scanInt('g');
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      jSONReaderScanner1.scanFieldInt(charArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 2442);
      jSONReaderScanner1.scanInt('g');
      SymbolTable symbolTable0 = new SymbolTable(2442);
      jSONReaderScanner0.nextToken((-1994654147));
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.next();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("52WwIhe6X");
      jSONScanner0.scanFieldDouble(charArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("flse");
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'g';
      charArray0[2] = 'U';
      charArray0[3] = 's';
      charArray0[4] = 't';
      charArray0[5] = 'j';
      charArray0[6] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 622);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("TL");
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.nextToken();
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'L');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-863), 0, 93, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      JSONScanner jSONScanner0 = new JSONScanner("]9&SC9:TJWT");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '9';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";&c,2");
      jSONReaderScanner0.token = 8192;
      SymbolTable symbolTable0 = new SymbolTable(13);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '_');
      jSONReaderScanner0.scanString('_');
      char[] charArray0 = new char[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.nextToken(13);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = Calendar.DAY_OF_MONTH;
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '1';
      charArray0[2] = '~';
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 11);
      jSONReaderScanner0.nextToken(8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("klerc");
      JSONScanner jSONScanner0 = new JSONScanner("klerc");
      int int0 = Calendar.DAY_OF_MONTH;
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'F';
      charArray0[2] = '(';
      charArray0[3] = 'C';
      charArray0[4] = '/';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.close();
      jSONScanner0.nextToken(5);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1565);
      jSONReaderScanner0.nextToken((-692));
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("St|");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.scanDate('1');
      jSONReaderScanner0.next();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("52WwIhe6X", 55232);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanInt('g');
      jSONReaderScanner0.scanDate('g');
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'h';
      charArray0[3] = 'g';
      charArray0[4] = 'h';
      charArray0[5] = 'K';
      charArray0[6] = '=';
      jSONReaderScanner0.scanFieldLong(charArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.scanDate('1');
      jSONReaderScanner0.next();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.isBlankInput();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("52WwIhe6X");
      jSONReaderScanner0.scanFieldDecimal(charArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("flse");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken(2);
      jSONReaderScanner0.isEnabled((-2454));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanIdent();
      Feature feature0 = Feature.CustomMapDeserializer;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) feature0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("null", objectArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextIdent();
      String string0 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.setToken((-157));
      jSONReaderScanner0.scanIdent();
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) feature0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("null", objectArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 61);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-2873));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nu_lD");
      jSONReaderScanner0.scanDate('&');
      char char0 = '/';
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 2442);
      SymbolTable symbolTable0 = new SymbolTable(18);
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'R';
      charArray0[2] = 'Y';
      charArray0[3] = 'G';
      charArray0[4] = '\'';
      charArray0[5] = '/';
      charArray0[6] = 'H';
      charArray0[7] = 'g';
      symbolTable0.addSymbol(charArray0, 0, 0);
      StringReader stringReader0 = new StringReader("Z~A@KDx&/0Pw");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanSymbol(symbolTable0, 'W');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nulW");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(83);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'i');
      jSONReaderScanner0.scanString('&');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '[';
      charArray0[2] = '~';
      charArray0[3] = ' ';
      charArray0[4] = '=';
      charArray0[5] = '~';
      charArray0[6] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999, 1843);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.scanLong('U');
      jSONReaderScanner1.getTimeZone();
      JSONScanner jSONScanner0 = new JSONScanner("null", 55296);
      jSONScanner0.bytesValue();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '[';
      charArray0[2] = '~';
      charArray0[3] = ' ';
      charArray0[5] = '~';
      charArray0[6] = '&';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999, 1843);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.scanLong('U');
      jSONReaderScanner1.getTimeZone();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanDouble('l');
      jSONReaderScanner0.nextToken((-953));
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONScanner0.isEnabled(40, (-859));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1481, 501);
      jSONReaderScanner0.scanFloat('n');
      JSONScanner jSONScanner0 = new JSONScanner("-57F}I_}GM");
      jSONReaderScanner0.scanUUID('X');
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "#~B\"yBT;>!";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#~B\"yBT;>!");
      JSONScanner jSONScanner0 = new JSONScanner("#~B\"yBT;>!", 88);
      char char0 = '`';
      jSONReaderScanner0.nextToken(10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("52WwIhe6X");
      char char0 = 'W';
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      jSONReaderScanner0.nextToken(16);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('D');
      SymbolTable symbolTable0 = new SymbolTable(1157);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, (int) (byte) (-80), charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'n');
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, '=');
      jSONReaderScanner0.scanString('`');
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nuwll");
      jSONScanner0.scanType("nuwll");
      jSONScanner0.scanUUID('_');
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U}");
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '{';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 622);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      char[] charArray0 = new char[11];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(14);
      JSONScanner jSONScanner0 = new JSONScanner("tauF");
      jSONScanner0.scanBoolean('c');
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("52WwIhe6X");
      JSONScanner jSONScanner0 = new JSONScanner("G+l%NZ#~'A*Kv6");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'n');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t<@RVpHi=3G92");
      jSONReaderScanner0.scanLong('p');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
