/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:51:01 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t(wide)", "\t(wide)", "\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.methodTypeToSignature("impdep2", (String[]) null);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.fillup("8\"8+", 2088, true, ']');
      Utility.accessToString(2088, false);
      Utility.accessToString(2088, true);
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A|{AQItJR*f}hpU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A|{AQItJR*f}hpU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.accessToString((-721), true);
      assertEquals("public private protected static native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.signatureToString("L#!?C7hQ$S^R;V");
      assertEquals("#!?C7hQ$S^R", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("impdep2", stringArray0);
      assertEquals("()Limpdep2;", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "L#!?C7hQ$S^R;V";
      Utility.methodTypeToSignature("L#!?C7hQ$S^R;V", stringArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.compactClassName("l:o>nt9,X-0G", "", true);
      assertEquals("l:o>nt9,X-0G", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("Xx[|^7f,V@+T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[|^7f,V@+T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = Utility.isSet((byte) (-16), 75);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.typeOfSignature("BNzR/u!MHUd?:L");
      int int0 = Utility.clearBit(62, 62);
      assertEquals(62, int0);
      
      byte byte0 = Utility.typeOfSignature("BNzR/u!MHUd?:L");
      assertEquals((byte)8, byte0);
      
      int int1 = Utility.setBit((byte)8, (byte)8);
      assertEquals(264, int1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)62;
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      String string0 = Utility.signatureToString("Byte code error: ");
      assertEquals("byte", string0);
      
      int int0 = Utility.setBit((byte)8, (byte)62);
      assertEquals(1073741832, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y~jCZ5mnN.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y~jCZ5mnN.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = Utility.encode(byteArray0, true);
      String string1 = Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("00 00", string2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      String string0 = Utility.convertString(" LO+4x:ghDK-e+B%c");
      assertEquals(" LO+4x:ghDK-e+B%c", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("6a 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte) (-125));
      assertEquals("0:    lxor\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("83 00 00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = Utility.isSet(234, 234);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null}", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "return";
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("null, return", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[9] = (byte) (-93);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l2d");
      Locale locale0 = new Locale("Q(|'Cx|+#cj`jk=&", "Warning: Padding byte != 0 in ");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "fconst_2", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.compactClassName("9G:$;)L:+m[y");
      assertEquals("9G:$;)L:+m[y", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      objectArray0[4] = object2;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0);
      Utility.convertString("P$axMOBK?-+6I]rd/j");
      Utility.compactClassName("java.lang.Object@7e781847, java.lang.Object@7f64742e, java.lang.Object@17aa9180, java.lang.Object@328eb8c2, java.lang.Object@17aa9180, java.lang.Object@c0a24f4", "c", false);
      Utility.compactClassName("java.lang.Object@7e781847, java.lang.Object@7f64742e, java.lang.Object@17aa9180, java.lang.Object@328eb8c2, java.lang.Object@17aa9180, java.lang.Object@c0a24f4");
      try { 
        Utility.typeOfSignature("java.lang.Object@7e781847, java.lang.Object@7f64742e, java.lang.Object@17aa9180, java.lang.Object@328eb8c2, java.lang.Object@17aa9180, java.lang.Object@c0a24f4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@7e781847, java.lang.Object@7f64742e, java.lang.Object@17aa9180, java.lang.Object@328eb8c2, java.lang.Object@17aa9180, java.lang.Object@c0a24f4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      String string0 = Utility.signatureToString("F");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.replace("$l$8b$i$a$a$a$a$a$a$a", "$l$8b$i$a$a$a$a$a$a$a", "$l$8b$i$a$a$a$a$a$a$a");
      assertEquals("$l$8b$i$a$a$a$a$a$a$a", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = Utility.decode("Lfstore_2;V", false);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1575), (-1575));
      assertEquals("0:    astore_1\n1:    fsub\n2:    drem\n3:    ineg\n4:    ddiv\n5:    frem\n6:    lsub\n7:    swap\n8:    aaload\n9:    istore_0\n10:   sastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte)23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.getSignature(" m(ethods:\n");
      // Undeclared exception!
      try { 
        Signature.translate("Lm(ethods:;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: Lm(ethods:; reaching EOF
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.methodTypeToSignature("Y~-rjCZ5mnN.", (String[]) null);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int0 = Utility.clearBit(85, (-3002));
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.getSignature("#+JOO`_JXl%oPV'Y5]");
      byte[] byteArray0 = Utility.decode("L#+JOO`_JXl%oPV'Y5];", false);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 545, 545);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, 101, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = (byte) (-61);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (-929));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.accessToString(605, true);
      assertEquals("public protected static final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("[4%b*PoJz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4%b*PoJz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TqMCa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TqMCa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = Utility.getSignature("#+)JOO`_JXl%oPV'Y5]");
      assertEquals("L#+)JOO`_JXl%oPV'Y5];", string0);
      
      byte[] byteArray0 = Utility.decode("L#+)JOO`_JXl%oPV'Y5];", false);
      String string1 = Utility.encode(byteArray0, false);
      String string2 = Utility.convertString("L$p$x$vJOO$60_JXl$roPV$tY5$5d$3b");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("p0#T53AyB(Ip", false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("p0#T53AyB(Ip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `p0#T53AyB(Ip'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "long";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("wR]?Q1#I7{c`6>", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#!?C7hQ$S^R", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2110, 2110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%{oUt~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %{oUt~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.replace("Y~jkZ5mnNm", "@&j*%^", "@&j*%^");
      assertEquals("Y~jkZ5mnNm", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.convertString("\"Ms+*8n{;y");
      assertEquals("\\\"Ms+*8n{;y", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("Cc#o8)BQW9FT'");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1KN?mOKWC>3!b=dGRg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1KN?mOKWC>3!b=dGRg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[12] = (byte) (-104);
      byteArray0[3] = (byte) (-85);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 160);
      assertEquals("0:    lookupswitch\tdefault = 0, npairs = 0 ()\n12:   dcmpg\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.convertString("ZI.eQgRF(Sj");
      assertEquals("ZI.eQgRF(Sj", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BASE;
      try { 
        Utility.typeOfSignature("Mb|yI\"rh7Q7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mb|yI\"rh7Q7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-78), (int) (byte)125, true);
      assertEquals("0:    lushr\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2985));
      assertEquals("class", string0);
      
      byte byte0 = Utility.typeOfSignature("J'])]M'>5%fs");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ljava/lang/#!?C7hQ$S^R;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P|SaY:~9+WiC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P|SaY:~9+WiC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object1 = new Object();
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.compactClassName("N:4Z6");
      Object object2 = new Object();
      try { 
        Utility.typeOfSignature("N:4Z6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N:4Z6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)47;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (-2351), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.classOrInterface((-2985));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 191, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "'N2'R,1s[9/z~";
      byte[] byteArray0 = Utility.decode("'N2'R,1s[9/z~", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5238, 783);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("p0#T53AyB(Ip", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 200, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = Utility.decode("FpOU!SI{Js1B}gyR%@", false);
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 90, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = Utility.decode("void", false);
      String string1 = Utility.compactClassName(">");
      assertEquals(">", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fneg", string2);
      assertArrayEquals(new byte[] {(byte)118, (byte)111, (byte)105, (byte)100}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "7f";
      try { 
        Utility.typeOfSignature("7f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      short short0 = Utility.searchOpcode("putfield");
      assertEquals((short)181, short0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature(">ZZ@PY:@x(WC0h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >ZZ@PY:@x(WC0h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.typeOfSignature("24/j`SG,4XO`j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 24/j`SG,4XO`j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8:SeAj O?rFqj *");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8:SeAj O?rFqj *
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.fillup("7!.9>\"SVi.", 2088, false, 'O');
      Utility.accessToString(2088, true);
      Utility.accessToString(2088, false);
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signaturei.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = File.pathSeparator;
      try { 
        Utility.typeOfSignature("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2563), (int) (byte)48);
      assertEquals("0:    faload\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("'fr2'R,1s[9/~q", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 438, 438);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)46;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), (int) (byte) (-92));
      try { 
        Utility.typeOfSignature("#+)JOO`_JXl%oPV'Y5]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #+)JOO`_JXl%oPV'Y5]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "5V^OLOW,07@;Xp~\"QsP";
      try { 
        Utility.typeOfSignature("5V^OLOW,07@;Xp~\"QsP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5V^OLOW,07@;Xp~\"QsP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.signatureToString("ConstantValue");
      assertNotNull(string0);
      assertEquals("char", string0);
      
      try { 
        Utility.typeOfMethodSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZI.eQgRF(Sj";
      String string0 = Utility.signatureToString("ZI.eQgRF(Sj");
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)95;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte)95;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-70), (byte)13, (byte) (-65), (byte)95}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte) (-70), (byte) (-75), (byte)2, (byte) (-70), (byte)95}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      try { 
        Utility.typeOfSignature("aCm9--gw$@/*-Cs5c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aCm9--gw$@/*-Cs5c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("bj0zhVn4tqO", false);
      assertNotNull(byteArray0);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), 1842);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    fadd\n1:    fmul\n2:    faload\n3:    ishr\n4:    imul\n5:    sastore\n6:    fdiv\n7:    caload\n8:    ineg\n9:    lrem\n10:   iastore\n", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y~jCZ5mnN.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y~jCZ5mnN.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.classOrInterface(2834);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",'>%-mKii)fAaClL04r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,'>%-mKii)fAaClL04r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = true;
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "V0(/$e:";
      String string1 = Utility.getSignature("V0(/$e:");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LV0(/$e:;", string1);
      
      // Undeclared exception!
      try { 
        Utility.decode("LV0(/$e:;", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.getSignature("V0(4/$}-");
      assertNotNull(string0);
      assertEquals("LV0(4/$}-;", string0);
      
      try { 
        Utility.decode("LV0(4/$}-;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = ">";
      stringArray0[3] = ">";
      String string0 = Utility.signatureToString("S");
      assertNotNull(string0);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = Utility.typeOfSignature("T<");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "\\n";
      try { 
        Utility.typeOfSignature("3=3lL~#B<:/)'6WGX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3=3lL~#B<:/)'6WGX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2985));
      assertNotNull(string0);
      assertEquals("class", string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3335), 48);
      assertNotNull(constantMethodHandle0);
      assertEquals(48, constantMethodHandle0.getReferenceIndex());
      assertEquals((-3335), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)122, (byte)70, (byte)51, (byte)51, (byte) (-105)}, byteArray0);
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)13107, short0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)122, (byte)70, (byte)51, (byte)51, (byte) (-105)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string1);
      assertEquals("baload", string1);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)122, (byte)70, (byte)51, (byte)51, (byte) (-105)}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-105), (int) (byte)51);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string2);
      assertEquals("0:    baload\n1:    baload\n2:    baload\n3:    ishr\n4:    fstore_3\n5:    baload\n6:    baload\n7:    dcmpl\n", string2);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)122, (byte)70, (byte)51, (byte)51, (byte) (-105)}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Y~jCZ5mnN.";
      objectArray0[1] = (Object) "Y~jCZ5mnN.";
      objectArray0[2] = (Object) "Y~jCZ5mnN.";
      objectArray0[3] = (Object) "Y~jCZ5mnN.";
      objectArray0[4] = (Object) "Y~jCZ5mnN.";
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.decode("LpVr0>8tUM,E1t$!y9;V", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("IcH+Zp");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Em@|;p#.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Em@|;p#.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      String string0 = "!)om~).7E";
      try { 
        Utility.typeOfSignature("!)om~).7E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )om~).7E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "H\t(wide)";
      byte[] byteArray0 = Utility.decode("H\t(wide)", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)9, (byte)40, (byte)119, (byte)105, (byte)100, (byte)101, (byte)41}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1448, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals("$ba", string0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("Listore;V", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)76, (byte)105, (byte)115, (byte)116, (byte)111, (byte)114, (byte)101, (byte)59, (byte)86}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.typeOfSignature("Qb_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qb_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-119);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), 231);
      assertNotNull(string0);
      assertEquals("0:    <illegal opcode>\n1:    l2f\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-69);
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-69), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.signatureToString("V*`kKm,U~rs/");
      assertNotNull(string0);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegally nested brackets:");
      assertNotNull(string0);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "*}2>/;eC;liFd[R9pY";
      try { 
        Utility.typeOfSignature("*}2>/;eC;liFd[R9pY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }2>/;eC;liFd[R9pY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.accessToString((-85), false);
      assertNotNull(string0);
      assertEquals("public private static synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
      
      byte byte0 = Utility.typeOfSignature("SAME_LOCALS_1_STACK");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 45, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte byte0 = Utility.typeOfSignature("V0(/$e:");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      try { 
        Utility.typeOfSignature("=w paDG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =w paDG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("N.0=|sqqca");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N.0=|sqqca'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature(".MS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .MS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-51);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      try { 
        Utility.typeOfSignature("Wn!3!e7x]h(^B*h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wn!3!e7x]h(^B*h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      byteArray0[7] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-122), 2087);
      assertNotNull(string0);
      assertEquals("0:    ior\n1:    ior\n2:    nop\n3:    i2f\n4:    i2f\n5:    ior\n6:    ior\n7:    ior\n", string0);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte)0, (byte) (-122), (byte) (-122), (byte) (-128), (byte) (-128), (byte) (-128)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-23);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), (-372));
      assertNotNull(string0);
      assertEquals("0:    fstore\t\t%233\n", string0);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-23)}, byteArray0);
      
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      assertEquals((byte)125, byte0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (int) (byte) (-72), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DzoE#R>Rq8iG~");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.signatureToString("DzoE#R>Rq8iG~");
      assertNotNull(string0);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.signatureToString("P`Ra");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P`Ra'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = (-1408);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3123), 1190);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    monitorexit
         // 1:    monitorexit
         // 2:    monitorexit
         // 3:    monitorexit
         // 4:    monitorexit
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Kjg@Q!\"bJ;b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kjg@Q!\"bJ;b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2045), 174);
      assertNotNull(string0);
      assertEquals("0:    fstore_2\n", string0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray0);
      
      short short0 = Utility.searchOpcode("SAME_LOCAL");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (int) (byte)60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(80, 80);
      assertNotNull(constantMethodHandle0);
      assertEquals(80, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(80, constantMethodHandle0.getReferenceKind());
      
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)18;
      byte byte0 = Constants.T_FLOAT;
      assertEquals((byte)6, byte0);
      
      String string1 = Utility.format(122, (-2461), false, 'e');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("122", string1);
      
      String string2 = "+p-Rp`I9eeWbr:fw";
      try { 
        Utility.typeOfSignature("+p-Rp`I9eeWbr:fw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p-Rp`I9eeWbr:fw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2177, 2177, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte)106);
      assertNotNull(string0);
      assertEquals("0:    fmul\n1:    nop\n2:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `multianewarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2442, 2442);
      assertNotNull(constantMethodref0);
      assertEquals(2442, constantMethodref0.getClassIndex());
      assertEquals(2442, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("U*h5t}97}K2Qi/2z`p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U*h5t}97}K2Qi/2z`p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(6, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[6] = (byte) (-87);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1873), 243);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals("0:    ret\t\t%0\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    ret\t\t%0\n", string0);
      assertEquals(6, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-87), (byte)0}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "V";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      String string1 = Utility.encode(byteArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      assertArrayEquals(new byte[] {(byte)83, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = true;
      try { 
        Utility.decode("Nk;$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)19;
      String string0 = Utility.convertString("Q ><z:?x6k");
      assertNotNull(string0);
      assertEquals("Q ><z:?x6k", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q ><z:?x6k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q ><z:?x6k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.convertString("#+JOO`_JXl%oPV'Y5]");
      assertNotNull(string0);
      assertEquals("#+JOO`_JXl%oPV\\'Y5]", string0);
      
      byte[] byteArray0 = Utility.decode("#+JOO`_JXl%oPV'Y5]", false);
      assertNotNull(byteArray0);
      
      String string1 = Utility.getSignature("#A}I7L>U");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L#A}I7L>U;", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, 887);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(48, 88);
      assertNotNull(constantMethodHandle0);
      assertEquals(48, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(88, constantMethodHandle0.getReferenceIndex());
      
      byte[] byteArray0 = Utility.decode("|tS<V;x0 z,(I<u6#m", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 147, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      String string0 = constantPool1.toString();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)65;
      byteArray0[2] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)56, (byte)0, (byte)65}, byteArray0);
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)0, short0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)56, (byte)0, (byte)65}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertEquals("fstore\t\t%0", string0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)56, (byte)0, (byte)65}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)65;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      String string1 = Utility.codeToString(byteArray1, constantPool1, (-2373), 200);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    lstore_2\n1:    lconst_1\n2:    lstore_2\n3:    nop\n4:    nop\n", string1);
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)65, (byte)10, (byte)65, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool1, constantPool0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)56, (byte)0, (byte)65}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)10, (byte)65, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("fstore\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore\t\t%0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Utility.accessToString((-2760), false);
      assertNotNull(string0);
      assertEquals("static final synchronized native abstract synthetic annotation enum", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static final synchronized native abstract synthetic annotation enum", "static final synchronized native abstract synthetic annotation enum", "static final synchronized native abstract synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static final synchronized native abstract synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      assertEquals((byte)125, byte0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-78), (byte)95, (byte) (-40)}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertEquals("ifge\t\t#-10024", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-40), (byte) (-78), (byte)95, (byte) (-40)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("long", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)111, (byte)110, (byte)103}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1906, 1906);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2110, (int) (byte) (-116));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte)54);
      assertNotNull(string0);
      assertEquals("4:    nop\n5:    nop\n6:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("4:    nop\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4:    nop
         // 5:    nop
         // 6:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, (int) (byte) (-118));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      String string0 = constantPool1.toString();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-239), (int) (byte) (-107));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0:    fcmpl\n1:    fcmpl\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string2);
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 92, (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, (-5319));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-57);
      try { 
        Utility.typeOfSignature("@d\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @d\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2104));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.accessToString(1359, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private protected static volatile native abstract", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("GkPSE=I%A?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GkPSE=I%A?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-i%Vner[qtKoF;4?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -i%Vner[qtKoF;4?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (-2708));
      assertNotNull(string0);
      assertEquals("0:    lreturn\n1:    lreturn\n2:    lreturn\n3:    lreturn\n4:    lreturn\n5:    lreturn\n", string0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83), (byte) (-83), (byte) (-83), (byte) (-83), (byte) (-83)}, byteArray0);
      
      String string1 = "iand";
      try { 
        Utility.typeOfSignature("iand");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iand
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "HV4n*alMO2";
      try { 
        Utility.typeOfSignature("HV4n*alMO2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HV4n*alMO2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("dconst_0", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)99, (byte)111, (byte)110, (byte)115, (byte)116, (byte)95, (byte)48}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, 2110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature(">\t", stringArray0);
      assertNotNull(string0);
      assertEquals("()L>;", string0);
      
      String string1 = Utility.convertString("KCwoL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("KCwoL", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)36, (int) (byte) (-57), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-5192), (-2269));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("H?:n:B,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H?:n:B,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      String string0 = constantPool1.toString();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      String string2 = Utility.codeToString(byteArray0, constantPool1, (-239), (int) (byte) (-98));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    ifle\t\t#-25088\n3:    nop\n4:    nop\n5:    nop\n", string2);
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), 124);
      assertNotNull(string0);
      assertEquals("0:    dreturn\n", string0);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)19;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)19, 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-106)}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3943), 193);
      assertNotNull(string0);
      assertEquals("0:    freturn\n1:    fcmpg\n", string0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-106)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-698), 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)77, 24, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("/,)-:QzagZw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /,)-:QzagZw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L_Q|,ND,!x9cF!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L_Q|,ND,!x9cF!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      try { 
        Utility.methodSignatureReturnType("RIZS3-<41_EZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RIZS3-<41_EZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#!1C7hQ$L^i", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)33, (byte)49, (byte)67, (byte)55, (byte)104, (byte)81, (byte)11, (byte)94, (byte)105}, byteArray0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2110, 2110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-122);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-122), (int) (byte) (-122));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    i2f\n", string0);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(33, 33);
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(33, constantMethodHandle0.getReferenceKind());
      assertEquals(33, constantMethodHandle0.getReferenceIndex());
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(33, (-349));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((-349), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(33, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)60, (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "F";
      String string0 = "[-vb~vPinNESM0\"BT";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringArray0[2] = "F";
      byte byte0 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(32, 32);
      assertNotNull(constantMethodHandle0);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(32, constantMethodHandle0.getReferenceKind());
      assertEquals(32, constantMethodHandle0.getReferenceIndex());
      
      String string0 = Utility.classOrInterface((-3647));
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)27;
      byte[] byteArray1 = Utility.decode("class", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte)97, (byte)115, (byte)115}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (-3647));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-115);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 1, (int) (byte)68);
      assertNotNull(string0);
      assertEquals("1:    <illegal opcode>\n2:    iconst_2\n3:    fstore_1\n4:    f2d\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-30), (byte)5, (byte)68, (byte) (-115)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Utility.getSignature("V0(/$e:");
      assertNotNull(string0);
      assertEquals("LV0(/$e:;", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-89);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-26), (-1792));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    jsr_w\t\t#967353257\n", string1);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-26), (byte) (-55), (byte)57, (byte) (-88), (byte) (-93), (byte) (-89)}, byteArray0);
      
      String string2 = Utility.format((byte) (-88), (byte) (-29), false, '%');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-88", string2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("java.lang.[]", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-83), (byte)7, (byte) (-57)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1949), (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -83
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(- X=P^_Umg?}j|8_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (- X=P^_Umg?}j|8_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-93);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-93));
      assertNotNull(string0);
      assertEquals("0:    if_icmpgt\t\t#0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(14);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(14, constantInteger0.getBytes());
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)64;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 223, 210);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-16));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      int int0 = 249;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 249, (int) (byte) (-88));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(5, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3782, 360);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-78), (int) (byte)119, true);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals("0:    dneg\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("double", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)111, (byte)117, (byte)98, (byte)108, (byte)101}, byteArray0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), 71);
      assertNotNull(string0);
      assertEquals("0:    isub\n1:    ddiv\n2:    lneg\n3:    fadd\n4:    idiv\n5:    lsub\n", string0);
      assertArrayEquals(new byte[] {(byte)100, (byte)111, (byte)117, (byte)98, (byte)108, (byte)101}, byteArray0);
      
      String string1 = Utility.accessToString(233);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public static synchronized volatile transient", string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-99), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertEquals("ifgt\t\t#0", string0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-99), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-59), (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, 172);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantInteger constantInteger0 = new ConstantInteger((-379));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-379), constantInteger0.getBytes());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)87;
      byteArray0[3] = (byte)110;
      byteArray0[5] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte)87, (-379));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-102)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (-1808));
      assertNotNull(string0);
      assertEquals("0:    return\n1:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4192, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = Utility.decode("NFLn.C*,u", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)70, (byte)76, (byte)110, (byte)46, (byte)67, (byte)42, (byte)44, (byte)117}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 144, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)65;
      byteArray0[2] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)56, (byte)0, (byte)65}, byteArray0);
      
      short short0 = Constants.INVOKESUPER_QUICK;
      assertEquals((short)216, short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "GVxId6yk";
      String string1 = Utility.compactClassName("GVxId6yk");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GVxId6yk", string1);
      
      try { 
        Utility.typeOfSignature("GVxId6yk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GVxId6yk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-16), (byte) (-16)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 805, 805);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), 200);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    <illegal opcode>
         // 2:    dup2_x1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(32, 32);
      assertNotNull(constantMethodHandle0);
      assertEquals(32, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(32, constantMethodHandle0.getReferenceIndex());
      
      String string0 = Utility.classOrInterface(196);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "double";
      stringArray0[1] = "*Mu'Qiw[Gv[P]";
      stringArray0[2] = "class";
      stringArray0[3] = "*Mu'Qiw[Gv[P]";
      stringArray0[4] = "double";
      stringArray0[5] = "double";
      stringArray0[6] = "double";
      stringArray0[7] = "double";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("*Mu'Qiw[Gv[P]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Gv[P]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (int) (byte)127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-333), (int) (byte)28);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    iload_2\n", string1);
      assertArrayEquals(new byte[] {(byte)28}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(6, constantPool1.getLength());
      
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Attribute", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(6, constantPool2.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool2, (-3540), (-3540), false);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals("0:    ddiv\n1:    frem\n2:    dsub\n3:    iaload\n4:    ladd\n5:    irem\n6:    ladd\n7:    dadd\n8:    imul\n9:    lsub\n10:   iaload\n11:   fadd\n12:   dadd\n13:   lsub\n14:   idiv\n15:   iaload\n16:   dadd\n17:   idiv\n18:   ladd\n19:   drem\n20:   drem\n21:   fsub\n22:   lmul\n23:   idiv\n24:   lsub\n25:   iaload\n26:   lstore_2\n27:   ineg\n28:   ineg\n29:   frem\n30:   lmul\n31:   fadd\n32:   lneg\n33:   ineg\n34:   lsub\n", string0);
      assertEquals(6, constantPool2.getLength());
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-655), (int) (byte) (-77));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(5, constantPool1.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(5, constantPool2.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-71), (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.convertString(" methods:\n");
      assertNotNull(string0);
      assertEquals(" methods:\\n", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 728, (int) (byte) (-10));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      int int0 = 93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 991, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-76), (int) (byte) (-76));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-89), (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)24, (byte)80, (byte)74, (byte)25, (byte)25}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3043), (-1317), true);
      assertNotNull(string0);
      assertEquals("0:    dload\t\t%80\n2:    dstore_3\n3:    aload\t\t%25\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)24, (byte)80, (byte)74, (byte)25, (byte)25}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte) (-16);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, (-1758), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-70);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ", npairs = ";
      stringArray0[1] = ", npairs = ";
      stringArray0[2] = ", npairs = ";
      stringArray0[3] = "lload";
      stringArray0[4] = ", npairs = ";
      stringArray0[5] = "[O=F:_AC_R/IYRa(";
      stringArray0[6] = ", npairs = ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(", npairs = ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [O=F:_AC_R/IYRa(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2442, 2442);
      assertNotNull(constantMethodref0);
      assertEquals(2442, constantMethodref0.getClassIndex());
      assertEquals(2442, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      String string1 = constantMethodref0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("CONSTANT_Methodref[10](class_index = 2442, name_and_type_index = 2442)", string1);
      assertEquals(2442, constantMethodref0.getClassIndex());
      assertEquals(2442, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)90, (byte)41}, byteArray0);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3280), (-817));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    dup_x1\n1:    dload_3\n", string2);
      assertArrayEquals(new byte[] {(byte)90, (byte)41}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Pattern.quote("<illegal type>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\\Q<illegal type>\\E", string1);
      
      try { 
        Utility.typeOfSignature("4%TGl/9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4%TGl/9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(80, 80);
      assertNotNull(constantMethodHandle0);
      assertEquals(80, constantMethodHandle0.getReferenceIndex());
      assertEquals(80, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      
      Constant[] constantArray0 = new Constant[22];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(22, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(22, constantPool0.getLength());
      assertEquals(22, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("athrow", string1);
      assertEquals(22, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = Utility.decode("HV4n*alMO2", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)86, (byte)52, (byte)110, (byte)42, (byte)97, (byte)108, (byte)77, (byte)79, (byte)50}, byteArray0);
      
      String string1 = Utility.signatureToString("JHr8lD/J]@MI@~~yf");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)26;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, (-1873));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(6, constantPool1.getLength());
      
      String string0 = Utility.getSignature("ifnull");
      assertNotNull(string0);
      assertEquals("Lifnull;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool2.getLength());
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-21);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-21), (int) (byte) (-113));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    iconst_1\n1:    iconst_1\n2:    d2l\n3:    <illegal opcode>\n", string1);
      assertEquals(6, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte) (-113), (byte) (-21)}, byteArray0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockFile mockFile0 = new MockFile("Lifnull;");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("Lifnull;", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("Lifnull;", mockFile0.getName());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("Lifnull;", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("Lifnull;", mockFile0.getName());
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "0:    iconst_1\n1:    iconst_1\n2:    d2l\n3:    <illegal opcode>\n");
      assertNotNull(printStream0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("Lifnull;", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(63L, mockFile0.length());
      assertEquals("Lifnull;", mockFile0.getName());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Utility.printArray(printStream0, (Object[]) constantArray0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("Lifnull;", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(100L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Lifnull;", mockFile0.getName());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)22, (byte)45, (byte)30, (byte)25, (byte) (-65), (byte) (-56), (byte)0, (byte)79}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byte byte0 = ObjectStreamConstants.TC_REFERENCE;
      assertEquals((byte)113, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only element values of type array can be built with this ctor - type specified: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = 185;
      String string0 = Utility.classOrInterface(185);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-16);
      byteArray0[3] = (byte) (-86);
      byteArray0[5] = (byte) (-16);
      int int1 = 1333;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1333, (int) (byte) (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("The magic number must contain at least one byte", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$85", string1);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("i2l", string2);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, 5356);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2048, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, 2083);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-819), (-4274));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_acmpne\t\t#9774
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      String string0 = constantPool1.toString();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-109), (int) (byte) (-109));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    i2s\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string1);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "'";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2645, (int) (byte) (-11));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.getSignature(":");
      assertNotNull(string0);
      assertEquals("L:;", string0);
      
      byte[] byteArray0 = Utility.decode(":", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 30, 30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      byte[] byteArray0 = Utility.decode("Lfstore_2;V", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.signatureToString("T;c&/ZE)lN)}3u");
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      assertEquals((byte)125, byte0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)2;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1926), (int) (byte)77);
      assertNotNull(string0);
      assertEquals("0:    lstore_2\n1:    astore_2\n2:    d2f\n3:    dload_3\n4:    iconst_m1\n", string0);
      assertArrayEquals(new byte[] {(byte)65, (byte)77, (byte) (-112), (byte)41, (byte)2}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    lstore_2\n1:    astore_2\n2:    d2f\n3:    dload_3\n4:    iconst_m1\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    lstore_2
         // 1:    astore_2
         // 2:    d2f
         // 3:    dload_3
         // 4:    iconst_m1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZI.eQgRF(Sj");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6mF{/OIvm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6mF{/OIvm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)107;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2265), (int) (byte)107);
      assertNotNull(string0);
      assertEquals("0:    dmul\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)19;
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.signatureToString("K0EaP')ESt%&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K0EaP')ESt%&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(1, constantPool2.getLength());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)3, (int) (byte)3);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertNotNull(string0);
      assertEquals("3:    lload_0\n4:    lload_0\n", string0);
      assertEquals(1, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)30, (byte)3, (byte)3, (byte)30, (byte)30}, byteArray0);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(14);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(14, constantInteger0.getBytes());
      
      constantArray0[0] = (Constant) constantInteger0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)15, (byte)117, (byte)91, (byte)7}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, (int) (byte)15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      String string0 = constantPool1.toString();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool1, constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte) (-117));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    f2i\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string1);
      assertEquals(1, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-73);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";&MOU-w>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;&MOU-w>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-124);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-245), (int) (byte)107);
      assertNotNull(string0);
      assertEquals("0:    dmul\n1:    fconst_0\n2:    dmul\n3:    iinc\t\t%0\t0\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), (int) (byte) (-126));
      assertNotNull(string0);
      assertEquals("0:    ixor\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string0);
      assertEquals(4, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = ObjectStreamConstants.TC_PROXYCLASSDESC;
      assertEquals((byte)125, byte0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Utility.getSignature("V0(/$e:");
      assertNotNull(string0);
      assertEquals("LV0(/$e:;", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("MrFI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MrFI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67), (byte) (-67)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
