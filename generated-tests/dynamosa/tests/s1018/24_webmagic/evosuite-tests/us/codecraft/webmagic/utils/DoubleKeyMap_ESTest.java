/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 03:57:51 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>> hashMap0 = new HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>>();
      DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>>((Map<Object, Map<Map<Object, Object>, Map<String, Object>>>) null);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put((Object) hashMap0, (Map<Object, Object>) null, (Map<String, Object>) hashMap1);
      Map<String, Object> map0 = doubleKeyMap0.remove((Object) hashMap1, (Map<Object, Object>) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<String, String>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<String, String>, Map<String, Integer>>();
      DoubleKeyMap<HashMap<String, String>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, Integer>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      Map<String, Integer> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<Object, Object, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, Integer>>();
      Map<Object, Map<Map<Object, Object>, Map<String, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<Object, Integer>>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      doubleKeyMap1.put((Object) hashMap0, "", (Map<Object, Integer>) hashMap1);
      Map<String, Map<Object, Integer>> map1 = doubleKeyMap1.remove((Object) map0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "", (Object) "");
      Map<Object, Object> map0 = doubleKeyMap0.get("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null);
      DoubleKeyMap<Object, String, Map<Object, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<Object, Integer>>();
      Map<String, Map<Object, Integer>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, HashMap<Object, Integer>, Integer>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = doubleKeyMap1.put("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) "us.codecraft.webmagic.utils.DoubleKeyMap", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer((-1040));
      Object object1 = doubleKeyMap0.put("", object0, (Object) integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>> hashMap0 = new HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>>();
      DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      Map<String, Object> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Map<Object, Object>) hashMap2, (Map<String, Object>) hashMap1);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Map<Integer, String>> hashMap0 = new HashMap<String, Map<Integer, String>>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(hashMap0);
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.get((Object) null, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get(object0, "");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, HashMap<Object, Integer>, Integer>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>> hashMap0 = new HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>>();
      DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<Object, Object>) null, (Map<String, Object>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, Map<HashMap<Map<Object, Integer>, Integer>, String>> hashMap0 = new HashMap<Object, Map<HashMap<Map<Object, Integer>, Integer>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Map<Object, Integer>, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Map<Object, Integer>, Integer>, String>(hashMap0, class0);
      HashMap<Map<Object, Integer>, Integer> hashMap1 = new HashMap<Map<Object, Integer>, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, hashMap1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Map<Map<Integer, Object>, Object>> hashMap0 = new HashMap<String, Map<Map<Integer, Object>, Object>>();
      DoubleKeyMap<String, Map<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, Object>, Object>(hashMap0);
      Set<Map.Entry<String, Map<Map<Integer, Object>, Object>>> set0 = (Set<Map.Entry<String, Map<Map<Integer, Object>, Object>>>)hashMap0.entrySet();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      hashMap1.put(integer0, set0);
      doubleKeyMap0.put("vq%Rr/M5<A.f", (Map<Integer, Object>) hashMap1, (Object) "vq%Rr/M5<A.f");
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, Integer>, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, Integer>, Integer>();
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.get(hashMap1, hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Integer>, Map<Object, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Integer>, Map<Object, Integer>>((Map<Object, Map<Map<Object, Integer>, Map<Object, Integer>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "", (Object) "");
      Integer integer0 = new Integer(905);
      Object object0 = doubleKeyMap0.remove("", (Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, String>();
      Integer integer0 = new Integer((-1783));
      String string0 = doubleKeyMap0.get(integer0, (HashMap<Object, Integer>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, String>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(integer0, hashMap0, "eNKzbm=IUXgJ)*x^0i");
      String string0 = doubleKeyMap0.get(integer0, hashMap0);
      assertEquals("eNKzbm=IUXgJ)*x^0i", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, String, Map<Object, Map<Map<Object, Integer>, Integer>>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, Map<Object, Map<Map<Object, Integer>, Integer>>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>> hashMap0 = new HashMap<Object, Map<Map<Object, Object>, Map<String, Object>>>();
      DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Object>, Map<String, Object>>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put((Object) null, (Map<Object, Object>) null, (Map<String, Object>) hashMap1);
      doubleKeyMap0.remove((Object) null, (Map<Object, Object>) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap0.put("", (Object) "", (Object) "");
      Object object0 = doubleKeyMap0.put("", (Object) "", (Object) null);
      assertEquals("", object0);
  }
}
