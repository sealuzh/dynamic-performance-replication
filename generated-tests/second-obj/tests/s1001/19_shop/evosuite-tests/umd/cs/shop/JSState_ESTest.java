/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:18:50 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSListAxioms;
import umd.cs.shop.JSListLogicalAtoms;
import umd.cs.shop.JSListSubstitution;
import umd.cs.shop.JSPlan;
import umd.cs.shop.JSPlanningDomain;
import umd.cs.shop.JSState;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTaskAtom;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSState_ESTest extends JSState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      JSState jSState0 = null;
      try {
        jSState0 = new JSState(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSState jSState1 = jSState0.apply(jSPlan0);
      assertNotSame(jSState1, jSState0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSState0.satisfies(jSPlan0, jSSubstitution0, jSListAxioms0);
      JSListSubstitution jSListSubstitution0 = jSState0.satisfiesAll(jSPlan0, jSSubstitution2, jSListAxioms0);
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals(1, jSListSubstitution0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSPlan jSPlan0 = new JSPlan();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSPlan0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      jSState0.remove((Object) null);
      JSListLogicalAtoms jSListLogicalAtoms0 = jSState0.applySubstitutionListLogicalAtoms(jSSubstitution0);
      jSListLogicalAtoms0.add((Object) ":");
      jSState0.addElementsToState(jSListLogicalAtoms0);
      JSPlan jSPlan1 = new JSPlan();
      jSState0.addElementsToState(jSPlan1);
      assertEquals("[:]", jSState0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JSState jSState0 = new JSState();
      Comparator<InputStream> comparator0 = (Comparator<InputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSState0.sort(comparator0);
      JSPlan jSPlan0 = new JSPlan();
      Object object0 = new Object();
      jSPlan0.add(object0);
      jSState0.addElementsToState(jSPlan0);
      jSState0.addElementsToState(jSPlan0);
      JSListLogicalAtoms jSListLogicalAtoms0 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      // Undeclared exception!
      try { 
        jSState0.satisfiesAll((JSListLogicalAtoms) null, jSSubstitution0, jSListAxioms0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSState", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution0);
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      Object object0 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTaskAtom0.add((Object) jSSubstitution1);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      jSPlanningDomain0.axioms();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSState0.listIterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object1 = new Object();
      jSSubstitution1.removeElement(object1);
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSJshopVars.flagLevel = 16;
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertEquals(10, jSSubstitution2.capacity());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JSState jSState0 = new JSState();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSListAxioms jSListAxioms0 = new JSListAxioms();
      JSListAxioms jSListAxioms1 = new JSListAxioms();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      JSTaskAtom jSTaskAtom0 = new JSTaskAtom();
      Object object1 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTaskAtom0.add((Object) jSSubstitution0);
      SystemInUtil.addInputLine(";");
      jSSubstitution0.addAll((Collection) jSSubstitution1);
      JSTaskAtom jSTaskAtom1 = new JSTaskAtom();
      jSSubstitution0.addElements(jSSubstitution1);
      JSPlanningDomain jSPlanningDomain0 = new JSPlanningDomain();
      jSPlanningDomain0.axioms();
      jSState0.add((Object) jSTaskAtom1);
      jSState0.satisfiesTAm(jSTaskAtom0, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
  }
}
