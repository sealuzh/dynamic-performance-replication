/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 11:55:50 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Member;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.AnnotationDefault;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.BootstrapMethod;
import org.apache.bcel.classfile.BootstrapMethods;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.ExceptionTable;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.InnerClass;
import org.apache.bcel.classfile.InnerClasses;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LineNumberTable;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.Unknown;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "\"y8";
      try { 
        Utility.typeOfSignature("\"y8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"y8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.accessToString(2291, false);
      Utility.setBit(2291, 2291);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.signatureToString("StackMap", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "CONSTANT_Double", "short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "Z!\\Z\\";
      Utility.typeOfSignature("Z!Z");
      try { 
        Utility.typeOfMethodSignature("Z!Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z!Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.replace("w4-Z'&-k03j7SG\"x", "w4-Z'&-k03j7SG\"x", "KXCIJQ5BbKX");
      assertEquals("KXCIJQ5BbKX", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte) (-86);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      Utility.compactClassName("", false);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = Utility.searchOpcode("iload_3");
      assertEquals((short)29, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-8);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1699), (int) (byte) (-8));
      Utility.searchOpcode("if_icmpne");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "0:    dload_3\n1:    <illegal opcode>\n2:    nop\n3:    iconst_4\n4:    <illegal opcode>\n5:    l2f\n6:    <illegal opcode>\n";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    dload_3\n1:    <illegal opcode>\n2:    nop\n3:    iconst_4\n4:    <illegal opcode>\n5:    l2f\n6:    <illegal opcode>\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dload_3
         // 1:    <illegal opcode>
         // 2:    nop
         // 3:    iconst_4
         // 4:    <illegal opcode>
         // 5:    l2f
         // 6:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Double;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-57));
      try { 
        Utility.typeOfSignature("0:    ifnonnull\t\t#0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ifnonnull\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      Utility.format(0, 0, false, 'I');
      String string0 = "impdep1";
      String string1 = "\t\t";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep1", "\t\t", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isSet(0, 0);
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "9:Z|KJI;6", "9:Z|KJI;6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "ZMaV*a.WHAorHH*C\\";
      Utility.getSignature("ZMaV*a.WHAorHH*C");
      String string1 = "iinc";
      String string2 = "rT_Mr?U,";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iinc", "rT_Mr?U,", "ZMaV*a.WHAorHH*C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iinc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[PqZxP{%N~#}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [PqZxP{%N~#}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 2049;
      Utility.clearBit(2049, 0);
      String string0 = "getfield";
      try { 
        Utility.methodSignatureArgumentTypes("getfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = Utility.clearBit((-1149), (-1149));
      assertEquals((-1149), int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.compactClassName("lushr");
      assertEquals("lushr", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lushr";
      stringArray0[1] = "lushr";
      stringArray0[2] = "lushr";
      stringArray0[3] = "";
      stringArray0[4] = "lushr";
      stringArray0[5] = "lushr";
      stringArray0[6] = "lushr";
      String string1 = Utility.methodTypeToSignature("lushr", stringArray0);
      assertEquals("(Llushr;Llushr;Llushr;L;Llushr;Llushr;Llushr;)Llushr;", string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = Utility.format(37, 126, true, '\"');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"}", string1);
      
      String string2 = Utility.printArray(objectArray0, false);
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String string3 = Utility.methodTypeToSignature("37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", stringArray0);
      assertEquals("()L37\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\";", string3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "O'^8;iw:N";
      try { 
        Utility.methodSignatureReturnType("O'^8;iw:N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'^8;iw:N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Synthetic attribute with length > 0", true);
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("37", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.getSignature("V");
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("", false);
      Utility.classOrInterface(1441);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "V";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "V";
      objectArray0[6] = (Object) "V";
      Utility.printArray(objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.classOrInterface(55);
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.accessToString(0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-54);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b4$A$d2K$A$ca$A$A$A", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-46), true);
      assertEquals("private final volatile transient native abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b4$A$d2K$A$ca$f7T$A", string0);
      
      String string1 = Utility.convertString("I.vS[?");
      assertEquals("I.vS[?", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.compactClassName("implements\t\t");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "implements\t\t";
      stringArray0[1] = "implements\t\t";
      stringArray0[2] = "implements\t\t";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("implements\t\t", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-8);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1699), (int) (byte) (-8));
      assertEquals("0:    dload_3\n1:    <illegal opcode>\n2:    nop\n3:    iconst_4\n4:    <illegal opcode>\n5:    l2f\n6:    <illegal opcode>\n", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "if_icmpne";
      stringArray0[4] = "";
      stringArray0[5] = "pe=> Rq=";
      String string1 = Utility.methodTypeToSignature("if_icmpne", stringArray0);
      assertEquals("(L;L;L;Lif_icmpne;L;Lpe=>;)Lif_icmpne;", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.accessToString((-1099), true);
      assertEquals("public protected final transient native strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.signatureToString("StackMap", false);
      String string0 = "CONSTANT_Double";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "CONSTANT_Double", "short", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4`akN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4`akN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.signatureToString("ZMaV*a.WHAorHH*C", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lreturn", "lreturn", "boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)79;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("7$c4O", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.signatureToString("StackMap", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "short";
      stringArray0[2] = "CONSTANT_Double";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("short", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("9T!Xn`qs?3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9T!Xn`qs?3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.compactClassName("IP&F=$Im1>{[|Hv");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("IP&F=$Im1>{[|Hv", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[|Hv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("*])[z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.typeOfSignature("V#<Qje");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V#<Qje", "byte", "anewarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V#<Qje
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "#zVs}n~3uC.3E#;@";
      try { 
        Utility.typeOfSignature("#zVs}n~3uC.3E#;@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #zVs}n~3uC.3E#;@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X_X|7,m*)G;;!]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X_X|7,m*)G;;!]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.typeOfSignature("I#");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dcmpl";
      stringArray0[1] = "I#";
      stringArray0[2] = "I#";
      stringArray0[3] = "I#";
      stringArray0[4] = "I#";
      stringArray0[5] = "dcmpl";
      stringArray0[6] = "I#";
      stringArray0[7] = "I#";
      stringArray0[8] = "I#";
      Utility.methodTypeToSignature("dcmpl", stringArray0);
      Utility.replace("<Rke{", "I#", "I#");
      MockFile mockFile0 = new MockFile((File) null, "I#");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "dcmpl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"dcmpl\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.signatureToString("ZMaV*a.WHAorHH*C", false);
      try { 
        Utility.typeOfSignature("%fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %fo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "8k;n =I";
      try { 
        Utility.typeOfSignature("8k;n =I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8k;n =I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = ".4ma.H";
      stringArray0[3] = "Ama";
      stringArray0[4] = ".4ma.H";
      stringArray0[5] = "fcmpg";
      stringArray0[6] = ".4ma.H";
      stringArray0[7] = " Im}sCRg^BAw'";
      stringArray0[8] = "$l$8b$I$A$A$A$A$A$A$A";
      String string1 = Utility.methodTypeToSignature(".4ma.H", stringArray0);
      assertEquals("(L$l$8b$I$A$A$A$A$A$A$A;L$l$8b$I$A$A$A$A$A$A$A;L/4ma/H;LAma;L/4ma/H;Lfcmpg;L/4ma/H;LIm}sCRg^BAw';L$l$8b$I$A$A$A$A$A$A$A;)L/4ma/H;", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.typeOfSignature("SyntheticRepository could not load ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("W`Rc-G-UzV}_", "v- SiD)kRk", "$SP||mM2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W`Rc-G-UzV}_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.SimpleElementValue class does not know how to stringify type ");
      assertEquals("SimpleElementValue class does not know how to stringify type ", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)94;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)94;
      byteArray1[2] = (byte)90;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup_x1", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('d');
      assertFalse(boolean1 == boolean0);
      
      String string2 = Utility.accessToString(40);
      assertEquals("static synchronized", string2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("W1?+?sn]^lJi0R9", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W1?+?sn]^lJi0R9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Pattern is missing");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pattern is missing
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G 1l@!>e\"E(3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G 1l@!>e\"E(3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "!yS\\bV";
      try { 
        Utility.typeOfSignature("!yS\bV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: yS\bV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The prefix must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.compactClassName("Synthetic attribute with length > 0");
      assertEquals("Synthetic attribute with length > 0", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore\t\t%90", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PVcuq s2drBJK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PVcuq s2drBJK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      try { 
        Utility.typeOfSignature("H#n =%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H#n =%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U,D?5x$qN\"!2V`M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U,D?5x$qN\"!2V`M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C)\t");
      assertEquals((byte)5, byte0);
      
      byte byte1 = Constants.ATTR_LINE_NUMBER_TABLE;
      short short0 = Utility.searchOpcode("$VALUES");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.methodSignatureReturnType("Synthetic attribute with length > 0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("short");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Synthetic attribute with length > 0");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "short";
      objectArray0[1] = (Object) printStream0;
      Utility.printArray(printStream0, objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "/\t";
      try { 
        Utility.typeOfSignature("/\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$values");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $values
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Deprecated attribute with length > 0");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.signatureToString("Deprecated attribute with length > 0", false);
      assertEquals("double", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ab(/!Nobg}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ab(/!Nobg}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "CONSTANT_Double";
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = "breakpoint";
      Utility.signatureToString("CONSTANT_Double");
      boolean boolean0 = false;
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.replace("Q|4)RJhnQ{QnpD", "Q|4)RJhnQ{QnpD", "slvi( ]Y:r8;=/O<");
      assertEquals("slvi( ]Y:r8;=/O<", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((byte)63);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".Q/!b#-X;BP^S>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Q/!b#-X;BP^S>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.typeOfSignature("Deprecated attribute with length > 0");
      Utility.signatureToString("Deprecated attribute with length > 0", false);
      try { 
        Utility.typeOfSignature("OJ,\"v;325gTD%Fn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OJ,\"v;325gTD%Fn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("Limplements;V", false);
      try { 
        Utility.typeOfSignature("implements");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: implements
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Double;
      String string0 = Utility.methodSignatureReturnType("Lputfield;V", true);
      String string1 = Utility.convertString("IKmBB@92CPrm/*");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LB-0@]Zg]|Qq|5Pq*6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LB-0@]Zg]|Qq|5Pq*6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = Utility.fillup("-C3cS-*dJC#&'7A,W", 71, false, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN-C3cS-*dJC#&'7A,W", string0);
      
      Utility.methodSignatureReturnType("V\"3+5=*+ 4");
      String string1 = Utility.classOrInterface(71);
      assertEquals("class", string1);
      
      Utility.signatureToString("V\"3+5=*+ 4");
      String string2 = Utility.accessToString(71);
      assertEquals("public private protected volatile", string2);
      
      short short0 = Utility.searchOpcode("]XzHcRX");
      assertEquals((short) (-1), short0);
      
      Utility.methodSignatureReturnType("V\"3+5=*+ 4");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)82;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "[;kq";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("[;kq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;kq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*_[T^BjWkb.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _[T^BjWkb.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = ";K:p(As<";
      try { 
        Utility.typeOfSignature(";K:p(As<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;K:p(As<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Utility.typeOfSignature("JW.n xb//~%2cU");
      String string0 = "double";
      String string1 = "+Kxkn";
      boolean boolean0 = false;
      int int0 = 95;
      int int1 = 2107;
      LocalVariable[] localVariableArray0 = new LocalVariable[8];
      int int2 = 2;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JW.n xb//~%2cU", "'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"'\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YvV2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YvV2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(1913);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref1;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("Q|4)RJhnQ{QnpD", "Q|4)RJhnQ{QnpD", "slvi( ]Y:r8;=/O<");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)0;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "$g$u$f0RJ$3f$tM$A";
      objectArray0[1] = (Object) "$g$u$f0RJ$3f$tM$A";
      objectArray0[2] = (Object) "Q|4)RJhnQ{QnpD";
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "slvi( ]Y:r8;=/O<";
      Utility.printArray(objectArray0, true);
      Utility.decode("$g$u$f0RJ$3f$tM$A", false);
      byte[] byteArray1 = Utility.decode("~D28O#zo3?d(]aE", false);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.decode("\t$A$A$A$A$A$3f$jJ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("iinc\t\t%132\t-124", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 197, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.compactClassName("Synthetic attribute with length > 0");
      assertEquals("Synthetic attribute with length > 0", string0);
      
      String string1 = Utility.replace("\t(wide)", "\t(wide)", "H>U?!LnkAUG7");
      assertEquals("H>U?!LnkAUG7", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string2 = Utility.convertString("`6k+)'Pwpfh_u[");
      assertEquals("`6k+)\\'Pwpfh_u[", string2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iflt\t\t#1800", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.compactClassName("Synthetic attribute with length > 0");
      assertEquals("Synthetic attribute with length > 0", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodTypeToSignature(")9$e`)^|&4[BJMz9F]", (String[]) null);
      assertEquals("()[L)9$e`)^|&4;", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.compactClassName("Synthetic attribute with length > 0");
      assertEquals("Synthetic attribute with length > 0", string0);
      
      byte[] byteArray0 = new byte[2];
      String string1 = Utility.methodTypeToSignature(")9$e`)^|&4[BJMz9F]", (String[]) null);
      assertEquals("()[L)9$e`)^|&4;", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)124, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("Limplements;V", false);
      Utility.typeOfSignature("Limplements;V");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "implements";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "Limplements;V";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "Limplements;V";
      objectArray0[6] = (Object) "implements";
      objectArray0[7] = (Object) "Limplements;V";
      objectArray0[8] = (Object) "Limplements;V";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2486);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ")\t";
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)124;
      byteArray0[5] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte)124);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = ")\t";
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)124;
      byteArray0[5] = (byte) (-107);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte)124);
      // Undeclared exception!
      try { 
        Utility.replace("z;Cms", (String) null, "\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("Limplements;V", false);
      Utility.typeOfSignature("Limplements;V");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "implements";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "Limplements;V";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      try { 
        Utility.typeOfSignature("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2l", string0);
      
      String string1 = Utility.getSignature("long");
      assertEquals("J", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 166);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("U*$<w3Pz{uq1uk3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U*$<w3Pz{uq1uk3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QU|M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QU|M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore\t\t%102", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("Q|4)RJhnQ{QnpD", "Q|4)RJhnQ{QnpD", "slvi( ]Y:r8;=/O<");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      try { 
        Utility.typeOfSignature("EXbf}#bTY^)Aau>-Qm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EXbf}#bTY^)Aau>-Qm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("MQ0lt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MQ0lt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = ")\t";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(dataInputStream0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref1;
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = Utility.decode("interface", false);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.convertString("@N#V");
      try { 
        Utility.typeOfSignature("@N#V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @N#V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)58;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop", string0);
      
      boolean boolean0 = Utility.isSet((byte)12, 198);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte) (-108));
      try { 
        Utility.methodSignatureReturnType("2PuSO", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2PuSO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.signatureToString("Limplements;V", false);
      assertEquals("implements", string0);
      
      byte byte0 = Utility.typeOfSignature("Limplements;V");
      assertEquals((byte)14, byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "implements";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "Limplements;V";
      Object object0 = new Object();
      objectArray0[3] = object0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)79;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("iastore", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodSignatureReturnType("FP7tFgPb[b>Sl0K=", true);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-34);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("]D3;tZ0Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]D3;tZ0Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)114;
      byteArray0[5] = (byte) (-107);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte)114);
      try { 
        Utility.methodSignatureReturnType("oGu/%GW> h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `oGu/%GW> h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      MockFile mockFile0 = new MockFile("dup2", "java.lang.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((long) (byte)92);
      mockPrintWriter0.format("java.lang.", (Object[]) null);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      Utility.classOrInterface((byte)92);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("dup2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.convertString("@N#V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)91;
      byte byte0 = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("@N#V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@N#V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1916), (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Ta=%rS7y>*K|^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ta=%rS7y>*K|^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("i2d", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tt|{Rw{\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tt|{Rw{\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      short short0 = Constants.IDIV;
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)17);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte) (-53));
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals(3, byteSequence1.getIndex());
      assertEquals("sipush\t\t-13551", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (int) (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.convertString("@N#V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (int) (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.typeOfSignature("Deprecated attribute with length > 0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-121);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-121), (int) (byte)97);
      try { 
        Utility.methodSignatureReturnType("lreturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = (byte)48;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H@]&F88QK|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H@]&F88QK|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "4KN|VK$'5T@s";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte) (-73));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "O'^8;iw:N";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, (-461));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)114;
      byteArray0[5] = (byte) (-107);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte)114);
      try { 
        Utility.typeOfSignature("&y>rNV*':aYfd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &y>rNV*':aYfd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 20, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Unknown");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Unknown'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, 1484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "Deprecated attribute with length > 0";
      Utility.typeOfSignature("Deprecated attribute with length > 0");
      try { 
        Utility.typeOfSignature("2xTE#@@um?}FA-IB1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2xTE#@@um?}FA-IB1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)114;
      byteArray0[5] = (byte) (-107);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte)114);
      assertEquals("0:    nop\n1:    lconst_0\n2:    iconst_2\n3:    frem\n4:    nop\n5:    fcmpl\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    nop\n1:    lconst_0\n2:    iconst_2\n3:    frem\n4:    nop\n5:    fcmpl\n6:    nop\n7:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.convertString("@N#V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (int) (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-34);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("Ab(/!Nobg}", stringArray0);
      assertEquals("()LAb(/!Nobg};", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("()LAb(/!Nobg};");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byte byte0 = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 52, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "\\r";
      // Undeclared exception!
      try { 
        Utility.signatureToString("\r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Utility.getSignature("void");
      Utility.convertString("void");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1W3%Q,F}-uGbHs ");
      Utility.methodSignatureReturnType("J}i-!n$G]:Jm", true);
      Utility.searchOpcode("void");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = (Object) "1W3%Q,F}-uGbHs ";
      objectArray0[2] = (Object) "%i8J^";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "1W3%Q,F}-uGbHs ";
      objectArray0[5] = (Object) "J}i-!n$G]:Jm";
      objectArray0[6] = (Object) "long";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "void";
      Utility.printArray(objectArray0, true, true);
      Utility.classOrInterface(62);
      String string1 = Utility.replace("J}i-!n$G]:Jm", "I11w6Q?sd\u0018~k-", "J=w]w5ASf9");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "RuntimeInvisibleAnnotations";
      try { 
        Utility.typeOfSignature("RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.signatureToString("Invalid signature: ", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-109);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), 32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Member.DECLARED;
      try { 
        Utility.typeOfMethodSignature("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1Kt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1Kt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.convertString("@N#V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)57;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)86;
      try { 
        Utility.typeOfSignature("=IswT=J~' 6:_Uqm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =IswT=J~' 6:_Uqm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-8);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1699), (int) (byte) (-8));
      assertEquals("0:    dload_3\n1:    <illegal opcode>\n2:    nop\n3:    iconst_4\n4:    <illegal opcode>\n5:    iand\n6:    <illegal opcode>\n", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "if_icmpne";
      stringArray0[4] = "";
      stringArray0[5] = "pe=> Rq=";
      String string1 = Utility.methodTypeToSignature("if_icmpne", stringArray0);
      assertEquals("(L;L;L;Lif_icmpne;L;Lpe=>;)Lif_icmpne;", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[0] = (byte)73;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)28;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.isSet((-80), (-80));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)112;
      byte byte0 = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-12);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, 178, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2722, (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-69), (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.convertString("@N#V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)91;
      Utility.typeOfSignature("B>_DPhh.");
      String string0 = "Warning: Padding byte != 0 in ";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)111;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2722, (-910));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 65. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-41);
      byteArray0[6] = (byte)126;
      byteArray0[6] = (byte) (-8);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1699), (int) (byte) (-8));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)67;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-121);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-121), (int) (byte)94);
      assertEquals("0:    dup2_x2\n1:    fstore_0\n2:    i2d\n3:    nop\n4:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (int) (byte) (-8));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    <illegal opcode>
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)18, 97);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      Constant constant0 = constantFieldref0.copy();
      constantArray0[1] = constant0;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)111, 6889);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 18. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-41);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte) (-41);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 171, (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnull\t\t#-17477", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "'";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)15;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(47);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)15, (byte)15);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2624), 1080);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 11205. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), 223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-66));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Member.DECLARED;
      try { 
        Utility.typeOfMethodSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[6] = (byte) (-127);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1803), (-1370));
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Unknown", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Unknown'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-2098);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)46;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)44, (int) (byte) (-50));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)126;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (int) (byte) (-8));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    dmul\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    iand\n", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-41);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, (int) (byte) (-41));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "'";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-66));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YGlZo-&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YGlZo-&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), (int) (byte)117);
      assertEquals("0:    swap\n1:    <illegal opcode>\n2:    lneg\n", string0);
      
      String string1 = Utility.getSignature("D+*#{V}zS?+'OM(");
      assertEquals("LD+*#{V}zS?+'OM(;", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte)89;
      byteArray1[4] = (byte)89;
      byteArray1[5] = (byte)89;
      byteArray1[6] = (byte) (-85);
      byteArray1[7] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-796), 1362);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpg
         // 1:    dup
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-74);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-66));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    arraylength\n", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.convertString("'");
      assertEquals("\\'", string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)61;
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte)122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)117;
      try { 
        Utility.typeOfSignature("N- [cT}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N- [cT}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-120);
      String string0 = "N- [cT}";
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      try { 
        Utility.methodSignatureReturnType("N- [cT}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N- [cT}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-28);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte)96;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)96;
      byteArray2[1] = (byte) (-104);
      byteArray2[2] = (byte) (-104);
      byteArray2[3] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 22, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "N- [cT}";
      try { 
        Utility.typeOfSignature("+|3hqms6+.Q=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |3hqms6+.Q=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)9;
      try { 
        Utility.typeOfSignature("M7+m7MCsMXe4br73");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M7+m7MCsMXe4br73
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.typeOfSignature("[qB(P<=@");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-104);
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte)96;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1599, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.convertString("G 1l@!>e\"E(3");
      try { 
        Utility.methodSignatureReturnType("interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-74);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-115);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-115));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureArgumentTypes("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Utility.signatureToString("C3PY5Qne");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-100);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-20), 2159, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    dstore\t\t%74
         // 3:    drem
         // 4:    dreturn
         // 5:    dup2_x2
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte)115;
      byteArray1[4] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 165, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9*%C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9*%C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "if_icmple\t\t#-20481";
      objectArray0[1] = (Object) "if_icmple\t\t#-20481";
      objectArray0[2] = (Object) byteArray0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "if_icmple\t\t#-20481";
      objectArray0[5] = (Object) "if_icmple\t\t#-20481";
      objectArray0[6] = (Object) byteArray0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6 .VH0M]`5~/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6 .VH0M]`5~/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = Constants.ITEM_NAMES;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-75);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 284, 1970);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "5Io";
      try { 
        Utility.typeOfSignature("5Io");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5Io
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-60);
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart(',');
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)54;
      Utility.equals(byteArray1, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = Utility.signatureToString("Bz`", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-114);
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart(',');
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.java.lang.G{?");
      assertEquals("java.lang.java.lang.G{?", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-125);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte) (-16), true);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    lxor\n", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)72;
      byte byte0 = (byte) (-11);
      byteArray0[2] = (byte) (-11);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 93;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-11), 93);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-11), 2, false);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.compactClassName("boolean", "boolean", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XT&s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XT&s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<a\">~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<a\">~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_NameAndType;
      Utility.getSignature("\t<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X67*^ZO87");
      Utility.typeOfSignature("L<;");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("L<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (-2937), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)41;
      byteArray0[3] = (byte) (-72);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-112);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-51));
      String string0 = "tzN!Uh>";
      try { 
        Utility.methodSignatureArgumentTypes("tzN!Uh>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tzN!Uh>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-74);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)36;
      byteArray0[3] = (byte) (-72);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-120);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-51));
      String string0 = "tzN!Uh>";
      try { 
        Utility.methodSignatureArgumentTypes("tzN!Uh>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tzN!Uh>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-74);
      byteArray0[1] = (byte) (-20);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-66));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    <illegal opcode>\n2:    nop\n");
      assertEquals("0:    nop\\n1:    <illegal opcode>\\n2:    nop\\n", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 16384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 216);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "boolean");
      String string0 = "RTG6,Ge=433(";
      byte[] byteArray0 = Utility.decode("RTG6,Ge=433(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 216, 216);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.methodSignatureReturnType("Deprecated attribute with length > 0");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-918));
      assertEquals("0:    fdiv\n1:    nop\n2:    caload\n3:    impdep1\n4:    dstore_1\n5:    ifnonnull\t\t#-22513\n8:    lconst_1\n", string0);
      
      byte byte0 = Utility.typeOfSignature("FnVx4?HEEUA%");
      assertEquals((byte)6, byte0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("6e 00 34 fe 48 c7 a8 0a 0a", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)60;
      byteArray0[5] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, 175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-n#C/_W`OZj%jYPT");
      try { 
        Utility.typeOfSignature("-n#C/_W`OZj%jYPT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -n#C/_W`OZj%jYPT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.DirectoryFileFilter");
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.DirectoryFileFilter", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-2885), (-2885));
      try { 
        Utility.typeOfSignature("org.apache.commons.io.filefilter.DirectoryFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.DirectoryFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_NameAndType;
      Utility.getSignature("\t<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      byte[] byteArray0 = Utility.decode("invokeinterface", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 322, (-910));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      Utility.getSignature("ldc2_w");
      int int0 = Member.DECLARED;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)44;
      byteArray1[6] = (byte) (-55);
      byteArray1[7] = (byte)44;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)44, (byte) (-55));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 59, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, (-250));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      byte[] byteArray0 = Utility.decode("\"3]gGumV2g0.]2bm^", false);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 1182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)59;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2994), 2798);
      assertEquals("0:    fload_3\n1:    aastore\n2:    ishr\n3:    <illegal opcode>\n4:    istore_1\n5:    dup_x2\n6:    istore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-77);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.signatureToString("Illegal type: ");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[3] = (byte) (-72);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-120);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte)37);
      try { 
        Utility.typeOfSignature("cnIoh:o&rOEnWV6h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cnIoh:o&rOEnWV6h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "monitorexit";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "monitorexit");
      String string1 = "\"3]gGumV2g0.]2b\\m^";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.DirectoryFileFilter");
      byte[] byteArray0 = Utility.decode(">T5EVhdW)3LNM%u$?K", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2885), (-4378));
      assertEquals("0:    istore_3\n1:    bastore\n2:    saload\n3:    fstore_2\n4:    sastore\n5:    imul\n6:    isub\n7:    pop\n8:    dload_3\n9:    baload\n10:   astore_1\n11:   astore_3\n12:   astore_2\n13:   fload_3\n14:   lneg\n15:   nop\n16:   astore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      int int0 = Utility.clearBit(69, (byte) (-128));
      assertEquals(68, int0);
      
      String string0 = Utility.format((byte) (-62), 36, false, '0');
      assertEquals("000000000000000000000000000000000-62", string0);
      
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-62);
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-62), 1392);
      assertEquals("0:    monitorenter\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string1);
      
      byte byte0 = ObjectStreamConstants.TC_NULL;
      boolean boolean0 = Utility.isSet(137, 2265);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#&#}5g !kI&l_3m", false);
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte) (-128));
      assertEquals("0:    fload_1\n1:    dload_0\n2:    fload_1\n3:    lushr\n4:    saload\n5:    dsub\n6:    lload_2\n7:    lload_3\n8:    dmul\n9:    dstore_2\n10:   dload_0\n11:   idiv\n12:   swap\n13:   baload\n14:   ldiv\n", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_NameAndType;
      Utility.getSignature("\t<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%m\"IE0Rg:305UirMO7I");
      byte[] byteArray0 = Utility.decode("%m\"IE0Rg:305UirMO7I", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t<");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte)12);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-34);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-384), 3555);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V:~xz wT");
      byte[] byteArray0 = Utility.decode("V:~xz wT", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-50), 1309);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshl
         // 1:    dastore
         // 2:    <illegal opcode>
         // 3:    ifne\t\t#26291
         // 6:    fload_1
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (");
      Utility.decode(" (", false);
      String string0 = "7@=~rPx7O&~i";
      try { 
        Utility.typeOfSignature("7@=~rPx7O&~i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7@=~rPx7O&~i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, (int) (byte)113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 162, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1324), (-3723));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_0
         // 1:    istore\t\t%9
         // 3:    dstore_0
         // 4:    iload_1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)46;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-8);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i2d");
      byte[] byteArray0 = Utility.decode("i2d", false);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "BootstrapMethods(", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 364, (-3235));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-127);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-698), (int) (byte)16);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("0:    dadd\n1:    bipush\t\t-3\n3:    <illegal opcode>\n4:    dadd\n5:    aload_3\n6:    lor\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dadd
         // 1:    bipush\t\t-3
         // 3:    <illegal opcode>
         // 4:    dadd
         // 5:    aload_3
         // 6:    lor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("i2d", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.convertString("i2d");
      Utility.isSet((-2341), 186);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (-1672));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("Q|4)RJhnQ{QnpD", "Q|4)RJhnQ{QnpD", "G<|{");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 73, (int) (byte)47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)49;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-30), (-349));
      assertEquals("0:    d2f\n1:    daload\n", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = "(descriptor_index = ";
      try { 
        Utility.methodSignatureArgumentTypes("(descriptor_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `descriptor_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), 1127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifge\t\t#-25444
         // 3:    ifge\t\t#12191
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 233, (int) (byte) (-74));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("Q|4)RJhnQ{QnpD", false);
      byte[] byteArray0 = new byte[27];
      byteArray0[5] = (byte)63;
      byte byte0 = (byte)29;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)45;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(dataInputStream0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)63, (int) (byte)29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (-3891));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1157), (-1157));
      byte[] byteArray1 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray1[0] = (byte) (-50);
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte)89;
      byteArray1[4] = (byte)69;
      byteArray1[5] = (byte) (-26);
      byteArray1[6] = (byte)86;
      byteArray1[7] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)69, (int) (byte) (-26));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.getSignature("Exceptions");
      Utility.signatureToString("LExceptions;");
      Utility.replace("Exceptions", "LExceptions;", "Exceptions");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-114);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte) (-114));
      assertEquals("0:    nop\n1:    nop\n2:    d2i\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2956, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(+Q", "*,fT)@nY", "(+Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
