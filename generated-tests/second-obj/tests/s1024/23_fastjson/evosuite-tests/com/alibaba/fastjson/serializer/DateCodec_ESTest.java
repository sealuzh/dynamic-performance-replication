/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:24:19 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.PropertyPreFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.ValueFilter;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.StringWriter;
import java.lang.reflect.Member;
import java.lang.reflect.Type;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4PK");
      Class<Double> class0 = Double.TYPE;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockHijrahDate0, (Object) mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Integer integer0 = new Integer(107);
      String string0 = dateCodec0.cast((DefaultJSONParser) null, (Type) null, (Object) integer0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig(32, false);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Calendar calendar0 = MockCalendar.getInstance();
      Long long0 = new Long((-271L));
      dateCodec0.write(jSONSerializer0, calendar0, long0, (Type) null, 32);
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeConfig) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2);
      Class<Integer> class0 = Integer.TYPE;
      dateCodec0.write(jSONSerializer0, (Object) null, mockGregorianCalendar0, class0, 2);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringWriter stringWriter0 = new StringWriter();
      SerializeConfig.getGlobalInstance();
      DateCodec dateCodec1 = DateCodec.instance;
      Locale locale0 = Locale.CHINA;
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Object object0 = dateCodec0.cast((DefaultJSONParser) null, (Type) class0, (Object) dateCodec0, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      StringWriter stringWriter0 = new StringWriter();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      TimeZone.getDefault();
      ZoneInfo zoneInfo0 = (ZoneInfo)jSONSerializer0.timeZone;
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 1);
      LocalDate localDate0 = MockLocalDate.now();
      dateCodec0.write(jSONSerializer0, mockDate0, localDate0, class0, 1);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSON.DEFAULT_TYPE_KEY = "RG#/c#UmH56@$?'.x u";
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("RG#/c#UmH56@$?'.x u");
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "RG#/c#UmH56@$?'.x u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"RG#/c#UmH56@$?'.x u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSON.DEFAULT_TYPE_KEY = "RG#/c#UmH56@$?'.x &u";
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("RG#/c#UmH56@$?'.x &u");
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "RG#/c#UmH56@$?'.x &u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"RG#/c#UmH56@$?'.x &u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateCodec dateCodec1 = DateCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";6*ZYoc2' $zDO", parserConfig0, 34);
      Float float0 = new Float((double) 34);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) serializerFeature0, (Object) "/Date(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      serializeConfig0.getObjectWriter(class0);
      TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.JAPAN;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<Long> class1 = Long.class;
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      JavaBeanInfo.getBuilderClass(class2, (JSONType) null);
      DateCodec dateCodec1 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      Float float0 = new Float((-1.0));
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01t00:00:00+08:00", parserConfig0, (-148205218));
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("ql.N`M:.F#,?\"k", parserConfig0, (-148205218));
      SerializerFeature serializerFeature1 = SerializerFeature.IgnoreErrorGetter;
      Object object0 = dateCodec0.cast(defaultJSONParser1, (Type) class1, (Object) "ql.N`M:.F#,?\"k", (Object) "0001-01-01t00:00:00+08:00");
      assertNull(object0);
      
      System.setCurrentTimeMillis(570L);
      System.setCurrentTimeMillis(0L);
      int int0 = dateCodec1.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      jSONSerializer0.writeNull();
      int int0 = Calendar.HOUR_OF_DAY;
      Locale.getISOLanguages();
      boolean boolean0 = jSONSerializer0.out.writeDirect;
      SerializeWriter serializeWriter1 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer1 = new JSONSerializer(jSONSerializer0.out);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Byte byte0 = new Byte((byte)84);
      Locale locale0 = Locale.US;
      int int1 = Member.PUBLIC;
      dateCodec0.write(jSONSerializer1, byte0, (Object) null, class0, 146);
      assertEquals(30, serializeWriter0.size());
      
      int int2 = dateCodec0.getFastMatchToken();
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      System.setCurrentTimeMillis((-20L));
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      jSONSerializer0.writeNull();
      dateCodec0.getFastMatchToken();
      Locale.getISOLanguages();
      JSONSerializer jSONSerializer1 = new JSONSerializer();
      List<PropertyPreFilter> list0 = jSONSerializer0.propertyPreFilters;
      jSONSerializer0.propertyPreFilters = null;
      boolean boolean0 = jSONSerializer1.out.writeDirect;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (byte)84, (-201263970), 2, (-76));
      System.setCurrentTimeMillis(0L);
      int int0 = Float.MIN_EXPONENT;
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, serializeWriter0, class0, (byte)84);
      assertEquals(17, serializeWriter0.size());
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig();
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateCodec dateCodec1 = DateCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(true);
      System.setCurrentTimeMillis(0L);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Byte byte0 = new Byte((byte) (-68));
      // Undeclared exception!
      try { 
        dateCodec1.write(jSONSerializer0, byte0, serializerFeature1, class0, 146);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      Class<Long> class0 = Long.TYPE;
      DateCodec dateCodec1 = DateCodec.instance;
      JSON.DEFFAULT_DATE_FORMAT = "2QS?Y2rjtO]/";
      System.setCurrentTimeMillis((-20L));
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      jSONSerializer0.writeNull();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      Locale locale0 = Locale.FRANCE;
      Locale.getISOCountries();
      JSON.defaultLocale = locale0;
      JSONSerializer jSONSerializer1 = new JSONSerializer();
      List<PropertyPreFilter> list0 = jSONSerializer1.propertyPreFilters;
      jSONSerializer0.propertyPreFilters = null;
      boolean boolean0 = jSONSerializer1.out.writeDirect;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      List<ValueFilter> list1 = jSONSerializer1.valueFilters;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(39);
      Float float0 = new Float((double) (-20L));
      Class<Float> class1 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      dateCodec0.write(jSONSerializer0, float0, serializeConfig0, class1, (-201263969));
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("RY /U", parserConfig0, 22);
      ChronoField chronoField0 = ChronoField.ERA;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) chronoField0, (Object) dateCodec0);
      defaultJSONParser0.close();
      parserConfig0.clearDeserializers();
      defaultJSONParser0.setResolveStatus(0);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) parseContext0, (Object) "/Date(;6*ZYoc2' $zDO)/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";6*ZYoc2' $zDO\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("RY /U", parserConfig0, 14);
      parserConfig0.createJavaBeanDeserializer(class0, class0);
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) chronoField0, (Object) dateCodec0);
      parseContext0.toString();
      System.setCurrentTimeMillis(2);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      int int0 = Opcodes.V1_5;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dateCodec0.getFastMatchToken();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) parseContext0, (Object) "/DaTe;6gZYoc2' $zDO)/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/DaTe;6gZYoc2' $zDO)/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      JSON.DEFAULT_TYPE_KEY = "Ia~t1S9q5!@ RN";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      serializerFeatureArray0[3] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      jSONSerializer0.writeNull();
      int int0 = SerializerFeature.WRITE_MAP_NULL_FEATURES;
      String[] stringArray0 = ParserConfig.DENYS;
      boolean boolean0 = jSONSerializer0.out.writeDirect;
      int int1 = (-103);
      jSONSerializer0.getDateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(964, (byte)84, (-201263977), 964, (-103));
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, serializeWriter0, class0, (byte)84);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Byte byte0 = new Byte((byte)84);
      Byte.toUnsignedLong((byte) (-68));
      serializeWriter0.writeEnum(serializerFeature0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("Ia~t1S9q5!@ RN", (-2205.2204412));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-2205.2204412
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }
}
