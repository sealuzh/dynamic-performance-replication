/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:24:08 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Container;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.Label;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseMotionListener;
import java.beans.EventSetDescriptor;
import java.beans.PropertyChangeListener;
import java.beans.beancontext.BeanContextServicesSupport;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.InputMap;
import javax.swing.JDesktopPane;
import javax.swing.JLayer;
import javax.swing.JScrollPane;
import javax.swing.plaf.LayerUI;
import javax.swing.plaf.basic.BasicSplitPaneUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.misc.InputMappedClassifier;
import weka.core.Attribute;
import weka.core.CheckGOE;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.ArffSaver;
import weka.core.converters.C45Loader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName((String) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertFalse(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setIgnoreRepaint(true);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      ClassAssigner classAssigner0 = new ClassAssigner();
      BeanVisual beanVisual0 = classAssigner0.getVisual();
      filter0.setVisual(beanVisual0);
      assertEquals("ClassAssigner", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeTrainingSetListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      filter0.connectionAllowed("Received ");
      // Undeclared exception!
      try { 
        filter0.performRequest("Received ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Received  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Classifier classifier0 = new Classifier();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classifier0, instances0, 125, 63, 125, 125);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.getWrappedAlgorithm();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TrainingSetMaker trainingSetMaker1 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker1);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender1.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      filter0.setCustomName("[Zm");
      filter0.removeDataSourceListener(trainingSetMaker0);
      assertEquals("[Zm", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      filter0.enumerateRequests();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("nAIqEEAC:d!O7(5Y", arrayList0, 1);
      InstanceEvent instanceEvent0 = new InstanceEvent(mockJapaneseDate0, instances0);
      filter0.notifyInstanceListeners(instanceEvent0);
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(classifier0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      DataSetEvent dataSetEvent0 = new DataSetEvent(technicalInformationHandlerJavadoc0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setFilter(attributeSelection0);
      // Undeclared exception!
      try { 
        filter0.performRequest("Received ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Received  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("q|)~toyvGw$Y8Gz", "q|)~toyvGw$Y8Gz");
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetMaker0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      filter0.connectionAllowed("instance");
      Appender appender0 = new Appender();
      filter0.removeTrainingSetListener(appender0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTestSetListener(scatterPlotMatrix0);
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getViewport();
      BasicSplitPaneUI basicSplitPaneUI0 = new BasicSplitPaneUI();
      basicSplitPaneUI0.getInsets(substringReplacer0);
      filter0.getInsets((Insets) null);
      filter0.connectionAllowed("instance");
      filter0.removeInstanceListener(substringReplacer0);
      filter0.addTestSetListener(scatterPlotMatrix0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(substringReplacer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.SubstringReplacer : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Filter filter0 = new Filter();
      filter0.connectionNotification("WU&", "WU&");
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.eventGeneratable("WU&");
      Random.setNextRandom(1983);
      filter0.connectionAllowed("WU&");
      // Undeclared exception!
      try { 
        filter0.performRequest("WU&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WU& not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("q|)~toyvGw$Y8Gz", "q|)~toyvGw$Y8Gz");
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetMaker0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      TestSetEvent testSetEvent0 = new TestSetEvent(trainingSetMaker0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.getX();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0, 1719, (-792), 133, 133);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.acceptTrainingSet(trainingSetEvent0);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      CheckGOE checkGOE0 = new CheckGOE();
      TestSetEvent testSetEvent0 = new TestSetEvent(checkGOE0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      CoverTree coverTree0 = new CoverTree();
      Sorter sorter0 = new Sorter();
      sorter0.getConnectedFormat();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Logger logger0 = substringReplacer0.m_log;
      filter0.setLog((Logger) null);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("B&|%", instances0, 3102, 3102, 3102, 400);
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.acceptTrainingSet(trainingSetEvent0);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-256.6854516175684);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 400;
      SparseInstance sparseInstance0 = new SparseInstance(1153.2, doubleArray0, intArray0, 0);
      try { 
        principalComponents0.convertInstance(sparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassType((-1913949205));
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      TestSetEvent testSetEvent0 = new TestSetEvent(crossValidationFoldMaker0, instances0, (-1913949205), (-1913949205), (-1), (-1913949205));
      filter0.acceptTestSet(testSetEvent0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.setCustomName("");
      assertEquals("", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!V");
      filter0.getToolkit();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      filter0.addTrainingSetListener(attributeSummarizer0);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.removeTestSetListener(attributeSummarizer0);
      filter0.setWrappedAlgorithm(classOrder0);
      filter0.connectionAllowed("Prodct of Pob`bilitie");
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.stop();
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      filter0.getToolkit();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.disconnectionNotification("B&|%", scatterPlotMatrix0);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.connectionNotification("B&|%", classValuePicker0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      filter0.removeDataSourceListener(classValuePicker0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      AllFilter allFilter0 = new AllFilter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      InputMap inputMap0 = logPanel0.getInputMap();
      inputMap0.keys();
      filter0.setLog(logPanel0);
      filter0.notifyInstanceListeners((InstanceEvent) null);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.getFocusTraversalPolicy();
      Object object0 = trainingSetMaker0.m_listenee;
      InstanceEvent instanceEvent0 = new InstanceEvent(inputMap0);
      filter0.acceptInstance(instanceEvent0);
      filter0.addTrainingSetListener(flowByExpression0);
      Saver saver0 = new Saver();
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      filter0.stop();
      String string0 = DefaultEditorKit.readOnlyAction;
      MetaBean metaBean0 = new MetaBean();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = filter0.eventGeneratable("configuration");
      assertFalse(boolean1 == boolean0);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      filter0.enumerateRequests();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.removeInstanceListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      crossValidationFoldMaker0.getStructure("configuration");
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      int int0 = 1297;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("configuration", (Instances) null, 2, 2, 1297, 2);
      trainTestSplitMaker0.setFocusTraversalPolicyProvider(true);
      Filter filter1 = new Filter();
      filter1.acceptTrainingSet(trainingSetEvent0);
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      filter1.requestFocusInWindow();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter1.addTrainingSetListener(classAssigner0);
      int int1 = 997;
      Label label0 = null;
      try {
        label0 = new Label();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      filter0.removeHierarchyListener((HierarchyListener) null);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("B&|%", "B&|%");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.transferFocusUpCycle();
      MultiFilter multiFilter0 = new MultiFilter();
      boolean boolean0 = filter0.eventGeneratable("B&|%");
      assertTrue(boolean0);
      
      Random.setNextRandom((-896));
      filter0.connectionNotification("B&|%", multiFilter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      ConfigurationListener configurationListener1 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      C45Loader c45Loader0 = new C45Loader();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      C45Loader c45Loader1 = new C45Loader();
      filter0.addInstanceListener(flowByExpression0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      predictionAppender0.getUIClassID();
      InstanceEvent instanceEvent0 = predictionAppender1.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      ConfigurationListener configurationListener2 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener2);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getStructure("B&|%");
      DataSetEvent dataSetEvent0 = new DataSetEvent(inputMappedClassifier0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.disconnectionNotification(".names", attributeSummarizer0);
      ConfigurationListener configurationListener3 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener3);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      LayerUI<Container> layerUI0 = new LayerUI<Container>();
      JLayer<Container> jLayer0 = new JLayer<Container>(filter0, layerUI0);
      filter0.addPropertyChangeListener("s@_", (PropertyChangeListener) jLayer0);
      filter0.connectionNotification("UB&|%", "UB&|%");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.transferFocusUpCycle();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.eventGeneratable("UB&|%");
      // Undeclared exception!
      try { 
        filter0.performRequest("UB&|%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // UB&|% not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.setFilter(multiFilter0);
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      InstanceEvent instanceEvent0 = new InstanceEvent(enumeration0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instanceEvent0.setStructure(instances0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      Clusterer clusterer0 = new Clusterer();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      ArffSaver arffSaver0 = new ArffSaver();
      arffSaver0.getInstances();
      InstanceEvent instanceEvent1 = new InstanceEvent(enumeration0, (Instances) null);
      filter0.acceptInstance(instanceEvent1);
      Saver saver0 = new Saver();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Classifier classifier0 = new Classifier();
      filter0.stop();
      filter0.removeDataSourceListener(saver0);
      filter0.isBusy();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(scatterPlotMatrix0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertFalse(filter0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponents();
      filter0.disconnectionNotification("configuration", filter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.eventGeneratable("configuration");
      Sorter sorter0 = new Sorter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.setFocusTraversalKeysEnabled(false);
      filter0.useDefaultVisual();
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      CheckGOE checkGOE0 = new CheckGOE();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      classifierErrorsPlotInstances0.getInstances();
      DataSetEvent dataSetEvent0 = new DataSetEvent(checkGOE0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.setFilter(multiFilter0);
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      InstanceEvent instanceEvent0 = new InstanceEvent(enumeration0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instanceEvent0.setStructure(instances0);
      filter0.notifyInstanceListeners(instanceEvent0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.repaint((long) 0, (-13), 0, 0, 0);
      trainingSetMaker0.repaint(0L, (-1), 10000, 11, 11);
      Object object0 = trainingSetMaker0.m_listenee;
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent1 = new InstanceEvent(textDirectoryLoader0, instances0);
      filter0.acceptInstance(instanceEvent1);
      Saver saver0 = new Saver();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        substringLabeler0.getInputMap((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setClassType((-2));
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, instances0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      attributeSummarizer0.requestFocus(false);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.addTrainingSetListener(attributeSummarizer0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      TestSetEvent testSetEvent0 = new TestSetEvent(testInstances0, instances0, (-3783), (-1), (-3783), (-1));
      filter0.acceptTestSet(testSetEvent0);
      Random.setNextRandom((-1983069283));
      filter0.eventGeneratable("<Zl>@BNDC[!0N");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret1, (MouseMotionListener) defaultCaret0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      C45Loader c45Loader0 = new C45Loader();
      Saver saver0 = new Saver();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.m_nominalBinary;
      // Undeclared exception!
      try { 
        filter0.performRequest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }
}
