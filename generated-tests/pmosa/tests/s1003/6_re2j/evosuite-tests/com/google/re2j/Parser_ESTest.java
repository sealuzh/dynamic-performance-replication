/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 22:34:21 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      int int0 = 1000;
      try { 
        Parser.parse("vG|O!&Pw|]X/-(#bo", 1000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `vG|O!&Pw|]X/-(#bo`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 169;
      String string0 = "*)";
      try { 
        Parser.parse("*)", 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse(")&qep0`*SZ1+tdJb", 4237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("c(", (-2255));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `c(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pIg", (-724));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Parser.parse("(", 1277);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("(?P<", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Regexp regexp0 = Parser.parse("0|", 1265);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("\\", 1213);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("L(?P<", 849);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Parser.parse("(P", 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = null;
      Parser parser0 = new Parser((String) null, 0);
      try { 
        Parser.parse("EEfvKA?@h)j;h", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$l", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 555;
      Regexp regexp0 = Parser.parse("invalid nested repetition operator", 555);
      String string0 = "\\E";
      int int1 = 0;
      Regexp regexp1 = Parser.parse("E", 0);
      Parser parser0 = new Parser(string0, int0);
      String string1 = "";
      int int2 = 13;
      Parser.parse(string1, int2);
      int int3 = 98;
      Parser.parse(string0, int3);
      String string2 = "";
      Regexp regexp2 = Parser.parse(string2, int1);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      int int4 = 2170;
      regexp2.max = int4;
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int3, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("[", (-2279));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Parser parser0 = new Parser("com.google.re2j.Parser$1", 0);
      Parser.parse("com.google.re2j.Parser$1", 0);
      Parser.parse("com.google.re2j.Parser$1", 0);
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser$1", 0);
      String string0 = "";
      regexp0.flags = 2069;
      Regexp regexp1 = Parser.parse("", 2282);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexp0.name = "";
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      regexp0.min = 0;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 12274, 88);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "?P";
      int int0 = 857;
      try { 
        Parser.parse("?P", 857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      Regexp regexp0 = Parser.parse("{zvMCg_,7q<9tBIo-", 0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.name = "{zvMCg_,7q<9tBIo-";
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexp1.toString();
      int int1 = (-1272);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, (-1272));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Parser.parse("{)7&Y:|+O0@9n;/]d", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{", 48);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{X", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "PDH($[-)V";
      int int0 = (-3167);
      try { 
        Parser.parse("PDH($[-)V", (-3167));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-)V`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "H(y![-";
      try { 
        Parser.parse("H(y![-", 784);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = "[:-)V";
      int int0 = 43189;
      try { 
        Parser.parse("[:-)V", 43189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-)`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 334;
      Parser.parse("pIg", 761);
      String string0 = "(";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFF}]", 4237);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 119081);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 1300;
      Parser.parse("x{", 1300);
      String string0 = "T:PPl2$~RB:";
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x0-x{10FFF}]", 4252);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Parser parser0 = new Parser("Xt4^4*Od~!WUc]", 0);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("E", 94);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("E", 907);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("Xt4^4*Od~!WUc]", 113);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp1);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 649, 2357);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 649
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^C", (-904));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = new Parser("9I6l69<F+", 2016);
      Parser.parse("9I6l69<F+", 2459);
      Parser.parse("9I6l69<F+", 2016);
      Parser.parse("9I6l69<F+", (-219));
      Parser.parse("dap", 2016);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2016, 12445);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2016
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 6773);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":v(m%mpAa7x)+", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Parser.parse("[", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8|`vJ5#rO8o+.U", 1902);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp1 = Parser.parse("8|`vJ5#rO8o+.U", 94);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp2 = Parser.parse("8|`vJ5#rO8o+.U", 848);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      Regexp regexp3 = new Regexp(regexpArray0[4]);
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      int int0 = (-2743);
      int int1 = (-4022);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = new Parser("Xt4^4*Od~!WUc]", 0);
      Regexp regexp0 = Parser.parse("Xt4^4*Od~!WUc]", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-35);
      Parser.parse("Pi", (-35));
      Regexp[] regexpArray0 = null;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 1902;
      Parser parser0 = new Parser("W2g5dR\"rC", 1902);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("W2g5dR\"rC", 1902);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.max = 1902;
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse(")V", 3);
      regexpArray0[3] = regexp4;
      try { 
        Parser.parse("_[#>.^S.", 37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[#>.^S.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser.parse("[:^S.", (-1705));
      Parser parser0 = new Parser("[:^S.", 92);
      try { 
        Parser.parse("[:^S.", 3948);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:^S.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser.parse("\"", (-35));
      int int0 = 3004;
      Parser.parse("\"", 3004);
      try { 
        Parser.parse("7W&T?S3[)[agL`j-", 2932);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[)[agL`j-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("Tho\"R.nYAd3DfH{", 105);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("fhxoh_", 67);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("fhxoh_", 67);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("[:L`j-", 598);
      regexp6.flags = 92;
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexp7.flags = 1632;
      regexpArray0[7] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 67, 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "\\H=d";
      Parser parser0 = new Parser("H=d", 328);
      Regexp regexp0 = Parser.parse("|", 328);
      Parser.parse("H=d", 328);
      int int0 = (-854);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 3664;
      Parser.parse("[:space:]", 3664);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-2490));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      Parser.parse("", 2932);
      String string0 = "";
      Parser.parse(string0, int0);
      String string1 = "(m";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(m`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", 56);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser.parse("d|a", 2016);
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 2016, 2016);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 1902);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp1 = Parser.parse("", 1902);
      regexpArray0[4] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      regexp1.op = regexp_Op0;
      Parser.subarray(regexpArray0, (-4900), (-4900));
      Regexp regexp2 = Parser.parse("\u0000|\"", (-4900));
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000|", 44);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|A", (-1575));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        Parser.parse("v(|!K0BF;MC7?l|]9D\"", 2461);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `v(|!K0BF;MC7?l|]9D\"`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("~|J}+", 64860);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d|ha", 2016);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d|", 732);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser.parse("stack underflow", (-1770));
      try { 
        Parser.parse("dJ>E[", 2768);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Parser.parse("(?2mPP", 857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("o}\r9go", 321);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("o}\r9go", 321);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse(":]", 321);
      regexpArray0[7] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 967, 121);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Parser.parse("DK:(TDJcH/f/R:=Q", 2932);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `DK:(TDJcH/f/R:=Q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("8|`vn5#r38Qo+.U", 94);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("8|`vn5#r38Qo+.U", 848);
      regexpArray0[3] = regexp1;
      Regexp regexp2 = null;
      try {
        regexp2 = new Regexp(regexpArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pC", 729);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("MaXtwxoAu3c?qr]~", 4);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 125;
      Regexp regexp0 = Parser.parse("\"ZM8%_3AK\u0006<k#8*~Uj", 125);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      int int1 = (-720);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = new Parser(";\u0005X0c>t>4_(69WI_", 924);
      try { 
        Parser.parse(";\u0005X0c>t>4_(69WI_", 924);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `;\u0005X0c>t>4_(69WI_`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C%dZ?654{0LB7@^mr", 0);
      Regexp regexp1 = Parser.parse("C%dZ?654{0LB7@^mr", 0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.max = 51;
      regexpArray0[5] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 1829);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("{7Iy", 6169);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp3);
      regexpArray0[6] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp7 = new Regexp(regexp_Op1);
      Regexp regexp8 = new Regexp(regexp7);
      regexpArray0[7] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 6169, (-2444));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp regexp0 = Parser.parse("v^&9|LsTuQPy", (-1688));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("=!V2x&\nRI=?qB", 81);
      regexpArray0[1] = regexp2;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 81, 81);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Parser.parse("yKbOs~T{#a8HD;.F0;v", (-780));
      Parser parser0 = new Parser("^SJy1", (-780));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Parser.parse("mK3vcpR[*)Rl", (-1843));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[*)Rl`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Parser.parse("(?", 873);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Parser parser0 = new Parser("Cp*|y?Z_\"C!w", 49);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("Cp*|y?Z_\"C!w", 4);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Parser.parse("nK", (-261));
      regexpArray0[3] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 118, 49);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = (-562);
      Parser.parse("(?2mP", (-562));
      Parser.parse("\u0005", 2857);
      String string0 = "[:^alpha:]";
      int int1 = 522;
      Parser.parse(string0, int1);
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",|dzy", 5);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser.parse("(2m", (-562));
      Parser.parse("P\u0000|\"", (-562));
      Parser parser0 = new Parser("tfP{VBzb", (-329));
      try { 
        Parser.parse("e]:(/oS9a|5", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `e]:(/oS9a|5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        Parser.parse("\\", (-24));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("v", 65);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("v", 6);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("v", 65);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("v", 7);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = Parser.parse("\b]UK*", 65);
      regexpArray0[8] = regexp8;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 16, 16);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser.parse("pP", 2264);
      Parser.parse("#hyJs!;", 2264);
      Parser.parse("White_Space", 2264);
      Parser parser0 = new Parser("regexp/syntax: internal error", (-77));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Parser.parse("[:m:]", 940);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2496, 940);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("!Khu\ft4m%xFN7`yVgJ", 248);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("!Khu\ft4m%xFN7`yVgJ", 248);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("!Khu\ft4m%xFN7`yVgJ", 248);
      Regexp regexp5 = new Regexp(regexp4);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp0);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp5);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("r\"j{n! SQTzN4", 8);
      regexp6.cap = (-2640);
      regexpArray0[7] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 13, 8140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Parser parser0 = new Parser("(?2m", 8560);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("p5", 842);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp4 = new Regexp(regexp_Op2);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op3 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp5 = new Regexp(regexp_Op3);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op2);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = Parser.parse("Nglw|nFrQluD4oR1+\"+", 3149);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = Parser.parse("p5", 3149);
      regexpArray0[8] = regexp8;
      int int0 = 8240;
      int int1 = 42;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Parser.parse("%H(gT|gi?k", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `%H(gT|gi?k`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?s:.)", (-1575));
      Parser parser0 = new Parser("(?s:.)", (-1575));
      Regexp regexp1 = Parser.parse("(?s:.)", 1271);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 761;
      Regexp regexp0 = Parser.parse("z", 761);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp1 = Parser.parse("z", 761);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      int int1 = 6150;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 62, 6150);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 1732;
      try { 
        Parser.parse("PDH($[-)V", 1732);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-)V`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005", 64039);
      Regexp regexp1 = Parser.parse("(?-m:$)", (-1580));
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 64039, 64039);
      Parser.parse("\u0005", 64039);
      Parser parser0 = new Parser("D '!lGP -4}l$fi", 246);
      Parser.parse("\u0005", (-1580));
      regexp0.toString();
      int int0 = 2509;
      int int1 = 127185;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2509
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 93;
      try { 
        Parser.parse("(?-#m:)", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFF}]", (-5067));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = new Parser("(#", (-2188));
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("[:x00-x{10FFFF}]", (-2188));
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp1);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("[:x00-x{10FFFF}]", (-2188));
      regexpArray0[6] = regexp7;
      try { 
        Parser.parse("(#", (-2188));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(#`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("kg.~\u00048r!tRs", 380);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse("\"W8%_3AK\u0006)i<|`8*~Uj", 148);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp regexp0 = Parser.parse("hi\u0002v?3?", (-1575));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D#3~I]j.zWg,", 101);
      Regexp regexp1 = Parser.parse("", 101);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-6), (-6));
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[l]yRvyi <}<SY", 784);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Parser.parse(":;?\u0001Or['MU%", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `['MU%`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "Yg.~\\7Br!tR";
      int int0 = (-1575);
      Regexp regexp0 = Parser.parse("Yg.~\u0007Br!tR", (-1575));
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int1 = 376;
      Parser.subarray(regexpArray0, int1, int1);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\7`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\tEZI,=nyvHV", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("d", 752);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("d", 752);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("&esXQH62", 752);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("l4zM}N14Suk+_D9\"@", 752);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 752, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      int int0 = 124;
      try { 
        Parser.parse("(?i:", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Parser.parse("0a?{aD", 1);
      Parser parser0 = new Parser("H1m>-Ut", 750);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      int int0 = 8160;
      Regexp regexp0 = Parser.parse("p{", 8160);
      regexpArray0[0] = regexp0;
      String string0 = "@L7Z*8qO=n%*";
      Regexp regexp1 = Parser.parse(string0, int0);
      regexpArray0[1] = regexp1;
      String string1 = "-7/3J!Xg%#?'a";
      int int1 = 83;
      Regexp regexp2 = Parser.parse(string1, int1);
      regexpArray0[2] = regexp2;
      int int2 = (-1175);
      int int3 = 16;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1175
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 8160;
      Regexp regexp0 = Parser.parse("p{", 8160);
      String string0 = "@L7Z*8qO=n%*";
      Parser.parse(string0, int0);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 57;
      Parser parser0 = new Parser("j[P]f5{", 57);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("j[P]f5{", 57);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("Pm", 57);
      regexpArray0[2] = regexp2;
      String string0 = "\\P 0x,m";
      int int1 = (-1310);
      Regexp regexp3 = Parser.parse(string0, int1);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp7;
      int int2 = 1001;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = new Parser("j[P]f5{", 57);
      Parser.parse("j[P]f5{", 57);
      Parser.parse("P 0x,m", (-1310));
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      Regexp regexp3 = new Regexp(regexp_Op1);
      assertFalse(regexp3.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("eEI2o$..KxYTz|.", 81);
      Regexp regexp1 = Parser.parse("p'=jJ,T+S,q", (-47));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser.parse("A9Fi`Mo;!}oBAZ\"`K", 100);
      Parser.parse("A9Fi`Mo;!}oBAZ\"`K", 100);
      Parser parser0 = new Parser("A9Fi`Mo;!}oBAZ\"`K", 100);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 116;
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("m_'|iJTR\u0003Z", 116);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[1] = regexp3;
      String string0 = "t)|B@";
      int int1 = 49;
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("B", 125);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("yEqT{i&'NEdpa+@C", 123);
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op2 = Regexp.Op.CHAR_CLASS;
      Regexp regexp5 = new Regexp(regexp_Op2);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp0);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("B", 125);
      Regexp regexp8 = new Regexp(regexp7);
      regexpArray0[6] = regexp8;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 123, 123);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser.parse("z!CsU{94", 65);
      Regexp[] regexpArray0 = new Regexp[0];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 65, 1874);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Parser.parse("%Ha(gT|gi?k", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `%Ha(gT|gi?k`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pM\"", 1533);
      assertNotNull(regexp0);
  }
}
