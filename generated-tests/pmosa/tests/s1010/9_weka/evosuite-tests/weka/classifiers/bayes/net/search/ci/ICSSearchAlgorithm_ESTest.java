/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:52:34 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Properties;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.classifiers.functions.SGDText;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      ICSSearchAlgorithm.main(stringArray0);
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcScoreWithMissingParent(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm0.maxCardinalityTipText();
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.name(65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[1];
      SGDText sGDText0 = new SGDText();
      SelectedTag selectedTag0 = sGDText0.getLossFunction();
      iCSSearchAlgorithm0.setScoreType(selectedTag0);
      iCSSearchAlgorithm0.setMaxCardinality(2042);
      stringArray0[0] = ", {";
      iCSSearchAlgorithm0.setOptions(stringArray0);
      iCSSearchAlgorithm0.globalInfo();
      iCSSearchAlgorithm0.setMaxCardinality((-619));
      String[] stringArray1 = iCSSearchAlgorithm0.getOptions();
      iCSSearchAlgorithm0.setOptions(stringArray1);
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.maxn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm0.getScoreType();
      iCSSearchAlgorithm_SeparationSet0.getRevision();
      int int0 = 0;
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(int0);
      iCSSearchAlgorithm0.listOptions();
      int int1 = 1488;
      boolean[][] booleanArray0 = new boolean[4][1];
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean0;
      booleanArray1[2] = boolean0;
      boolean boolean1 = true;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = boolean0;
      booleanArray1[6] = boolean0;
      booleanArray1[7] = boolean0;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[4];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = boolean0;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[6];
      booleanArray3[0] = boolean1;
      booleanArray3[1] = boolean1;
      booleanArray3[2] = boolean1;
      booleanArray3[3] = boolean0;
      booleanArray3[4] = boolean0;
      booleanArray3[5] = boolean1;
      booleanArray0[2] = booleanArray3;
      boolean[] booleanArray4 = new boolean[3];
      booleanArray4[0] = boolean1;
      booleanArray4[1] = boolean1;
      booleanArray4[2] = boolean0;
      booleanArray0[3] = booleanArray4;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.next(int0, int0, int1, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4|!6$Z");
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 71;
      intArray0[2] = 1413;
      intArray0[3] = 2400;
      intArray0[4] = 127;
      intArray0[5] = 2792;
      intArray0[6] = 212;
      intArray0[7] = (-1970);
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains((-3068));
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[4][6];
      boolean[] booleanArray1 = new boolean[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      booleanArray0[0] = booleanArray1;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcDependencyGraph(booleanArray0, (ICSSearchAlgorithm.SeparationSet[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Qe+qOCi!RxVW,_7)", arrayList0, 1616);
      iCSSearchAlgorithm0.setMaxCardinality((-1703));
      BayesNet bayesNet0 = new BayesNet();
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      String[] stringArray0 = new String[0];
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      properties0.clone();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", arrayList1, protectedProperties0);
      arrayList0.add(attribute0);
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("i", arrayList0, 661);
      Attribute attribute0 = new Attribute("ckQ{+", instances0);
      arrayList0.add(attribute0);
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("u_q8Lo", arrayList0, 25);
      iCSSearchAlgorithm0.m_instances = instances0;
      Attribute attribute0 = null;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[27][6];
      arrayList0.add((Attribute) null);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[4][5];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[8];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcDependencyGraph(booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[4][6];
      boolean[] booleanArray1 = new boolean[1];
      booleanArray0[0] = booleanArray1;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[1] = true;
      booleanArray0[0] = booleanArray2;
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.existsSepSet(2, 2, 2, booleanArray0);
      iCSSearchAlgorithm0.globalInfo();
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[0][9];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("q8e4t#", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[3][6];
      booleanArray0[1] = booleanArray0[0];
      boolean[] booleanArray1 = new boolean[10];
      booleanArray1[1] = true;
      booleanArray0[2] = booleanArray1;
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.existsSepSet(2, 2, 2, booleanArray0);
      iCSSearchAlgorithm0.scoreTypeTipText();
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[1][4];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[2];
      iCSSearchAlgorithm_SeparationSetArray1[0] = null;
      iCSSearchAlgorithm_SeparationSetArray1[1] = null;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcDependencyGraph(booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("q8e4t#", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[3][6];
      booleanArray0[1] = booleanArray0[0];
      boolean[] booleanArray1 = new boolean[10];
      booleanArray1[1] = true;
      booleanArray0[2] = booleanArray1;
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.existsSepSet(2, 2, 2, booleanArray0);
      iCSSearchAlgorithm0.scoreTypeTipText();
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[4][6];
      boolean[] booleanArray1 = new boolean[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      booleanArray0[0] = booleanArray1;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray1[0] = true;
      booleanArray0[2] = booleanArray2;
      iCSSearchAlgorithm0.existsSepSet(2, 2, 2, booleanArray0);
      iCSSearchAlgorithm0.scoreTypeTipText();
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      System.setCurrentTimeMillis(2689L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("q8e4t#", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[3][6];
      booleanArray0[1] = booleanArray0[0];
      boolean[] booleanArray1 = new boolean[10];
      booleanArray1[1] = true;
      booleanArray0[2] = booleanArray1;
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.existsSepSet(2, 2, 2, booleanArray0);
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.scoreTypeTipText();
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      arrayList0.add((Attribute) null);
      booleanArray0[1] = true;
      boolean[][] booleanArray1 = new boolean[3][7];
      booleanArray1[2] = booleanArray0;
      boolean[][] booleanArray2 = new boolean[5][6];
      booleanArray2[0] = booleanArray0;
      booleanArray2[3] = booleanArray0;
      booleanArray2[4] = booleanArray0;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray2, booleanArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[4][6];
      iCSSearchAlgorithm0.initAsNaiveBayesTipText();
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.scoreTypeTipText();
      boolean[][] booleanArray1 = new boolean[2][0];
      boolean[] booleanArray2 = new boolean[6];
      booleanArray2[0] = true;
      arrayList0.add((Attribute) null);
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[1] = true;
      booleanArray2[4] = true;
      booleanArray1[0] = booleanArray2;
      boolean[] booleanArray3 = new boolean[9];
      booleanArray2[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray3[5] = true;
      booleanArray3[6] = true;
      booleanArray3[7] = true;
      booleanArray3[4] = true;
      booleanArray1[1] = booleanArray3;
      boolean[][] booleanArray4 = new boolean[5][9];
      booleanArray4[0] = booleanArray2;
      booleanArray4[1] = booleanArray2;
      booleanArray4[2] = booleanArray2;
      booleanArray4[3] = booleanArray2;
      booleanArray4[4] = booleanArray3;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray4);
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.name((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[4][6];
      arrayList0.add((Attribute) null);
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
      
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.scoreTypeTipText();
      boolean[][] booleanArray1 = new boolean[2][0];
      boolean[] booleanArray2 = new boolean[8];
      booleanArray2[0] = true;
      arrayList0.add((Attribute) null);
      booleanArray2[1] = true;
      booleanArray1[0] = booleanArray2;
      boolean[][] booleanArray3 = new boolean[7][7];
      booleanArray3[0] = booleanArray2;
      booleanArray3[1] = booleanArray2;
      booleanArray3[2] = booleanArray2;
      booleanArray3[3] = booleanArray2;
      booleanArray3[4] = booleanArray2;
      booleanArray3[5] = booleanArray2;
      booleanArray3[6] = booleanArray2;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray3, booleanArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "I(";
      stringArray0[1] = ":\t";
      stringArray0[2] = "I(";
      stringArray0[3] = "";
      stringArray0[4] = "I(";
      ICSSearchAlgorithm.main(stringArray0);
      Instances instances0 = new Instances("I(", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[4][6];
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[1] = true;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray2 = new boolean[4][1];
      booleanArray2[0] = booleanArray1;
      booleanArray2[1] = booleanArray1;
      booleanArray2[2] = booleanArray1;
      booleanArray2[3] = booleanArray1;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray2, booleanArray0);
      boolean[][] booleanArray3 = new boolean[3][7];
      booleanArray3[0] = booleanArray1;
      booleanArray3[1] = booleanArray1;
      boolean[] booleanArray4 = new boolean[4];
      booleanArray4[0] = true;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = true;
      booleanArray3[2] = booleanArray4;
      int int0 = iCSSearchAlgorithm0.next(2, 2, 2, booleanArray3);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8Lo", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[9][6];
      arrayList0.add((Attribute) null);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[4][5];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[2];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm0.setMaxCardinality(7);
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      iCSSearchAlgorithm_SeparationSetArray0[1] = iCSSearchAlgorithm_SeparationSetArray1;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      Instances instances0 = new Instances("Gq8Lo", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[9][6];
      arrayList0.add((Attribute) null);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[4][5];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[2];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm_SeparationSetArray1[0] = iCSSearchAlgorithm_SeparationSet0;
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet1 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet1;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray2 = new ICSSearchAlgorithm.SeparationSet[2];
      iCSSearchAlgorithm_SeparationSetArray2[0] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray2[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray0[1] = iCSSearchAlgorithm_SeparationSetArray2;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray3 = new ICSSearchAlgorithm.SeparationSet[5];
      iCSSearchAlgorithm_SeparationSetArray3[0] = iCSSearchAlgorithm_SeparationSet1;
      iCSSearchAlgorithm_SeparationSetArray3[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray3[2] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray3[3] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray3[4] = iCSSearchAlgorithm_SeparationSet1;
      iCSSearchAlgorithm_SeparationSetArray0[2] = iCSSearchAlgorithm_SeparationSetArray3;
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray4 = new ICSSearchAlgorithm.SeparationSet[5];
      iCSSearchAlgorithm_SeparationSetArray4[0] = iCSSearchAlgorithm_SeparationSet1;
      iCSSearchAlgorithm_SeparationSetArray4[1] = iCSSearchAlgorithm_SeparationSet1;
      iCSSearchAlgorithm_SeparationSetArray4[2] = iCSSearchAlgorithm_SeparationSet1;
      iCSSearchAlgorithm_SeparationSetArray4[3] = iCSSearchAlgorithm_SeparationSet1;
      iCSSearchAlgorithm_SeparationSetArray4[4] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray0[3] = iCSSearchAlgorithm_SeparationSetArray4;
      iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray5 = new ICSSearchAlgorithm.SeparationSet[0][9];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8Lo", arrayList0, 44);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[9][6];
      arrayList0.add((Attribute) null);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[4][5];
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[4];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      arrayList0.add((Attribute) null);
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      String string0 = iCSSearchAlgorithm0.globalInfo();
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", string0);
      
      arrayList0.add((Attribute) null);
      iCSSearchAlgorithm0.scoreTypeTipText();
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      arrayList0.add((Attribute) null);
      booleanArray0[1] = true;
      boolean[][] booleanArray1 = new boolean[7][7];
      booleanArray1[0] = booleanArray0;
      booleanArray1[2] = booleanArray0;
      boolean[][] booleanArray2 = new boolean[5][6];
      booleanArray2[0] = booleanArray0;
      booleanArray2[1] = booleanArray0;
      booleanArray2[3] = booleanArray0;
      booleanArray2[4] = booleanArray0;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray2, booleanArray1);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = ":\t";
      stringArray0[2] = "I(";
      stringArray0[4] = "I(";
      ICSSearchAlgorithm.main(stringArray0);
      Instances instances0 = new Instances("I(", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      boolean[][] booleanArray0 = new boolean[4][6];
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[1] = true;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray2 = new boolean[4][1];
      booleanArray2[0] = booleanArray1;
      booleanArray2[1] = booleanArray1;
      arrayList0.add((Attribute) null);
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[0][6];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray2, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      arrayList0.add((Attribute) null);
      booleanArray0[1] = true;
      boolean[][] booleanArray1 = new boolean[7][7];
      booleanArray1[0] = booleanArray0;
      booleanArray1[2] = booleanArray0;
      boolean[][] booleanArray2 = new boolean[5][6];
      booleanArray2[0] = booleanArray0;
      booleanArray2[3] = booleanArray0;
      booleanArray2[4] = booleanArray0;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray2, booleanArray1);
      iCSSearchAlgorithm0.existsSepSet(2, 1, 1, booleanArray1);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "I(";
      ICSSearchAlgorithm.main(stringArray0);
      Instances instances0 = new Instances("I(", arrayList0, 50);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray0 = new boolean[4][6];
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      arrayList0.add((Attribute) null);
      boolean[][] booleanArray2 = new boolean[7][1];
      booleanArray2[0] = booleanArray1;
      booleanArray2[1] = booleanArray1;
      booleanArray2[2] = booleanArray1;
      booleanArray2[3] = booleanArray1;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray2, booleanArray0);
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray2);
      iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Gq8o", arrayList0, 2);
      iCSSearchAlgorithm0.m_instances = instances0;
      arrayList0.add((Attribute) null);
      arrayList0.add((Attribute) null);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      arrayList0.add((Attribute) null);
      booleanArray0[1] = true;
      boolean[][] booleanArray1 = new boolean[4][7];
      booleanArray1[2] = booleanArray0;
      boolean[][] booleanArray2 = new boolean[5][6];
      booleanArray1[1] = booleanArray0;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray2);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }
}
