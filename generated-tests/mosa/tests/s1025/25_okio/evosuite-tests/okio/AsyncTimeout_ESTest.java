/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 16:34:21 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.GzipSink;
import okio.HashingSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      // Undeclared exception!
      try { 
        HashingSource.sha1((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(4294967295L);
      Sink sink0 = asyncTimeout0.sink((Sink) null);
      asyncTimeout0.newTimeoutException(mockIOException0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout1.timeout(4294967295L, timeUnit0);
      asyncTimeout0.exit(false);
      asyncTimeout0.exit(iOException0);
      asyncTimeout0.enter();
      asyncTimeout1.sink(sink0);
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.deadlineNanoTime(4294967295L);
      mockIOException1.getCause();
      asyncTimeout0.exit((IOException) mockIOException1);
      Sink sink0 = asyncTimeout0.sink((Sink) null);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.timeout(4294967295L, timeUnit0);
      asyncTimeout1.enter();
      asyncTimeout0.exit(false);
      asyncTimeout0.exit((IOException) mockIOException1);
      asyncTimeout0.source((Source) null);
      asyncTimeout0.enter();
      asyncTimeout0.sink(sink0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.exit(iOException0);
      asyncTimeout0.exit((IOException) mockIOException1);
      asyncTimeout0.exit(false);
      asyncTimeout0.exit((IOException) interruptedIOException0);
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.deadlineNanoTime(4294967295L);
      mockIOException1.getCause();
      asyncTimeout0.exit((IOException) mockIOException1);
      Sink sink0 = asyncTimeout0.sink((Sink) null);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.timeout(4294967295L, timeUnit0);
      asyncTimeout0.exit(false);
      asyncTimeout0.source((Source) null);
      asyncTimeout0.enter();
      asyncTimeout0.sink(sink0);
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      asyncTimeout0.exit((IOException) mockIOException1);
      asyncTimeout0.exit(false);
      asyncTimeout0.exit(iOException1);
      asyncTimeout0.timedOut();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(4294967295L);
      asyncTimeout1.source((Source) null);
      asyncTimeout1.enter();
      GzipSink gzipSink0 = null;
      try {
        gzipSink0 = new GzipSink((Sink) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.GzipSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.exit(false);
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.deadlineNanoTime(4294967295L);
      mockIOException1.getCause();
      asyncTimeout0.exit((IOException) mockIOException1);
      asyncTimeout0.sink((Sink) null);
      asyncTimeout0.newTimeoutException(mockIOException0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      Timeout timeout0 = asyncTimeout0.timeout(4294967295L, timeUnit0);
      timeout0.clearDeadline();
      asyncTimeout0.exit(false);
      asyncTimeout0.source((Source) null);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.enter();
      System.setCurrentTimeMillis((-656L));
  }
}
