/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:58:15 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(hashMap0, (Object) map0, integer0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Integer integer1 = doubleKeyMap0.remove(hashMap0, (Object) hashMap1);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, String>, Integer>();
      Integer integer0 = new Integer(0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap0.put(integer0, hashMap0, integer0);
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap0.remove(integer0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Map<Integer, String>, Map<Integer, HashMap<Object, Integer>>> hashMap1 = new HashMap<Map<Integer, String>, Map<Integer, HashMap<Object, Integer>>>();
      HashMap<Integer, HashMap<Object, Integer>> hashMap2 = new HashMap<Integer, HashMap<Object, Integer>>();
      hashMap1.put(hashMap0, hashMap2);
      DoubleKeyMap<Map<Integer, String>, Integer, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, HashMap<Object, Integer>>(hashMap1);
      Map<Integer, HashMap<Object, Integer>> map0 = doubleKeyMap0.get((Map<Integer, String>) hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.remove((Object) "", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>();
      Integer integer0 = doubleKeyMap0.remove((HashMap<String, Object>) null, (Object) class0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Integer>();
      HashMap<Object, Map<String, Map<Integer, String>>> hashMap0 = new HashMap<Object, Map<String, Map<Integer, String>>>();
      DoubleKeyMap<Object, String, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<Integer, String>>(hashMap0);
      Map<Integer, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Map<String, String>, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<Map<String, String>, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>>(hashMap0, class0);
      HashMap<Object, Map<HashMap<String, String>, Object>> hashMap1 = new HashMap<Object, Map<HashMap<String, String>, Object>>();
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, Object>(hashMap1);
      Map<HashMap<String, String>, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>((Map<Object, Map<Integer, String>>) null);
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.put("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Integer, String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Map<Integer, String> map0 = doubleKeyMap0.put((String) null, (Object) doubleKeyMap0, (Map<Integer, String>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Map<Integer, String>, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, String>, Map<Integer, String>>();
      Object object0 = new Object();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Map<Integer, String> map0 = doubleKeyMap0.put(object0, (Map<Integer, String>) hashMap0, (Map<Integer, String>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = doubleKeyMap0.get((Integer) null, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Map<Integer, Map<Object, Map<Integer, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Map<Integer, String>>(map0);
      Integer integer0 = new Integer((-1));
      Map<Integer, String> map1 = doubleKeyMap1.get(integer0, (Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>>();
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Map<String, String>, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<Map<String, String>, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>>(hashMap0, class0);
      Map<Map<String, String>, HashMap<Object, Object>> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>(class0);
      HashMap<Object, Map<Map<String, String>, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<Map<String, String>, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, HashMap<Object, Object>>(hashMap0, class0);
      Map<Map<String, String>, HashMap<Object, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<Map<Integer, String>, Object>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Map<Integer, String>, Object>>();
      DoubleKeyMap<HashMap<Integer, Object>, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Map<Integer, String>, Object>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap1.put(integer0, hashMap0);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(hashMap1, (Map<Integer, String>) hashMap2, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, Map<Object, Map<Integer, String>>> hashMap1 = new HashMap<String, Map<Object, Map<Integer, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Integer, String>>(hashMap1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((String) null, (Object) class0, (Map<Integer, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, String>, HashMap<Integer, Integer>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, HashMap<Integer, Integer>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(hashMap0, (Object) class0, integer0);
      Integer integer1 = doubleKeyMap0.remove(hashMap0, (Object) "");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Integer>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(hashMap0, (Object) class0, integer0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer1 = doubleKeyMap0.put(hashMap0, (Object) hashMap1, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Integer, String>, Object>, HashMap<Map<Integer, String>, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Integer, String>, Object>, HashMap<Map<Integer, String>, String>, Object>();
      HashMap<Map<Integer, String>, Object> hashMap0 = new HashMap<Map<Integer, String>, Object>();
      HashMap<Map<Integer, String>, String> hashMap1 = new HashMap<Map<Integer, String>, String>();
      doubleKeyMap0.put(hashMap0, hashMap1, (Object) "jYbYUg_Wr8<?gzQlQ1");
      Object object0 = doubleKeyMap0.get(hashMap0, hashMap1);
      assertEquals("jYbYUg_Wr8<?gzQlQ1", object0);
  }
}
