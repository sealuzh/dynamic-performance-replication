/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 08:57:27 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.MindMap;
import freemind.modes.ModeController;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.Icon;
import javax.swing.InputVerifier;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFCIDSystemInfo;
import org.apache.fop.pdf.PDFCMap;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import plugins.map.Registration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removeMouseListener((MouseListener) null);
      Insets insets0 = jDayChooser0.getInsets();
      insets0.top = 1155;
      jDayChooser0.getInsets(insets0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      JButton jButton0 = new JButton("MMType1", icon0);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.init();
      jDayChooser0.setMaxDayCharacters(1155);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.getInheritsPopupMenu();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      boolean boolean0 = false;
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, 8831, 0L, 28, 34, '}');
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "83Bao:@{<.~");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getName();
      jDayChooser0.setDecorationBordersVisible(false);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 35, (-549L), (-1487), 35, 'o', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getExtendedKeyCodeForChar((-1487));
      jDayChooser0.keyPressed(menuKeyEvent0);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "12");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initialized = false;
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getMinSelectableDate();
      JYearChooser jYearChooser0 = new JYearChooser();
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale0);
      ComponentOrientation.getOrientation(locale0);
      ComponentOrientation.getOrientation(locale0);
      jYearChooser0.applyComponentOrientation(componentOrientation0);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      long long0 = 0L;
      jDayChooser0.firePropertyChange(":J\"{,mQ", 0L, 0L);
      int int0 = 42;
      jDayChooser0.setYear(42);
      int int1 = SwingConstants.TOP;
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.drawWeeks();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      JSpinner jSpinner0 = new JSpinner();
      containerOrderFocusTraversalPolicy0.getFirstComponent(jSpinner0);
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.setMonth(0);
      jDayChooser0.setYear((-1119));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement((-1509));
      LabelView labelView0 = new LabelView(element0);
      labelView0.getBackground();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setMaxDayCharacters((-1509));
      jDayChooser0.isDayBordersVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = Color.lightGray;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setDay((-811));
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getWeekdayForeground();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setDay(964);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setMonth(964);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(18);
      jDayChooser0.setDay(100);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setMaxSelectableDate(date1);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 506, 506, 2073, 2073, '3');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3);
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.focusLost(focusEvent0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMinSelectableDate((Date) null);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMonth(3);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      System.setCurrentTimeMillis(3);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isPaintingForPrint();
      jDayChooser1.getInputVerifier();
      jDayChooser1.setAlignmentX(0.0F);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      jDayChooser1.decorationBackgroundVisible = false;
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser1.getDayPanel();
      jDayChooser1.initDecorations();
      jDayChooser1.getWeekdayForeground();
      jDayChooser1.setDayBordersVisible(false);
      JPanel jPanel0 = jDayChooser1.getDayPanel();
      jDayChooser1.setMonth(90);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 12, false, jPanel0);
      jDayChooser0.focusGained(focusEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(12);
      PDFCIDSystemInfo pDFCIDSystemInfo0 = new PDFCIDSystemInfo("5J3`2", "ISO-8859-1", 12);
      PDFCMap pDFCMap0 = new PDFCMap("Metal", pDFCIDSystemInfo0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFCMap0, 90, (byte)1);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, pDFDocument0, pDFPage0, "Snasf71d}[pD+'b_", "", (byte)0);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1983), ". j6~n 6m?_@m");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getDayPanel();
      jDayChooser0.setYear((-1983));
      jDayChooser0.setWeekOfYearVisible(true);
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      plainDocument0.getEndPosition();
      LabelView labelView0 = new LabelView(element0);
      plainDocument0.addUndoableEditListener((UndoableEditListener) null);
      // Undeclared exception!
      try { 
        labelView0.getFont();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // LabelView needs StyledDocument
         //
         verifyException("javax.swing.text.LabelView", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-595), false);
      jDayChooser0.focusLost(focusEvent0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getLocale();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, (-595), "day", 25);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FontInfo fontInfo0 = new FontInfo();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PDFResources pDFResources0 = new PDFResources(12);
      pDFResources0.getObjectNumber();
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, (PDFDocument) null, pDFResourceContext0, "day", "day", 12);
      jDayChooser0.print(pDFGraphics2D0);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      jDayChooser0.getWidth();
      jDayChooser0.setWeekOfYearVisible(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getLocale();
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oVjmB(y7#\"");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMethodListeners();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 957, 5000L, 37, 37, 'u', 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      int int0 = 14;
      jDayChooser0.setMaxDayCharacters(14);
      jDayChooser0.setDayBordersVisible(true);
      int int1 = 563;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 563);
      ModeController modeController0 = null;
      Registration registration0 = null;
      try {
        registration0 = new Registration((ModeController) null, (MindMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.Registration", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3192));
      jDayChooser0.focusLost(focusEvent0);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3192), (-3192), (-930), (-2417), '!', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getKeyText(126);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      long long0 = 0L;
      jDayChooser0.firePropertyChange(":J\"{,mQ", 0L, 0L);
      int int0 = 42;
      jDayChooser0.setYear(42);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.drawWeeks();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[2];
      float float0 = (-1011.048F);
      // Undeclared exception!
      try { 
        Cursor.getPredefinedCursor((-3187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal cursor type
         //
         verifyException("java.awt.Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(13, 13, 10129, (-4927), 444, (-4927));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=13,MONTH=13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=10129,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-4927,HOUR_OF_DAY=-4927,MINUTE=444,SECOND=-4927,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.invalidate();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.initDecorations();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.initDecorations();
      int int0 = 11;
      char char0 = '9';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addNotify();
      jDayChooser0.getKeyListeners();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(32, 32, (-3529), 32, 32, 157);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=32,MONTH=32,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3529,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=32,HOUR_OF_DAY=32,MINUTE=32,SECOND=157,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.drawWeeks();
      Locale locale0 = Locale.US;
      jDayChooser0.setLocale(locale0);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3529), 100L, 27, 47, 'w', menuElementArray0, (MenuSelectionManager) null);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      int int0 = (-1915);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-1915), 2891);
      jYearChooser0.getConditionForKeyStroke(keyStroke0);
      jYearChooser0.list();
      jDayChooser0.setYearChooser(jYearChooser0);
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser0.setSundayForeground(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        jDayChooser_DecoratorButton0.getInputMap(2891);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      GlyphView glyphView0 = new GlyphView(element0);
      Color color0 = glyphView0.getForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDayPanel();
      int int0 = 169;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 169, 169, 169, 169, ',');
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton(169);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist 169
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Fd@D";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.init();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.getLocale();
      int int0 = 0;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusLost(focusEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getGraphics();
      jDayChooser0.printAll((Graphics) null);
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = 63710;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(63710, stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jDayChooser0.removeAll();
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jDayChooser1.getHeight();
      int int1 = 25;
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "<^[H^", 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = new JButton("3");
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4190, false, jButton0);
      jButton0.getDisplayedMnemonicIndex();
      jButton0.setHideActionText(false);
      jButton0.getMouseWheelListeners();
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addNotify();
      jDayChooser0.createToolTip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-4247));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.hasFocus();
      jDayChooser0.isWeekOfYearVisible();
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      jDayChooser0.removeComponentListener((ComponentListener) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 100;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 100;
      floatArray0[3] = (float) 380;
      Color.RGBtoHSB(100, 380, 100, floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMonth((-177));
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMap(1);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.firePropertyChange("`jS#l", 2811.1147F, 40.0F);
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBackgroundVisible();
      Color color0 = jDayChooser0.getSundayForeground();
      Locale locale0 = Locale.ENGLISH;
      locale0.getDisplayName();
      locale0.getDisplayScript();
      locale0.getExtension('h');
      locale0.getDisplayScript();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.setFocus();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMinSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 140, (-118), (-118), 'h');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setFocus();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.drawDays();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals((-6029312), color0.getRGB());
      
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.isDayBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.repaint(416L);
      jMonthChooser0.getBorder();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      SymbolTable symbolTable0 = new SymbolTable(65480, 65480);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(xMLGrammarPoolImpl0);
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration(symbolTable0, cachingParserPool_SynchronizedGrammarPool0);
      Locale locale0 = xML11NonValidatingConfiguration0.getLocale();
      ComponentOrientation.getOrientation(locale0);
      jMonthChooser0.applyComponentOrientation(componentOrientation0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setFocus();
      System.setCurrentTimeMillis(416L);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2024, true);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMinSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
