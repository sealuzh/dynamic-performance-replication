/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:22:27 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1348));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "jO@d-R8{", "Deprecated", (String) null, "Deprecated");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 11, "value ", "value ", "value ", "value ");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      FieldWriter fieldWriter2 = null;
      try {
        fieldWriter2 = new FieldWriter(classWriter0, 131072, "value ", "value ", "value ", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1348));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1348), "", "", "", "");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation(" _}Z8`#", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1348));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1348), "", "", "\"v|.)#!", (Object) null);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1348));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1348), "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1348));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", ",`uPU(.'M(?~", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      int int0 = Type.LONG;
      int int1 = fieldWriter0.getSize();
      assertEquals(24, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      classWriter0.visitInnerClass("", "", "", 11);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 11, "value ", "value ", "value ", "value ");
      Attribute attribute0 = new Attribute(" ]d|vhBQvo");
      fieldWriter0.visitAttribute(attribute0);
      FieldWriter fieldWriter1 = fieldWriter0.next;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassWriter classWriter0 = new ClassWriter((-1324));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1725, "", "", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1348));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1348), "", "", "", "");
      classWriter0.lastField = fieldWriter0;
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1336));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1336), "", "", "", "");
      fieldWriter0.visitAnnotation("U,d/U;|rZjzX6rfSqBG", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1324));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1324), "", "", "", "");
      classWriter0.visitSource(".class", "S)ignatube");
      ClassWriter classWriter1 = new ClassWriter(2);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      ByteVector byteVector0 = classWriter1.pool;
      fieldWriter1.next = fieldWriter0;
      fieldWriter1.visitAnnotation("S)ignatube", true);
      ByteVector byteVector1 = byteVector0.put12((-1908), 1);
      fieldWriter1.put(byteVector1);
      fieldWriter1.getSize();
      fieldWriter1.visitEnd();
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1348));
      classWriter0.version = 248;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1348), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }
}
